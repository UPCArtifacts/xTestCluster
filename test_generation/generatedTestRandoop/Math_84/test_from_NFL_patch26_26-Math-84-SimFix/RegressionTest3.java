import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) (byte) 1);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        int int5 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(100.0d, (-1.0d));
        int int3 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, (double) 10);
        int int3 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxEvaluations(10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional2.getConvergenceChecker();
        multiDirectional2.setMaxIterations((int) '#');
        multiDirectional2.setMaxEvaluations((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        double[] doubleArray17 = new double[] {};
        multiDirectional15.setStartConfiguration(doubleArray17);
        multiDirectional4.setStartConfiguration(doubleArray17);
        multiDirectional0.setStartConfiguration(doubleArray17);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        int int23 = multiDirectional21.getIterations();
        int int24 = multiDirectional21.getMaxEvaluations();
        int int25 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxIterations((-1));
        int int28 = multiDirectional21.getIterations();
        int int29 = multiDirectional21.getMaxIterations();
        multiDirectional21.setMaxEvaluations(100);
        multiDirectional21.setMaxIterations((int) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional21.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional0.setMaxIterations(32);
        int int38 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getIterations();
        int int11 = multiDirectional3.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = multiDirectional3.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker12);
        java.lang.Class<?> wildcardClass14 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker12);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxIterations();
        double[] doubleArray13 = new double[] {};
        multiDirectional11.setStartConfiguration(doubleArray13);
        multiDirectional0.setStartConfiguration(doubleArray13);
        multiDirectional0.setMaxEvaluations((int) 'a');
        int int18 = multiDirectional0.getIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction19 = null;
        org.apache.commons.math.optimization.GoalType goalType20 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker28);
        double[] doubleArray32 = new double[] { 1.0d, 2147483647 };
        multiDirectional24.setStartConfiguration(doubleArray32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional24.getConvergenceChecker();
        multiDirectional24.setMaxEvaluations((int) (byte) 100);
        multiDirectional24.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = null;
        multiDirectional39.setConvergenceChecker(realConvergenceChecker43);
        double[] doubleArray47 = new double[] { 1.0d, 2147483647 };
        multiDirectional39.setStartConfiguration(doubleArray47);
        int int49 = multiDirectional39.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxIterations();
        double[] doubleArray52 = new double[] {};
        multiDirectional50.setStartConfiguration(doubleArray52);
        multiDirectional39.setStartConfiguration(doubleArray52);
        multiDirectional24.setStartConfiguration(doubleArray52);
        multiDirectional23.setStartConfiguration(doubleArray52);
        int int57 = multiDirectional23.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int59 = multiDirectional58.getMaxIterations();
        double[] doubleArray60 = new double[] {};
        multiDirectional58.setStartConfiguration(doubleArray60);
        int int62 = multiDirectional58.getMaxEvaluations();
        int int63 = multiDirectional58.getIterations();
        double[] doubleArray69 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional58.setStartConfiguration(doubleArray69);
        multiDirectional23.setStartConfiguration(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair72 = multiDirectional0.optimize(multivariateRealFunction19, goalType20, doubleArray69);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        multiDirectional2.setMaxIterations((int) (byte) 1);
        int int5 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = null;
        multiDirectional7.setConvergenceChecker(realConvergenceChecker11);
        double[] doubleArray15 = new double[] { 1.0d, 2147483647 };
        multiDirectional7.setStartConfiguration(doubleArray15);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional7.getConvergenceChecker();
        multiDirectional7.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional22.getConvergenceChecker();
        multiDirectional7.setConvergenceChecker(realConvergenceChecker23);
        multiDirectional7.setMaxIterations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional7.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker17);
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxIterations((-1));
        int int16 = multiDirectional9.getMaxIterations();
        multiDirectional9.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional2.getConvergenceChecker();
        int int28 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        multiDirectional29.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxEvaluations();
        int int40 = multiDirectional38.getIterations();
        int int41 = multiDirectional38.getMaxEvaluations();
        int int42 = multiDirectional38.getMaxEvaluations();
        multiDirectional38.setMaxIterations((-1));
        int int45 = multiDirectional38.getMaxIterations();
        multiDirectional38.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker51 = multiDirectional50.getConvergenceChecker();
        multiDirectional38.setConvergenceChecker(realConvergenceChecker51);
        multiDirectional36.setConvergenceChecker(realConvergenceChecker51);
        multiDirectional35.setConvergenceChecker(realConvergenceChecker51);
        multiDirectional29.setConvergenceChecker(realConvergenceChecker51);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker51);
        int int57 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker51);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        multiDirectional2.setMaxIterations((int) (byte) 1);
        multiDirectional2.setMaxIterations((int) (byte) 0);
        int int7 = multiDirectional2.getIterations();
        int int8 = multiDirectional2.getEvaluations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction9 = null;
        org.apache.commons.math.optimization.GoalType goalType10 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        int int13 = multiDirectional11.getIterations();
        int int14 = multiDirectional11.getMaxEvaluations();
        int int15 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxIterations((-1));
        int int18 = multiDirectional11.getMaxIterations();
        multiDirectional11.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional23.getConvergenceChecker();
        multiDirectional11.setConvergenceChecker(realConvergenceChecker24);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional26.setConvergenceChecker(realConvergenceChecker28);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = null;
        multiDirectional30.setConvergenceChecker(realConvergenceChecker34);
        double[] doubleArray38 = new double[] { 1.0d, 2147483647 };
        multiDirectional30.setStartConfiguration(doubleArray38);
        int int40 = multiDirectional30.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxIterations();
        double[] doubleArray43 = new double[] {};
        multiDirectional41.setStartConfiguration(doubleArray43);
        multiDirectional30.setStartConfiguration(doubleArray43);
        multiDirectional26.setStartConfiguration(doubleArray43);
        multiDirectional11.setStartConfiguration(doubleArray43);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker51 = multiDirectional50.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxEvaluations();
        int int54 = multiDirectional52.getIterations();
        int int55 = multiDirectional52.getMaxEvaluations();
        int int56 = multiDirectional52.getMaxEvaluations();
        multiDirectional52.setMaxIterations((-1));
        int int59 = multiDirectional52.getIterations();
        multiDirectional52.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = null;
        multiDirectional52.setConvergenceChecker(realConvergenceChecker62);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int65 = multiDirectional64.getMaxEvaluations();
        multiDirectional64.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker68 = null;
        multiDirectional64.setConvergenceChecker(realConvergenceChecker68);
        double[] doubleArray72 = new double[] { 1.0d, 2147483647 };
        multiDirectional64.setStartConfiguration(doubleArray72);
        multiDirectional52.setStartConfiguration(doubleArray72);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxEvaluations();
        int int77 = multiDirectional75.getIterations();
        int int78 = multiDirectional75.getMaxEvaluations();
        int int79 = multiDirectional75.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional80 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int81 = multiDirectional80.getMaxIterations();
        double[] doubleArray82 = new double[] {};
        multiDirectional80.setStartConfiguration(doubleArray82);
        multiDirectional75.setStartConfiguration(doubleArray82);
        multiDirectional52.setStartConfiguration(doubleArray82);
        multiDirectional50.setStartConfiguration(doubleArray82);
        multiDirectional11.setStartConfiguration(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair88 = multiDirectional2.optimize(multivariateRealFunction9, goalType10, doubleArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2147483647 + "'", int79 == 2147483647);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        double[] doubleArray17 = new double[] {};
        multiDirectional15.setStartConfiguration(doubleArray17);
        multiDirectional4.setStartConfiguration(doubleArray17);
        multiDirectional0.setStartConfiguration(doubleArray17);
        int int21 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional22.getConvergenceChecker();
        multiDirectional22.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional37.getConvergenceChecker();
        multiDirectional22.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker38);
        int int41 = multiDirectional0.getEvaluations();
        int int42 = multiDirectional0.getMaxIterations();
        int int43 = multiDirectional0.getIterations();
        int int44 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker32);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxIterations();
        double[] doubleArray13 = new double[] {};
        multiDirectional11.setStartConfiguration(doubleArray13);
        multiDirectional0.setStartConfiguration(doubleArray13);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNull(realConvergenceChecker16);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int6 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations(1);
        int int9 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction10 = null;
        org.apache.commons.math.optimization.GoalType goalType11 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker14);
        multiDirectional12.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional20.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker21);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker23);
        int int25 = multiDirectional12.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int29 = multiDirectional28.getEvaluations();
        int int30 = multiDirectional28.getMaxEvaluations();
        multiDirectional28.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional33.setConvergenceChecker(realConvergenceChecker37);
        double[] doubleArray41 = new double[] { 1.0d, 2147483647 };
        multiDirectional33.setStartConfiguration(doubleArray41);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = multiDirectional33.getConvergenceChecker();
        multiDirectional33.setMaxEvaluations((int) (byte) 100);
        multiDirectional33.setMaxIterations(35);
        double[] doubleArray49 = new double[] { 100.0d };
        multiDirectional33.setStartConfiguration(doubleArray49);
        multiDirectional28.setStartConfiguration(doubleArray49);
        multiDirectional12.setStartConfiguration(doubleArray49);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair53 = multiDirectional0.optimize(multivariateRealFunction10, goalType11, doubleArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker43);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]");
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations((int) ' ');
        int int10 = multiDirectional0.getEvaluations();
        int int11 = multiDirectional0.getIterations();
        java.lang.Class<?> wildcardClass12 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker18);
        int int20 = multiDirectional16.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        int int23 = multiDirectional21.getIterations();
        int int24 = multiDirectional21.getMaxEvaluations();
        int int25 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxIterations((-1));
        int int28 = multiDirectional21.getMaxIterations();
        multiDirectional21.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional33.getConvergenceChecker();
        multiDirectional21.setConvergenceChecker(realConvergenceChecker34);
        int int36 = multiDirectional21.getMaxIterations();
        int int37 = multiDirectional21.getEvaluations();
        int int38 = multiDirectional21.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional21.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int43 = multiDirectional42.getEvaluations();
        int int44 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker47 = multiDirectional42.getConvergenceChecker();
        multiDirectional21.setConvergenceChecker(realConvergenceChecker47);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int52 = multiDirectional51.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxEvaluations();
        int int57 = multiDirectional55.getIterations();
        int int58 = multiDirectional55.getMaxEvaluations();
        int int59 = multiDirectional55.getMaxEvaluations();
        multiDirectional55.setMaxIterations((-1));
        int int62 = multiDirectional55.getMaxIterations();
        multiDirectional55.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker68 = multiDirectional67.getConvergenceChecker();
        multiDirectional55.setConvergenceChecker(realConvergenceChecker68);
        multiDirectional53.setConvergenceChecker(realConvergenceChecker68);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = multiDirectional53.getConvergenceChecker();
        multiDirectional51.setConvergenceChecker(realConvergenceChecker71);
        multiDirectional21.setConvergenceChecker(realConvergenceChecker71);
        multiDirectional16.setConvergenceChecker(realConvergenceChecker71);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker75 = multiDirectional16.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker75);
        multiDirectional0.setMaxIterations((int) '4');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker68);
        org.junit.Assert.assertNotNull(realConvergenceChecker71);
        org.junit.Assert.assertNotNull(realConvergenceChecker75);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional2.setMaxEvaluations((int) (byte) 0);
        int int5 = multiDirectional2.getMaxEvaluations();
        int int6 = multiDirectional2.getEvaluations();
        multiDirectional2.setMaxEvaluations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxIterations((-1));
        int int16 = multiDirectional9.getMaxIterations();
        multiDirectional9.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker22);
        int int24 = multiDirectional9.getMaxIterations();
        int int25 = multiDirectional9.getEvaluations();
        int int26 = multiDirectional9.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional9.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int31 = multiDirectional30.getEvaluations();
        int int32 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional30.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker35);
        multiDirectional9.setMaxEvaluations((int) (byte) 100);
        int int39 = multiDirectional9.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxIterations();
        double[] doubleArray42 = new double[] {};
        multiDirectional40.setStartConfiguration(doubleArray42);
        int int44 = multiDirectional40.getMaxEvaluations();
        int int45 = multiDirectional40.getIterations();
        int int46 = multiDirectional40.getMaxEvaluations();
        int int47 = multiDirectional40.getMaxEvaluations();
        multiDirectional40.setMaxEvaluations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxEvaluations();
        multiDirectional50.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = null;
        multiDirectional50.setConvergenceChecker(realConvergenceChecker54);
        double[] doubleArray57 = new double[] { 100.0d };
        multiDirectional50.setStartConfiguration(doubleArray57);
        multiDirectional40.setStartConfiguration(doubleArray57);
        multiDirectional9.setStartConfiguration(doubleArray57);
        multiDirectional2.setStartConfiguration(doubleArray57);
        java.lang.Class<?> wildcardClass62 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0]");
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getMaxEvaluations();
        int int15 = multiDirectional0.getMaxEvaluations();
        int int16 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations(32);
        int int19 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) (short) 0);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) ' ', (double) (short) -1);
        java.lang.Class<?> wildcardClass3 = multiDirectional2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int6 = multiDirectional0.getEvaluations();
        int int7 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional10.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional13.setConvergenceChecker(realConvergenceChecker17);
        double[] doubleArray21 = new double[] { 1.0d, 2147483647 };
        multiDirectional13.setStartConfiguration(doubleArray21);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional13.getConvergenceChecker();
        multiDirectional13.setMaxEvaluations((int) (byte) 100);
        multiDirectional13.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = multiDirectional13.getConvergenceChecker();
        int int29 = multiDirectional13.getEvaluations();
        int int30 = multiDirectional13.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        int int33 = multiDirectional31.getIterations();
        int int34 = multiDirectional31.getMaxEvaluations();
        int int35 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxIterations((-1));
        int int38 = multiDirectional31.getIterations();
        int int39 = multiDirectional31.getEvaluations();
        int int40 = multiDirectional31.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxEvaluations();
        multiDirectional41.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = null;
        multiDirectional41.setConvergenceChecker(realConvergenceChecker45);
        double[] doubleArray49 = new double[] { 1.0d, 2147483647 };
        multiDirectional41.setStartConfiguration(doubleArray49);
        int int51 = multiDirectional41.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxIterations();
        double[] doubleArray54 = new double[] {};
        multiDirectional52.setStartConfiguration(doubleArray54);
        multiDirectional41.setStartConfiguration(doubleArray54);
        multiDirectional31.setStartConfiguration(doubleArray54);
        multiDirectional13.setStartConfiguration(doubleArray54);
        multiDirectional10.setStartConfiguration(doubleArray54);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional62 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional62.setMaxEvaluations((int) (byte) 0);
        double[] doubleArray67 = new double[] { (-1.0f), ' ' };
        multiDirectional62.setStartConfiguration(doubleArray67);
        multiDirectional10.setStartConfiguration(doubleArray67);
        multiDirectional0.setStartConfiguration(doubleArray67);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = multiDirectional0.getConvergenceChecker();
        int int72 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations((int) 'a');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker23);
        org.junit.Assert.assertNull(realConvergenceChecker28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 32.0]");
        org.junit.Assert.assertNull(realConvergenceChecker71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, 10.0d);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker7);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = null;
        multiDirectional9.setConvergenceChecker(realConvergenceChecker13);
        double[] doubleArray17 = new double[] { 1.0d, 2147483647 };
        multiDirectional9.setStartConfiguration(doubleArray17);
        multiDirectional3.setStartConfiguration(doubleArray17);
        multiDirectional2.setStartConfiguration(doubleArray17);
        int int21 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        int int24 = multiDirectional22.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        multiDirectional27.setMaxIterations((-1));
        int int34 = multiDirectional27.getMaxIterations();
        multiDirectional27.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = multiDirectional39.getConvergenceChecker();
        multiDirectional27.setConvergenceChecker(realConvergenceChecker40);
        multiDirectional25.setConvergenceChecker(realConvergenceChecker40);
        multiDirectional22.setConvergenceChecker(realConvergenceChecker40);
        multiDirectional22.setMaxIterations((int) (short) -1);
        int int46 = multiDirectional22.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker47 = multiDirectional22.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker47);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker47);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray17 = new double[] { 100.0d };
        multiDirectional10.setStartConfiguration(doubleArray17);
        int int19 = multiDirectional10.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        int int24 = multiDirectional22.getIterations();
        int int25 = multiDirectional22.getMaxEvaluations();
        int int26 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxIterations((-1));
        int int29 = multiDirectional22.getMaxIterations();
        multiDirectional22.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional34.getConvergenceChecker();
        multiDirectional22.setConvergenceChecker(realConvergenceChecker35);
        multiDirectional20.setConvergenceChecker(realConvergenceChecker35);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        int int41 = multiDirectional39.getIterations();
        int int42 = multiDirectional39.getMaxEvaluations();
        int int43 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxIterations((-1));
        int int46 = multiDirectional39.getIterations();
        multiDirectional39.setMaxIterations((int) '#');
        multiDirectional39.setMaxEvaluations(0);
        multiDirectional39.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = multiDirectional55.getConvergenceChecker();
        multiDirectional39.setConvergenceChecker(realConvergenceChecker56);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker56);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker56);
        multiDirectional0.setMaxIterations(0);
        int int62 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 1, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker16);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker20);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        int int32 = multiDirectional22.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxIterations();
        double[] doubleArray35 = new double[] {};
        multiDirectional33.setStartConfiguration(doubleArray35);
        multiDirectional22.setStartConfiguration(doubleArray35);
        multiDirectional18.setStartConfiguration(doubleArray35);
        multiDirectional3.setStartConfiguration(doubleArray35);
        multiDirectional2.setStartConfiguration(doubleArray35);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) 0L);
        int int3 = multiDirectional2.getMaxIterations();
        int int4 = multiDirectional2.getIterations();
        int int5 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxIterations();
        double[] doubleArray7 = new double[] {};
        multiDirectional5.setStartConfiguration(doubleArray7);
        multiDirectional5.setMaxIterations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = null;
        multiDirectional11.setConvergenceChecker(realConvergenceChecker15);
        double[] doubleArray19 = new double[] { 1.0d, 2147483647 };
        multiDirectional11.setStartConfiguration(doubleArray19);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional11.getConvergenceChecker();
        multiDirectional11.setMaxEvaluations((int) (byte) 100);
        multiDirectional11.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional11.getConvergenceChecker();
        int int27 = multiDirectional11.getEvaluations();
        int int28 = multiDirectional11.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        int int31 = multiDirectional29.getIterations();
        int int32 = multiDirectional29.getMaxEvaluations();
        int int33 = multiDirectional29.getMaxEvaluations();
        multiDirectional29.setMaxIterations((-1));
        int int36 = multiDirectional29.getIterations();
        int int37 = multiDirectional29.getEvaluations();
        int int38 = multiDirectional29.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = null;
        multiDirectional39.setConvergenceChecker(realConvergenceChecker43);
        double[] doubleArray47 = new double[] { 1.0d, 2147483647 };
        multiDirectional39.setStartConfiguration(doubleArray47);
        int int49 = multiDirectional39.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxIterations();
        double[] doubleArray52 = new double[] {};
        multiDirectional50.setStartConfiguration(doubleArray52);
        multiDirectional39.setStartConfiguration(doubleArray52);
        multiDirectional29.setStartConfiguration(doubleArray52);
        multiDirectional11.setStartConfiguration(doubleArray52);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int58 = multiDirectional57.getMaxEvaluations();
        int int59 = multiDirectional57.getIterations();
        int int60 = multiDirectional57.getMaxEvaluations();
        int int61 = multiDirectional57.getMaxEvaluations();
        multiDirectional57.setMaxIterations((-1));
        int int64 = multiDirectional57.getMaxIterations();
        multiDirectional57.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker70 = multiDirectional69.getConvergenceChecker();
        multiDirectional57.setConvergenceChecker(realConvergenceChecker70);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional72 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int73 = multiDirectional72.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker74 = null;
        multiDirectional72.setConvergenceChecker(realConvergenceChecker74);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int77 = multiDirectional76.getMaxEvaluations();
        multiDirectional76.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker80 = null;
        multiDirectional76.setConvergenceChecker(realConvergenceChecker80);
        double[] doubleArray84 = new double[] { 1.0d, 2147483647 };
        multiDirectional76.setStartConfiguration(doubleArray84);
        int int86 = multiDirectional76.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional87 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int88 = multiDirectional87.getMaxIterations();
        double[] doubleArray89 = new double[] {};
        multiDirectional87.setStartConfiguration(doubleArray89);
        multiDirectional76.setStartConfiguration(doubleArray89);
        multiDirectional72.setStartConfiguration(doubleArray89);
        multiDirectional57.setStartConfiguration(doubleArray89);
        multiDirectional11.setStartConfiguration(doubleArray89);
        multiDirectional5.setStartConfiguration(doubleArray89);
        multiDirectional2.setStartConfiguration(doubleArray89);
        multiDirectional2.setMaxEvaluations(35);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker21);
        org.junit.Assert.assertNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2147483647 + "'", int86 == 2147483647);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2147483647 + "'", int88 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker9);
        multiDirectional0.setMaxIterations((int) (byte) -1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker13);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        int int7 = multiDirectional0.getMaxEvaluations();
        int int8 = multiDirectional0.getMaxEvaluations();
        int int9 = multiDirectional0.getIterations();
        int int10 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = multiDirectional0.getConvergenceChecker();
        int int12 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(100.0d, (double) 97);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        multiDirectional2.setMaxIterations((int) (byte) 1);
        int int5 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = null;
        multiDirectional2.setConvergenceChecker(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        multiDirectional2.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxIterations();
        double[] doubleArray9 = new double[] {};
        multiDirectional7.setStartConfiguration(doubleArray9);
        int int11 = multiDirectional7.getMaxEvaluations();
        int int12 = multiDirectional7.getIterations();
        double[] doubleArray18 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional7.setStartConfiguration(doubleArray18);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxEvaluations();
        int int22 = multiDirectional20.getIterations();
        int int23 = multiDirectional20.getMaxEvaluations();
        int int24 = multiDirectional20.getMaxEvaluations();
        multiDirectional20.setMaxIterations((-1));
        int int27 = multiDirectional20.getIterations();
        int int28 = multiDirectional20.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional20.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        int int32 = multiDirectional30.getIterations();
        int int33 = multiDirectional30.getMaxEvaluations();
        int int34 = multiDirectional30.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxIterations();
        double[] doubleArray37 = new double[] {};
        multiDirectional35.setStartConfiguration(doubleArray37);
        multiDirectional30.setStartConfiguration(doubleArray37);
        multiDirectional20.setStartConfiguration(doubleArray37);
        multiDirectional7.setStartConfiguration(doubleArray37);
        multiDirectional2.setStartConfiguration(doubleArray37);
        int int43 = multiDirectional2.getMaxEvaluations();
        java.lang.Class<?> wildcardClass44 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxIterations();
        double[] doubleArray13 = new double[] {};
        multiDirectional11.setStartConfiguration(doubleArray13);
        multiDirectional0.setStartConfiguration(doubleArray13);
        multiDirectional0.setMaxEvaluations((int) 'a');
        int int18 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 'a');
        int int22 = multiDirectional21.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional21.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker23);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10.0f, (double) (short) 0);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int10 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker11);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker16);
        double[] doubleArray20 = new double[] { 1.0d, 2147483647 };
        multiDirectional12.setStartConfiguration(doubleArray20);
        multiDirectional0.setStartConfiguration(doubleArray20);
        multiDirectional0.setMaxIterations((int) (short) -1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = multiDirectional27.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker28);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNotNull(realConvergenceChecker28);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional0.getConvergenceChecker();
        int int30 = multiDirectional0.getEvaluations();
        int int31 = multiDirectional0.getIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction34 = null;
        org.apache.commons.math.optimization.GoalType goalType35 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, (double) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxEvaluations();
        multiDirectional45.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = null;
        multiDirectional45.setConvergenceChecker(realConvergenceChecker49);
        double[] doubleArray53 = new double[] { 1.0d, 2147483647 };
        multiDirectional45.setStartConfiguration(doubleArray53);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = multiDirectional45.getConvergenceChecker();
        multiDirectional45.setMaxEvaluations((int) (byte) 100);
        multiDirectional45.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int61 = multiDirectional60.getMaxEvaluations();
        multiDirectional60.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = null;
        multiDirectional60.setConvergenceChecker(realConvergenceChecker64);
        double[] doubleArray68 = new double[] { 1.0d, 2147483647 };
        multiDirectional60.setStartConfiguration(doubleArray68);
        int int70 = multiDirectional60.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int72 = multiDirectional71.getMaxIterations();
        double[] doubleArray73 = new double[] {};
        multiDirectional71.setStartConfiguration(doubleArray73);
        multiDirectional60.setStartConfiguration(doubleArray73);
        multiDirectional45.setStartConfiguration(doubleArray73);
        multiDirectional44.setStartConfiguration(doubleArray73);
        int int78 = multiDirectional44.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional79 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int80 = multiDirectional79.getMaxIterations();
        double[] doubleArray81 = new double[] {};
        multiDirectional79.setStartConfiguration(doubleArray81);
        int int83 = multiDirectional79.getMaxEvaluations();
        int int84 = multiDirectional79.getIterations();
        double[] doubleArray90 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional79.setStartConfiguration(doubleArray90);
        multiDirectional44.setStartConfiguration(doubleArray90);
        multiDirectional41.setStartConfiguration(doubleArray90);
        multiDirectional38.setStartConfiguration(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair95 = multiDirectional0.optimize(multivariateRealFunction34, goalType35, doubleArray90);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker55);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        multiDirectional4.setMaxIterations((int) (byte) 100);
        int int16 = multiDirectional4.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional19.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        int int32 = multiDirectional28.getMaxEvaluations();
        int int33 = multiDirectional28.getIterations();
        int int34 = multiDirectional28.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional28.getConvergenceChecker();
        multiDirectional27.setConvergenceChecker(realConvergenceChecker35);
        double[] doubleArray37 = new double[] {};
        double[][] doubleArray38 = new double[][] { doubleArray37 };
        multiDirectional27.setStartConfiguration(doubleArray38);
        multiDirectional24.setStartConfiguration(doubleArray38);
        multiDirectional19.setStartConfiguration(doubleArray38);
        multiDirectional4.setStartConfiguration(doubleArray38);
        multiDirectional2.setStartConfiguration(doubleArray38);
        int int44 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1L, (double) 10L);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int6 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations(1);
        int int9 = multiDirectional0.getMaxIterations();
        int int10 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int22 = multiDirectional21.getEvaluations();
        int int23 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional21.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        int int30 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker31);
        int int33 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0L, (double) (short) 1);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10.0f, 100.0d);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional2.getConvergenceChecker();
        multiDirectional2.setMaxIterations((int) ' ');
        int int8 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxIterations((-1));
        int int16 = multiDirectional9.getMaxIterations();
        int int17 = multiDirectional9.getMaxIterations();
        int int18 = multiDirectional9.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        int int21 = multiDirectional19.getIterations();
        int int22 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int28 = multiDirectional27.getEvaluations();
        int int29 = multiDirectional27.getMaxEvaluations();
        multiDirectional27.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional27.getConvergenceChecker();
        multiDirectional19.setConvergenceChecker(realConvergenceChecker32);
        multiDirectional9.setConvergenceChecker(realConvergenceChecker32);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker32);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        int int6 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations(32);
        multiDirectional0.setMaxEvaluations((-1));
        int int11 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker16);
        double[] doubleArray20 = new double[] { 1.0d, 2147483647 };
        multiDirectional12.setStartConfiguration(doubleArray20);
        multiDirectional12.setMaxIterations((int) (byte) 100);
        int int24 = multiDirectional12.getMaxEvaluations();
        int int25 = multiDirectional12.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional26.setConvergenceChecker(realConvergenceChecker28);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = null;
        multiDirectional30.setConvergenceChecker(realConvergenceChecker34);
        double[] doubleArray38 = new double[] { 1.0d, 2147483647 };
        multiDirectional30.setStartConfiguration(doubleArray38);
        int int40 = multiDirectional30.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxIterations();
        double[] doubleArray43 = new double[] {};
        multiDirectional41.setStartConfiguration(doubleArray43);
        multiDirectional30.setStartConfiguration(doubleArray43);
        multiDirectional26.setStartConfiguration(doubleArray43);
        multiDirectional12.setStartConfiguration(doubleArray43);
        multiDirectional0.setStartConfiguration(doubleArray43);
        int int49 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 32 + "'", int49 == 32);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) 1L);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = null;
        multiDirectional2.setConvergenceChecker(realConvergenceChecker3);
        int int5 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction6 = null;
        org.apache.commons.math.optimization.GoalType goalType7 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxIterations();
        double[] doubleArray10 = new double[] {};
        multiDirectional8.setStartConfiguration(doubleArray10);
        int int12 = multiDirectional8.getMaxEvaluations();
        int int13 = multiDirectional8.getIterations();
        int int14 = multiDirectional8.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional8.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        int int18 = multiDirectional16.getIterations();
        int int19 = multiDirectional16.getMaxEvaluations();
        int int20 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxIterations((-1));
        int int23 = multiDirectional16.getIterations();
        int int24 = multiDirectional16.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        int int27 = multiDirectional25.getIterations();
        int int28 = multiDirectional25.getMaxEvaluations();
        int int29 = multiDirectional25.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxIterations();
        double[] doubleArray32 = new double[] {};
        multiDirectional30.setStartConfiguration(doubleArray32);
        multiDirectional25.setStartConfiguration(doubleArray32);
        multiDirectional16.setStartConfiguration(doubleArray32);
        multiDirectional8.setStartConfiguration(doubleArray32);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair37 = multiDirectional2.optimize(multivariateRealFunction6, goalType7, doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        int int13 = multiDirectional0.getEvaluations();
        int int14 = multiDirectional0.getIterations();
        int int15 = multiDirectional0.getMaxEvaluations();
        int int16 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10.0f, (double) (byte) 1);
        java.lang.Class<?> wildcardClass3 = multiDirectional2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxIterations(35);
        multiDirectional0.setMaxIterations(100);
        multiDirectional0.setMaxIterations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        int int21 = multiDirectional19.getIterations();
        int int22 = multiDirectional19.getMaxEvaluations();
        int int23 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxIterations((-1));
        int int26 = multiDirectional19.getMaxIterations();
        int int27 = multiDirectional19.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = null;
        multiDirectional28.setConvergenceChecker(realConvergenceChecker30);
        multiDirectional28.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional36.getConvergenceChecker();
        multiDirectional28.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional19.setConvergenceChecker(realConvergenceChecker37);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxIterations();
        double[] doubleArray45 = new double[] {};
        multiDirectional43.setStartConfiguration(doubleArray45);
        int int47 = multiDirectional43.getMaxEvaluations();
        int int48 = multiDirectional43.getIterations();
        int int49 = multiDirectional43.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = multiDirectional43.getConvergenceChecker();
        multiDirectional42.setConvergenceChecker(realConvergenceChecker50);
        double[] doubleArray52 = new double[] {};
        double[][] doubleArray53 = new double[][] { doubleArray52 };
        multiDirectional42.setStartConfiguration(doubleArray53);
        multiDirectional19.setStartConfiguration(doubleArray53);
        multiDirectional0.setStartConfiguration(doubleArray53);
        int int57 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int59 = multiDirectional58.getMaxIterations();
        double[] doubleArray60 = new double[] {};
        multiDirectional58.setStartConfiguration(doubleArray60);
        int int62 = multiDirectional58.getMaxEvaluations();
        int int63 = multiDirectional58.getIterations();
        double[] doubleArray69 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional58.setStartConfiguration(doubleArray69);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = multiDirectional58.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker71);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(realConvergenceChecker71);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        int int5 = multiDirectional2.getEvaluations();
        int int6 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        int int7 = multiDirectional0.getMaxIterations();
        int int8 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        double[] doubleArray16 = new double[] {};
        multiDirectional14.setStartConfiguration(doubleArray16);
        multiDirectional9.setStartConfiguration(doubleArray16);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxIterations();
        double[] doubleArray21 = new double[] {};
        multiDirectional19.setStartConfiguration(doubleArray21);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        int int27 = multiDirectional25.getIterations();
        int int28 = multiDirectional25.getMaxEvaluations();
        int int29 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxIterations((-1));
        int int32 = multiDirectional25.getMaxIterations();
        multiDirectional25.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional37.getConvergenceChecker();
        multiDirectional25.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional23.setConvergenceChecker(realConvergenceChecker38);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = multiDirectional23.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = multiDirectional23.getConvergenceChecker();
        multiDirectional19.setConvergenceChecker(realConvergenceChecker42);
        multiDirectional9.setConvergenceChecker(realConvergenceChecker42);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker42);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional0.getConvergenceChecker();
        int int47 = multiDirectional0.getMaxIterations();
        int int48 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertNotNull(realConvergenceChecker41);
        org.junit.Assert.assertNotNull(realConvergenceChecker42);
        org.junit.Assert.assertNotNull(realConvergenceChecker46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional0.getConvergenceChecker();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        int int20 = multiDirectional18.getIterations();
        int int21 = multiDirectional18.getMaxEvaluations();
        int int22 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxIterations((-1));
        int int25 = multiDirectional18.getIterations();
        int int26 = multiDirectional18.getEvaluations();
        int int27 = multiDirectional18.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxEvaluations();
        multiDirectional28.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = null;
        multiDirectional28.setConvergenceChecker(realConvergenceChecker32);
        double[] doubleArray36 = new double[] { 1.0d, 2147483647 };
        multiDirectional28.setStartConfiguration(doubleArray36);
        int int38 = multiDirectional28.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxIterations();
        double[] doubleArray41 = new double[] {};
        multiDirectional39.setStartConfiguration(doubleArray41);
        multiDirectional28.setStartConfiguration(doubleArray41);
        multiDirectional18.setStartConfiguration(doubleArray41);
        multiDirectional0.setStartConfiguration(doubleArray41);
        int int46 = multiDirectional0.getIterations();
        int int47 = multiDirectional0.getMaxEvaluations();
        int int48 = multiDirectional0.getMaxIterations();
        int int49 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0L, (double) 0L);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, 100.0d);
        int int3 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        multiDirectional2.setMaxIterations((int) '4');
        int int7 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        int int10 = multiDirectional8.getIterations();
        int int11 = multiDirectional8.getMaxEvaluations();
        int int12 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxIterations((-1));
        int int15 = multiDirectional8.getIterations();
        int int16 = multiDirectional8.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker17);
        multiDirectional8.setMaxIterations((int) (byte) -1);
        multiDirectional8.setMaxEvaluations(100);
        int int23 = multiDirectional8.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int27 = multiDirectional26.getEvaluations();
        int int28 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        int int33 = multiDirectional31.getIterations();
        int int34 = multiDirectional31.getMaxEvaluations();
        int int35 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxIterations((-1));
        int int38 = multiDirectional31.getMaxIterations();
        int int39 = multiDirectional31.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = null;
        multiDirectional40.setConvergenceChecker(realConvergenceChecker42);
        multiDirectional40.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = multiDirectional48.getConvergenceChecker();
        multiDirectional40.setConvergenceChecker(realConvergenceChecker49);
        multiDirectional31.setConvergenceChecker(realConvergenceChecker49);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxIterations();
        double[] doubleArray57 = new double[] {};
        multiDirectional55.setStartConfiguration(doubleArray57);
        int int59 = multiDirectional55.getMaxEvaluations();
        int int60 = multiDirectional55.getIterations();
        int int61 = multiDirectional55.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = multiDirectional55.getConvergenceChecker();
        multiDirectional54.setConvergenceChecker(realConvergenceChecker62);
        double[] doubleArray64 = new double[] {};
        double[][] doubleArray65 = new double[][] { doubleArray64 };
        multiDirectional54.setStartConfiguration(doubleArray65);
        multiDirectional31.setStartConfiguration(doubleArray65);
        multiDirectional26.setStartConfiguration(doubleArray65);
        multiDirectional8.setStartConfiguration(doubleArray65);
        multiDirectional2.setStartConfiguration(doubleArray65);
        int int71 = multiDirectional2.getMaxEvaluations();
        java.lang.Class<?> wildcardClass72 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker49);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getIterations();
        int int13 = multiDirectional5.getEvaluations();
        int int14 = multiDirectional5.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional15.setConvergenceChecker(realConvergenceChecker17);
        multiDirectional15.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional23.getConvergenceChecker();
        multiDirectional15.setConvergenceChecker(realConvergenceChecker24);
        multiDirectional5.setConvergenceChecker(realConvergenceChecker24);
        int int27 = multiDirectional5.getMaxIterations();
        int int28 = multiDirectional5.getEvaluations();
        int int29 = multiDirectional5.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 'a', (double) 2147483647);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional33.setConvergenceChecker(realConvergenceChecker37);
        double[] doubleArray41 = new double[] { 1.0d, 2147483647 };
        multiDirectional33.setStartConfiguration(doubleArray41);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = multiDirectional33.getConvergenceChecker();
        multiDirectional33.setMaxEvaluations((int) (byte) 100);
        multiDirectional33.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = multiDirectional33.getConvergenceChecker();
        int int49 = multiDirectional33.getEvaluations();
        int int50 = multiDirectional33.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxEvaluations();
        int int53 = multiDirectional51.getIterations();
        int int54 = multiDirectional51.getMaxEvaluations();
        int int55 = multiDirectional51.getMaxEvaluations();
        multiDirectional51.setMaxIterations((-1));
        int int58 = multiDirectional51.getIterations();
        int int59 = multiDirectional51.getEvaluations();
        int int60 = multiDirectional51.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int62 = multiDirectional61.getMaxEvaluations();
        multiDirectional61.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker65 = null;
        multiDirectional61.setConvergenceChecker(realConvergenceChecker65);
        double[] doubleArray69 = new double[] { 1.0d, 2147483647 };
        multiDirectional61.setStartConfiguration(doubleArray69);
        int int71 = multiDirectional61.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional72 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int73 = multiDirectional72.getMaxIterations();
        double[] doubleArray74 = new double[] {};
        multiDirectional72.setStartConfiguration(doubleArray74);
        multiDirectional61.setStartConfiguration(doubleArray74);
        multiDirectional51.setStartConfiguration(doubleArray74);
        multiDirectional33.setStartConfiguration(doubleArray74);
        multiDirectional32.setStartConfiguration(doubleArray74);
        multiDirectional5.setStartConfiguration(doubleArray74);
        multiDirectional0.setStartConfiguration(doubleArray74);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker43);
        org.junit.Assert.assertNull(realConvergenceChecker48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        multiDirectional0.setMaxIterations((-1));
        int int16 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker17);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray11 = new double[] { 100.0d };
        multiDirectional4.setStartConfiguration(doubleArray11);
        int int13 = multiDirectional4.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        int int18 = multiDirectional16.getIterations();
        int int19 = multiDirectional16.getMaxEvaluations();
        int int20 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxIterations((-1));
        int int23 = multiDirectional16.getMaxIterations();
        multiDirectional16.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional28.getConvergenceChecker();
        multiDirectional16.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional14.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = multiDirectional4.getConvergenceChecker();
        int int34 = multiDirectional4.getEvaluations();
        int int35 = multiDirectional4.getIterations();
        int int36 = multiDirectional4.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int40 = multiDirectional39.getEvaluations();
        int int41 = multiDirectional39.getMaxEvaluations();
        int int42 = multiDirectional39.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxEvaluations();
        int int45 = multiDirectional43.getIterations();
        int int46 = multiDirectional43.getMaxEvaluations();
        int int47 = multiDirectional43.getMaxEvaluations();
        multiDirectional43.setMaxIterations((-1));
        int int50 = multiDirectional43.getIterations();
        int int51 = multiDirectional43.getEvaluations();
        int int52 = multiDirectional43.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxEvaluations();
        multiDirectional53.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = null;
        multiDirectional53.setConvergenceChecker(realConvergenceChecker57);
        double[] doubleArray61 = new double[] { 1.0d, 2147483647 };
        multiDirectional53.setStartConfiguration(doubleArray61);
        int int63 = multiDirectional53.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int65 = multiDirectional64.getMaxIterations();
        double[] doubleArray66 = new double[] {};
        multiDirectional64.setStartConfiguration(doubleArray66);
        multiDirectional53.setStartConfiguration(doubleArray66);
        multiDirectional43.setStartConfiguration(doubleArray66);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int71 = multiDirectional70.getMaxEvaluations();
        int int72 = multiDirectional70.getIterations();
        int int73 = multiDirectional70.getMaxEvaluations();
        int int74 = multiDirectional70.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxIterations();
        double[] doubleArray77 = new double[] {};
        multiDirectional75.setStartConfiguration(doubleArray77);
        multiDirectional70.setStartConfiguration(doubleArray77);
        multiDirectional43.setStartConfiguration(doubleArray77);
        multiDirectional39.setStartConfiguration(doubleArray77);
        multiDirectional4.setStartConfiguration(doubleArray77);
        multiDirectional0.setStartConfiguration(doubleArray77);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertNotNull(realConvergenceChecker33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxIterations(35);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional0.getConvergenceChecker();
        int int16 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 35, (double) 1.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxEvaluations();
        multiDirectional20.setMaxIterations((int) (byte) 0);
        int int24 = multiDirectional20.getEvaluations();
        int int25 = multiDirectional20.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional20.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = multiDirectional29.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        int int33 = multiDirectional31.getIterations();
        int int34 = multiDirectional31.getMaxEvaluations();
        int int35 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxIterations((-1));
        int int38 = multiDirectional31.getMaxIterations();
        int int39 = multiDirectional31.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = null;
        multiDirectional40.setConvergenceChecker(realConvergenceChecker42);
        multiDirectional40.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = multiDirectional48.getConvergenceChecker();
        multiDirectional40.setConvergenceChecker(realConvergenceChecker49);
        multiDirectional31.setConvergenceChecker(realConvergenceChecker49);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxIterations();
        double[] doubleArray57 = new double[] {};
        multiDirectional55.setStartConfiguration(doubleArray57);
        int int59 = multiDirectional55.getMaxEvaluations();
        int int60 = multiDirectional55.getIterations();
        int int61 = multiDirectional55.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = multiDirectional55.getConvergenceChecker();
        multiDirectional54.setConvergenceChecker(realConvergenceChecker62);
        double[] doubleArray64 = new double[] {};
        double[][] doubleArray65 = new double[][] { doubleArray64 };
        multiDirectional54.setStartConfiguration(doubleArray65);
        multiDirectional31.setStartConfiguration(doubleArray65);
        multiDirectional29.setStartConfiguration(doubleArray65);
        multiDirectional20.setStartConfiguration(doubleArray65);
        multiDirectional19.setStartConfiguration(doubleArray65);
        multiDirectional0.setStartConfiguration(doubleArray65);
        int int72 = multiDirectional0.getMaxIterations();
        int int73 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) 0L);
        int int77 = multiDirectional76.getMaxIterations();
        int int78 = multiDirectional76.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional79 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int80 = multiDirectional79.getMaxEvaluations();
        multiDirectional79.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker83 = null;
        multiDirectional79.setConvergenceChecker(realConvergenceChecker83);
        double[] doubleArray86 = new double[] { 100.0d };
        multiDirectional79.setStartConfiguration(doubleArray86);
        multiDirectional76.setStartConfiguration(doubleArray86);
        multiDirectional0.setStartConfiguration(doubleArray86);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker90 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertNotNull(realConvergenceChecker30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker49);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.0]");
        org.junit.Assert.assertNull(realConvergenceChecker90);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 'a', (double) 2147483647);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker7);
        double[] doubleArray11 = new double[] { 1.0d, 2147483647 };
        multiDirectional3.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional3.getConvergenceChecker();
        multiDirectional3.setMaxEvaluations((int) (byte) 100);
        multiDirectional3.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional3.getConvergenceChecker();
        int int19 = multiDirectional3.getEvaluations();
        int int20 = multiDirectional3.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        int int23 = multiDirectional21.getIterations();
        int int24 = multiDirectional21.getMaxEvaluations();
        int int25 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxIterations((-1));
        int int28 = multiDirectional21.getIterations();
        int int29 = multiDirectional21.getEvaluations();
        int int30 = multiDirectional21.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = null;
        multiDirectional31.setConvergenceChecker(realConvergenceChecker35);
        double[] doubleArray39 = new double[] { 1.0d, 2147483647 };
        multiDirectional31.setStartConfiguration(doubleArray39);
        int int41 = multiDirectional31.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxIterations();
        double[] doubleArray44 = new double[] {};
        multiDirectional42.setStartConfiguration(doubleArray44);
        multiDirectional31.setStartConfiguration(doubleArray44);
        multiDirectional21.setStartConfiguration(doubleArray44);
        multiDirectional3.setStartConfiguration(doubleArray44);
        multiDirectional2.setStartConfiguration(doubleArray44);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = null;
        multiDirectional50.setConvergenceChecker(realConvergenceChecker52);
        multiDirectional50.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = multiDirectional50.getConvergenceChecker();
        int int57 = multiDirectional50.getMaxIterations();
        int int58 = multiDirectional50.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxEvaluations();
        int int61 = multiDirectional59.getIterations();
        int int62 = multiDirectional59.getMaxEvaluations();
        int int63 = multiDirectional59.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int65 = multiDirectional64.getMaxIterations();
        double[] doubleArray66 = new double[] {};
        multiDirectional64.setStartConfiguration(doubleArray66);
        multiDirectional59.setStartConfiguration(doubleArray66);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int70 = multiDirectional69.getMaxIterations();
        double[] doubleArray71 = new double[] {};
        multiDirectional69.setStartConfiguration(doubleArray71);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional73 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int74 = multiDirectional73.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxEvaluations();
        int int77 = multiDirectional75.getIterations();
        int int78 = multiDirectional75.getMaxEvaluations();
        int int79 = multiDirectional75.getMaxEvaluations();
        multiDirectional75.setMaxIterations((-1));
        int int82 = multiDirectional75.getMaxIterations();
        multiDirectional75.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional87 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker88 = multiDirectional87.getConvergenceChecker();
        multiDirectional75.setConvergenceChecker(realConvergenceChecker88);
        multiDirectional73.setConvergenceChecker(realConvergenceChecker88);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker91 = multiDirectional73.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker92 = multiDirectional73.getConvergenceChecker();
        multiDirectional69.setConvergenceChecker(realConvergenceChecker92);
        multiDirectional59.setConvergenceChecker(realConvergenceChecker92);
        multiDirectional50.setConvergenceChecker(realConvergenceChecker92);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker92);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker97 = multiDirectional2.getConvergenceChecker();
        int int98 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker13);
        org.junit.Assert.assertNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2147483647 + "'", int79 == 2147483647);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker88);
        org.junit.Assert.assertNotNull(realConvergenceChecker91);
        org.junit.Assert.assertNotNull(realConvergenceChecker92);
        org.junit.Assert.assertNotNull(realConvergenceChecker97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxIterations();
        double[] doubleArray20 = new double[] {};
        multiDirectional18.setStartConfiguration(doubleArray20);
        multiDirectional0.setStartConfiguration(doubleArray20);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional0.getConvergenceChecker();
        int int24 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional0.getConvergenceChecker();
        int int6 = multiDirectional0.getIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 100);
        int int9 = multiDirectional0.getMaxIterations();
        int int10 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        int int13 = multiDirectional11.getIterations();
        int int14 = multiDirectional11.getMaxEvaluations();
        int int15 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxIterations((-1));
        int int18 = multiDirectional11.getMaxIterations();
        multiDirectional11.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional23.getConvergenceChecker();
        multiDirectional11.setConvergenceChecker(realConvergenceChecker24);
        int int26 = multiDirectional11.getMaxIterations();
        int int27 = multiDirectional11.getEvaluations();
        int int28 = multiDirectional11.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional11.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int33 = multiDirectional32.getEvaluations();
        int int34 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional32.getConvergenceChecker();
        multiDirectional11.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker37);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker37);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxIterations();
        double[] doubleArray12 = new double[] {};
        multiDirectional10.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional10.getMaxEvaluations();
        int int15 = multiDirectional10.getIterations();
        int int16 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional10.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker17);
        double[] doubleArray19 = new double[] {};
        double[][] doubleArray20 = new double[][] { doubleArray19 };
        multiDirectional9.setStartConfiguration(doubleArray20);
        multiDirectional2.setStartConfiguration(doubleArray20);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = null;
        multiDirectional23.setConvergenceChecker(realConvergenceChecker27);
        double[] doubleArray31 = new double[] { 1.0d, 2147483647 };
        multiDirectional23.setStartConfiguration(doubleArray31);
        multiDirectional23.setMaxIterations((int) (byte) 100);
        int int35 = multiDirectional23.getIterations();
        multiDirectional23.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional23.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = null;
        multiDirectional39.setConvergenceChecker(realConvergenceChecker43);
        double[] doubleArray47 = new double[] { 1.0d, 2147483647 };
        multiDirectional39.setStartConfiguration(doubleArray47);
        int int49 = multiDirectional39.getMaxIterations();
        int int50 = multiDirectional39.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker51 = null;
        multiDirectional39.setConvergenceChecker(realConvergenceChecker51);
        int int53 = multiDirectional39.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int58 = multiDirectional57.getMaxEvaluations();
        int int59 = multiDirectional57.getIterations();
        int int60 = multiDirectional57.getMaxEvaluations();
        int int61 = multiDirectional57.getMaxEvaluations();
        multiDirectional57.setMaxIterations((-1));
        int int64 = multiDirectional57.getIterations();
        multiDirectional57.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker67 = null;
        multiDirectional57.setConvergenceChecker(realConvergenceChecker67);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int70 = multiDirectional69.getMaxEvaluations();
        multiDirectional69.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker73 = null;
        multiDirectional69.setConvergenceChecker(realConvergenceChecker73);
        double[] doubleArray77 = new double[] { 1.0d, 2147483647 };
        multiDirectional69.setStartConfiguration(doubleArray77);
        multiDirectional57.setStartConfiguration(doubleArray77);
        multiDirectional56.setStartConfiguration(doubleArray77);
        multiDirectional39.setStartConfiguration(doubleArray77);
        multiDirectional23.setStartConfiguration(doubleArray77);
        multiDirectional2.setStartConfiguration(doubleArray77);
        int int84 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        multiDirectional0.setMaxIterations((-1));
        double[] doubleArray26 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiDirectional0.setStartConfiguration(doubleArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker16);
        double[] doubleArray20 = new double[] { 1.0d, 2147483647 };
        multiDirectional12.setStartConfiguration(doubleArray20);
        multiDirectional0.setStartConfiguration(doubleArray20);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        multiDirectional23.setStartConfiguration(doubleArray30);
        multiDirectional0.setStartConfiguration(doubleArray30);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional0.getConvergenceChecker();
        int int35 = multiDirectional0.getMaxIterations();
        int int36 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction37 = null;
        org.apache.commons.math.optimization.GoalType goalType38 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        int int41 = multiDirectional39.getIterations();
        int int42 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxIterations();
        double[] doubleArray47 = new double[] {};
        multiDirectional45.setStartConfiguration(doubleArray47);
        int int49 = multiDirectional45.getMaxEvaluations();
        int int50 = multiDirectional45.getMaxIterations();
        int int51 = multiDirectional45.getMaxIterations();
        multiDirectional45.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = multiDirectional45.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = multiDirectional45.getConvergenceChecker();
        int int56 = multiDirectional45.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int58 = multiDirectional57.getMaxEvaluations();
        int int59 = multiDirectional57.getIterations();
        int int60 = multiDirectional57.getMaxEvaluations();
        int int61 = multiDirectional57.getMaxEvaluations();
        multiDirectional57.setMaxIterations((-1));
        int int64 = multiDirectional57.getMaxIterations();
        multiDirectional57.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker70 = multiDirectional69.getConvergenceChecker();
        multiDirectional57.setConvergenceChecker(realConvergenceChecker70);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional72 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int73 = multiDirectional72.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker74 = null;
        multiDirectional72.setConvergenceChecker(realConvergenceChecker74);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int77 = multiDirectional76.getMaxEvaluations();
        multiDirectional76.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker80 = null;
        multiDirectional76.setConvergenceChecker(realConvergenceChecker80);
        double[] doubleArray84 = new double[] { 1.0d, 2147483647 };
        multiDirectional76.setStartConfiguration(doubleArray84);
        int int86 = multiDirectional76.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional87 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int88 = multiDirectional87.getMaxIterations();
        double[] doubleArray89 = new double[] {};
        multiDirectional87.setStartConfiguration(doubleArray89);
        multiDirectional76.setStartConfiguration(doubleArray89);
        multiDirectional72.setStartConfiguration(doubleArray89);
        multiDirectional57.setStartConfiguration(doubleArray89);
        multiDirectional45.setStartConfiguration(doubleArray89);
        multiDirectional39.setStartConfiguration(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair96 = multiDirectional0.optimize(multivariateRealFunction37, goalType38, doubleArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker54);
        org.junit.Assert.assertNotNull(realConvergenceChecker55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2147483647 + "'", int86 == 2147483647);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2147483647 + "'", int88 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        int int2 = multiDirectional0.getMaxEvaluations();
        int int3 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((-1));
        int int11 = multiDirectional4.getIterations();
        multiDirectional4.setMaxIterations((int) '#');
        multiDirectional4.setMaxEvaluations(0);
        multiDirectional4.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker22);
        double[] doubleArray26 = new double[] { 1.0d, 2147483647 };
        multiDirectional18.setStartConfiguration(doubleArray26);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = multiDirectional18.getConvergenceChecker();
        multiDirectional18.setMaxEvaluations((int) (byte) 100);
        multiDirectional18.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = multiDirectional18.getConvergenceChecker();
        int int34 = multiDirectional18.getEvaluations();
        int int35 = multiDirectional18.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        int int38 = multiDirectional36.getIterations();
        int int39 = multiDirectional36.getMaxEvaluations();
        int int40 = multiDirectional36.getMaxEvaluations();
        multiDirectional36.setMaxIterations((-1));
        int int43 = multiDirectional36.getIterations();
        int int44 = multiDirectional36.getEvaluations();
        int int45 = multiDirectional36.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxEvaluations();
        multiDirectional46.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = null;
        multiDirectional46.setConvergenceChecker(realConvergenceChecker50);
        double[] doubleArray54 = new double[] { 1.0d, 2147483647 };
        multiDirectional46.setStartConfiguration(doubleArray54);
        int int56 = multiDirectional46.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int58 = multiDirectional57.getMaxIterations();
        double[] doubleArray59 = new double[] {};
        multiDirectional57.setStartConfiguration(doubleArray59);
        multiDirectional46.setStartConfiguration(doubleArray59);
        multiDirectional36.setStartConfiguration(doubleArray59);
        multiDirectional18.setStartConfiguration(doubleArray59);
        multiDirectional4.setStartConfiguration(doubleArray59);
        multiDirectional0.setStartConfiguration(doubleArray59);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2147483647 + "'", int2 == 2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker28);
        org.junit.Assert.assertNull(realConvergenceChecker33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 97, 100.0d);
        int int3 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        int int8 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations((int) ' ');
        int int11 = multiDirectional0.getEvaluations();
        int int12 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional16.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker17);
        int int19 = multiDirectional0.getMaxEvaluations();
        int int20 = multiDirectional0.getMaxEvaluations();
        int int21 = multiDirectional0.getEvaluations();
        int int22 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getIterations();
        multiDirectional23.setMaxIterations((int) '#');
        multiDirectional23.setMaxEvaluations(0);
        multiDirectional23.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = multiDirectional39.getConvergenceChecker();
        multiDirectional23.setConvergenceChecker(realConvergenceChecker40);
        int int42 = multiDirectional23.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxEvaluations();
        int int45 = multiDirectional43.getMaxEvaluations();
        int int46 = multiDirectional43.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxEvaluations();
        multiDirectional47.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker51 = null;
        multiDirectional47.setConvergenceChecker(realConvergenceChecker51);
        double[] doubleArray54 = new double[] { 100.0d };
        multiDirectional47.setStartConfiguration(doubleArray54);
        multiDirectional43.setStartConfiguration(doubleArray54);
        multiDirectional23.setStartConfiguration(doubleArray54);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker58 = multiDirectional23.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker58);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0]");
        org.junit.Assert.assertNotNull(realConvergenceChecker58);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        multiDirectional0.setMaxEvaluations((int) '4');
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) ' ', (double) 35);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction3 = null;
        org.apache.commons.math.optimization.GoalType goalType4 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional5.setConvergenceChecker(realConvergenceChecker7);
        multiDirectional5.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = multiDirectional5.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = multiDirectional5.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional16.getConvergenceChecker();
        multiDirectional16.setMaxEvaluations((int) (byte) 100);
        multiDirectional16.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = null;
        multiDirectional31.setConvergenceChecker(realConvergenceChecker35);
        double[] doubleArray39 = new double[] { 1.0d, 2147483647 };
        multiDirectional31.setStartConfiguration(doubleArray39);
        int int41 = multiDirectional31.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxIterations();
        double[] doubleArray44 = new double[] {};
        multiDirectional42.setStartConfiguration(doubleArray44);
        multiDirectional31.setStartConfiguration(doubleArray44);
        multiDirectional16.setStartConfiguration(doubleArray44);
        multiDirectional15.setStartConfiguration(doubleArray44);
        int int49 = multiDirectional15.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxIterations();
        double[] doubleArray52 = new double[] {};
        multiDirectional50.setStartConfiguration(doubleArray52);
        int int54 = multiDirectional50.getMaxEvaluations();
        int int55 = multiDirectional50.getIterations();
        double[] doubleArray61 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional50.setStartConfiguration(doubleArray61);
        multiDirectional15.setStartConfiguration(doubleArray61);
        multiDirectional5.setStartConfiguration(doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair65 = multiDirectional2.optimize(multivariateRealFunction3, goalType4, doubleArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker11);
        org.junit.Assert.assertNull(realConvergenceChecker12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 2147483647);
        int int3 = multiDirectional2.getEvaluations();
        multiDirectional2.setMaxIterations((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        int int2 = multiDirectional0.getMaxEvaluations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getIterations();
        int int13 = multiDirectional5.getMaxIterations();
        int int14 = multiDirectional5.getMaxEvaluations();
        int int15 = multiDirectional5.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = null;
        multiDirectional19.setConvergenceChecker(realConvergenceChecker23);
        double[] doubleArray27 = new double[] { 1.0d, 2147483647 };
        multiDirectional19.setStartConfiguration(doubleArray27);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional19.getConvergenceChecker();
        multiDirectional19.setMaxEvaluations((int) (byte) 100);
        int int32 = multiDirectional19.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional33.setConvergenceChecker(realConvergenceChecker37);
        double[] doubleArray41 = new double[] { 1.0d, 2147483647 };
        multiDirectional33.setStartConfiguration(doubleArray41);
        multiDirectional19.setStartConfiguration(doubleArray41);
        multiDirectional18.setStartConfiguration(doubleArray41);
        multiDirectional5.setStartConfiguration(doubleArray41);
        multiDirectional0.setStartConfiguration(doubleArray41);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2147483647 + "'", int2 == 2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(100);
        multiDirectional0.setMaxIterations((int) (short) 10);
        int int13 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations(35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxIterations();
        double[] doubleArray18 = new double[] {};
        multiDirectional16.setStartConfiguration(doubleArray18);
        int int20 = multiDirectional16.getMaxEvaluations();
        int int21 = multiDirectional16.getMaxIterations();
        int int22 = multiDirectional16.getMaxIterations();
        multiDirectional16.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        int int27 = multiDirectional25.getIterations();
        int int28 = multiDirectional25.getMaxEvaluations();
        int int29 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxIterations((-1));
        int int32 = multiDirectional25.getMaxIterations();
        int int33 = multiDirectional25.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int35 = multiDirectional34.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = null;
        multiDirectional34.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional34.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = multiDirectional42.getConvergenceChecker();
        multiDirectional34.setConvergenceChecker(realConvergenceChecker43);
        multiDirectional25.setConvergenceChecker(realConvergenceChecker43);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxIterations();
        double[] doubleArray51 = new double[] {};
        multiDirectional49.setStartConfiguration(doubleArray51);
        int int53 = multiDirectional49.getMaxEvaluations();
        int int54 = multiDirectional49.getIterations();
        int int55 = multiDirectional49.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = multiDirectional49.getConvergenceChecker();
        multiDirectional48.setConvergenceChecker(realConvergenceChecker56);
        double[] doubleArray58 = new double[] {};
        double[][] doubleArray59 = new double[][] { doubleArray58 };
        multiDirectional48.setStartConfiguration(doubleArray59);
        multiDirectional25.setStartConfiguration(doubleArray59);
        multiDirectional16.setStartConfiguration(doubleArray59);
        multiDirectional0.setStartConfiguration(doubleArray59);
        multiDirectional0.setMaxIterations(35);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker43);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) (short) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getIterations();
        multiDirectional3.setMaxIterations((int) '#');
        int int13 = multiDirectional3.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = multiDirectional3.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker14);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker14);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations((int) ' ');
        multiDirectional0.setMaxEvaluations(32);
        int int12 = multiDirectional0.getMaxIterations();
        int int13 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1, (double) 10.0f);
        multiDirectional2.setMaxIterations((int) 'a');
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 1, (double) 10);
        multiDirectional2.setMaxEvaluations((int) (short) -1);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional16.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker17);
        int int19 = multiDirectional0.getMaxEvaluations();
        int int20 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = null;
        multiDirectional21.setConvergenceChecker(realConvergenceChecker25);
        double[] doubleArray29 = new double[] { 1.0d, 2147483647 };
        multiDirectional21.setStartConfiguration(doubleArray29);
        int int31 = multiDirectional21.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        double[] doubleArray34 = new double[] {};
        multiDirectional32.setStartConfiguration(doubleArray34);
        multiDirectional21.setStartConfiguration(doubleArray34);
        multiDirectional21.setMaxEvaluations((int) 'a');
        int int39 = multiDirectional21.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        int int42 = multiDirectional40.getIterations();
        int int43 = multiDirectional40.getMaxEvaluations();
        int int44 = multiDirectional40.getMaxEvaluations();
        multiDirectional40.setMaxIterations((-1));
        int int47 = multiDirectional40.getIterations();
        int int48 = multiDirectional40.getEvaluations();
        int int49 = multiDirectional40.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxEvaluations();
        multiDirectional50.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = null;
        multiDirectional50.setConvergenceChecker(realConvergenceChecker54);
        double[] doubleArray58 = new double[] { 1.0d, 2147483647 };
        multiDirectional50.setStartConfiguration(doubleArray58);
        int int60 = multiDirectional50.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int62 = multiDirectional61.getMaxIterations();
        double[] doubleArray63 = new double[] {};
        multiDirectional61.setStartConfiguration(doubleArray63);
        multiDirectional50.setStartConfiguration(doubleArray63);
        multiDirectional40.setStartConfiguration(doubleArray63);
        multiDirectional21.setStartConfiguration(doubleArray63);
        multiDirectional0.setStartConfiguration(doubleArray63);
        int int69 = multiDirectional0.getEvaluations();
        int int70 = multiDirectional0.getMaxEvaluations();
        int int71 = multiDirectional0.getIterations();
        multiDirectional0.setMaxEvaluations((int) (byte) 1);
        int int74 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 1, (double) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxIterations();
        double[] doubleArray5 = new double[] {};
        multiDirectional3.setStartConfiguration(doubleArray5);
        int int7 = multiDirectional3.getMaxEvaluations();
        int int8 = multiDirectional3.getMaxIterations();
        int int9 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = multiDirectional3.getConvergenceChecker();
        multiDirectional3.setMaxEvaluations(0);
        multiDirectional3.setMaxEvaluations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxEvaluations();
        int int19 = multiDirectional17.getIterations();
        int int20 = multiDirectional17.getMaxEvaluations();
        multiDirectional17.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional25.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        multiDirectional27.setMaxIterations((-1));
        int int34 = multiDirectional27.getMaxIterations();
        int int35 = multiDirectional27.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = null;
        multiDirectional36.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional36.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = multiDirectional44.getConvergenceChecker();
        multiDirectional36.setConvergenceChecker(realConvergenceChecker45);
        multiDirectional27.setConvergenceChecker(realConvergenceChecker45);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxIterations();
        double[] doubleArray53 = new double[] {};
        multiDirectional51.setStartConfiguration(doubleArray53);
        int int55 = multiDirectional51.getMaxEvaluations();
        int int56 = multiDirectional51.getIterations();
        int int57 = multiDirectional51.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker58 = multiDirectional51.getConvergenceChecker();
        multiDirectional50.setConvergenceChecker(realConvergenceChecker58);
        double[] doubleArray60 = new double[] {};
        double[][] doubleArray61 = new double[][] { doubleArray60 };
        multiDirectional50.setStartConfiguration(doubleArray61);
        multiDirectional27.setStartConfiguration(doubleArray61);
        multiDirectional25.setStartConfiguration(doubleArray61);
        multiDirectional17.setStartConfiguration(doubleArray61);
        multiDirectional3.setStartConfiguration(doubleArray61);
        multiDirectional2.setStartConfiguration(doubleArray61);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker45);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 0.0f);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        int int4 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) (byte) 10);
        multiDirectional0.setMaxEvaluations((-1));
        int int9 = multiDirectional0.getIterations();
        int int10 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 1, (double) 1);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker16);
        multiDirectional0.setMaxIterations(52);
        multiDirectional0.setMaxIterations(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations((int) ' ');
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction10 = null;
        org.apache.commons.math.optimization.GoalType goalType11 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int15 = multiDirectional14.getEvaluations();
        int int16 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional14.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxEvaluations();
        int int22 = multiDirectional20.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        int int27 = multiDirectional25.getIterations();
        int int28 = multiDirectional25.getMaxEvaluations();
        int int29 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxIterations((-1));
        int int32 = multiDirectional25.getMaxIterations();
        multiDirectional25.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional37.getConvergenceChecker();
        multiDirectional25.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional23.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional20.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional20.setMaxIterations((int) (byte) 100);
        multiDirectional20.setMaxIterations((-1));
        int int46 = multiDirectional20.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int50 = multiDirectional49.getEvaluations();
        int int51 = multiDirectional49.getMaxEvaluations();
        int int52 = multiDirectional49.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxEvaluations();
        int int55 = multiDirectional53.getIterations();
        int int56 = multiDirectional53.getMaxEvaluations();
        int int57 = multiDirectional53.getMaxEvaluations();
        multiDirectional53.setMaxIterations((-1));
        int int60 = multiDirectional53.getIterations();
        int int61 = multiDirectional53.getEvaluations();
        int int62 = multiDirectional53.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int64 = multiDirectional63.getMaxEvaluations();
        multiDirectional63.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker67 = null;
        multiDirectional63.setConvergenceChecker(realConvergenceChecker67);
        double[] doubleArray71 = new double[] { 1.0d, 2147483647 };
        multiDirectional63.setStartConfiguration(doubleArray71);
        int int73 = multiDirectional63.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional74 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int75 = multiDirectional74.getMaxIterations();
        double[] doubleArray76 = new double[] {};
        multiDirectional74.setStartConfiguration(doubleArray76);
        multiDirectional63.setStartConfiguration(doubleArray76);
        multiDirectional53.setStartConfiguration(doubleArray76);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional80 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int81 = multiDirectional80.getMaxEvaluations();
        int int82 = multiDirectional80.getIterations();
        int int83 = multiDirectional80.getMaxEvaluations();
        int int84 = multiDirectional80.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional85 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int86 = multiDirectional85.getMaxIterations();
        double[] doubleArray87 = new double[] {};
        multiDirectional85.setStartConfiguration(doubleArray87);
        multiDirectional80.setStartConfiguration(doubleArray87);
        multiDirectional53.setStartConfiguration(doubleArray87);
        multiDirectional49.setStartConfiguration(doubleArray87);
        multiDirectional20.setStartConfiguration(doubleArray87);
        multiDirectional14.setStartConfiguration(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair94 = multiDirectional0.optimize(multivariateRealFunction10, goalType11, doubleArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2147483647 + "'", int84 == 2147483647);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2147483647 + "'", int86 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        int int6 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional0.getConvergenceChecker();
        int int10 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        int int13 = multiDirectional11.getIterations();
        int int14 = multiDirectional11.getMaxEvaluations();
        int int15 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxIterations((-1));
        int int18 = multiDirectional11.getMaxIterations();
        multiDirectional11.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional23.getConvergenceChecker();
        multiDirectional11.setConvergenceChecker(realConvergenceChecker24);
        int int26 = multiDirectional11.getMaxIterations();
        int int27 = multiDirectional11.getEvaluations();
        int int28 = multiDirectional11.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxIterations();
        double[] doubleArray31 = new double[] {};
        multiDirectional29.setStartConfiguration(doubleArray31);
        multiDirectional11.setStartConfiguration(doubleArray31);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int35 = multiDirectional34.getMaxEvaluations();
        int int36 = multiDirectional34.getIterations();
        int int37 = multiDirectional34.getMaxEvaluations();
        int int38 = multiDirectional34.getMaxEvaluations();
        multiDirectional34.setMaxIterations((-1));
        int int41 = multiDirectional34.getIterations();
        int int42 = multiDirectional34.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = multiDirectional34.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxEvaluations();
        int int46 = multiDirectional44.getIterations();
        int int47 = multiDirectional44.getMaxEvaluations();
        int int48 = multiDirectional44.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxIterations();
        double[] doubleArray51 = new double[] {};
        multiDirectional49.setStartConfiguration(doubleArray51);
        multiDirectional44.setStartConfiguration(doubleArray51);
        multiDirectional34.setStartConfiguration(doubleArray51);
        multiDirectional11.setStartConfiguration(doubleArray51);
        int int56 = multiDirectional11.getMaxEvaluations();
        int int57 = multiDirectional11.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker58 = multiDirectional11.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxIterations();
        multiDirectional59.setMaxEvaluations(0);
        int int63 = multiDirectional59.getMaxIterations();
        int int64 = multiDirectional59.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional68 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int69 = multiDirectional68.getMaxIterations();
        double[] doubleArray70 = new double[] {};
        multiDirectional68.setStartConfiguration(doubleArray70);
        int int72 = multiDirectional68.getMaxEvaluations();
        int int73 = multiDirectional68.getIterations();
        int int74 = multiDirectional68.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker75 = multiDirectional68.getConvergenceChecker();
        multiDirectional67.setConvergenceChecker(realConvergenceChecker75);
        double[] doubleArray77 = new double[] {};
        double[][] doubleArray78 = new double[][] { doubleArray77 };
        multiDirectional67.setStartConfiguration(doubleArray78);
        multiDirectional59.setStartConfiguration(doubleArray78);
        multiDirectional11.setStartConfiguration(doubleArray78);
        multiDirectional0.setStartConfiguration(doubleArray78);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker83 = multiDirectional0.getConvergenceChecker();
        java.lang.Class<?> wildcardClass84 = realConvergenceChecker83.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(realConvergenceChecker83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        int int10 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations(52);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker11);
        org.junit.Assert.assertNotNull(realConvergenceChecker12);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getIterations();
        int int6 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (short) 1);
        int int9 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker10);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxIterations((-1));
        int int16 = multiDirectional9.getMaxIterations();
        multiDirectional9.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional6.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional0.setMaxIterations((-1));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((-1));
        int int11 = multiDirectional4.getIterations();
        multiDirectional4.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker14);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        multiDirectional4.setStartConfiguration(doubleArray24);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        double[] doubleArray34 = new double[] {};
        multiDirectional32.setStartConfiguration(doubleArray34);
        multiDirectional27.setStartConfiguration(doubleArray34);
        multiDirectional4.setStartConfiguration(doubleArray34);
        multiDirectional2.setStartConfiguration(doubleArray34);
        int int39 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = multiDirectional2.getConvergenceChecker();
        int int41 = multiDirectional2.getMaxEvaluations();
        int int42 = multiDirectional2.getIterations();
        int int43 = multiDirectional2.getIterations();
        multiDirectional2.setMaxIterations((int) (short) -1);
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getIterations();
        int int11 = multiDirectional3.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = multiDirectional3.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker12);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        double[] doubleArray16 = new double[] {};
        multiDirectional14.setStartConfiguration(doubleArray16);
        int int18 = multiDirectional14.getMaxEvaluations();
        int int19 = multiDirectional14.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional14.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = null;
        multiDirectional21.setConvergenceChecker(realConvergenceChecker25);
        double[] doubleArray29 = new double[] { 1.0d, 2147483647 };
        multiDirectional21.setStartConfiguration(doubleArray29);
        multiDirectional21.setMaxIterations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int36 = multiDirectional35.getEvaluations();
        int int37 = multiDirectional35.getMaxEvaluations();
        multiDirectional35.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        int int42 = multiDirectional40.getIterations();
        int int43 = multiDirectional40.getMaxEvaluations();
        int int44 = multiDirectional40.getMaxEvaluations();
        multiDirectional40.setMaxIterations((-1));
        int int47 = multiDirectional40.getMaxIterations();
        int int48 = multiDirectional40.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker51 = null;
        multiDirectional49.setConvergenceChecker(realConvergenceChecker51);
        multiDirectional49.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker58 = multiDirectional57.getConvergenceChecker();
        multiDirectional49.setConvergenceChecker(realConvergenceChecker58);
        multiDirectional40.setConvergenceChecker(realConvergenceChecker58);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int65 = multiDirectional64.getMaxIterations();
        double[] doubleArray66 = new double[] {};
        multiDirectional64.setStartConfiguration(doubleArray66);
        int int68 = multiDirectional64.getMaxEvaluations();
        int int69 = multiDirectional64.getIterations();
        int int70 = multiDirectional64.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = multiDirectional64.getConvergenceChecker();
        multiDirectional63.setConvergenceChecker(realConvergenceChecker71);
        double[] doubleArray73 = new double[] {};
        double[][] doubleArray74 = new double[][] { doubleArray73 };
        multiDirectional63.setStartConfiguration(doubleArray74);
        multiDirectional40.setStartConfiguration(doubleArray74);
        multiDirectional35.setStartConfiguration(doubleArray74);
        multiDirectional21.setStartConfiguration(doubleArray74);
        multiDirectional14.setStartConfiguration(doubleArray74);
        multiDirectional2.setStartConfiguration(doubleArray74);
        multiDirectional2.setMaxEvaluations((int) ' ');
        java.lang.Class<?> wildcardClass83 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(100.0d, (double) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray18 = new double[] { 1.0d, 2147483647 };
        multiDirectional10.setStartConfiguration(doubleArray18);
        int int20 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxIterations();
        double[] doubleArray23 = new double[] {};
        multiDirectional21.setStartConfiguration(doubleArray23);
        multiDirectional10.setStartConfiguration(doubleArray23);
        multiDirectional0.setStartConfiguration(doubleArray23);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        double[] doubleArray34 = new double[] {};
        multiDirectional32.setStartConfiguration(doubleArray34);
        multiDirectional27.setStartConfiguration(doubleArray34);
        multiDirectional0.setStartConfiguration(doubleArray34);
        int int38 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 10);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getMaxEvaluations();
        int int3 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((-1));
        int int11 = multiDirectional4.getIterations();
        int int12 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxIterations();
        double[] doubleArray20 = new double[] {};
        multiDirectional18.setStartConfiguration(doubleArray20);
        multiDirectional13.setStartConfiguration(doubleArray20);
        multiDirectional4.setStartConfiguration(doubleArray20);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional4.getConvergenceChecker();
        int int25 = multiDirectional4.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxIterations();
        double[] doubleArray31 = new double[] {};
        multiDirectional29.setStartConfiguration(doubleArray31);
        int int33 = multiDirectional29.getMaxEvaluations();
        int int34 = multiDirectional29.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional29.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        multiDirectional36.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = null;
        multiDirectional36.setConvergenceChecker(realConvergenceChecker40);
        double[] doubleArray44 = new double[] { 1.0d, 2147483647 };
        multiDirectional36.setStartConfiguration(doubleArray44);
        multiDirectional36.setMaxIterations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int51 = multiDirectional50.getEvaluations();
        int int52 = multiDirectional50.getMaxEvaluations();
        multiDirectional50.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxEvaluations();
        int int57 = multiDirectional55.getIterations();
        int int58 = multiDirectional55.getMaxEvaluations();
        int int59 = multiDirectional55.getMaxEvaluations();
        multiDirectional55.setMaxIterations((-1));
        int int62 = multiDirectional55.getMaxIterations();
        int int63 = multiDirectional55.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int65 = multiDirectional64.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker66 = null;
        multiDirectional64.setConvergenceChecker(realConvergenceChecker66);
        multiDirectional64.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional72 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker73 = multiDirectional72.getConvergenceChecker();
        multiDirectional64.setConvergenceChecker(realConvergenceChecker73);
        multiDirectional55.setConvergenceChecker(realConvergenceChecker73);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional78 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional79 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int80 = multiDirectional79.getMaxIterations();
        double[] doubleArray81 = new double[] {};
        multiDirectional79.setStartConfiguration(doubleArray81);
        int int83 = multiDirectional79.getMaxEvaluations();
        int int84 = multiDirectional79.getIterations();
        int int85 = multiDirectional79.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker86 = multiDirectional79.getConvergenceChecker();
        multiDirectional78.setConvergenceChecker(realConvergenceChecker86);
        double[] doubleArray88 = new double[] {};
        double[][] doubleArray89 = new double[][] { doubleArray88 };
        multiDirectional78.setStartConfiguration(doubleArray89);
        multiDirectional55.setStartConfiguration(doubleArray89);
        multiDirectional50.setStartConfiguration(doubleArray89);
        multiDirectional36.setStartConfiguration(doubleArray89);
        multiDirectional29.setStartConfiguration(doubleArray89);
        multiDirectional28.setStartConfiguration(doubleArray89);
        multiDirectional4.setStartConfiguration(doubleArray89);
        multiDirectional0.setStartConfiguration(doubleArray89);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2147483647 + "'", int2 == 2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker73);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker86);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) ' ');
        int int10 = multiDirectional0.getMaxEvaluations();
        int int11 = multiDirectional0.getMaxEvaluations();
        int int12 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional0.getConvergenceChecker();
        int int14 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 'a');
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional0.getConvergenceChecker();
        int int6 = multiDirectional0.getIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 100);
        int int9 = multiDirectional0.getMaxEvaluations();
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray11 = new double[] { 100.0d };
        multiDirectional4.setStartConfiguration(doubleArray11);
        int int13 = multiDirectional4.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        int int18 = multiDirectional16.getIterations();
        int int19 = multiDirectional16.getMaxEvaluations();
        int int20 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxIterations((-1));
        int int23 = multiDirectional16.getMaxIterations();
        multiDirectional16.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional28.getConvergenceChecker();
        multiDirectional16.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional14.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = multiDirectional4.getConvergenceChecker();
        int int34 = multiDirectional4.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional35.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional35.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxIterations();
        double[] doubleArray43 = new double[] {};
        multiDirectional41.setStartConfiguration(doubleArray43);
        int int45 = multiDirectional41.getMaxEvaluations();
        int int46 = multiDirectional41.getMaxIterations();
        int int47 = multiDirectional41.getMaxIterations();
        multiDirectional41.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxEvaluations();
        int int52 = multiDirectional50.getIterations();
        int int53 = multiDirectional50.getMaxEvaluations();
        int int54 = multiDirectional50.getMaxEvaluations();
        multiDirectional50.setMaxIterations((-1));
        int int57 = multiDirectional50.getMaxIterations();
        int int58 = multiDirectional50.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker61 = null;
        multiDirectional59.setConvergenceChecker(realConvergenceChecker61);
        multiDirectional59.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker68 = multiDirectional67.getConvergenceChecker();
        multiDirectional59.setConvergenceChecker(realConvergenceChecker68);
        multiDirectional50.setConvergenceChecker(realConvergenceChecker68);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional73 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional74 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int75 = multiDirectional74.getMaxIterations();
        double[] doubleArray76 = new double[] {};
        multiDirectional74.setStartConfiguration(doubleArray76);
        int int78 = multiDirectional74.getMaxEvaluations();
        int int79 = multiDirectional74.getIterations();
        int int80 = multiDirectional74.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker81 = multiDirectional74.getConvergenceChecker();
        multiDirectional73.setConvergenceChecker(realConvergenceChecker81);
        double[] doubleArray83 = new double[] {};
        double[][] doubleArray84 = new double[][] { doubleArray83 };
        multiDirectional73.setStartConfiguration(doubleArray84);
        multiDirectional50.setStartConfiguration(doubleArray84);
        multiDirectional41.setStartConfiguration(doubleArray84);
        multiDirectional35.setStartConfiguration(doubleArray84);
        multiDirectional4.setStartConfiguration(doubleArray84);
        multiDirectional0.setStartConfiguration(doubleArray84);
        int int91 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertNotNull(realConvergenceChecker33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker68);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        multiDirectional0.setMaxEvaluations((int) (byte) 1);
        int int16 = multiDirectional0.getIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        int int21 = multiDirectional19.getIterations();
        int int22 = multiDirectional19.getMaxEvaluations();
        int int23 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxIterations((-1));
        int int26 = multiDirectional19.getMaxIterations();
        multiDirectional19.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional31.getConvergenceChecker();
        multiDirectional19.setConvergenceChecker(realConvergenceChecker32);
        int int34 = multiDirectional19.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxIterations();
        multiDirectional35.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional35.getConvergenceChecker();
        multiDirectional19.setConvergenceChecker(realConvergenceChecker39);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker39);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        int int7 = multiDirectional0.getMaxIterations();
        int int8 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        double[] doubleArray16 = new double[] {};
        multiDirectional14.setStartConfiguration(doubleArray16);
        multiDirectional9.setStartConfiguration(doubleArray16);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxIterations();
        double[] doubleArray21 = new double[] {};
        multiDirectional19.setStartConfiguration(doubleArray21);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        int int27 = multiDirectional25.getIterations();
        int int28 = multiDirectional25.getMaxEvaluations();
        int int29 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxIterations((-1));
        int int32 = multiDirectional25.getMaxIterations();
        multiDirectional25.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional37.getConvergenceChecker();
        multiDirectional25.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional23.setConvergenceChecker(realConvergenceChecker38);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = multiDirectional23.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = multiDirectional23.getConvergenceChecker();
        multiDirectional19.setConvergenceChecker(realConvergenceChecker42);
        multiDirectional9.setConvergenceChecker(realConvergenceChecker42);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker42);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional0.getConvergenceChecker();
        int int47 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertNotNull(realConvergenceChecker41);
        org.junit.Assert.assertNotNull(realConvergenceChecker42);
        org.junit.Assert.assertNotNull(realConvergenceChecker46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 32 + "'", int47 == 32);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        int int4 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        multiDirectional9.setMaxEvaluations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker14);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        int int26 = multiDirectional16.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxIterations();
        double[] doubleArray29 = new double[] {};
        multiDirectional27.setStartConfiguration(doubleArray29);
        multiDirectional16.setStartConfiguration(doubleArray29);
        multiDirectional12.setStartConfiguration(doubleArray29);
        int int33 = multiDirectional12.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int35 = multiDirectional34.getMaxEvaluations();
        multiDirectional34.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = null;
        multiDirectional34.setConvergenceChecker(realConvergenceChecker38);
        double[] doubleArray42 = new double[] { 1.0d, 2147483647 };
        multiDirectional34.setStartConfiguration(doubleArray42);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = multiDirectional34.getConvergenceChecker();
        multiDirectional34.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = multiDirectional49.getConvergenceChecker();
        multiDirectional34.setConvergenceChecker(realConvergenceChecker50);
        multiDirectional12.setConvergenceChecker(realConvergenceChecker50);
        multiDirectional9.setConvergenceChecker(realConvergenceChecker50);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker50);
        int int55 = multiDirectional0.getMaxIterations();
        int int56 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker44);
        org.junit.Assert.assertNotNull(realConvergenceChecker50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) 10L);
        java.lang.Class<?> wildcardClass3 = multiDirectional2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        int int3 = multiDirectional2.getMaxIterations();
        int int4 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxIterations(2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) ' ');
        int int10 = multiDirectional0.getMaxEvaluations();
        int int11 = multiDirectional0.getMaxIterations();
        int int12 = multiDirectional0.getIterations();
        int int13 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker7);
        double[] doubleArray11 = new double[] { 1.0d, 2147483647 };
        multiDirectional3.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional3.getConvergenceChecker();
        multiDirectional3.setMaxEvaluations((int) (byte) 100);
        multiDirectional3.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker22);
        double[] doubleArray26 = new double[] { 1.0d, 2147483647 };
        multiDirectional18.setStartConfiguration(doubleArray26);
        int int28 = multiDirectional18.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxIterations();
        double[] doubleArray31 = new double[] {};
        multiDirectional29.setStartConfiguration(doubleArray31);
        multiDirectional18.setStartConfiguration(doubleArray31);
        multiDirectional3.setStartConfiguration(doubleArray31);
        multiDirectional2.setStartConfiguration(doubleArray31);
        multiDirectional2.setMaxEvaluations((int) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) ' ');
        int int10 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        int int13 = multiDirectional11.getIterations();
        int int14 = multiDirectional11.getMaxEvaluations();
        int int15 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxIterations((-1));
        int int18 = multiDirectional11.getIterations();
        int int19 = multiDirectional11.getMaxIterations();
        multiDirectional11.setMaxEvaluations(100);
        multiDirectional11.setMaxIterations((int) (short) 10);
        int int24 = multiDirectional11.getMaxIterations();
        multiDirectional11.setMaxIterations(35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        multiDirectional27.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = null;
        multiDirectional27.setConvergenceChecker(realConvergenceChecker31);
        double[] doubleArray35 = new double[] { 1.0d, 2147483647 };
        multiDirectional27.setStartConfiguration(doubleArray35);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional27.getConvergenceChecker();
        multiDirectional27.setMaxEvaluations((int) (byte) 100);
        multiDirectional27.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional42.setConvergenceChecker(realConvergenceChecker46);
        double[] doubleArray50 = new double[] { 1.0d, 2147483647 };
        multiDirectional42.setStartConfiguration(doubleArray50);
        int int52 = multiDirectional42.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxIterations();
        double[] doubleArray55 = new double[] {};
        multiDirectional53.setStartConfiguration(doubleArray55);
        multiDirectional42.setStartConfiguration(doubleArray55);
        multiDirectional27.setStartConfiguration(doubleArray55);
        multiDirectional11.setStartConfiguration(doubleArray55);
        multiDirectional0.setStartConfiguration(doubleArray55);
        int int61 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional0.getConvergenceChecker();
        int int30 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        int int33 = multiDirectional31.getIterations();
        int int34 = multiDirectional31.getMaxEvaluations();
        int int35 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxIterations((-1));
        int int38 = multiDirectional31.getIterations();
        int int39 = multiDirectional31.getEvaluations();
        int int40 = multiDirectional31.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = multiDirectional31.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker41);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker41);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional2.getConvergenceChecker();
        int int8 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getIterations();
        double[] doubleArray11 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional0.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getIterations();
        int int21 = multiDirectional13.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional13.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        multiDirectional23.setStartConfiguration(doubleArray30);
        multiDirectional13.setStartConfiguration(doubleArray30);
        multiDirectional0.setStartConfiguration(doubleArray30);
        multiDirectional0.setMaxEvaluations((int) '#');
        int int37 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional0.getConvergenceChecker();
        java.lang.Class<?> wildcardClass39 = realConvergenceChecker38.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 10.0f);
        int int3 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = multiDirectional4.getConvergenceChecker();
        multiDirectional4.setMaxEvaluations((int) (byte) 100);
        int int17 = multiDirectional4.getEvaluations();
        int int18 = multiDirectional4.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        int int21 = multiDirectional19.getIterations();
        int int22 = multiDirectional19.getMaxEvaluations();
        int int23 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxIterations((-1));
        int int26 = multiDirectional19.getMaxIterations();
        multiDirectional19.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional31.getConvergenceChecker();
        multiDirectional19.setConvergenceChecker(realConvergenceChecker32);
        int int34 = multiDirectional19.getMaxIterations();
        int int35 = multiDirectional19.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int39 = multiDirectional38.getEvaluations();
        int int40 = multiDirectional38.getMaxEvaluations();
        multiDirectional38.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxEvaluations();
        int int45 = multiDirectional43.getIterations();
        int int46 = multiDirectional43.getMaxEvaluations();
        int int47 = multiDirectional43.getMaxEvaluations();
        multiDirectional43.setMaxIterations((-1));
        int int50 = multiDirectional43.getMaxIterations();
        int int51 = multiDirectional43.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = null;
        multiDirectional52.setConvergenceChecker(realConvergenceChecker54);
        multiDirectional52.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker61 = multiDirectional60.getConvergenceChecker();
        multiDirectional52.setConvergenceChecker(realConvergenceChecker61);
        multiDirectional43.setConvergenceChecker(realConvergenceChecker61);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxIterations();
        double[] doubleArray69 = new double[] {};
        multiDirectional67.setStartConfiguration(doubleArray69);
        int int71 = multiDirectional67.getMaxEvaluations();
        int int72 = multiDirectional67.getIterations();
        int int73 = multiDirectional67.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker74 = multiDirectional67.getConvergenceChecker();
        multiDirectional66.setConvergenceChecker(realConvergenceChecker74);
        double[] doubleArray76 = new double[] {};
        double[][] doubleArray77 = new double[][] { doubleArray76 };
        multiDirectional66.setStartConfiguration(doubleArray77);
        multiDirectional43.setStartConfiguration(doubleArray77);
        multiDirectional38.setStartConfiguration(doubleArray77);
        multiDirectional19.setStartConfiguration(doubleArray77);
        multiDirectional4.setStartConfiguration(doubleArray77);
        multiDirectional2.setStartConfiguration(doubleArray77);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker84 = multiDirectional2.getConvergenceChecker();
        java.lang.Class<?> wildcardClass85 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker61);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(realConvergenceChecker84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getIterations();
        double[] doubleArray11 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional0.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getMaxIterations();
        multiDirectional13.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional25.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker26);
        int int28 = multiDirectional13.getMaxIterations();
        int int29 = multiDirectional13.getEvaluations();
        int int30 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxIterations();
        double[] doubleArray35 = new double[] {};
        multiDirectional33.setStartConfiguration(doubleArray35);
        int int37 = multiDirectional33.getMaxEvaluations();
        int int38 = multiDirectional33.getMaxIterations();
        int int39 = multiDirectional33.getMaxIterations();
        multiDirectional33.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        int int44 = multiDirectional42.getIterations();
        int int45 = multiDirectional42.getMaxEvaluations();
        int int46 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxIterations((-1));
        int int49 = multiDirectional42.getMaxIterations();
        int int50 = multiDirectional42.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = null;
        multiDirectional51.setConvergenceChecker(realConvergenceChecker53);
        multiDirectional51.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = multiDirectional59.getConvergenceChecker();
        multiDirectional51.setConvergenceChecker(realConvergenceChecker60);
        multiDirectional42.setConvergenceChecker(realConvergenceChecker60);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int67 = multiDirectional66.getMaxIterations();
        double[] doubleArray68 = new double[] {};
        multiDirectional66.setStartConfiguration(doubleArray68);
        int int70 = multiDirectional66.getMaxEvaluations();
        int int71 = multiDirectional66.getIterations();
        int int72 = multiDirectional66.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker73 = multiDirectional66.getConvergenceChecker();
        multiDirectional65.setConvergenceChecker(realConvergenceChecker73);
        double[] doubleArray75 = new double[] {};
        double[][] doubleArray76 = new double[][] { doubleArray75 };
        multiDirectional65.setStartConfiguration(doubleArray76);
        multiDirectional42.setStartConfiguration(doubleArray76);
        multiDirectional33.setStartConfiguration(doubleArray76);
        multiDirectional13.setStartConfiguration(doubleArray76);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker81 = multiDirectional13.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker81);
        multiDirectional0.setMaxIterations(35);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(realConvergenceChecker81);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10.0f, (double) (short) 1);
        multiDirectional2.setMaxIterations((int) (byte) 100);
        int int5 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, 0.0d);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional8.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker9);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) ' ');
        multiDirectional13.setMaxEvaluations((-1));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        int int18 = multiDirectional16.getIterations();
        int int19 = multiDirectional16.getMaxEvaluations();
        int int20 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxIterations((-1));
        int int23 = multiDirectional16.getIterations();
        int int24 = multiDirectional16.getEvaluations();
        int int25 = multiDirectional16.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = null;
        multiDirectional26.setConvergenceChecker(realConvergenceChecker30);
        double[] doubleArray34 = new double[] { 1.0d, 2147483647 };
        multiDirectional26.setStartConfiguration(doubleArray34);
        int int36 = multiDirectional26.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxIterations();
        double[] doubleArray39 = new double[] {};
        multiDirectional37.setStartConfiguration(doubleArray39);
        multiDirectional26.setStartConfiguration(doubleArray39);
        multiDirectional16.setStartConfiguration(doubleArray39);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxEvaluations();
        int int45 = multiDirectional43.getIterations();
        int int46 = multiDirectional43.getMaxEvaluations();
        int int47 = multiDirectional43.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxIterations();
        double[] doubleArray50 = new double[] {};
        multiDirectional48.setStartConfiguration(doubleArray50);
        multiDirectional43.setStartConfiguration(doubleArray50);
        multiDirectional16.setStartConfiguration(doubleArray50);
        multiDirectional13.setStartConfiguration(doubleArray50);
        multiDirectional2.setStartConfiguration(doubleArray50);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        int int5 = multiDirectional2.getMaxEvaluations();
        int int6 = multiDirectional2.getMaxEvaluations();
        int int7 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker12);
        double[] doubleArray16 = new double[] { 1.0d, 2147483647 };
        multiDirectional8.setStartConfiguration(doubleArray16);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional8.getConvergenceChecker();
        multiDirectional8.setMaxEvaluations((int) (byte) 100);
        int int21 = multiDirectional8.getEvaluations();
        int int22 = multiDirectional8.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getMaxIterations();
        multiDirectional23.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional35.getConvergenceChecker();
        multiDirectional23.setConvergenceChecker(realConvergenceChecker36);
        int int38 = multiDirectional23.getMaxIterations();
        int int39 = multiDirectional23.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int43 = multiDirectional42.getEvaluations();
        int int44 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxEvaluations();
        int int49 = multiDirectional47.getIterations();
        int int50 = multiDirectional47.getMaxEvaluations();
        int int51 = multiDirectional47.getMaxEvaluations();
        multiDirectional47.setMaxIterations((-1));
        int int54 = multiDirectional47.getMaxIterations();
        int int55 = multiDirectional47.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker58 = null;
        multiDirectional56.setConvergenceChecker(realConvergenceChecker58);
        multiDirectional56.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker65 = multiDirectional64.getConvergenceChecker();
        multiDirectional56.setConvergenceChecker(realConvergenceChecker65);
        multiDirectional47.setConvergenceChecker(realConvergenceChecker65);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int72 = multiDirectional71.getMaxIterations();
        double[] doubleArray73 = new double[] {};
        multiDirectional71.setStartConfiguration(doubleArray73);
        int int75 = multiDirectional71.getMaxEvaluations();
        int int76 = multiDirectional71.getIterations();
        int int77 = multiDirectional71.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker78 = multiDirectional71.getConvergenceChecker();
        multiDirectional70.setConvergenceChecker(realConvergenceChecker78);
        double[] doubleArray80 = new double[] {};
        double[][] doubleArray81 = new double[][] { doubleArray80 };
        multiDirectional70.setStartConfiguration(doubleArray81);
        multiDirectional47.setStartConfiguration(doubleArray81);
        multiDirectional42.setStartConfiguration(doubleArray81);
        multiDirectional23.setStartConfiguration(doubleArray81);
        multiDirectional8.setStartConfiguration(doubleArray81);
        multiDirectional2.setStartConfiguration(doubleArray81);
        multiDirectional2.setMaxEvaluations((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(100.0d, (double) (short) 0);
        multiDirectional2.setMaxEvaluations((-1));
        int int5 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getIterations();
        double[] doubleArray11 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional0.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getIterations();
        int int21 = multiDirectional13.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional13.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        multiDirectional23.setStartConfiguration(doubleArray30);
        multiDirectional13.setStartConfiguration(doubleArray30);
        multiDirectional0.setStartConfiguration(doubleArray30);
        multiDirectional0.setMaxEvaluations((int) '#');
        int int37 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations((int) (byte) 100);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction40 = null;
        org.apache.commons.math.optimization.GoalType goalType41 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        int int45 = multiDirectional44.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxEvaluations();
        int int48 = multiDirectional46.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxEvaluations();
        int int53 = multiDirectional51.getIterations();
        int int54 = multiDirectional51.getMaxEvaluations();
        int int55 = multiDirectional51.getMaxEvaluations();
        multiDirectional51.setMaxIterations((-1));
        int int58 = multiDirectional51.getMaxIterations();
        multiDirectional51.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = multiDirectional63.getConvergenceChecker();
        multiDirectional51.setConvergenceChecker(realConvergenceChecker64);
        multiDirectional49.setConvergenceChecker(realConvergenceChecker64);
        multiDirectional46.setConvergenceChecker(realConvergenceChecker64);
        multiDirectional44.setConvergenceChecker(realConvergenceChecker64);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker69 = multiDirectional44.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional72 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (short) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int76 = multiDirectional75.getMaxEvaluations();
        int int77 = multiDirectional75.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional78 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int79 = multiDirectional78.getMaxEvaluations();
        multiDirectional78.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker82 = null;
        multiDirectional78.setConvergenceChecker(realConvergenceChecker82);
        double[] doubleArray85 = new double[] { 100.0d };
        multiDirectional78.setStartConfiguration(doubleArray85);
        multiDirectional75.setStartConfiguration(doubleArray85);
        multiDirectional72.setStartConfiguration(doubleArray85);
        multiDirectional44.setStartConfiguration(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair90 = multiDirectional0.optimize(multivariateRealFunction40, goalType41, doubleArray85);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker64);
        org.junit.Assert.assertNotNull(realConvergenceChecker69);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2147483647 + "'", int79 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[100.0]");
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) 32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        int int7 = multiDirectional0.getMaxIterations();
        int int8 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        double[] doubleArray16 = new double[] {};
        multiDirectional14.setStartConfiguration(doubleArray16);
        multiDirectional9.setStartConfiguration(doubleArray16);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxIterations();
        double[] doubleArray21 = new double[] {};
        multiDirectional19.setStartConfiguration(doubleArray21);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        int int27 = multiDirectional25.getIterations();
        int int28 = multiDirectional25.getMaxEvaluations();
        int int29 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxIterations((-1));
        int int32 = multiDirectional25.getMaxIterations();
        multiDirectional25.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional37.getConvergenceChecker();
        multiDirectional25.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional23.setConvergenceChecker(realConvergenceChecker38);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = multiDirectional23.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = multiDirectional23.getConvergenceChecker();
        multiDirectional19.setConvergenceChecker(realConvergenceChecker42);
        multiDirectional9.setConvergenceChecker(realConvergenceChecker42);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker42);
        int int46 = multiDirectional0.getEvaluations();
        double[][] doubleArray47 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiDirectional0.setStartConfiguration(doubleArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertNotNull(realConvergenceChecker41);
        org.junit.Assert.assertNotNull(realConvergenceChecker42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) (byte) 1);
        multiDirectional2.setMaxEvaluations(1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int9 = multiDirectional8.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        int int23 = multiDirectional21.getIterations();
        int int24 = multiDirectional21.getMaxEvaluations();
        int int25 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxIterations((-1));
        int int28 = multiDirectional21.getMaxIterations();
        multiDirectional21.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional33.getConvergenceChecker();
        multiDirectional21.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional19.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional18.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional12.setConvergenceChecker(realConvergenceChecker34);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxEvaluations();
        multiDirectional45.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = null;
        multiDirectional45.setConvergenceChecker(realConvergenceChecker49);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxEvaluations();
        multiDirectional51.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = null;
        multiDirectional51.setConvergenceChecker(realConvergenceChecker55);
        double[] doubleArray59 = new double[] { 1.0d, 2147483647 };
        multiDirectional51.setStartConfiguration(doubleArray59);
        multiDirectional45.setStartConfiguration(doubleArray59);
        multiDirectional44.setStartConfiguration(doubleArray59);
        multiDirectional41.setStartConfiguration(doubleArray59);
        multiDirectional12.setStartConfiguration(doubleArray59);
        multiDirectional8.setStartConfiguration(doubleArray59);
        multiDirectional2.setStartConfiguration(doubleArray59);
        int int67 = multiDirectional2.getIterations();
        multiDirectional2.setMaxEvaluations((int) 'a');
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxIterations();
        int int5 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker6);
        multiDirectional0.setMaxIterations((int) (short) 10);
        int int10 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((-1));
        int int11 = multiDirectional4.getIterations();
        multiDirectional4.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker14);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        multiDirectional4.setStartConfiguration(doubleArray24);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        double[] doubleArray34 = new double[] {};
        multiDirectional32.setStartConfiguration(doubleArray34);
        multiDirectional27.setStartConfiguration(doubleArray34);
        multiDirectional4.setStartConfiguration(doubleArray34);
        multiDirectional2.setStartConfiguration(doubleArray34);
        int int39 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxEvaluations((int) (short) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker42);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxIterations(100);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction8 = null;
        org.apache.commons.math.optimization.GoalType goalType9 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray18 = new double[] { 1.0d, 2147483647 };
        multiDirectional10.setStartConfiguration(doubleArray18);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional10.getConvergenceChecker();
        multiDirectional10.setMaxEvaluations((int) (byte) 100);
        multiDirectional10.setMaxIterations(35);
        int int25 = multiDirectional10.getEvaluations();
        int int26 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = null;
        multiDirectional30.setConvergenceChecker(realConvergenceChecker34);
        double[] doubleArray38 = new double[] { 1.0d, 2147483647 };
        multiDirectional30.setStartConfiguration(doubleArray38);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = multiDirectional30.getConvergenceChecker();
        multiDirectional30.setMaxEvaluations((int) (byte) 100);
        multiDirectional30.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxEvaluations();
        multiDirectional45.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = null;
        multiDirectional45.setConvergenceChecker(realConvergenceChecker49);
        double[] doubleArray53 = new double[] { 1.0d, 2147483647 };
        multiDirectional45.setStartConfiguration(doubleArray53);
        int int55 = multiDirectional45.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxIterations();
        double[] doubleArray58 = new double[] {};
        multiDirectional56.setStartConfiguration(doubleArray58);
        multiDirectional45.setStartConfiguration(doubleArray58);
        multiDirectional30.setStartConfiguration(doubleArray58);
        multiDirectional29.setStartConfiguration(doubleArray58);
        int int63 = multiDirectional29.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int65 = multiDirectional64.getMaxIterations();
        double[] doubleArray66 = new double[] {};
        multiDirectional64.setStartConfiguration(doubleArray66);
        int int68 = multiDirectional64.getMaxEvaluations();
        int int69 = multiDirectional64.getIterations();
        double[] doubleArray75 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional64.setStartConfiguration(doubleArray75);
        multiDirectional29.setStartConfiguration(doubleArray75);
        multiDirectional10.setStartConfiguration(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair79 = multiDirectional0.optimize(multivariateRealFunction8, goalType9, doubleArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int6 = multiDirectional0.getEvaluations();
        int int7 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        int int4 = multiDirectional2.getEvaluations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction5 = null;
        org.apache.commons.math.optimization.GoalType goalType6 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        int int10 = multiDirectional9.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        int int13 = multiDirectional11.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        int int18 = multiDirectional16.getIterations();
        int int19 = multiDirectional16.getMaxEvaluations();
        int int20 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxIterations((-1));
        int int23 = multiDirectional16.getMaxIterations();
        multiDirectional16.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional28.getConvergenceChecker();
        multiDirectional16.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional14.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional9.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional9.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (short) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int41 = multiDirectional40.getMaxEvaluations();
        int int42 = multiDirectional40.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxEvaluations();
        multiDirectional43.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker47 = null;
        multiDirectional43.setConvergenceChecker(realConvergenceChecker47);
        double[] doubleArray50 = new double[] { 100.0d };
        multiDirectional43.setStartConfiguration(doubleArray50);
        multiDirectional40.setStartConfiguration(doubleArray50);
        multiDirectional37.setStartConfiguration(doubleArray50);
        multiDirectional9.setStartConfiguration(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair55 = multiDirectional2.optimize(multivariateRealFunction5, goalType6, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]");
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        int int31 = multiDirectional29.getIterations();
        int int32 = multiDirectional29.getMaxEvaluations();
        int int33 = multiDirectional29.getMaxEvaluations();
        multiDirectional29.setMaxIterations((-1));
        int int36 = multiDirectional29.getIterations();
        multiDirectional29.setMaxIterations((int) '#');
        multiDirectional29.setMaxEvaluations(0);
        multiDirectional29.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional45.getConvergenceChecker();
        multiDirectional29.setConvergenceChecker(realConvergenceChecker46);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker46);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxEvaluations();
        multiDirectional49.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = null;
        multiDirectional49.setConvergenceChecker(realConvergenceChecker53);
        double[] doubleArray57 = new double[] { 1.0d, 2147483647 };
        multiDirectional49.setStartConfiguration(doubleArray57);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker59 = multiDirectional49.getConvergenceChecker();
        multiDirectional49.setMaxEvaluations((int) (byte) 100);
        multiDirectional49.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = multiDirectional49.getConvergenceChecker();
        int int65 = multiDirectional49.getEvaluations();
        int int66 = multiDirectional49.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxEvaluations();
        int int69 = multiDirectional67.getIterations();
        int int70 = multiDirectional67.getMaxEvaluations();
        int int71 = multiDirectional67.getMaxEvaluations();
        multiDirectional67.setMaxIterations((-1));
        int int74 = multiDirectional67.getIterations();
        int int75 = multiDirectional67.getEvaluations();
        int int76 = multiDirectional67.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional77 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int78 = multiDirectional77.getMaxEvaluations();
        multiDirectional77.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker81 = null;
        multiDirectional77.setConvergenceChecker(realConvergenceChecker81);
        double[] doubleArray85 = new double[] { 1.0d, 2147483647 };
        multiDirectional77.setStartConfiguration(doubleArray85);
        int int87 = multiDirectional77.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional88 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int89 = multiDirectional88.getMaxIterations();
        double[] doubleArray90 = new double[] {};
        multiDirectional88.setStartConfiguration(doubleArray90);
        multiDirectional77.setStartConfiguration(doubleArray90);
        multiDirectional67.setStartConfiguration(doubleArray90);
        multiDirectional49.setStartConfiguration(doubleArray90);
        multiDirectional0.setStartConfiguration(doubleArray90);
        multiDirectional0.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker98 = multiDirectional0.getConvergenceChecker();
        java.lang.Class<?> wildcardClass99 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker59);
        org.junit.Assert.assertNull(realConvergenceChecker64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2147483647 + "'", int89 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 0, (double) (short) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker5);
        multiDirectional3.setMaxEvaluations((int) ' ');
        int int9 = multiDirectional3.getEvaluations();
        int int10 = multiDirectional3.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional13.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional16.getConvergenceChecker();
        multiDirectional16.setMaxEvaluations((int) (byte) 100);
        multiDirectional16.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = multiDirectional16.getConvergenceChecker();
        int int32 = multiDirectional16.getEvaluations();
        int int33 = multiDirectional16.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int35 = multiDirectional34.getMaxEvaluations();
        int int36 = multiDirectional34.getIterations();
        int int37 = multiDirectional34.getMaxEvaluations();
        int int38 = multiDirectional34.getMaxEvaluations();
        multiDirectional34.setMaxIterations((-1));
        int int41 = multiDirectional34.getIterations();
        int int42 = multiDirectional34.getEvaluations();
        int int43 = multiDirectional34.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxEvaluations();
        multiDirectional44.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = null;
        multiDirectional44.setConvergenceChecker(realConvergenceChecker48);
        double[] doubleArray52 = new double[] { 1.0d, 2147483647 };
        multiDirectional44.setStartConfiguration(doubleArray52);
        int int54 = multiDirectional44.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxIterations();
        double[] doubleArray57 = new double[] {};
        multiDirectional55.setStartConfiguration(doubleArray57);
        multiDirectional44.setStartConfiguration(doubleArray57);
        multiDirectional34.setStartConfiguration(doubleArray57);
        multiDirectional16.setStartConfiguration(doubleArray57);
        multiDirectional13.setStartConfiguration(doubleArray57);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional65.setMaxEvaluations((int) (byte) 0);
        double[] doubleArray70 = new double[] { (-1.0f), ' ' };
        multiDirectional65.setStartConfiguration(doubleArray70);
        multiDirectional13.setStartConfiguration(doubleArray70);
        multiDirectional3.setStartConfiguration(doubleArray70);
        multiDirectional2.setStartConfiguration(doubleArray70);
        int int75 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxIterations(2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker26);
        org.junit.Assert.assertNull(realConvergenceChecker31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 32.0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 0, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker16);
        int int18 = multiDirectional3.getMaxIterations();
        int int19 = multiDirectional3.getEvaluations();
        int int20 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxIterations();
        double[] doubleArray25 = new double[] {};
        multiDirectional23.setStartConfiguration(doubleArray25);
        int int27 = multiDirectional23.getMaxEvaluations();
        int int28 = multiDirectional23.getMaxIterations();
        int int29 = multiDirectional23.getMaxIterations();
        multiDirectional23.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxEvaluations();
        int int34 = multiDirectional32.getIterations();
        int int35 = multiDirectional32.getMaxEvaluations();
        int int36 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxIterations((-1));
        int int39 = multiDirectional32.getMaxIterations();
        int int40 = multiDirectional32.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = null;
        multiDirectional41.setConvergenceChecker(realConvergenceChecker43);
        multiDirectional41.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = multiDirectional49.getConvergenceChecker();
        multiDirectional41.setConvergenceChecker(realConvergenceChecker50);
        multiDirectional32.setConvergenceChecker(realConvergenceChecker50);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxIterations();
        double[] doubleArray58 = new double[] {};
        multiDirectional56.setStartConfiguration(doubleArray58);
        int int60 = multiDirectional56.getMaxEvaluations();
        int int61 = multiDirectional56.getIterations();
        int int62 = multiDirectional56.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker63 = multiDirectional56.getConvergenceChecker();
        multiDirectional55.setConvergenceChecker(realConvergenceChecker63);
        double[] doubleArray65 = new double[] {};
        double[][] doubleArray66 = new double[][] { doubleArray65 };
        multiDirectional55.setStartConfiguration(doubleArray66);
        multiDirectional32.setStartConfiguration(doubleArray66);
        multiDirectional23.setStartConfiguration(doubleArray66);
        multiDirectional3.setStartConfiguration(doubleArray66);
        multiDirectional2.setStartConfiguration(doubleArray66);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getIterations();
        int int5 = multiDirectional2.getMaxIterations();
        int int6 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((-1));
        int int11 = multiDirectional4.getIterations();
        multiDirectional4.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker14);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        multiDirectional4.setStartConfiguration(doubleArray24);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        double[] doubleArray34 = new double[] {};
        multiDirectional32.setStartConfiguration(doubleArray34);
        multiDirectional27.setStartConfiguration(doubleArray34);
        multiDirectional4.setStartConfiguration(doubleArray34);
        multiDirectional2.setStartConfiguration(doubleArray34);
        int int39 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxEvaluations((int) (short) 1);
        int int42 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations(1);
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        int int14 = multiDirectional12.getEvaluations();
        multiDirectional12.setMaxIterations((int) (short) 1);
        int int17 = multiDirectional12.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int21 = multiDirectional20.getEvaluations();
        int int22 = multiDirectional20.getMaxEvaluations();
        multiDirectional20.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker29);
        double[] doubleArray33 = new double[] { 1.0d, 2147483647 };
        multiDirectional25.setStartConfiguration(doubleArray33);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional25.getConvergenceChecker();
        multiDirectional25.setMaxEvaluations((int) (byte) 100);
        multiDirectional25.setMaxIterations(35);
        double[] doubleArray41 = new double[] { 100.0d };
        multiDirectional25.setStartConfiguration(doubleArray41);
        multiDirectional20.setStartConfiguration(doubleArray41);
        multiDirectional12.setStartConfiguration(doubleArray41);
        multiDirectional0.setStartConfiguration(doubleArray41);
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray18 = new double[] { 1.0d, 2147483647 };
        multiDirectional10.setStartConfiguration(doubleArray18);
        int int20 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxIterations();
        double[] doubleArray23 = new double[] {};
        multiDirectional21.setStartConfiguration(doubleArray23);
        multiDirectional10.setStartConfiguration(doubleArray23);
        multiDirectional0.setStartConfiguration(doubleArray23);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional0.getConvergenceChecker();
        int int28 = multiDirectional0.getEvaluations();
        int int29 = multiDirectional0.getMaxIterations();
        int int30 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getEvaluations();
        int int15 = multiDirectional0.getIterations();
        int int16 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getIterations();
        int int6 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (short) 1);
        multiDirectional0.setMaxEvaluations(35);
        multiDirectional0.setMaxIterations(1);
        int int13 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional5.setConvergenceChecker(realConvergenceChecker9);
        double[] doubleArray12 = new double[] { 100.0d };
        multiDirectional5.setStartConfiguration(doubleArray12);
        multiDirectional2.setStartConfiguration(doubleArray12);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, (double) 10.0f);
        int int18 = multiDirectional17.getMaxEvaluations();
        multiDirectional17.setMaxEvaluations((int) ' ');
        multiDirectional17.setMaxIterations((int) (short) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        int int28 = multiDirectional26.getIterations();
        int int29 = multiDirectional26.getMaxEvaluations();
        int int30 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxIterations((-1));
        int int33 = multiDirectional26.getIterations();
        multiDirectional26.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = null;
        multiDirectional26.setConvergenceChecker(realConvergenceChecker36);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxEvaluations();
        multiDirectional38.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = null;
        multiDirectional38.setConvergenceChecker(realConvergenceChecker42);
        double[] doubleArray46 = new double[] { 1.0d, 2147483647 };
        multiDirectional38.setStartConfiguration(doubleArray46);
        multiDirectional26.setStartConfiguration(doubleArray46);
        multiDirectional25.setStartConfiguration(doubleArray46);
        multiDirectional17.setStartConfiguration(doubleArray46);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxEvaluations();
        multiDirectional51.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = null;
        multiDirectional51.setConvergenceChecker(realConvergenceChecker55);
        double[] doubleArray59 = new double[] { 1.0d, 2147483647 };
        multiDirectional51.setStartConfiguration(doubleArray59);
        multiDirectional51.setMaxIterations((int) (byte) 100);
        int int63 = multiDirectional51.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional66.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional74 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxIterations();
        double[] doubleArray77 = new double[] {};
        multiDirectional75.setStartConfiguration(doubleArray77);
        int int79 = multiDirectional75.getMaxEvaluations();
        int int80 = multiDirectional75.getIterations();
        int int81 = multiDirectional75.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker82 = multiDirectional75.getConvergenceChecker();
        multiDirectional74.setConvergenceChecker(realConvergenceChecker82);
        double[] doubleArray84 = new double[] {};
        double[][] doubleArray85 = new double[][] { doubleArray84 };
        multiDirectional74.setStartConfiguration(doubleArray85);
        multiDirectional71.setStartConfiguration(doubleArray85);
        multiDirectional66.setStartConfiguration(doubleArray85);
        multiDirectional51.setStartConfiguration(doubleArray85);
        multiDirectional17.setStartConfiguration(doubleArray85);
        multiDirectional2.setStartConfiguration(doubleArray85);
        int int92 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2147483647 + "'", int79 == 2147483647);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker82);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2147483647 + "'", int92 == 2147483647);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        multiDirectional0.setMaxEvaluations((int) '4');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker18);
        double[] doubleArray22 = new double[] { 1.0d, 2147483647 };
        multiDirectional14.setStartConfiguration(doubleArray22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional14.getConvergenceChecker();
        multiDirectional14.setMaxEvaluations((int) (byte) 100);
        multiDirectional14.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional14.getConvergenceChecker();
        int int30 = multiDirectional14.getEvaluations();
        int int31 = multiDirectional14.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxEvaluations();
        int int34 = multiDirectional32.getIterations();
        int int35 = multiDirectional32.getMaxEvaluations();
        int int36 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxIterations((-1));
        int int39 = multiDirectional32.getIterations();
        int int40 = multiDirectional32.getEvaluations();
        int int41 = multiDirectional32.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional42.setConvergenceChecker(realConvergenceChecker46);
        double[] doubleArray50 = new double[] { 1.0d, 2147483647 };
        multiDirectional42.setStartConfiguration(doubleArray50);
        int int52 = multiDirectional42.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxIterations();
        double[] doubleArray55 = new double[] {};
        multiDirectional53.setStartConfiguration(doubleArray55);
        multiDirectional42.setStartConfiguration(doubleArray55);
        multiDirectional32.setStartConfiguration(doubleArray55);
        multiDirectional14.setStartConfiguration(doubleArray55);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int61 = multiDirectional60.getMaxEvaluations();
        multiDirectional60.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = null;
        multiDirectional60.setConvergenceChecker(realConvergenceChecker64);
        double[] doubleArray68 = new double[] { 1.0d, 2147483647 };
        multiDirectional60.setStartConfiguration(doubleArray68);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker70 = multiDirectional60.getConvergenceChecker();
        multiDirectional60.setMaxEvaluations((int) (byte) 100);
        multiDirectional60.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxEvaluations();
        multiDirectional75.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker79 = null;
        multiDirectional75.setConvergenceChecker(realConvergenceChecker79);
        double[] doubleArray83 = new double[] { 1.0d, 2147483647 };
        multiDirectional75.setStartConfiguration(doubleArray83);
        int int85 = multiDirectional75.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional86 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int87 = multiDirectional86.getMaxIterations();
        double[] doubleArray88 = new double[] {};
        multiDirectional86.setStartConfiguration(doubleArray88);
        multiDirectional75.setStartConfiguration(doubleArray88);
        multiDirectional60.setStartConfiguration(doubleArray88);
        multiDirectional14.setStartConfiguration(doubleArray88);
        multiDirectional0.setStartConfiguration(doubleArray88);
        int int94 = multiDirectional0.getIterations();
        int int95 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker24);
        org.junit.Assert.assertNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        double[] doubleArray17 = new double[] {};
        multiDirectional15.setStartConfiguration(doubleArray17);
        multiDirectional4.setStartConfiguration(doubleArray17);
        multiDirectional0.setStartConfiguration(doubleArray17);
        int int21 = multiDirectional0.getMaxIterations();
        int int22 = multiDirectional0.getEvaluations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction23 = null;
        org.apache.commons.math.optimization.GoalType goalType24 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional25.setMaxEvaluations((int) ' ');
        int int31 = multiDirectional25.getEvaluations();
        multiDirectional25.setMaxEvaluations(1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int37 = multiDirectional36.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxEvaluations();
        multiDirectional38.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = null;
        multiDirectional38.setConvergenceChecker(realConvergenceChecker42);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxEvaluations();
        multiDirectional44.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = null;
        multiDirectional44.setConvergenceChecker(realConvergenceChecker48);
        double[] doubleArray52 = new double[] { 1.0d, 2147483647 };
        multiDirectional44.setStartConfiguration(doubleArray52);
        multiDirectional38.setStartConfiguration(doubleArray52);
        multiDirectional36.setStartConfiguration(doubleArray52);
        multiDirectional25.setStartConfiguration(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair57 = multiDirectional0.optimize(multivariateRealFunction23, goalType24, doubleArray52);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        multiDirectional2.setMaxIterations((int) (byte) -1);
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        int int6 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations(32);
        multiDirectional0.setMaxEvaluations((-1));
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxIterations();
        double[] doubleArray19 = new double[] {};
        multiDirectional17.setStartConfiguration(doubleArray19);
        int int21 = multiDirectional17.getMaxEvaluations();
        int int22 = multiDirectional17.getMaxIterations();
        int int23 = multiDirectional17.getMaxIterations();
        multiDirectional17.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional17.getConvergenceChecker();
        multiDirectional17.setMaxEvaluations(0);
        multiDirectional17.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = multiDirectional17.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker31);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional33.setConvergenceChecker(realConvergenceChecker37);
        double[] doubleArray40 = new double[] { 100.0d };
        multiDirectional33.setStartConfiguration(doubleArray40);
        multiDirectional0.setStartConfiguration(doubleArray40);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertNotNull(realConvergenceChecker31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxIterations(35);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional0.getConvergenceChecker();
        int int16 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 35, (double) 1.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxEvaluations();
        multiDirectional20.setMaxIterations((int) (byte) 0);
        int int24 = multiDirectional20.getEvaluations();
        int int25 = multiDirectional20.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional20.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = multiDirectional29.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        int int33 = multiDirectional31.getIterations();
        int int34 = multiDirectional31.getMaxEvaluations();
        int int35 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxIterations((-1));
        int int38 = multiDirectional31.getMaxIterations();
        int int39 = multiDirectional31.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = null;
        multiDirectional40.setConvergenceChecker(realConvergenceChecker42);
        multiDirectional40.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = multiDirectional48.getConvergenceChecker();
        multiDirectional40.setConvergenceChecker(realConvergenceChecker49);
        multiDirectional31.setConvergenceChecker(realConvergenceChecker49);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxIterations();
        double[] doubleArray57 = new double[] {};
        multiDirectional55.setStartConfiguration(doubleArray57);
        int int59 = multiDirectional55.getMaxEvaluations();
        int int60 = multiDirectional55.getIterations();
        int int61 = multiDirectional55.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = multiDirectional55.getConvergenceChecker();
        multiDirectional54.setConvergenceChecker(realConvergenceChecker62);
        double[] doubleArray64 = new double[] {};
        double[][] doubleArray65 = new double[][] { doubleArray64 };
        multiDirectional54.setStartConfiguration(doubleArray65);
        multiDirectional31.setStartConfiguration(doubleArray65);
        multiDirectional29.setStartConfiguration(doubleArray65);
        multiDirectional20.setStartConfiguration(doubleArray65);
        multiDirectional19.setStartConfiguration(doubleArray65);
        multiDirectional0.setStartConfiguration(doubleArray65);
        int int72 = multiDirectional0.getMaxIterations();
        int int73 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertNotNull(realConvergenceChecker30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker49);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        multiDirectional6.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional6.setConvergenceChecker(realConvergenceChecker10);
        double[] doubleArray14 = new double[] { 1.0d, 2147483647 };
        multiDirectional6.setStartConfiguration(doubleArray14);
        multiDirectional0.setStartConfiguration(doubleArray14);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int20 = multiDirectional19.getEvaluations();
        int int21 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker28);
        double[] doubleArray32 = new double[] { 1.0d, 2147483647 };
        multiDirectional24.setStartConfiguration(doubleArray32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional24.getConvergenceChecker();
        multiDirectional24.setMaxEvaluations((int) (byte) 100);
        multiDirectional24.setMaxIterations(35);
        double[] doubleArray40 = new double[] { 100.0d };
        multiDirectional24.setStartConfiguration(doubleArray40);
        multiDirectional19.setStartConfiguration(doubleArray40);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional48.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int58 = multiDirectional57.getMaxIterations();
        double[] doubleArray59 = new double[] {};
        multiDirectional57.setStartConfiguration(doubleArray59);
        int int61 = multiDirectional57.getMaxEvaluations();
        int int62 = multiDirectional57.getIterations();
        int int63 = multiDirectional57.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = multiDirectional57.getConvergenceChecker();
        multiDirectional56.setConvergenceChecker(realConvergenceChecker64);
        double[] doubleArray66 = new double[] {};
        double[][] doubleArray67 = new double[][] { doubleArray66 };
        multiDirectional56.setStartConfiguration(doubleArray67);
        multiDirectional53.setStartConfiguration(doubleArray67);
        multiDirectional48.setStartConfiguration(doubleArray67);
        multiDirectional45.setStartConfiguration(doubleArray67);
        multiDirectional19.setStartConfiguration(doubleArray67);
        multiDirectional0.setStartConfiguration(doubleArray67);
        int int74 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker75 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker34);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker75);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        java.lang.Class<?> wildcardClass19 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 0, (double) (short) -1);
        int int3 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) (short) 10);
        int int7 = multiDirectional6.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1, (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        int int13 = multiDirectional11.getIterations();
        int int14 = multiDirectional11.getMaxEvaluations();
        int int15 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxIterations((-1));
        int int18 = multiDirectional11.getMaxIterations();
        int int19 = multiDirectional11.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = null;
        multiDirectional20.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional20.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional28.getConvergenceChecker();
        multiDirectional20.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional6.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 100, (double) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((-1));
        int int11 = multiDirectional4.getIterations();
        int int12 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxIterations();
        double[] doubleArray20 = new double[] {};
        multiDirectional18.setStartConfiguration(doubleArray20);
        multiDirectional13.setStartConfiguration(doubleArray20);
        multiDirectional4.setStartConfiguration(doubleArray20);
        double[] doubleArray25 = new double[] { 35 };
        multiDirectional4.setStartConfiguration(doubleArray25);
        multiDirectional2.setStartConfiguration(doubleArray25);
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 1, (double) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations(1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxIterations((int) (byte) 0);
        int int14 = multiDirectional10.getMaxIterations();
        int int15 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional10.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int20 = multiDirectional19.getEvaluations();
        int int21 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker28);
        double[] doubleArray32 = new double[] { 1.0d, 2147483647 };
        multiDirectional24.setStartConfiguration(doubleArray32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional24.getConvergenceChecker();
        multiDirectional24.setMaxEvaluations((int) (byte) 100);
        multiDirectional24.setMaxIterations(35);
        double[] doubleArray40 = new double[] { 100.0d };
        multiDirectional24.setStartConfiguration(doubleArray40);
        multiDirectional19.setStartConfiguration(doubleArray40);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional48.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int58 = multiDirectional57.getMaxIterations();
        double[] doubleArray59 = new double[] {};
        multiDirectional57.setStartConfiguration(doubleArray59);
        int int61 = multiDirectional57.getMaxEvaluations();
        int int62 = multiDirectional57.getIterations();
        int int63 = multiDirectional57.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = multiDirectional57.getConvergenceChecker();
        multiDirectional56.setConvergenceChecker(realConvergenceChecker64);
        double[] doubleArray66 = new double[] {};
        double[][] doubleArray67 = new double[][] { doubleArray66 };
        multiDirectional56.setStartConfiguration(doubleArray67);
        multiDirectional53.setStartConfiguration(doubleArray67);
        multiDirectional48.setStartConfiguration(doubleArray67);
        multiDirectional45.setStartConfiguration(doubleArray67);
        multiDirectional19.setStartConfiguration(doubleArray67);
        multiDirectional10.setStartConfiguration(doubleArray67);
        multiDirectional3.setStartConfiguration(doubleArray67);
        multiDirectional2.setStartConfiguration(doubleArray67);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker34);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getIterations();
        multiDirectional5.setMaxIterations((int) '#');
        multiDirectional5.setMaxEvaluations(0);
        multiDirectional5.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        int int27 = multiDirectional25.getIterations();
        int int28 = multiDirectional25.getMaxEvaluations();
        int int29 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxIterations((-1));
        int int32 = multiDirectional25.getIterations();
        multiDirectional25.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxEvaluations();
        multiDirectional37.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = null;
        multiDirectional37.setConvergenceChecker(realConvergenceChecker41);
        double[] doubleArray45 = new double[] { 1.0d, 2147483647 };
        multiDirectional37.setStartConfiguration(doubleArray45);
        multiDirectional25.setStartConfiguration(doubleArray45);
        int int48 = multiDirectional25.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = multiDirectional51.getConvergenceChecker();
        multiDirectional25.setConvergenceChecker(realConvergenceChecker52);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker52);
        int int55 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations(1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 2147483647, (double) (byte) 1);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional2.setConvergenceChecker(realConvergenceChecker4);
        int int6 = multiDirectional2.getMaxIterations();
        int int7 = multiDirectional2.getEvaluations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction8 = null;
        org.apache.commons.math.optimization.GoalType goalType9 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        int int12 = multiDirectional10.getIterations();
        int int13 = multiDirectional10.getMaxEvaluations();
        int int14 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxIterations((-1));
        int int17 = multiDirectional10.getIterations();
        multiDirectional10.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker20);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        multiDirectional10.setStartConfiguration(doubleArray30);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        int int35 = multiDirectional33.getIterations();
        int int36 = multiDirectional33.getMaxEvaluations();
        int int37 = multiDirectional33.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxIterations();
        double[] doubleArray40 = new double[] {};
        multiDirectional38.setStartConfiguration(doubleArray40);
        multiDirectional33.setStartConfiguration(doubleArray40);
        multiDirectional10.setStartConfiguration(doubleArray40);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = multiDirectional10.getConvergenceChecker();
        int int45 = multiDirectional10.getMaxIterations();
        int int46 = multiDirectional10.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int50 = multiDirectional49.getEvaluations();
        int int51 = multiDirectional49.getMaxEvaluations();
        multiDirectional49.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int55 = multiDirectional54.getMaxEvaluations();
        multiDirectional54.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker58 = null;
        multiDirectional54.setConvergenceChecker(realConvergenceChecker58);
        double[] doubleArray62 = new double[] { 1.0d, 2147483647 };
        multiDirectional54.setStartConfiguration(doubleArray62);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = multiDirectional54.getConvergenceChecker();
        multiDirectional54.setMaxEvaluations((int) (byte) 100);
        multiDirectional54.setMaxIterations(35);
        double[] doubleArray70 = new double[] { 100.0d };
        multiDirectional54.setStartConfiguration(doubleArray70);
        multiDirectional49.setStartConfiguration(doubleArray70);
        multiDirectional10.setStartConfiguration(doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair74 = multiDirectional2.optimize(multivariateRealFunction8, goalType9, doubleArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNull(realConvergenceChecker44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker64);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0]");
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setMaxIterations(100);
        multiDirectional0.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional35.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxIterations();
        double[] doubleArray46 = new double[] {};
        multiDirectional44.setStartConfiguration(doubleArray46);
        int int48 = multiDirectional44.getMaxEvaluations();
        int int49 = multiDirectional44.getIterations();
        int int50 = multiDirectional44.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker51 = multiDirectional44.getConvergenceChecker();
        multiDirectional43.setConvergenceChecker(realConvergenceChecker51);
        double[] doubleArray53 = new double[] {};
        double[][] doubleArray54 = new double[][] { doubleArray53 };
        multiDirectional43.setStartConfiguration(doubleArray54);
        multiDirectional40.setStartConfiguration(doubleArray54);
        multiDirectional35.setStartConfiguration(doubleArray54);
        multiDirectional0.setStartConfiguration(doubleArray54);
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int61 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 32 + "'", int61 == 32);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getIterations();
        int int6 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (short) 1);
        int int9 = multiDirectional0.getEvaluations();
        int int10 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 'a', (double) 2147483647);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker18);
        double[] doubleArray22 = new double[] { 1.0d, 2147483647 };
        multiDirectional14.setStartConfiguration(doubleArray22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional14.getConvergenceChecker();
        multiDirectional14.setMaxEvaluations((int) (byte) 100);
        multiDirectional14.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional14.getConvergenceChecker();
        int int30 = multiDirectional14.getEvaluations();
        int int31 = multiDirectional14.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxEvaluations();
        int int34 = multiDirectional32.getIterations();
        int int35 = multiDirectional32.getMaxEvaluations();
        int int36 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxIterations((-1));
        int int39 = multiDirectional32.getIterations();
        int int40 = multiDirectional32.getEvaluations();
        int int41 = multiDirectional32.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional42.setConvergenceChecker(realConvergenceChecker46);
        double[] doubleArray50 = new double[] { 1.0d, 2147483647 };
        multiDirectional42.setStartConfiguration(doubleArray50);
        int int52 = multiDirectional42.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxIterations();
        double[] doubleArray55 = new double[] {};
        multiDirectional53.setStartConfiguration(doubleArray55);
        multiDirectional42.setStartConfiguration(doubleArray55);
        multiDirectional32.setStartConfiguration(doubleArray55);
        multiDirectional14.setStartConfiguration(doubleArray55);
        multiDirectional13.setStartConfiguration(doubleArray55);
        multiDirectional0.setStartConfiguration(doubleArray55);
        java.lang.Class<?> wildcardClass62 = doubleArray55.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker24);
        org.junit.Assert.assertNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, (double) 10);
        int int3 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxEvaluations(10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional2.getConvergenceChecker();
        multiDirectional2.setMaxIterations((int) '#');
        int int9 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker16);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        int int19 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1, (double) 0.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker16);
        int int18 = multiDirectional3.getMaxIterations();
        int int19 = multiDirectional3.getEvaluations();
        int int20 = multiDirectional3.getMaxEvaluations();
        int int21 = multiDirectional3.getMaxIterations();
        int int22 = multiDirectional3.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional28.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxIterations();
        double[] doubleArray39 = new double[] {};
        multiDirectional37.setStartConfiguration(doubleArray39);
        int int41 = multiDirectional37.getMaxEvaluations();
        int int42 = multiDirectional37.getIterations();
        int int43 = multiDirectional37.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = multiDirectional37.getConvergenceChecker();
        multiDirectional36.setConvergenceChecker(realConvergenceChecker44);
        double[] doubleArray46 = new double[] {};
        double[][] doubleArray47 = new double[][] { doubleArray46 };
        multiDirectional36.setStartConfiguration(doubleArray47);
        multiDirectional33.setStartConfiguration(doubleArray47);
        multiDirectional28.setStartConfiguration(doubleArray47);
        multiDirectional25.setStartConfiguration(doubleArray47);
        multiDirectional3.setStartConfiguration(doubleArray47);
        multiDirectional2.setStartConfiguration(doubleArray47);
        java.lang.Class<?> wildcardClass54 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional16.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker17);
        int int19 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (short) -1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker20);
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 0, (double) 35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100.0f, (double) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        multiDirectional6.setMaxIterations((int) (byte) 0);
        int int10 = multiDirectional6.getMaxIterations();
        int int11 = multiDirectional6.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = multiDirectional6.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker12);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker12);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (byte) 0);
        double[][] doubleArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiDirectional2.setStartConfiguration(doubleArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        multiDirectional2.setMaxEvaluations(2147483647);
        multiDirectional2.setMaxEvaluations((int) '#');
        int int7 = multiDirectional2.getEvaluations();
        int int8 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker14);
        multiDirectional12.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional12.getConvergenceChecker();
        int int19 = multiDirectional12.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = null;
        multiDirectional20.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional20.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxIterations();
        double[] doubleArray28 = new double[] {};
        multiDirectional26.setStartConfiguration(doubleArray28);
        int int30 = multiDirectional26.getMaxEvaluations();
        int int31 = multiDirectional26.getMaxIterations();
        int int32 = multiDirectional26.getMaxIterations();
        multiDirectional26.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxEvaluations();
        int int37 = multiDirectional35.getIterations();
        int int38 = multiDirectional35.getMaxEvaluations();
        int int39 = multiDirectional35.getMaxEvaluations();
        multiDirectional35.setMaxIterations((-1));
        int int42 = multiDirectional35.getMaxIterations();
        int int43 = multiDirectional35.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional44.setConvergenceChecker(realConvergenceChecker46);
        multiDirectional44.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = multiDirectional52.getConvergenceChecker();
        multiDirectional44.setConvergenceChecker(realConvergenceChecker53);
        multiDirectional35.setConvergenceChecker(realConvergenceChecker53);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxIterations();
        double[] doubleArray61 = new double[] {};
        multiDirectional59.setStartConfiguration(doubleArray61);
        int int63 = multiDirectional59.getMaxEvaluations();
        int int64 = multiDirectional59.getIterations();
        int int65 = multiDirectional59.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker66 = multiDirectional59.getConvergenceChecker();
        multiDirectional58.setConvergenceChecker(realConvergenceChecker66);
        double[] doubleArray68 = new double[] {};
        double[][] doubleArray69 = new double[][] { doubleArray68 };
        multiDirectional58.setStartConfiguration(doubleArray69);
        multiDirectional35.setStartConfiguration(doubleArray69);
        multiDirectional26.setStartConfiguration(doubleArray69);
        multiDirectional20.setStartConfiguration(doubleArray69);
        multiDirectional12.setStartConfiguration(doubleArray69);
        multiDirectional11.setStartConfiguration(doubleArray69);
        multiDirectional2.setStartConfiguration(doubleArray69);
        multiDirectional2.setMaxEvaluations(1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker53);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getIterations();
        int int5 = multiDirectional2.getMaxEvaluations();
        int int6 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxIterations((-1));
        int int9 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional14.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker15);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker15);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional0.getConvergenceChecker();
        int int20 = multiDirectional0.getIterations();
        int int21 = multiDirectional0.getIterations();
        java.lang.Class<?> wildcardClass22 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker15);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray18 = new double[] { 1.0d, 2147483647 };
        multiDirectional10.setStartConfiguration(doubleArray18);
        int int20 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxIterations();
        double[] doubleArray23 = new double[] {};
        multiDirectional21.setStartConfiguration(doubleArray23);
        multiDirectional10.setStartConfiguration(doubleArray23);
        multiDirectional0.setStartConfiguration(doubleArray23);
        int int27 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = multiDirectional0.getConvergenceChecker();
        int int29 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = null;
        multiDirectional30.setConvergenceChecker(realConvergenceChecker34);
        double[] doubleArray38 = new double[] { 1.0d, 2147483647 };
        multiDirectional30.setStartConfiguration(doubleArray38);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = multiDirectional30.getConvergenceChecker();
        multiDirectional30.setMaxEvaluations((int) (byte) 100);
        multiDirectional30.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = multiDirectional30.getConvergenceChecker();
        int int46 = multiDirectional30.getEvaluations();
        int int47 = multiDirectional30.getEvaluations();
        multiDirectional30.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxEvaluations();
        multiDirectional50.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = null;
        multiDirectional50.setConvergenceChecker(realConvergenceChecker54);
        double[] doubleArray58 = new double[] { 1.0d, 2147483647 };
        multiDirectional50.setStartConfiguration(doubleArray58);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = multiDirectional50.getConvergenceChecker();
        multiDirectional50.setMaxEvaluations((int) (byte) 100);
        multiDirectional50.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker65 = multiDirectional50.getConvergenceChecker();
        int int66 = multiDirectional50.getEvaluations();
        int int67 = multiDirectional50.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional68 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int69 = multiDirectional68.getMaxEvaluations();
        int int70 = multiDirectional68.getIterations();
        int int71 = multiDirectional68.getMaxEvaluations();
        int int72 = multiDirectional68.getMaxEvaluations();
        multiDirectional68.setMaxIterations((-1));
        int int75 = multiDirectional68.getIterations();
        int int76 = multiDirectional68.getEvaluations();
        int int77 = multiDirectional68.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional78 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int79 = multiDirectional78.getMaxEvaluations();
        multiDirectional78.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker82 = null;
        multiDirectional78.setConvergenceChecker(realConvergenceChecker82);
        double[] doubleArray86 = new double[] { 1.0d, 2147483647 };
        multiDirectional78.setStartConfiguration(doubleArray86);
        int int88 = multiDirectional78.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional89 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int90 = multiDirectional89.getMaxIterations();
        double[] doubleArray91 = new double[] {};
        multiDirectional89.setStartConfiguration(doubleArray91);
        multiDirectional78.setStartConfiguration(doubleArray91);
        multiDirectional68.setStartConfiguration(doubleArray91);
        multiDirectional50.setStartConfiguration(doubleArray91);
        multiDirectional30.setStartConfiguration(doubleArray91);
        multiDirectional0.setStartConfiguration(doubleArray91);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker40);
        org.junit.Assert.assertNull(realConvergenceChecker45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker60);
        org.junit.Assert.assertNull(realConvergenceChecker65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2147483647 + "'", int79 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2147483647 + "'", int88 == 2147483647);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2147483647 + "'", int90 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxIterations((int) (short) 10);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations(0);
        multiDirectional0.setMaxIterations((-1));
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker19);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        int int4 = multiDirectional2.getIterations();
        multiDirectional2.setMaxIterations(2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        multiDirectional2.setMaxEvaluations(2147483647);
        multiDirectional2.setMaxEvaluations((int) '#');
        int int7 = multiDirectional2.getIterations();
        int int8 = multiDirectional2.getEvaluations();
        multiDirectional2.setMaxEvaluations((int) '#');
        int int11 = multiDirectional2.getEvaluations();
        int int12 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int3 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations(0);
        int int6 = multiDirectional2.getIterations();
        multiDirectional2.setMaxIterations((int) (byte) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional2.setConvergenceChecker(realConvergenceChecker9);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = null;
        multiDirectional11.setConvergenceChecker(realConvergenceChecker15);
        double[] doubleArray18 = new double[] { 100.0d };
        multiDirectional11.setStartConfiguration(doubleArray18);
        int int20 = multiDirectional11.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getMaxIterations();
        multiDirectional23.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional35.getConvergenceChecker();
        multiDirectional23.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional21.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional11.setMaxIterations(100);
        multiDirectional11.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional46.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxIterations();
        double[] doubleArray57 = new double[] {};
        multiDirectional55.setStartConfiguration(doubleArray57);
        int int59 = multiDirectional55.getMaxEvaluations();
        int int60 = multiDirectional55.getIterations();
        int int61 = multiDirectional55.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = multiDirectional55.getConvergenceChecker();
        multiDirectional54.setConvergenceChecker(realConvergenceChecker62);
        double[] doubleArray64 = new double[] {};
        double[][] doubleArray65 = new double[][] { doubleArray64 };
        multiDirectional54.setStartConfiguration(doubleArray65);
        multiDirectional51.setStartConfiguration(doubleArray65);
        multiDirectional46.setStartConfiguration(doubleArray65);
        multiDirectional11.setStartConfiguration(doubleArray65);
        multiDirectional2.setStartConfiguration(doubleArray65);
        multiDirectional0.setStartConfiguration(doubleArray65);
        int int72 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations((int) (short) 10);
        multiDirectional0.setMaxEvaluations(2147483647);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker36);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 52, (double) 52);
        int int3 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, (double) 'a');
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = null;
        multiDirectional7.setConvergenceChecker(realConvergenceChecker11);
        double[] doubleArray14 = new double[] { 100.0d };
        multiDirectional7.setStartConfiguration(doubleArray14);
        multiDirectional7.setMaxEvaluations(2147483647);
        int int18 = multiDirectional7.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxIterations();
        double[] doubleArray21 = new double[] {};
        multiDirectional19.setStartConfiguration(doubleArray21);
        int int23 = multiDirectional19.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        int int26 = multiDirectional24.getIterations();
        int int27 = multiDirectional24.getMaxEvaluations();
        int int28 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxIterations((-1));
        int int31 = multiDirectional24.getIterations();
        multiDirectional24.setMaxIterations((int) '#');
        multiDirectional24.setMaxEvaluations(0);
        multiDirectional24.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = multiDirectional40.getConvergenceChecker();
        multiDirectional24.setConvergenceChecker(realConvergenceChecker41);
        multiDirectional19.setConvergenceChecker(realConvergenceChecker41);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker41);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker41);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker41);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        int int10 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = multiDirectional0.getConvergenceChecker();
        int int12 = multiDirectional0.getMaxIterations();
        int int13 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional2.setConvergenceChecker(realConvergenceChecker4);
        multiDirectional2.setMaxEvaluations((int) 'a');
        int int8 = multiDirectional2.getEvaluations();
        java.lang.Class<?> wildcardClass9 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) (short) 100);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations((int) ' ');
        multiDirectional0.setMaxIterations((int) (byte) 0);
        int int12 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        int int12 = multiDirectional0.getMaxEvaluations();
        int int13 = multiDirectional0.getMaxIterations();
        int int14 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        multiDirectional2.setMaxIterations((int) (byte) 1);
        multiDirectional2.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        int int12 = multiDirectional10.getIterations();
        int int13 = multiDirectional10.getMaxEvaluations();
        int int14 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxIterations((-1));
        int int17 = multiDirectional10.getMaxIterations();
        multiDirectional10.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional22.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker23);
        int int25 = multiDirectional10.getMaxIterations();
        int int26 = multiDirectional10.getEvaluations();
        int int27 = multiDirectional10.getMaxEvaluations();
        int int28 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional10.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = multiDirectional10.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker30);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = null;
        multiDirectional32.setConvergenceChecker(realConvergenceChecker36);
        double[] doubleArray40 = new double[] { 1.0d, 2147483647 };
        multiDirectional32.setStartConfiguration(doubleArray40);
        int int42 = multiDirectional32.getMaxIterations();
        int int43 = multiDirectional32.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = null;
        multiDirectional32.setConvergenceChecker(realConvergenceChecker44);
        multiDirectional32.setMaxIterations((int) (byte) -1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker51 = multiDirectional50.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxEvaluations();
        multiDirectional52.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = null;
        multiDirectional52.setConvergenceChecker(realConvergenceChecker56);
        double[] doubleArray60 = new double[] { 1.0d, 2147483647 };
        multiDirectional52.setStartConfiguration(doubleArray60);
        multiDirectional52.setMaxIterations((int) (byte) 100);
        int int64 = multiDirectional52.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional67.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional72 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int77 = multiDirectional76.getMaxIterations();
        double[] doubleArray78 = new double[] {};
        multiDirectional76.setStartConfiguration(doubleArray78);
        int int80 = multiDirectional76.getMaxEvaluations();
        int int81 = multiDirectional76.getIterations();
        int int82 = multiDirectional76.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker83 = multiDirectional76.getConvergenceChecker();
        multiDirectional75.setConvergenceChecker(realConvergenceChecker83);
        double[] doubleArray85 = new double[] {};
        double[][] doubleArray86 = new double[][] { doubleArray85 };
        multiDirectional75.setStartConfiguration(doubleArray86);
        multiDirectional72.setStartConfiguration(doubleArray86);
        multiDirectional67.setStartConfiguration(doubleArray86);
        multiDirectional52.setStartConfiguration(doubleArray86);
        multiDirectional50.setStartConfiguration(doubleArray86);
        multiDirectional32.setStartConfiguration(doubleArray86);
        multiDirectional9.setStartConfiguration(doubleArray86);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker94 = multiDirectional9.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker94);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertNotNull(realConvergenceChecker30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(realConvergenceChecker94);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional0.getConvergenceChecker();
        int int6 = multiDirectional0.getMaxIterations();
        int int7 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100.0f, 100.0d);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations(10);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxEvaluations((int) (short) -1);
        java.lang.Class<?> wildcardClass12 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxEvaluations((int) (byte) 0);
        multiDirectional0.setMaxIterations(0);
        java.lang.Class<?> wildcardClass18 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) 0L);
        multiDirectional2.setMaxIterations((int) (short) 0);
        int int5 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional6.setConvergenceChecker(realConvergenceChecker8);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray18 = new double[] { 1.0d, 2147483647 };
        multiDirectional10.setStartConfiguration(doubleArray18);
        int int20 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxIterations();
        double[] doubleArray23 = new double[] {};
        multiDirectional21.setStartConfiguration(doubleArray23);
        multiDirectional10.setStartConfiguration(doubleArray23);
        multiDirectional6.setStartConfiguration(doubleArray23);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        multiDirectional27.setMaxIterations((-1));
        int int34 = multiDirectional27.getMaxIterations();
        multiDirectional27.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = multiDirectional39.getConvergenceChecker();
        multiDirectional27.setConvergenceChecker(realConvergenceChecker40);
        multiDirectional6.setConvergenceChecker(realConvergenceChecker40);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker40);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker40);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) ' ');
        int int3 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = multiDirectional2.getConvergenceChecker();
        multiDirectional2.setMaxEvaluations((-1));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional9.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker4);
        org.junit.Assert.assertNotNull(realConvergenceChecker10);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        int int7 = multiDirectional0.getMaxEvaluations();
        int int8 = multiDirectional0.getMaxEvaluations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction10 = null;
        org.apache.commons.math.optimization.GoalType goalType11 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getIterations();
        multiDirectional12.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker28);
        double[] doubleArray32 = new double[] { 1.0d, 2147483647 };
        multiDirectional24.setStartConfiguration(doubleArray32);
        multiDirectional12.setStartConfiguration(doubleArray32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxEvaluations();
        int int37 = multiDirectional35.getIterations();
        int int38 = multiDirectional35.getMaxEvaluations();
        int int39 = multiDirectional35.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxIterations();
        double[] doubleArray42 = new double[] {};
        multiDirectional40.setStartConfiguration(doubleArray42);
        multiDirectional35.setStartConfiguration(doubleArray42);
        multiDirectional12.setStartConfiguration(doubleArray42);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional12.getConvergenceChecker();
        int int47 = multiDirectional12.getMaxIterations();
        int int48 = multiDirectional12.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int52 = multiDirectional51.getEvaluations();
        int int53 = multiDirectional51.getMaxEvaluations();
        multiDirectional51.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxEvaluations();
        multiDirectional56.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = null;
        multiDirectional56.setConvergenceChecker(realConvergenceChecker60);
        double[] doubleArray64 = new double[] { 1.0d, 2147483647 };
        multiDirectional56.setStartConfiguration(doubleArray64);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker66 = multiDirectional56.getConvergenceChecker();
        multiDirectional56.setMaxEvaluations((int) (byte) 100);
        multiDirectional56.setMaxIterations(35);
        double[] doubleArray72 = new double[] { 100.0d };
        multiDirectional56.setStartConfiguration(doubleArray72);
        multiDirectional51.setStartConfiguration(doubleArray72);
        multiDirectional12.setStartConfiguration(doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair76 = multiDirectional0.optimize(multivariateRealFunction10, goalType11, doubleArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNull(realConvergenceChecker46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker66);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0]");
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        int int9 = multiDirectional7.getIterations();
        int int10 = multiDirectional7.getMaxEvaluations();
        int int11 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxIterations((-1));
        int int14 = multiDirectional7.getMaxIterations();
        int int15 = multiDirectional7.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional16.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional16.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxIterations();
        double[] doubleArray33 = new double[] {};
        multiDirectional31.setStartConfiguration(doubleArray33);
        int int35 = multiDirectional31.getMaxEvaluations();
        int int36 = multiDirectional31.getIterations();
        int int37 = multiDirectional31.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional31.getConvergenceChecker();
        multiDirectional30.setConvergenceChecker(realConvergenceChecker38);
        double[] doubleArray40 = new double[] {};
        double[][] doubleArray41 = new double[][] { doubleArray40 };
        multiDirectional30.setStartConfiguration(doubleArray41);
        multiDirectional7.setStartConfiguration(doubleArray41);
        multiDirectional2.setStartConfiguration(doubleArray41);
        multiDirectional2.setMaxEvaluations(0);
        multiDirectional2.setMaxIterations((int) (short) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        int int5 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        int int8 = multiDirectional6.getIterations();
        int int9 = multiDirectional6.getMaxEvaluations();
        int int10 = multiDirectional6.getMaxEvaluations();
        multiDirectional6.setMaxIterations((-1));
        int int13 = multiDirectional6.getIterations();
        int int14 = multiDirectional6.getEvaluations();
        int int15 = multiDirectional6.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        int int26 = multiDirectional16.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxIterations();
        double[] doubleArray29 = new double[] {};
        multiDirectional27.setStartConfiguration(doubleArray29);
        multiDirectional16.setStartConfiguration(doubleArray29);
        multiDirectional6.setStartConfiguration(doubleArray29);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        int int35 = multiDirectional33.getIterations();
        int int36 = multiDirectional33.getMaxEvaluations();
        int int37 = multiDirectional33.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxIterations();
        double[] doubleArray40 = new double[] {};
        multiDirectional38.setStartConfiguration(doubleArray40);
        multiDirectional33.setStartConfiguration(doubleArray40);
        multiDirectional6.setStartConfiguration(doubleArray40);
        multiDirectional2.setStartConfiguration(doubleArray40);
        java.lang.Class<?> wildcardClass45 = doubleArray40.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        multiDirectional2.setMaxIterations((int) '4');
        int int7 = multiDirectional2.getEvaluations();
        multiDirectional2.setMaxEvaluations((int) (short) -1);
        int int10 = multiDirectional2.getMaxIterations();
        int int11 = multiDirectional2.getMaxIterations();
        java.lang.Class<?> wildcardClass12 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(100);
        multiDirectional0.setMaxIterations((int) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertNotNull(realConvergenceChecker14);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10.0f, (double) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker16);
        double[] doubleArray20 = new double[] { 1.0d, 2147483647 };
        multiDirectional12.setStartConfiguration(doubleArray20);
        multiDirectional0.setStartConfiguration(doubleArray20);
        multiDirectional0.setMaxIterations((int) (short) -1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        int int27 = multiDirectional25.getIterations();
        int int28 = multiDirectional25.getMaxEvaluations();
        int int29 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxIterations((-1));
        int int32 = multiDirectional25.getIterations();
        int int33 = multiDirectional25.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional25.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxEvaluations();
        int int37 = multiDirectional35.getIterations();
        int int38 = multiDirectional35.getMaxEvaluations();
        int int39 = multiDirectional35.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxIterations();
        double[] doubleArray42 = new double[] {};
        multiDirectional40.setStartConfiguration(doubleArray42);
        multiDirectional35.setStartConfiguration(doubleArray42);
        multiDirectional25.setStartConfiguration(doubleArray42);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxEvaluations();
        multiDirectional46.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = null;
        multiDirectional46.setConvergenceChecker(realConvergenceChecker50);
        double[] doubleArray54 = new double[] { 1.0d, 2147483647 };
        multiDirectional46.setStartConfiguration(doubleArray54);
        multiDirectional46.setMaxIterations((int) (byte) 100);
        int int58 = multiDirectional46.getMaxEvaluations();
        int int59 = multiDirectional46.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int61 = multiDirectional60.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = null;
        multiDirectional60.setConvergenceChecker(realConvergenceChecker62);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int65 = multiDirectional64.getMaxEvaluations();
        multiDirectional64.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker68 = null;
        multiDirectional64.setConvergenceChecker(realConvergenceChecker68);
        double[] doubleArray72 = new double[] { 1.0d, 2147483647 };
        multiDirectional64.setStartConfiguration(doubleArray72);
        int int74 = multiDirectional64.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxIterations();
        double[] doubleArray77 = new double[] {};
        multiDirectional75.setStartConfiguration(doubleArray77);
        multiDirectional64.setStartConfiguration(doubleArray77);
        multiDirectional60.setStartConfiguration(doubleArray77);
        multiDirectional46.setStartConfiguration(doubleArray77);
        multiDirectional25.setStartConfiguration(doubleArray77);
        multiDirectional0.setStartConfiguration(doubleArray77);
        int int84 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2147483647 + "'", int84 == 2147483647);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(100);
        int int11 = multiDirectional0.getMaxIterations();
        java.lang.Class<?> wildcardClass12 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional2.setMaxIterations(2147483647);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction6 = null;
        org.apache.commons.math.optimization.GoalType goalType7 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker12);
        double[] doubleArray16 = new double[] { 1.0d, 2147483647 };
        multiDirectional8.setStartConfiguration(doubleArray16);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional8.getConvergenceChecker();
        multiDirectional8.setMaxEvaluations((int) (byte) 100);
        multiDirectional8.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional8.getConvergenceChecker();
        int int24 = multiDirectional8.getEvaluations();
        int int25 = multiDirectional8.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        int int28 = multiDirectional26.getIterations();
        int int29 = multiDirectional26.getMaxEvaluations();
        int int30 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxIterations((-1));
        int int33 = multiDirectional26.getIterations();
        int int34 = multiDirectional26.getEvaluations();
        int int35 = multiDirectional26.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        multiDirectional36.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = null;
        multiDirectional36.setConvergenceChecker(realConvergenceChecker40);
        double[] doubleArray44 = new double[] { 1.0d, 2147483647 };
        multiDirectional36.setStartConfiguration(doubleArray44);
        int int46 = multiDirectional36.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxIterations();
        double[] doubleArray49 = new double[] {};
        multiDirectional47.setStartConfiguration(doubleArray49);
        multiDirectional36.setStartConfiguration(doubleArray49);
        multiDirectional26.setStartConfiguration(doubleArray49);
        multiDirectional8.setStartConfiguration(doubleArray49);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int55 = multiDirectional54.getMaxEvaluations();
        int int56 = multiDirectional54.getIterations();
        int int57 = multiDirectional54.getMaxEvaluations();
        int int58 = multiDirectional54.getMaxEvaluations();
        multiDirectional54.setMaxIterations((-1));
        int int61 = multiDirectional54.getMaxIterations();
        multiDirectional54.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker67 = multiDirectional66.getConvergenceChecker();
        multiDirectional54.setConvergenceChecker(realConvergenceChecker67);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int70 = multiDirectional69.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = null;
        multiDirectional69.setConvergenceChecker(realConvergenceChecker71);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional73 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int74 = multiDirectional73.getMaxEvaluations();
        multiDirectional73.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker77 = null;
        multiDirectional73.setConvergenceChecker(realConvergenceChecker77);
        double[] doubleArray81 = new double[] { 1.0d, 2147483647 };
        multiDirectional73.setStartConfiguration(doubleArray81);
        int int83 = multiDirectional73.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional84 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int85 = multiDirectional84.getMaxIterations();
        double[] doubleArray86 = new double[] {};
        multiDirectional84.setStartConfiguration(doubleArray86);
        multiDirectional73.setStartConfiguration(doubleArray86);
        multiDirectional69.setStartConfiguration(doubleArray86);
        multiDirectional54.setStartConfiguration(doubleArray86);
        multiDirectional8.setStartConfiguration(doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair92 = multiDirectional2.optimize(multivariateRealFunction6, goalType7, doubleArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker18);
        org.junit.Assert.assertNull(realConvergenceChecker23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setMaxIterations(100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = null;
        multiDirectional31.setConvergenceChecker(realConvergenceChecker35);
        double[] doubleArray39 = new double[] { 1.0d, 2147483647 };
        multiDirectional31.setStartConfiguration(doubleArray39);
        multiDirectional31.setMaxIterations((int) (byte) 100);
        int int43 = multiDirectional31.getIterations();
        multiDirectional31.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional31.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxEvaluations();
        multiDirectional47.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker51 = null;
        multiDirectional47.setConvergenceChecker(realConvergenceChecker51);
        double[] doubleArray55 = new double[] { 1.0d, 2147483647 };
        multiDirectional47.setStartConfiguration(doubleArray55);
        int int57 = multiDirectional47.getMaxIterations();
        int int58 = multiDirectional47.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker59 = null;
        multiDirectional47.setConvergenceChecker(realConvergenceChecker59);
        int int61 = multiDirectional47.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int66 = multiDirectional65.getMaxEvaluations();
        int int67 = multiDirectional65.getIterations();
        int int68 = multiDirectional65.getMaxEvaluations();
        int int69 = multiDirectional65.getMaxEvaluations();
        multiDirectional65.setMaxIterations((-1));
        int int72 = multiDirectional65.getIterations();
        multiDirectional65.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker75 = null;
        multiDirectional65.setConvergenceChecker(realConvergenceChecker75);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional77 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int78 = multiDirectional77.getMaxEvaluations();
        multiDirectional77.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker81 = null;
        multiDirectional77.setConvergenceChecker(realConvergenceChecker81);
        double[] doubleArray85 = new double[] { 1.0d, 2147483647 };
        multiDirectional77.setStartConfiguration(doubleArray85);
        multiDirectional65.setStartConfiguration(doubleArray85);
        multiDirectional64.setStartConfiguration(doubleArray85);
        multiDirectional47.setStartConfiguration(doubleArray85);
        multiDirectional31.setStartConfiguration(doubleArray85);
        multiDirectional0.setStartConfiguration(doubleArray85);
        int int92 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2147483647 + "'", int66 == 2147483647);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        int int12 = multiDirectional0.getIterations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional0.getConvergenceChecker();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        int int18 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxIterations();
        double[] doubleArray7 = new double[] {};
        multiDirectional5.setStartConfiguration(doubleArray7);
        multiDirectional0.setStartConfiguration(doubleArray7);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxIterations();
        double[] doubleArray12 = new double[] {};
        multiDirectional10.setStartConfiguration(doubleArray12);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        int int18 = multiDirectional16.getIterations();
        int int19 = multiDirectional16.getMaxEvaluations();
        int int20 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxIterations((-1));
        int int23 = multiDirectional16.getMaxIterations();
        multiDirectional16.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional28.getConvergenceChecker();
        multiDirectional16.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional14.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional14.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = multiDirectional14.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker33);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker33);
        int int36 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations(1);
        java.lang.Class<?> wildcardClass41 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertNotNull(realConvergenceChecker33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (short) 1);
        int int3 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getIterations();
        int int11 = multiDirectional0.getIterations();
        multiDirectional0.setMaxEvaluations(97);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker14);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) ' ');
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        multiDirectional0.setMaxIterations(0);
        multiDirectional0.setMaxEvaluations((int) (short) 10);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1, (double) (byte) -1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxIterations(35);
        multiDirectional0.setMaxIterations(100);
        multiDirectional0.setMaxIterations((int) (byte) 1);
        java.lang.Class<?> wildcardClass19 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) 0L);
        multiDirectional2.setMaxIterations((int) (short) 0);
        int int5 = multiDirectional2.getMaxEvaluations();
        int int6 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction7 = null;
        org.apache.commons.math.optimization.GoalType goalType8 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = null;
        multiDirectional9.setConvergenceChecker(realConvergenceChecker13);
        double[] doubleArray17 = new double[] { 1.0d, 2147483647 };
        multiDirectional9.setStartConfiguration(doubleArray17);
        multiDirectional9.setMaxIterations((int) (byte) 100);
        int int21 = multiDirectional9.getIterations();
        multiDirectional9.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional9.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker29);
        double[] doubleArray33 = new double[] { 1.0d, 2147483647 };
        multiDirectional25.setStartConfiguration(doubleArray33);
        int int35 = multiDirectional25.getMaxIterations();
        int int36 = multiDirectional25.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker37);
        int int39 = multiDirectional25.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxEvaluations();
        int int45 = multiDirectional43.getIterations();
        int int46 = multiDirectional43.getMaxEvaluations();
        int int47 = multiDirectional43.getMaxEvaluations();
        multiDirectional43.setMaxIterations((-1));
        int int50 = multiDirectional43.getIterations();
        multiDirectional43.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = null;
        multiDirectional43.setConvergenceChecker(realConvergenceChecker53);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxEvaluations();
        multiDirectional55.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker59 = null;
        multiDirectional55.setConvergenceChecker(realConvergenceChecker59);
        double[] doubleArray63 = new double[] { 1.0d, 2147483647 };
        multiDirectional55.setStartConfiguration(doubleArray63);
        multiDirectional43.setStartConfiguration(doubleArray63);
        multiDirectional42.setStartConfiguration(doubleArray63);
        multiDirectional25.setStartConfiguration(doubleArray63);
        multiDirectional9.setStartConfiguration(doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair69 = multiDirectional2.optimize(multivariateRealFunction7, goalType8, doubleArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10.0f, 100.0d);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional2.getConvergenceChecker();
        multiDirectional2.setMaxEvaluations(100);
        multiDirectional2.setMaxIterations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        multiDirectional12.setMaxEvaluations(35);
        int int15 = multiDirectional12.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        int int26 = multiDirectional16.getMaxIterations();
        int int27 = multiDirectional16.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker28);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = multiDirectional16.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int35 = multiDirectional34.getMaxEvaluations();
        multiDirectional34.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = null;
        multiDirectional34.setConvergenceChecker(realConvergenceChecker38);
        double[] doubleArray41 = new double[] { 100.0d };
        multiDirectional34.setStartConfiguration(doubleArray41);
        int int43 = multiDirectional34.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxEvaluations();
        int int48 = multiDirectional46.getIterations();
        int int49 = multiDirectional46.getMaxEvaluations();
        int int50 = multiDirectional46.getMaxEvaluations();
        multiDirectional46.setMaxIterations((-1));
        int int53 = multiDirectional46.getMaxIterations();
        multiDirectional46.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker59 = multiDirectional58.getConvergenceChecker();
        multiDirectional46.setConvergenceChecker(realConvergenceChecker59);
        multiDirectional44.setConvergenceChecker(realConvergenceChecker59);
        multiDirectional34.setConvergenceChecker(realConvergenceChecker59);
        multiDirectional34.setMaxIterations(100);
        multiDirectional34.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional69.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional74 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional77 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional78 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int79 = multiDirectional78.getMaxIterations();
        double[] doubleArray80 = new double[] {};
        multiDirectional78.setStartConfiguration(doubleArray80);
        int int82 = multiDirectional78.getMaxEvaluations();
        int int83 = multiDirectional78.getIterations();
        int int84 = multiDirectional78.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker85 = multiDirectional78.getConvergenceChecker();
        multiDirectional77.setConvergenceChecker(realConvergenceChecker85);
        double[] doubleArray87 = new double[] {};
        double[][] doubleArray88 = new double[][] { doubleArray87 };
        multiDirectional77.setStartConfiguration(doubleArray88);
        multiDirectional74.setStartConfiguration(doubleArray88);
        multiDirectional69.setStartConfiguration(doubleArray88);
        multiDirectional34.setStartConfiguration(doubleArray88);
        multiDirectional33.setStartConfiguration(doubleArray88);
        multiDirectional16.setStartConfiguration(doubleArray88);
        multiDirectional12.setStartConfiguration(doubleArray88);
        multiDirectional2.setStartConfiguration(doubleArray88);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker59);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2147483647 + "'", int79 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2147483647 + "'", int84 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker85);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional0.getConvergenceChecker();
        int int10 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = null;
        multiDirectional13.setConvergenceChecker(realConvergenceChecker15);
        multiDirectional13.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional22.getConvergenceChecker();
        multiDirectional22.setMaxEvaluations((int) (byte) 100);
        multiDirectional22.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxEvaluations();
        multiDirectional37.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = null;
        multiDirectional37.setConvergenceChecker(realConvergenceChecker41);
        double[] doubleArray45 = new double[] { 1.0d, 2147483647 };
        multiDirectional37.setStartConfiguration(doubleArray45);
        int int47 = multiDirectional37.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxIterations();
        double[] doubleArray50 = new double[] {};
        multiDirectional48.setStartConfiguration(doubleArray50);
        multiDirectional37.setStartConfiguration(doubleArray50);
        multiDirectional22.setStartConfiguration(doubleArray50);
        multiDirectional21.setStartConfiguration(doubleArray50);
        multiDirectional13.setStartConfiguration(doubleArray50);
        multiDirectional0.setStartConfiguration(doubleArray50);
        int int57 = multiDirectional0.getMaxIterations();
        int int58 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        multiDirectional2.setMaxIterations((int) (byte) 1);
        multiDirectional2.setMaxIterations((int) (byte) 0);
        int int7 = multiDirectional2.getIterations();
        int int8 = multiDirectional2.getEvaluations();
        int int9 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) (byte) 1);
        multiDirectional2.setMaxEvaluations(1);
        int int5 = multiDirectional2.getIterations();
        int int6 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) '4');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker7);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional16.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker17);
        int int19 = multiDirectional0.getMaxEvaluations();
        int int20 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker21);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        int int24 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = null;
        multiDirectional31.setConvergenceChecker(realConvergenceChecker35);
        double[] doubleArray39 = new double[] { 1.0d, 2147483647 };
        multiDirectional31.setStartConfiguration(doubleArray39);
        multiDirectional25.setStartConfiguration(doubleArray39);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = multiDirectional44.getConvergenceChecker();
        multiDirectional25.setConvergenceChecker(realConvergenceChecker45);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker45);
        multiDirectional0.setMaxIterations((int) '4');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNotNull(realConvergenceChecker45);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional5.setConvergenceChecker(realConvergenceChecker9);
        double[] doubleArray13 = new double[] { 1.0d, 2147483647 };
        multiDirectional5.setStartConfiguration(doubleArray13);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional5.getConvergenceChecker();
        multiDirectional5.setMaxEvaluations((int) (byte) 100);
        multiDirectional5.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional5.getConvergenceChecker();
        int int21 = multiDirectional5.getEvaluations();
        int int22 = multiDirectional5.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getIterations();
        int int31 = multiDirectional23.getEvaluations();
        int int32 = multiDirectional23.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional33.setConvergenceChecker(realConvergenceChecker37);
        double[] doubleArray41 = new double[] { 1.0d, 2147483647 };
        multiDirectional33.setStartConfiguration(doubleArray41);
        int int43 = multiDirectional33.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxIterations();
        double[] doubleArray46 = new double[] {};
        multiDirectional44.setStartConfiguration(doubleArray46);
        multiDirectional33.setStartConfiguration(doubleArray46);
        multiDirectional23.setStartConfiguration(doubleArray46);
        multiDirectional5.setStartConfiguration(doubleArray46);
        multiDirectional2.setStartConfiguration(doubleArray46);
        int int52 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxEvaluations();
        multiDirectional56.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = null;
        multiDirectional56.setConvergenceChecker(realConvergenceChecker60);
        double[] doubleArray64 = new double[] { 1.0d, 2147483647 };
        multiDirectional56.setStartConfiguration(doubleArray64);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker66 = multiDirectional56.getConvergenceChecker();
        multiDirectional56.setMaxEvaluations((int) (byte) 100);
        multiDirectional56.setMaxIterations(35);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = multiDirectional56.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional74 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker75 = multiDirectional74.getConvergenceChecker();
        multiDirectional56.setConvergenceChecker(realConvergenceChecker75);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional79 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional80 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int81 = multiDirectional80.getMaxEvaluations();
        int int82 = multiDirectional80.getIterations();
        int int83 = multiDirectional80.getMaxEvaluations();
        int int84 = multiDirectional80.getMaxEvaluations();
        multiDirectional80.setMaxIterations((-1));
        int int87 = multiDirectional80.getIterations();
        int int88 = multiDirectional80.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker89 = multiDirectional80.getConvergenceChecker();
        multiDirectional79.setConvergenceChecker(realConvergenceChecker89);
        multiDirectional56.setConvergenceChecker(realConvergenceChecker89);
        multiDirectional55.setConvergenceChecker(realConvergenceChecker89);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker89);
        int int94 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertNull(realConvergenceChecker20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker66);
        org.junit.Assert.assertNull(realConvergenceChecker71);
        org.junit.Assert.assertNotNull(realConvergenceChecker75);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2147483647 + "'", int84 == 2147483647);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker89);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        multiDirectional0.setMaxEvaluations((int) '4');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker18);
        double[] doubleArray22 = new double[] { 1.0d, 2147483647 };
        multiDirectional14.setStartConfiguration(doubleArray22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional14.getConvergenceChecker();
        multiDirectional14.setMaxEvaluations((int) (byte) 100);
        multiDirectional14.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional14.getConvergenceChecker();
        int int30 = multiDirectional14.getEvaluations();
        int int31 = multiDirectional14.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxEvaluations();
        int int34 = multiDirectional32.getIterations();
        int int35 = multiDirectional32.getMaxEvaluations();
        int int36 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxIterations((-1));
        int int39 = multiDirectional32.getIterations();
        int int40 = multiDirectional32.getEvaluations();
        int int41 = multiDirectional32.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional42.setConvergenceChecker(realConvergenceChecker46);
        double[] doubleArray50 = new double[] { 1.0d, 2147483647 };
        multiDirectional42.setStartConfiguration(doubleArray50);
        int int52 = multiDirectional42.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxIterations();
        double[] doubleArray55 = new double[] {};
        multiDirectional53.setStartConfiguration(doubleArray55);
        multiDirectional42.setStartConfiguration(doubleArray55);
        multiDirectional32.setStartConfiguration(doubleArray55);
        multiDirectional14.setStartConfiguration(doubleArray55);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int61 = multiDirectional60.getMaxEvaluations();
        multiDirectional60.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = null;
        multiDirectional60.setConvergenceChecker(realConvergenceChecker64);
        double[] doubleArray68 = new double[] { 1.0d, 2147483647 };
        multiDirectional60.setStartConfiguration(doubleArray68);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker70 = multiDirectional60.getConvergenceChecker();
        multiDirectional60.setMaxEvaluations((int) (byte) 100);
        multiDirectional60.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxEvaluations();
        multiDirectional75.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker79 = null;
        multiDirectional75.setConvergenceChecker(realConvergenceChecker79);
        double[] doubleArray83 = new double[] { 1.0d, 2147483647 };
        multiDirectional75.setStartConfiguration(doubleArray83);
        int int85 = multiDirectional75.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional86 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int87 = multiDirectional86.getMaxIterations();
        double[] doubleArray88 = new double[] {};
        multiDirectional86.setStartConfiguration(doubleArray88);
        multiDirectional75.setStartConfiguration(doubleArray88);
        multiDirectional60.setStartConfiguration(doubleArray88);
        multiDirectional14.setStartConfiguration(doubleArray88);
        multiDirectional0.setStartConfiguration(doubleArray88);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker94 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker94);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker96 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker24);
        org.junit.Assert.assertNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[]");
        org.junit.Assert.assertNull(realConvergenceChecker96);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) 0L);
        multiDirectional2.setMaxIterations((int) (short) 0);
        multiDirectional2.setMaxIterations((int) 'a');
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction7 = null;
        org.apache.commons.math.optimization.GoalType goalType8 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        double[] doubleArray16 = new double[] {};
        multiDirectional14.setStartConfiguration(doubleArray16);
        multiDirectional9.setStartConfiguration(doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair19 = multiDirectional2.optimize(multivariateRealFunction7, goalType8, doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        int int12 = multiDirectional0.getMaxEvaluations();
        int int13 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker16);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker22);
        double[] doubleArray26 = new double[] { 1.0d, 2147483647 };
        multiDirectional18.setStartConfiguration(doubleArray26);
        int int28 = multiDirectional18.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxIterations();
        double[] doubleArray31 = new double[] {};
        multiDirectional29.setStartConfiguration(doubleArray31);
        multiDirectional18.setStartConfiguration(doubleArray31);
        multiDirectional14.setStartConfiguration(doubleArray31);
        multiDirectional0.setStartConfiguration(doubleArray31);
        multiDirectional0.setMaxIterations((int) (short) 0);
        int int38 = multiDirectional0.getEvaluations();
        java.lang.Class<?> wildcardClass39 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getIterations();
        double[] doubleArray11 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional0.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getIterations();
        int int21 = multiDirectional13.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional13.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        multiDirectional23.setStartConfiguration(doubleArray30);
        multiDirectional13.setStartConfiguration(doubleArray30);
        multiDirectional0.setStartConfiguration(doubleArray30);
        int int35 = multiDirectional0.getMaxIterations();
        int int36 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) (byte) 1);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        int int5 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxIterations((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker18);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 100L);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        multiDirectional0.setMaxIterations(0);
        int int6 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        int int10 = multiDirectional9.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        int int13 = multiDirectional11.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        int int18 = multiDirectional16.getIterations();
        int int19 = multiDirectional16.getMaxEvaluations();
        int int20 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxIterations((-1));
        int int23 = multiDirectional16.getMaxIterations();
        multiDirectional16.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional28.getConvergenceChecker();
        multiDirectional16.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional14.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional9.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional9.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int38 = multiDirectional37.getEvaluations();
        int int39 = multiDirectional37.getMaxEvaluations();
        multiDirectional37.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        int int44 = multiDirectional42.getIterations();
        int int45 = multiDirectional42.getMaxEvaluations();
        int int46 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxIterations((-1));
        int int49 = multiDirectional42.getMaxIterations();
        int int50 = multiDirectional42.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = null;
        multiDirectional51.setConvergenceChecker(realConvergenceChecker53);
        multiDirectional51.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = multiDirectional59.getConvergenceChecker();
        multiDirectional51.setConvergenceChecker(realConvergenceChecker60);
        multiDirectional42.setConvergenceChecker(realConvergenceChecker60);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int67 = multiDirectional66.getMaxIterations();
        double[] doubleArray68 = new double[] {};
        multiDirectional66.setStartConfiguration(doubleArray68);
        int int70 = multiDirectional66.getMaxEvaluations();
        int int71 = multiDirectional66.getIterations();
        int int72 = multiDirectional66.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker73 = multiDirectional66.getConvergenceChecker();
        multiDirectional65.setConvergenceChecker(realConvergenceChecker73);
        double[] doubleArray75 = new double[] {};
        double[][] doubleArray76 = new double[][] { doubleArray75 };
        multiDirectional65.setStartConfiguration(doubleArray76);
        multiDirectional42.setStartConfiguration(doubleArray76);
        multiDirectional37.setStartConfiguration(doubleArray76);
        multiDirectional9.setStartConfiguration(doubleArray76);
        multiDirectional0.setStartConfiguration(doubleArray76);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, 100.0d);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        int int4 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getMaxIterations();
        int int12 = multiDirectional0.getIterations();
        int int13 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int22 = multiDirectional21.getEvaluations();
        int int23 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional21.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker26);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int31 = multiDirectional30.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int35 = multiDirectional34.getMaxEvaluations();
        int int36 = multiDirectional34.getIterations();
        int int37 = multiDirectional34.getMaxEvaluations();
        int int38 = multiDirectional34.getMaxEvaluations();
        multiDirectional34.setMaxIterations((-1));
        int int41 = multiDirectional34.getMaxIterations();
        multiDirectional34.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker47 = multiDirectional46.getConvergenceChecker();
        multiDirectional34.setConvergenceChecker(realConvergenceChecker47);
        multiDirectional32.setConvergenceChecker(realConvergenceChecker47);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = multiDirectional32.getConvergenceChecker();
        multiDirectional30.setConvergenceChecker(realConvergenceChecker50);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker50);
        int int53 = multiDirectional0.getMaxEvaluations();
        int int54 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker47);
        org.junit.Assert.assertNotNull(realConvergenceChecker50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(100);
        int int11 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker16);
        double[] doubleArray20 = new double[] { 1.0d, 2147483647 };
        multiDirectional12.setStartConfiguration(doubleArray20);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional12.getConvergenceChecker();
        multiDirectional12.setMaxEvaluations((int) (byte) 100);
        multiDirectional12.setMaxIterations(35);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional12.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = multiDirectional30.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker31);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        int int38 = multiDirectional36.getIterations();
        int int39 = multiDirectional36.getMaxEvaluations();
        int int40 = multiDirectional36.getMaxEvaluations();
        multiDirectional36.setMaxIterations((-1));
        int int43 = multiDirectional36.getIterations();
        int int44 = multiDirectional36.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = multiDirectional36.getConvergenceChecker();
        multiDirectional35.setConvergenceChecker(realConvergenceChecker45);
        multiDirectional12.setConvergenceChecker(realConvergenceChecker45);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker45);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker22);
        org.junit.Assert.assertNull(realConvergenceChecker27);
        org.junit.Assert.assertNotNull(realConvergenceChecker31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker45);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker18);
        int int22 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations(2147483647);
        int int25 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional2.getConvergenceChecker();
        multiDirectional2.setMaxIterations((int) (byte) 100);
        int int29 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getIterations();
        double[] doubleArray11 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional0.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getIterations();
        int int21 = multiDirectional13.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional13.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        multiDirectional23.setStartConfiguration(doubleArray30);
        multiDirectional13.setStartConfiguration(doubleArray30);
        multiDirectional0.setStartConfiguration(doubleArray30);
        int int35 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker36);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray17 = new double[] { 100.0d };
        multiDirectional10.setStartConfiguration(doubleArray17);
        int int19 = multiDirectional10.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        int int24 = multiDirectional22.getIterations();
        int int25 = multiDirectional22.getMaxEvaluations();
        int int26 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxIterations((-1));
        int int29 = multiDirectional22.getMaxIterations();
        multiDirectional22.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional34.getConvergenceChecker();
        multiDirectional22.setConvergenceChecker(realConvergenceChecker35);
        multiDirectional20.setConvergenceChecker(realConvergenceChecker35);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        int int41 = multiDirectional39.getIterations();
        int int42 = multiDirectional39.getMaxEvaluations();
        int int43 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxIterations((-1));
        int int46 = multiDirectional39.getIterations();
        multiDirectional39.setMaxIterations((int) '#');
        multiDirectional39.setMaxEvaluations(0);
        multiDirectional39.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = multiDirectional55.getConvergenceChecker();
        multiDirectional39.setConvergenceChecker(realConvergenceChecker56);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker56);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker56);
        multiDirectional0.setMaxIterations(0);
        int int62 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100L, (double) 32);
        multiDirectional2.setMaxIterations((int) (byte) 100);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1, (double) 10.0f);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker16);
        int int18 = multiDirectional3.getMaxIterations();
        int int19 = multiDirectional3.getEvaluations();
        int int20 = multiDirectional3.getMaxEvaluations();
        int int21 = multiDirectional3.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional3.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional3.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker23);
        multiDirectional2.setMaxIterations((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        double[] doubleArray17 = new double[] {};
        multiDirectional15.setStartConfiguration(doubleArray17);
        multiDirectional4.setStartConfiguration(doubleArray17);
        multiDirectional0.setStartConfiguration(doubleArray17);
        multiDirectional0.setMaxEvaluations(100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional0.getConvergenceChecker();
        int int25 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNull(realConvergenceChecker23);
        org.junit.Assert.assertNull(realConvergenceChecker24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100.0f, (double) 1L);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) 1L);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = null;
        multiDirectional2.setConvergenceChecker(realConvergenceChecker3);
        int int5 = multiDirectional2.getMaxIterations();
        int int6 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 97, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker16);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        int int4 = multiDirectional2.getIterations();
        multiDirectional2.setMaxIterations((int) (short) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker7);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1L, (double) (byte) 10);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        int int9 = multiDirectional7.getIterations();
        int int10 = multiDirectional7.getMaxEvaluations();
        int int11 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxIterations((-1));
        int int14 = multiDirectional7.getMaxIterations();
        int int15 = multiDirectional7.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional16.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional16.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxIterations();
        double[] doubleArray33 = new double[] {};
        multiDirectional31.setStartConfiguration(doubleArray33);
        int int35 = multiDirectional31.getMaxEvaluations();
        int int36 = multiDirectional31.getIterations();
        int int37 = multiDirectional31.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional31.getConvergenceChecker();
        multiDirectional30.setConvergenceChecker(realConvergenceChecker38);
        double[] doubleArray40 = new double[] {};
        double[][] doubleArray41 = new double[][] { doubleArray40 };
        multiDirectional30.setStartConfiguration(doubleArray41);
        multiDirectional7.setStartConfiguration(doubleArray41);
        multiDirectional2.setStartConfiguration(doubleArray41);
        int int45 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getMaxEvaluations();
        int int18 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional0.getConvergenceChecker();
        java.lang.Class<?> wildcardClass21 = realConvergenceChecker20.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
        org.junit.Assert.assertNotNull(realConvergenceChecker20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (short) 100);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0L, (double) 0);
        multiDirectional2.setMaxIterations((int) (short) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker12);
        double[] doubleArray16 = new double[] { 1.0d, 2147483647 };
        multiDirectional8.setStartConfiguration(doubleArray16);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional8.getConvergenceChecker();
        multiDirectional8.setMaxEvaluations((int) (byte) 100);
        int int21 = multiDirectional8.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        multiDirectional8.setStartConfiguration(doubleArray30);
        multiDirectional7.setStartConfiguration(doubleArray30);
        multiDirectional2.setStartConfiguration(doubleArray30);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        int int13 = multiDirectional0.getEvaluations();
        int int14 = multiDirectional0.getIterations();
        int int15 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(97);
        java.lang.Class<?> wildcardClass18 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 0, (double) 35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker7);
        double[] doubleArray10 = new double[] { 100.0d };
        multiDirectional3.setStartConfiguration(doubleArray10);
        multiDirectional3.setMaxIterations(1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        double[] doubleArray16 = new double[] {};
        multiDirectional14.setStartConfiguration(doubleArray16);
        multiDirectional3.setStartConfiguration(doubleArray16);
        multiDirectional2.setStartConfiguration(doubleArray16);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxEvaluations();
        int int22 = multiDirectional20.getIterations();
        int int23 = multiDirectional20.getMaxEvaluations();
        int int24 = multiDirectional20.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional20.getConvergenceChecker();
        int int26 = multiDirectional20.getIterations();
        int int27 = multiDirectional20.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        int int32 = multiDirectional28.getMaxEvaluations();
        int int33 = multiDirectional28.getMaxIterations();
        int int34 = multiDirectional28.getMaxIterations();
        multiDirectional28.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional28.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional28.getConvergenceChecker();
        multiDirectional20.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker38);
        int int41 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker37);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        multiDirectional0.setMaxIterations((-1));
        int int26 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) '4');
        int int29 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        int int6 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations(32);
        multiDirectional0.setMaxEvaluations((-1));
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional0.getConvergenceChecker();
        int int14 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 32 + "'", int14 == 32);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        multiDirectional0.setMaxIterations(0);
        int int6 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxIterations();
        multiDirectional7.setMaxEvaluations(0);
        int int11 = multiDirectional7.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxIterations();
        double[] doubleArray14 = new double[] {};
        multiDirectional12.setStartConfiguration(doubleArray14);
        int int16 = multiDirectional12.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxEvaluations();
        int int19 = multiDirectional17.getIterations();
        int int20 = multiDirectional17.getMaxEvaluations();
        int int21 = multiDirectional17.getMaxEvaluations();
        multiDirectional17.setMaxIterations((-1));
        int int24 = multiDirectional17.getIterations();
        multiDirectional17.setMaxIterations((int) '#');
        multiDirectional17.setMaxEvaluations(0);
        multiDirectional17.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional33.getConvergenceChecker();
        multiDirectional17.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional12.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker34);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxEvaluations();
        multiDirectional38.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = null;
        multiDirectional38.setConvergenceChecker(realConvergenceChecker42);
        double[] doubleArray45 = new double[] { 100.0d };
        multiDirectional38.setStartConfiguration(doubleArray45);
        int int47 = multiDirectional38.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxEvaluations();
        int int52 = multiDirectional50.getIterations();
        int int53 = multiDirectional50.getMaxEvaluations();
        int int54 = multiDirectional50.getMaxEvaluations();
        multiDirectional50.setMaxIterations((-1));
        int int57 = multiDirectional50.getMaxIterations();
        multiDirectional50.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional62 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker63 = multiDirectional62.getConvergenceChecker();
        multiDirectional50.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional48.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional38.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker63);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker69 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker63);
        org.junit.Assert.assertNotNull(realConvergenceChecker69);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int3 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations(0);
        int int6 = multiDirectional2.getIterations();
        multiDirectional2.setMaxIterations((int) (byte) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional2.setConvergenceChecker(realConvergenceChecker9);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = null;
        multiDirectional11.setConvergenceChecker(realConvergenceChecker15);
        double[] doubleArray18 = new double[] { 100.0d };
        multiDirectional11.setStartConfiguration(doubleArray18);
        int int20 = multiDirectional11.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getMaxIterations();
        multiDirectional23.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional35.getConvergenceChecker();
        multiDirectional23.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional21.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional11.setMaxIterations(100);
        multiDirectional11.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional46.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxIterations();
        double[] doubleArray57 = new double[] {};
        multiDirectional55.setStartConfiguration(doubleArray57);
        int int59 = multiDirectional55.getMaxEvaluations();
        int int60 = multiDirectional55.getIterations();
        int int61 = multiDirectional55.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = multiDirectional55.getConvergenceChecker();
        multiDirectional54.setConvergenceChecker(realConvergenceChecker62);
        double[] doubleArray64 = new double[] {};
        double[][] doubleArray65 = new double[][] { doubleArray64 };
        multiDirectional54.setStartConfiguration(doubleArray65);
        multiDirectional51.setStartConfiguration(doubleArray65);
        multiDirectional46.setStartConfiguration(doubleArray65);
        multiDirectional11.setStartConfiguration(doubleArray65);
        multiDirectional2.setStartConfiguration(doubleArray65);
        multiDirectional0.setStartConfiguration(doubleArray65);
        int int72 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations((int) (short) 10);
        int int75 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker36);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) ' ');
        int int10 = multiDirectional0.getMaxEvaluations();
        int int11 = multiDirectional0.getMaxIterations();
        int int12 = multiDirectional0.getIterations();
        java.lang.Class<?> wildcardClass13 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        int int7 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = multiDirectional0.getConvergenceChecker();
        int int9 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = null;
        multiDirectional11.setConvergenceChecker(realConvergenceChecker13);
        multiDirectional11.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional11.getConvergenceChecker();
        int int18 = multiDirectional11.getMaxEvaluations();
        int int19 = multiDirectional11.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxEvaluations();
        multiDirectional20.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = null;
        multiDirectional20.setConvergenceChecker(realConvergenceChecker24);
        double[] doubleArray27 = new double[] { 100.0d };
        multiDirectional20.setStartConfiguration(doubleArray27);
        multiDirectional11.setStartConfiguration(doubleArray27);
        multiDirectional0.setStartConfiguration(doubleArray27);
        java.lang.Class<?> wildcardClass31 = doubleArray27.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertNull(realConvergenceChecker8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getMaxIterations();
        multiDirectional13.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional25.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker26);
        int int32 = multiDirectional0.getMaxIterations();
        int int33 = multiDirectional0.getMaxEvaluations();
        int int34 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional37.setMaxEvaluations((int) (byte) 0);
        int int40 = multiDirectional37.getMaxEvaluations();
        int int41 = multiDirectional37.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = multiDirectional37.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker42);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker42);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray18 = new double[] { 1.0d, 2147483647 };
        multiDirectional10.setStartConfiguration(doubleArray18);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional10.getConvergenceChecker();
        multiDirectional10.setMaxEvaluations((int) (byte) 100);
        int int23 = multiDirectional10.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker28);
        double[] doubleArray32 = new double[] { 1.0d, 2147483647 };
        multiDirectional24.setStartConfiguration(doubleArray32);
        multiDirectional10.setStartConfiguration(doubleArray32);
        multiDirectional9.setStartConfiguration(doubleArray32);
        multiDirectional6.setStartConfiguration(doubleArray32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxEvaluations();
        multiDirectional37.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = null;
        multiDirectional37.setConvergenceChecker(realConvergenceChecker41);
        double[] doubleArray44 = new double[] { 100.0d };
        multiDirectional37.setStartConfiguration(doubleArray44);
        int int46 = multiDirectional37.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxEvaluations();
        int int51 = multiDirectional49.getIterations();
        int int52 = multiDirectional49.getMaxEvaluations();
        int int53 = multiDirectional49.getMaxEvaluations();
        multiDirectional49.setMaxIterations((-1));
        int int56 = multiDirectional49.getMaxIterations();
        multiDirectional49.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = multiDirectional61.getConvergenceChecker();
        multiDirectional49.setConvergenceChecker(realConvergenceChecker62);
        multiDirectional47.setConvergenceChecker(realConvergenceChecker62);
        multiDirectional37.setConvergenceChecker(realConvergenceChecker62);
        multiDirectional37.setMaxIterations(100);
        multiDirectional37.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional72 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional72.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional77 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional80 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional81 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int82 = multiDirectional81.getMaxIterations();
        double[] doubleArray83 = new double[] {};
        multiDirectional81.setStartConfiguration(doubleArray83);
        int int85 = multiDirectional81.getMaxEvaluations();
        int int86 = multiDirectional81.getIterations();
        int int87 = multiDirectional81.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker88 = multiDirectional81.getConvergenceChecker();
        multiDirectional80.setConvergenceChecker(realConvergenceChecker88);
        double[] doubleArray90 = new double[] {};
        double[][] doubleArray91 = new double[][] { doubleArray90 };
        multiDirectional80.setStartConfiguration(doubleArray91);
        multiDirectional77.setStartConfiguration(doubleArray91);
        multiDirectional72.setStartConfiguration(doubleArray91);
        multiDirectional37.setStartConfiguration(doubleArray91);
        multiDirectional6.setStartConfiguration(doubleArray91);
        multiDirectional2.setStartConfiguration(doubleArray91);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker98 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker62);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker88);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(realConvergenceChecker98);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) 0L);
        int int3 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional6.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        int int10 = multiDirectional8.getIterations();
        int int11 = multiDirectional8.getMaxEvaluations();
        int int12 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxIterations((-1));
        int int15 = multiDirectional8.getIterations();
        multiDirectional8.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker18);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxEvaluations();
        multiDirectional20.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = null;
        multiDirectional20.setConvergenceChecker(realConvergenceChecker24);
        double[] doubleArray28 = new double[] { 1.0d, 2147483647 };
        multiDirectional20.setStartConfiguration(doubleArray28);
        multiDirectional8.setStartConfiguration(doubleArray28);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        int int33 = multiDirectional31.getIterations();
        int int34 = multiDirectional31.getMaxEvaluations();
        int int35 = multiDirectional31.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxIterations();
        double[] doubleArray38 = new double[] {};
        multiDirectional36.setStartConfiguration(doubleArray38);
        multiDirectional31.setStartConfiguration(doubleArray38);
        multiDirectional8.setStartConfiguration(doubleArray38);
        multiDirectional6.setStartConfiguration(doubleArray38);
        int int43 = multiDirectional6.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = multiDirectional6.getConvergenceChecker();
        int int45 = multiDirectional6.getMaxEvaluations();
        int int46 = multiDirectional6.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker47 = null;
        multiDirectional6.setConvergenceChecker(realConvergenceChecker47);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = multiDirectional51.getConvergenceChecker();
        multiDirectional6.setConvergenceChecker(realConvergenceChecker52);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker52);
        int int55 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        int int12 = multiDirectional0.getMaxEvaluations();
        int int13 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker16);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker22);
        double[] doubleArray26 = new double[] { 1.0d, 2147483647 };
        multiDirectional18.setStartConfiguration(doubleArray26);
        int int28 = multiDirectional18.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxIterations();
        double[] doubleArray31 = new double[] {};
        multiDirectional29.setStartConfiguration(doubleArray31);
        multiDirectional18.setStartConfiguration(doubleArray31);
        multiDirectional14.setStartConfiguration(doubleArray31);
        multiDirectional0.setStartConfiguration(doubleArray31);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        multiDirectional36.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = null;
        multiDirectional36.setConvergenceChecker(realConvergenceChecker40);
        double[] doubleArray43 = new double[] { 100.0d };
        multiDirectional36.setStartConfiguration(doubleArray43);
        int int45 = multiDirectional36.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxEvaluations();
        int int50 = multiDirectional48.getIterations();
        int int51 = multiDirectional48.getMaxEvaluations();
        int int52 = multiDirectional48.getMaxEvaluations();
        multiDirectional48.setMaxIterations((-1));
        int int55 = multiDirectional48.getMaxIterations();
        multiDirectional48.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker61 = multiDirectional60.getConvergenceChecker();
        multiDirectional48.setConvergenceChecker(realConvergenceChecker61);
        multiDirectional46.setConvergenceChecker(realConvergenceChecker61);
        multiDirectional36.setConvergenceChecker(realConvergenceChecker61);
        multiDirectional36.setMaxIterations(100);
        multiDirectional36.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional71.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional79 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional80 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int81 = multiDirectional80.getMaxIterations();
        double[] doubleArray82 = new double[] {};
        multiDirectional80.setStartConfiguration(doubleArray82);
        int int84 = multiDirectional80.getMaxEvaluations();
        int int85 = multiDirectional80.getIterations();
        int int86 = multiDirectional80.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker87 = multiDirectional80.getConvergenceChecker();
        multiDirectional79.setConvergenceChecker(realConvergenceChecker87);
        double[] doubleArray89 = new double[] {};
        double[][] doubleArray90 = new double[][] { doubleArray89 };
        multiDirectional79.setStartConfiguration(doubleArray90);
        multiDirectional76.setStartConfiguration(doubleArray90);
        multiDirectional71.setStartConfiguration(doubleArray90);
        multiDirectional36.setStartConfiguration(doubleArray90);
        multiDirectional0.setStartConfiguration(doubleArray90);
        multiDirectional0.setMaxIterations((int) (byte) 1);
        double[] doubleArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiDirectional0.setStartConfiguration(doubleArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker61);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2147483647 + "'", int84 == 2147483647);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2147483647 + "'", int86 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker87);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        int int19 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) (byte) 1);
        multiDirectional22.setMaxEvaluations(1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional22.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int29 = multiDirectional28.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = null;
        multiDirectional28.setConvergenceChecker(realConvergenceChecker30);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxEvaluations();
        int int43 = multiDirectional41.getIterations();
        int int44 = multiDirectional41.getMaxEvaluations();
        int int45 = multiDirectional41.getMaxEvaluations();
        multiDirectional41.setMaxIterations((-1));
        int int48 = multiDirectional41.getMaxIterations();
        multiDirectional41.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = multiDirectional53.getConvergenceChecker();
        multiDirectional41.setConvergenceChecker(realConvergenceChecker54);
        multiDirectional39.setConvergenceChecker(realConvergenceChecker54);
        multiDirectional38.setConvergenceChecker(realConvergenceChecker54);
        multiDirectional32.setConvergenceChecker(realConvergenceChecker54);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int66 = multiDirectional65.getMaxEvaluations();
        multiDirectional65.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker69 = null;
        multiDirectional65.setConvergenceChecker(realConvergenceChecker69);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int72 = multiDirectional71.getMaxEvaluations();
        multiDirectional71.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker75 = null;
        multiDirectional71.setConvergenceChecker(realConvergenceChecker75);
        double[] doubleArray79 = new double[] { 1.0d, 2147483647 };
        multiDirectional71.setStartConfiguration(doubleArray79);
        multiDirectional65.setStartConfiguration(doubleArray79);
        multiDirectional64.setStartConfiguration(doubleArray79);
        multiDirectional61.setStartConfiguration(doubleArray79);
        multiDirectional32.setStartConfiguration(doubleArray79);
        multiDirectional28.setStartConfiguration(doubleArray79);
        multiDirectional22.setStartConfiguration(doubleArray79);
        multiDirectional0.setStartConfiguration(doubleArray79);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker54);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2147483647 + "'", int66 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getIterations();
        multiDirectional2.setMaxIterations((int) 'a');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) (byte) 1);
        multiDirectional8.setMaxEvaluations(1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = multiDirectional8.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker11);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker11);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 100, (double) 1L);
        java.lang.Class<?> wildcardClass3 = multiDirectional2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional15.setConvergenceChecker(realConvergenceChecker17);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = null;
        multiDirectional19.setConvergenceChecker(realConvergenceChecker23);
        double[] doubleArray27 = new double[] { 1.0d, 2147483647 };
        multiDirectional19.setStartConfiguration(doubleArray27);
        int int29 = multiDirectional19.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxIterations();
        double[] doubleArray32 = new double[] {};
        multiDirectional30.setStartConfiguration(doubleArray32);
        multiDirectional19.setStartConfiguration(doubleArray32);
        multiDirectional15.setStartConfiguration(doubleArray32);
        multiDirectional0.setStartConfiguration(doubleArray32);
        int int37 = multiDirectional0.getEvaluations();
        int int38 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional0.getConvergenceChecker();
        java.lang.Class<?> wildcardClass40 = realConvergenceChecker39.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0L, (double) 'a');
        multiDirectional2.setMaxEvaluations((int) '#');
        int int5 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional2.getConvergenceChecker();
        int int7 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1, (double) 10.0f);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxIterations();
        int int5 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        multiDirectional6.setMaxIterations((int) (byte) 0);
        int int10 = multiDirectional6.getMaxIterations();
        int int11 = multiDirectional6.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = multiDirectional6.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int17 = multiDirectional16.getEvaluations();
        int int18 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = null;
        multiDirectional21.setConvergenceChecker(realConvergenceChecker25);
        double[] doubleArray29 = new double[] { 1.0d, 2147483647 };
        multiDirectional21.setStartConfiguration(doubleArray29);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = multiDirectional21.getConvergenceChecker();
        multiDirectional21.setMaxEvaluations((int) (byte) 100);
        multiDirectional21.setMaxIterations(35);
        double[] doubleArray37 = new double[] { 100.0d };
        multiDirectional21.setStartConfiguration(doubleArray37);
        multiDirectional16.setStartConfiguration(doubleArray37);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional45.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int55 = multiDirectional54.getMaxIterations();
        double[] doubleArray56 = new double[] {};
        multiDirectional54.setStartConfiguration(doubleArray56);
        int int58 = multiDirectional54.getMaxEvaluations();
        int int59 = multiDirectional54.getIterations();
        int int60 = multiDirectional54.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker61 = multiDirectional54.getConvergenceChecker();
        multiDirectional53.setConvergenceChecker(realConvergenceChecker61);
        double[] doubleArray63 = new double[] {};
        double[][] doubleArray64 = new double[][] { doubleArray63 };
        multiDirectional53.setStartConfiguration(doubleArray64);
        multiDirectional50.setStartConfiguration(doubleArray64);
        multiDirectional45.setStartConfiguration(doubleArray64);
        multiDirectional42.setStartConfiguration(doubleArray64);
        multiDirectional16.setStartConfiguration(doubleArray64);
        multiDirectional0.setStartConfiguration(doubleArray64);
        int int71 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional74 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker75 = multiDirectional74.getConvergenceChecker();
        int int76 = multiDirectional74.getEvaluations();
        multiDirectional74.setMaxIterations((int) (short) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional81 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional82 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int83 = multiDirectional82.getMaxEvaluations();
        int int84 = multiDirectional82.getIterations();
        int int85 = multiDirectional82.getMaxEvaluations();
        int int86 = multiDirectional82.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional87 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int88 = multiDirectional87.getMaxIterations();
        double[] doubleArray89 = new double[] {};
        multiDirectional87.setStartConfiguration(doubleArray89);
        multiDirectional82.setStartConfiguration(doubleArray89);
        multiDirectional81.setStartConfiguration(doubleArray89);
        multiDirectional74.setStartConfiguration(doubleArray89);
        multiDirectional0.setStartConfiguration(doubleArray89);
        multiDirectional0.setMaxEvaluations(52);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker31);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2147483647 + "'", int86 == 2147483647);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2147483647 + "'", int88 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional6.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        int int10 = multiDirectional8.getIterations();
        int int11 = multiDirectional8.getMaxEvaluations();
        int int12 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxIterations((-1));
        int int15 = multiDirectional8.getMaxIterations();
        int int16 = multiDirectional8.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = null;
        multiDirectional17.setConvergenceChecker(realConvergenceChecker19);
        multiDirectional17.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional25.getConvergenceChecker();
        multiDirectional17.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional8.setConvergenceChecker(realConvergenceChecker26);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        double[] doubleArray34 = new double[] {};
        multiDirectional32.setStartConfiguration(doubleArray34);
        int int36 = multiDirectional32.getMaxEvaluations();
        int int37 = multiDirectional32.getIterations();
        int int38 = multiDirectional32.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional32.getConvergenceChecker();
        multiDirectional31.setConvergenceChecker(realConvergenceChecker39);
        double[] doubleArray41 = new double[] {};
        double[][] doubleArray42 = new double[][] { doubleArray41 };
        multiDirectional31.setStartConfiguration(doubleArray42);
        multiDirectional8.setStartConfiguration(doubleArray42);
        multiDirectional6.setStartConfiguration(doubleArray42);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxEvaluations();
        int int48 = multiDirectional46.getIterations();
        int int49 = multiDirectional46.getMaxEvaluations();
        int int50 = multiDirectional46.getMaxEvaluations();
        multiDirectional46.setMaxIterations((-1));
        int int53 = multiDirectional46.getIterations();
        int int54 = multiDirectional46.getEvaluations();
        int int55 = multiDirectional46.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxEvaluations();
        multiDirectional56.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = null;
        multiDirectional56.setConvergenceChecker(realConvergenceChecker60);
        double[] doubleArray64 = new double[] { 1.0d, 2147483647 };
        multiDirectional56.setStartConfiguration(doubleArray64);
        int int66 = multiDirectional56.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxIterations();
        double[] doubleArray69 = new double[] {};
        multiDirectional67.setStartConfiguration(doubleArray69);
        multiDirectional56.setStartConfiguration(doubleArray69);
        multiDirectional46.setStartConfiguration(doubleArray69);
        multiDirectional6.setStartConfiguration(doubleArray69);
        multiDirectional0.setStartConfiguration(doubleArray69);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2147483647 + "'", int66 == 2147483647);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional16.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker17);
        int int19 = multiDirectional0.getIterations();
        multiDirectional0.setMaxEvaluations(1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional24.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = multiDirectional32.getConvergenceChecker();
        multiDirectional24.setConvergenceChecker(realConvergenceChecker33);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker33);
        int int36 = multiDirectional0.getMaxEvaluations();
        int int37 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        multiDirectional2.setMaxEvaluations((int) '#');
        int int7 = multiDirectional2.getEvaluations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction8 = null;
        org.apache.commons.math.optimization.GoalType goalType9 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray17 = new double[] { 100.0d };
        multiDirectional10.setStartConfiguration(doubleArray17);
        multiDirectional10.setMaxIterations(1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxIterations();
        double[] doubleArray23 = new double[] {};
        multiDirectional21.setStartConfiguration(doubleArray23);
        multiDirectional10.setStartConfiguration(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair26 = multiDirectional2.optimize(multivariateRealFunction8, goalType9, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 2147483647);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int3 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations((int) (byte) 0);
        int int6 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker16);
        double[] doubleArray20 = new double[] { 1.0d, 2147483647 };
        multiDirectional12.setStartConfiguration(doubleArray20);
        multiDirectional0.setStartConfiguration(doubleArray20);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        multiDirectional23.setStartConfiguration(doubleArray30);
        multiDirectional0.setStartConfiguration(doubleArray30);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional0.getConvergenceChecker();
        int int35 = multiDirectional0.getMaxIterations();
        int int36 = multiDirectional0.getIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction37 = null;
        org.apache.commons.math.optimization.GoalType goalType38 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxEvaluations();
        multiDirectional45.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = null;
        multiDirectional45.setConvergenceChecker(realConvergenceChecker49);
        double[] doubleArray53 = new double[] { 1.0d, 2147483647 };
        multiDirectional45.setStartConfiguration(doubleArray53);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = multiDirectional45.getConvergenceChecker();
        multiDirectional45.setMaxEvaluations((int) (byte) 100);
        multiDirectional45.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int61 = multiDirectional60.getMaxEvaluations();
        multiDirectional60.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = null;
        multiDirectional60.setConvergenceChecker(realConvergenceChecker64);
        double[] doubleArray68 = new double[] { 1.0d, 2147483647 };
        multiDirectional60.setStartConfiguration(doubleArray68);
        int int70 = multiDirectional60.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int72 = multiDirectional71.getMaxIterations();
        double[] doubleArray73 = new double[] {};
        multiDirectional71.setStartConfiguration(doubleArray73);
        multiDirectional60.setStartConfiguration(doubleArray73);
        multiDirectional45.setStartConfiguration(doubleArray73);
        multiDirectional44.setStartConfiguration(doubleArray73);
        int int78 = multiDirectional44.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional79 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int80 = multiDirectional79.getMaxIterations();
        double[] doubleArray81 = new double[] {};
        multiDirectional79.setStartConfiguration(doubleArray81);
        int int83 = multiDirectional79.getMaxEvaluations();
        int int84 = multiDirectional79.getIterations();
        double[] doubleArray90 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional79.setStartConfiguration(doubleArray90);
        multiDirectional44.setStartConfiguration(doubleArray90);
        multiDirectional41.setStartConfiguration(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair94 = multiDirectional0.optimize(multivariateRealFunction37, goalType38, doubleArray90);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker55);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional2.setMaxEvaluations((int) (byte) 0);
        double[] doubleArray7 = new double[] { (-1.0f), ' ' };
        multiDirectional2.setStartConfiguration(doubleArray7);
        multiDirectional2.setMaxIterations((int) (byte) 0);
        multiDirectional2.setMaxEvaluations((int) (byte) 0);
        int int13 = multiDirectional2.getMaxIterations();
        int int14 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 32.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 10, (double) 1L);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        int int9 = multiDirectional7.getIterations();
        int int10 = multiDirectional7.getMaxEvaluations();
        int int11 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxIterations((-1));
        int int14 = multiDirectional7.getMaxIterations();
        int int15 = multiDirectional7.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional16.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional16.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxIterations();
        double[] doubleArray33 = new double[] {};
        multiDirectional31.setStartConfiguration(doubleArray33);
        int int35 = multiDirectional31.getMaxEvaluations();
        int int36 = multiDirectional31.getIterations();
        int int37 = multiDirectional31.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional31.getConvergenceChecker();
        multiDirectional30.setConvergenceChecker(realConvergenceChecker38);
        double[] doubleArray40 = new double[] {};
        double[][] doubleArray41 = new double[][] { doubleArray40 };
        multiDirectional30.setStartConfiguration(doubleArray41);
        multiDirectional7.setStartConfiguration(doubleArray41);
        multiDirectional2.setStartConfiguration(doubleArray41);
        int int45 = multiDirectional2.getMaxIterations();
        java.lang.Class<?> wildcardClass46 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(100.0d, (double) 35);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker16);
        multiDirectional0.setMaxIterations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional0.getConvergenceChecker();
        java.lang.Class<?> wildcardClass21 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertNotNull(realConvergenceChecker20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setMaxIterations(100);
        multiDirectional0.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional35.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxIterations();
        double[] doubleArray46 = new double[] {};
        multiDirectional44.setStartConfiguration(doubleArray46);
        int int48 = multiDirectional44.getMaxEvaluations();
        int int49 = multiDirectional44.getIterations();
        int int50 = multiDirectional44.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker51 = multiDirectional44.getConvergenceChecker();
        multiDirectional43.setConvergenceChecker(realConvergenceChecker51);
        double[] doubleArray53 = new double[] {};
        double[][] doubleArray54 = new double[][] { doubleArray53 };
        multiDirectional43.setStartConfiguration(doubleArray54);
        multiDirectional40.setStartConfiguration(doubleArray54);
        multiDirectional35.setStartConfiguration(doubleArray54);
        multiDirectional0.setStartConfiguration(doubleArray54);
        multiDirectional0.setMaxEvaluations(32);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker16);
        int int18 = multiDirectional3.getMaxIterations();
        int int19 = multiDirectional3.getEvaluations();
        int int20 = multiDirectional3.getMaxEvaluations();
        int int21 = multiDirectional3.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional3.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker22);
        int int24 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker27);
        int int29 = multiDirectional25.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        int int32 = multiDirectional30.getIterations();
        int int33 = multiDirectional30.getMaxEvaluations();
        int int34 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxIterations((-1));
        int int37 = multiDirectional30.getMaxIterations();
        multiDirectional30.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = multiDirectional42.getConvergenceChecker();
        multiDirectional30.setConvergenceChecker(realConvergenceChecker43);
        int int45 = multiDirectional30.getMaxIterations();
        int int46 = multiDirectional30.getEvaluations();
        int int47 = multiDirectional30.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = multiDirectional30.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int52 = multiDirectional51.getEvaluations();
        int int53 = multiDirectional51.getMaxEvaluations();
        multiDirectional51.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = multiDirectional51.getConvergenceChecker();
        multiDirectional30.setConvergenceChecker(realConvergenceChecker56);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int61 = multiDirectional60.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional62 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int63 = multiDirectional62.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int65 = multiDirectional64.getMaxEvaluations();
        int int66 = multiDirectional64.getIterations();
        int int67 = multiDirectional64.getMaxEvaluations();
        int int68 = multiDirectional64.getMaxEvaluations();
        multiDirectional64.setMaxIterations((-1));
        int int71 = multiDirectional64.getMaxIterations();
        multiDirectional64.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker77 = multiDirectional76.getConvergenceChecker();
        multiDirectional64.setConvergenceChecker(realConvergenceChecker77);
        multiDirectional62.setConvergenceChecker(realConvergenceChecker77);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker80 = multiDirectional62.getConvergenceChecker();
        multiDirectional60.setConvergenceChecker(realConvergenceChecker80);
        multiDirectional30.setConvergenceChecker(realConvergenceChecker80);
        multiDirectional25.setConvergenceChecker(realConvergenceChecker80);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker80);
        int int85 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker77);
        org.junit.Assert.assertNotNull(realConvergenceChecker80);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        int int8 = multiDirectional6.getIterations();
        int int9 = multiDirectional6.getMaxEvaluations();
        int int10 = multiDirectional6.getMaxEvaluations();
        multiDirectional6.setMaxIterations((-1));
        int int13 = multiDirectional6.getIterations();
        multiDirectional6.setMaxIterations((int) '#');
        multiDirectional6.setMaxEvaluations(0);
        multiDirectional6.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional22.getConvergenceChecker();
        multiDirectional6.setConvergenceChecker(realConvergenceChecker23);
        int int25 = multiDirectional6.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional6.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker26);
        int int28 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxIterations();
        double[] doubleArray8 = new double[] {};
        multiDirectional6.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional6.getMaxEvaluations();
        int int11 = multiDirectional6.getIterations();
        int int12 = multiDirectional6.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional6.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker13);
        double[] doubleArray15 = new double[] {};
        double[][] doubleArray16 = new double[][] { doubleArray15 };
        multiDirectional5.setStartConfiguration(doubleArray16);
        multiDirectional2.setStartConfiguration(doubleArray16);
        double[] doubleArray23 = new double[] { 100L, (-1), 1.0f, 10 };
        multiDirectional2.setStartConfiguration(doubleArray23);
        int int25 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1), (double) (byte) 100);
        int int3 = multiDirectional2.getEvaluations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction4 = null;
        org.apache.commons.math.optimization.GoalType goalType5 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        int int8 = multiDirectional6.getIterations();
        int int9 = multiDirectional6.getMaxEvaluations();
        int int10 = multiDirectional6.getMaxEvaluations();
        multiDirectional6.setMaxIterations((-1));
        int int13 = multiDirectional6.getIterations();
        int int14 = multiDirectional6.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional6.getConvergenceChecker();
        int int16 = multiDirectional6.getEvaluations();
        multiDirectional6.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = null;
        multiDirectional19.setConvergenceChecker(realConvergenceChecker21);
        multiDirectional19.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxEvaluations();
        multiDirectional28.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = null;
        multiDirectional28.setConvergenceChecker(realConvergenceChecker32);
        double[] doubleArray36 = new double[] { 1.0d, 2147483647 };
        multiDirectional28.setStartConfiguration(doubleArray36);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional28.getConvergenceChecker();
        multiDirectional28.setMaxEvaluations((int) (byte) 100);
        multiDirectional28.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxEvaluations();
        multiDirectional43.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker47 = null;
        multiDirectional43.setConvergenceChecker(realConvergenceChecker47);
        double[] doubleArray51 = new double[] { 1.0d, 2147483647 };
        multiDirectional43.setStartConfiguration(doubleArray51);
        int int53 = multiDirectional43.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int55 = multiDirectional54.getMaxIterations();
        double[] doubleArray56 = new double[] {};
        multiDirectional54.setStartConfiguration(doubleArray56);
        multiDirectional43.setStartConfiguration(doubleArray56);
        multiDirectional28.setStartConfiguration(doubleArray56);
        multiDirectional27.setStartConfiguration(doubleArray56);
        multiDirectional19.setStartConfiguration(doubleArray56);
        multiDirectional6.setStartConfiguration(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair63 = multiDirectional2.optimize(multivariateRealFunction4, goalType5, doubleArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getIterations();
        int int5 = multiDirectional2.getMaxEvaluations();
        int int6 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxIterations((-1));
        int int9 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional14.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker15);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker15);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        int int19 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(10);
        int int22 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker15);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        multiDirectional0.setMaxIterations((-1));
        int int26 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) '4');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        java.lang.Class<?> wildcardClass4 = realConvergenceChecker3.getClass();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 97, 0.0d);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxIterations();
        int int5 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (short) -1);
        int int8 = multiDirectional0.getMaxEvaluations();
        int int9 = multiDirectional0.getMaxIterations();
        int int10 = multiDirectional0.getIterations();
        multiDirectional0.setMaxEvaluations((-1));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations(1);
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        java.lang.Class<?> wildcardClass11 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(realConvergenceChecker10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        multiDirectional0.setMaxEvaluations(2147483647);
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxIterations();
        double[] doubleArray14 = new double[] {};
        multiDirectional12.setStartConfiguration(doubleArray14);
        int int16 = multiDirectional12.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxEvaluations();
        int int19 = multiDirectional17.getIterations();
        int int20 = multiDirectional17.getMaxEvaluations();
        int int21 = multiDirectional17.getMaxEvaluations();
        multiDirectional17.setMaxIterations((-1));
        int int24 = multiDirectional17.getIterations();
        multiDirectional17.setMaxIterations((int) '#');
        multiDirectional17.setMaxEvaluations(0);
        multiDirectional17.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional33.getConvergenceChecker();
        multiDirectional17.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional12.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional0.setMaxEvaluations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = multiDirectional42.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker43);
        int int45 = multiDirectional0.getEvaluations();
        java.lang.Class<?> wildcardClass46 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertNotNull(realConvergenceChecker43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, 10.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = null;
        multiDirectional27.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = null;
        multiDirectional31.setConvergenceChecker(realConvergenceChecker35);
        double[] doubleArray39 = new double[] { 1.0d, 2147483647 };
        multiDirectional31.setStartConfiguration(doubleArray39);
        int int41 = multiDirectional31.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxIterations();
        double[] doubleArray44 = new double[] {};
        multiDirectional42.setStartConfiguration(doubleArray44);
        multiDirectional31.setStartConfiguration(doubleArray44);
        multiDirectional27.setStartConfiguration(doubleArray44);
        multiDirectional12.setStartConfiguration(doubleArray44);
        multiDirectional11.setStartConfiguration(doubleArray44);
        multiDirectional8.setStartConfiguration(doubleArray44);
        multiDirectional0.setStartConfiguration(doubleArray44);
        int int52 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (-1.0f));
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100.0f, (double) 100.0f);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) 1L);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getIterations();
        int int5 = multiDirectional2.getMaxEvaluations();
        int int6 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxIterations((-1));
        int int9 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional14.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker15);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker15);
        multiDirectional0.setMaxEvaluations((int) (short) 10);
        multiDirectional0.setMaxIterations(32);
        int int22 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) (byte) -1);
        multiDirectional0.setMaxIterations(0);
        int int27 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations(10);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker18);
        int int22 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations(2147483647);
        int int25 = multiDirectional2.getIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction26 = null;
        org.apache.commons.math.optimization.GoalType goalType27 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional30.setMaxEvaluations((int) (byte) 0);
        int int33 = multiDirectional30.getMaxEvaluations();
        int int34 = multiDirectional30.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional30.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int39 = multiDirectional38.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = null;
        multiDirectional38.setConvergenceChecker(realConvergenceChecker40);
        int int42 = multiDirectional38.getMaxEvaluations();
        int int43 = multiDirectional38.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxEvaluations();
        multiDirectional44.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = null;
        multiDirectional44.setConvergenceChecker(realConvergenceChecker48);
        double[] doubleArray52 = new double[] { 1.0d, 2147483647 };
        multiDirectional44.setStartConfiguration(doubleArray52);
        multiDirectional38.setStartConfiguration(doubleArray52);
        multiDirectional30.setStartConfiguration(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair56 = multiDirectional2.optimize(multivariateRealFunction26, goalType27, doubleArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        int int13 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = multiDirectional0.getConvergenceChecker();
        int int15 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getIterations();
        int int11 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100.0f, (double) (byte) 1);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional2.setMaxEvaluations((int) (byte) 0);
        double[] doubleArray7 = new double[] { (-1.0f), ' ' };
        multiDirectional2.setStartConfiguration(doubleArray7);
        multiDirectional2.setMaxIterations((int) (byte) 0);
        multiDirectional2.setMaxEvaluations((int) (byte) 0);
        multiDirectional2.setMaxIterations((int) ' ');
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 32.0]");
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(100);
        int int11 = multiDirectional0.getMaxEvaluations();
        int int12 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations((int) 'a');
        multiDirectional0.setMaxEvaluations((-1));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getIterations();
        int int5 = multiDirectional2.getMaxEvaluations();
        int int6 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxIterations((-1));
        int int9 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional14.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker15);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker15);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction19 = null;
        org.apache.commons.math.optimization.GoalType goalType20 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        int int26 = multiDirectional24.getIterations();
        int int27 = multiDirectional24.getMaxEvaluations();
        int int28 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxIterations((-1));
        int int31 = multiDirectional24.getMaxIterations();
        multiDirectional24.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional36.getConvergenceChecker();
        multiDirectional24.setConvergenceChecker(realConvergenceChecker37);
        int int39 = multiDirectional24.getMaxIterations();
        int int40 = multiDirectional24.getEvaluations();
        int int41 = multiDirectional24.getMaxEvaluations();
        int int42 = multiDirectional24.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = multiDirectional24.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = multiDirectional24.getConvergenceChecker();
        multiDirectional23.setConvergenceChecker(realConvergenceChecker44);
        int int46 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxEvaluations();
        int int49 = multiDirectional47.getIterations();
        int int50 = multiDirectional47.getMaxEvaluations();
        int int51 = multiDirectional47.getMaxEvaluations();
        multiDirectional47.setMaxIterations((-1));
        int int54 = multiDirectional47.getIterations();
        int int55 = multiDirectional47.getMaxIterations();
        multiDirectional47.setMaxEvaluations(100);
        multiDirectional47.setMaxIterations((int) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = multiDirectional47.getConvergenceChecker();
        multiDirectional47.setMaxEvaluations((int) 'a');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int67 = multiDirectional66.getMaxEvaluations();
        multiDirectional66.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker70 = null;
        multiDirectional66.setConvergenceChecker(realConvergenceChecker70);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional72 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int73 = multiDirectional72.getMaxEvaluations();
        multiDirectional72.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker76 = null;
        multiDirectional72.setConvergenceChecker(realConvergenceChecker76);
        double[] doubleArray80 = new double[] { 1.0d, 2147483647 };
        multiDirectional72.setStartConfiguration(doubleArray80);
        multiDirectional66.setStartConfiguration(doubleArray80);
        multiDirectional65.setStartConfiguration(doubleArray80);
        multiDirectional47.setStartConfiguration(doubleArray80);
        multiDirectional23.setStartConfiguration(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair86 = multiDirectional0.optimize(multivariateRealFunction19, goalType20, doubleArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker15);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker43);
        org.junit.Assert.assertNotNull(realConvergenceChecker44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, 0.0d);
        multiDirectional2.setMaxIterations((int) (byte) 10);
        multiDirectional2.setMaxIterations(0);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int6 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations(1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        int int16 = multiDirectional14.getIterations();
        int int17 = multiDirectional14.getMaxEvaluations();
        int int18 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxIterations((-1));
        int int21 = multiDirectional14.getMaxIterations();
        multiDirectional14.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional26.getConvergenceChecker();
        multiDirectional14.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional12.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker27);
        int int31 = multiDirectional11.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int35 = multiDirectional34.getEvaluations();
        int int36 = multiDirectional34.getMaxEvaluations();
        multiDirectional34.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional34.getConvergenceChecker();
        multiDirectional11.setConvergenceChecker(realConvergenceChecker39);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker39);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction42 = null;
        org.apache.commons.math.optimization.GoalType goalType43 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int47 = multiDirectional46.getMaxEvaluations();
        int int48 = multiDirectional46.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxEvaluations();
        multiDirectional49.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = null;
        multiDirectional49.setConvergenceChecker(realConvergenceChecker53);
        double[] doubleArray56 = new double[] { 100.0d };
        multiDirectional49.setStartConfiguration(doubleArray56);
        multiDirectional46.setStartConfiguration(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair59 = multiDirectional0.optimize(multivariateRealFunction42, goalType43, doubleArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0]");
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, 100.0d);
        int int3 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker14);
        int int16 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations(10);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker17);
        org.junit.Assert.assertNull(realConvergenceChecker18);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getMaxIterations();
        multiDirectional13.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional25.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker26);
        int int32 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = multiDirectional0.getConvergenceChecker();
        int int34 = multiDirectional0.getMaxEvaluations();
        int int35 = multiDirectional0.getEvaluations();
        int int36 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxEvaluations((int) (byte) 0);
        multiDirectional0.setMaxIterations(0);
        multiDirectional0.setMaxIterations((int) (byte) -1);
        int int20 = multiDirectional0.getIterations();
        int int21 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction24 = null;
        org.apache.commons.math.optimization.GoalType goalType25 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        int int28 = multiDirectional26.getIterations();
        int int29 = multiDirectional26.getMaxEvaluations();
        int int30 = multiDirectional26.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = multiDirectional26.getConvergenceChecker();
        int int32 = multiDirectional26.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, 10.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        int int38 = multiDirectional36.getIterations();
        int int39 = multiDirectional36.getMaxEvaluations();
        int int40 = multiDirectional36.getMaxEvaluations();
        multiDirectional36.setMaxIterations((-1));
        int int43 = multiDirectional36.getMaxIterations();
        multiDirectional36.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = multiDirectional48.getConvergenceChecker();
        multiDirectional36.setConvergenceChecker(realConvergenceChecker49);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = null;
        multiDirectional51.setConvergenceChecker(realConvergenceChecker53);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxEvaluations();
        multiDirectional55.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker59 = null;
        multiDirectional55.setConvergenceChecker(realConvergenceChecker59);
        double[] doubleArray63 = new double[] { 1.0d, 2147483647 };
        multiDirectional55.setStartConfiguration(doubleArray63);
        int int65 = multiDirectional55.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int67 = multiDirectional66.getMaxIterations();
        double[] doubleArray68 = new double[] {};
        multiDirectional66.setStartConfiguration(doubleArray68);
        multiDirectional55.setStartConfiguration(doubleArray68);
        multiDirectional51.setStartConfiguration(doubleArray68);
        multiDirectional36.setStartConfiguration(doubleArray68);
        multiDirectional35.setStartConfiguration(doubleArray68);
        multiDirectional26.setStartConfiguration(doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair75 = multiDirectional0.optimize(multivariateRealFunction24, goalType25, doubleArray68);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.FunctionEvaluationException; message: org.apache.commons.math.MaxEvaluationsExceededException: Maximal number of evaluations (0) exceeded");
        } catch (org.apache.commons.math.FunctionEvaluationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        int int10 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = multiDirectional0.getConvergenceChecker();
        int int12 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        int int17 = multiDirectional15.getEvaluations();
        multiDirectional15.setMaxEvaluations(100);
        multiDirectional15.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        int int25 = multiDirectional24.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        int int28 = multiDirectional26.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        int int33 = multiDirectional31.getIterations();
        int int34 = multiDirectional31.getMaxEvaluations();
        int int35 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxIterations((-1));
        int int38 = multiDirectional31.getMaxIterations();
        multiDirectional31.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = multiDirectional43.getConvergenceChecker();
        multiDirectional31.setConvergenceChecker(realConvergenceChecker44);
        multiDirectional29.setConvergenceChecker(realConvergenceChecker44);
        multiDirectional26.setConvergenceChecker(realConvergenceChecker44);
        multiDirectional24.setConvergenceChecker(realConvergenceChecker44);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = multiDirectional24.getConvergenceChecker();
        int int50 = multiDirectional24.getMaxEvaluations();
        int int51 = multiDirectional24.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxEvaluations();
        multiDirectional52.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = null;
        multiDirectional52.setConvergenceChecker(realConvergenceChecker56);
        double[] doubleArray59 = new double[] { 100.0d };
        multiDirectional52.setStartConfiguration(doubleArray59);
        int int61 = multiDirectional52.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = null;
        multiDirectional52.setConvergenceChecker(realConvergenceChecker62);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int71 = multiDirectional70.getMaxIterations();
        double[] doubleArray72 = new double[] {};
        multiDirectional70.setStartConfiguration(doubleArray72);
        int int74 = multiDirectional70.getMaxEvaluations();
        int int75 = multiDirectional70.getIterations();
        int int76 = multiDirectional70.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker77 = multiDirectional70.getConvergenceChecker();
        multiDirectional69.setConvergenceChecker(realConvergenceChecker77);
        double[] doubleArray79 = new double[] {};
        double[][] doubleArray80 = new double[][] { doubleArray79 };
        multiDirectional69.setStartConfiguration(doubleArray80);
        multiDirectional66.setStartConfiguration(doubleArray80);
        multiDirectional52.setStartConfiguration(doubleArray80);
        multiDirectional24.setStartConfiguration(doubleArray80);
        multiDirectional15.setStartConfiguration(doubleArray80);
        multiDirectional0.setStartConfiguration(doubleArray80);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker44);
        org.junit.Assert.assertNotNull(realConvergenceChecker49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxIterations();
        double[] doubleArray7 = new double[] {};
        multiDirectional5.setStartConfiguration(doubleArray7);
        multiDirectional5.setMaxIterations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = null;
        multiDirectional11.setConvergenceChecker(realConvergenceChecker15);
        double[] doubleArray19 = new double[] { 1.0d, 2147483647 };
        multiDirectional11.setStartConfiguration(doubleArray19);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional11.getConvergenceChecker();
        multiDirectional11.setMaxEvaluations((int) (byte) 100);
        multiDirectional11.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional11.getConvergenceChecker();
        int int27 = multiDirectional11.getEvaluations();
        int int28 = multiDirectional11.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        int int31 = multiDirectional29.getIterations();
        int int32 = multiDirectional29.getMaxEvaluations();
        int int33 = multiDirectional29.getMaxEvaluations();
        multiDirectional29.setMaxIterations((-1));
        int int36 = multiDirectional29.getIterations();
        int int37 = multiDirectional29.getEvaluations();
        int int38 = multiDirectional29.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = null;
        multiDirectional39.setConvergenceChecker(realConvergenceChecker43);
        double[] doubleArray47 = new double[] { 1.0d, 2147483647 };
        multiDirectional39.setStartConfiguration(doubleArray47);
        int int49 = multiDirectional39.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxIterations();
        double[] doubleArray52 = new double[] {};
        multiDirectional50.setStartConfiguration(doubleArray52);
        multiDirectional39.setStartConfiguration(doubleArray52);
        multiDirectional29.setStartConfiguration(doubleArray52);
        multiDirectional11.setStartConfiguration(doubleArray52);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int58 = multiDirectional57.getMaxEvaluations();
        int int59 = multiDirectional57.getIterations();
        int int60 = multiDirectional57.getMaxEvaluations();
        int int61 = multiDirectional57.getMaxEvaluations();
        multiDirectional57.setMaxIterations((-1));
        int int64 = multiDirectional57.getMaxIterations();
        multiDirectional57.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker70 = multiDirectional69.getConvergenceChecker();
        multiDirectional57.setConvergenceChecker(realConvergenceChecker70);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional72 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int73 = multiDirectional72.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker74 = null;
        multiDirectional72.setConvergenceChecker(realConvergenceChecker74);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int77 = multiDirectional76.getMaxEvaluations();
        multiDirectional76.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker80 = null;
        multiDirectional76.setConvergenceChecker(realConvergenceChecker80);
        double[] doubleArray84 = new double[] { 1.0d, 2147483647 };
        multiDirectional76.setStartConfiguration(doubleArray84);
        int int86 = multiDirectional76.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional87 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int88 = multiDirectional87.getMaxIterations();
        double[] doubleArray89 = new double[] {};
        multiDirectional87.setStartConfiguration(doubleArray89);
        multiDirectional76.setStartConfiguration(doubleArray89);
        multiDirectional72.setStartConfiguration(doubleArray89);
        multiDirectional57.setStartConfiguration(doubleArray89);
        multiDirectional11.setStartConfiguration(doubleArray89);
        multiDirectional5.setStartConfiguration(doubleArray89);
        multiDirectional2.setStartConfiguration(doubleArray89);
        int int97 = multiDirectional2.getEvaluations();
        int int98 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker21);
        org.junit.Assert.assertNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2147483647 + "'", int86 == 2147483647);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2147483647 + "'", int88 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        int int8 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        int int16 = multiDirectional14.getIterations();
        int int17 = multiDirectional14.getMaxEvaluations();
        int int18 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxIterations((-1));
        int int21 = multiDirectional14.getMaxIterations();
        multiDirectional14.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional26.getConvergenceChecker();
        multiDirectional14.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional12.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional9.setConvergenceChecker(realConvergenceChecker27);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxIterations();
        double[] doubleArray33 = new double[] {};
        multiDirectional31.setStartConfiguration(doubleArray33);
        int int35 = multiDirectional31.getMaxEvaluations();
        int int36 = multiDirectional31.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional31.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxEvaluations();
        multiDirectional38.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = null;
        multiDirectional38.setConvergenceChecker(realConvergenceChecker42);
        double[] doubleArray46 = new double[] { 1.0d, 2147483647 };
        multiDirectional38.setStartConfiguration(doubleArray46);
        multiDirectional38.setMaxIterations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int53 = multiDirectional52.getEvaluations();
        int int54 = multiDirectional52.getMaxEvaluations();
        multiDirectional52.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int58 = multiDirectional57.getMaxEvaluations();
        int int59 = multiDirectional57.getIterations();
        int int60 = multiDirectional57.getMaxEvaluations();
        int int61 = multiDirectional57.getMaxEvaluations();
        multiDirectional57.setMaxIterations((-1));
        int int64 = multiDirectional57.getMaxIterations();
        int int65 = multiDirectional57.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int67 = multiDirectional66.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker68 = null;
        multiDirectional66.setConvergenceChecker(realConvergenceChecker68);
        multiDirectional66.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional74 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker75 = multiDirectional74.getConvergenceChecker();
        multiDirectional66.setConvergenceChecker(realConvergenceChecker75);
        multiDirectional57.setConvergenceChecker(realConvergenceChecker75);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional80 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional81 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int82 = multiDirectional81.getMaxIterations();
        double[] doubleArray83 = new double[] {};
        multiDirectional81.setStartConfiguration(doubleArray83);
        int int85 = multiDirectional81.getMaxEvaluations();
        int int86 = multiDirectional81.getIterations();
        int int87 = multiDirectional81.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker88 = multiDirectional81.getConvergenceChecker();
        multiDirectional80.setConvergenceChecker(realConvergenceChecker88);
        double[] doubleArray90 = new double[] {};
        double[][] doubleArray91 = new double[][] { doubleArray90 };
        multiDirectional80.setStartConfiguration(doubleArray91);
        multiDirectional57.setStartConfiguration(doubleArray91);
        multiDirectional52.setStartConfiguration(doubleArray91);
        multiDirectional38.setStartConfiguration(doubleArray91);
        multiDirectional31.setStartConfiguration(doubleArray91);
        multiDirectional9.setStartConfiguration(doubleArray91);
        multiDirectional0.setStartConfiguration(doubleArray91);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker75);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker88);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional16.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker17);
        int int19 = multiDirectional0.getMaxEvaluations();
        int int20 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = null;
        multiDirectional21.setConvergenceChecker(realConvergenceChecker25);
        double[] doubleArray29 = new double[] { 1.0d, 2147483647 };
        multiDirectional21.setStartConfiguration(doubleArray29);
        int int31 = multiDirectional21.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        double[] doubleArray34 = new double[] {};
        multiDirectional32.setStartConfiguration(doubleArray34);
        multiDirectional21.setStartConfiguration(doubleArray34);
        multiDirectional21.setMaxEvaluations((int) 'a');
        int int39 = multiDirectional21.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        int int42 = multiDirectional40.getIterations();
        int int43 = multiDirectional40.getMaxEvaluations();
        int int44 = multiDirectional40.getMaxEvaluations();
        multiDirectional40.setMaxIterations((-1));
        int int47 = multiDirectional40.getIterations();
        int int48 = multiDirectional40.getEvaluations();
        int int49 = multiDirectional40.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxEvaluations();
        multiDirectional50.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = null;
        multiDirectional50.setConvergenceChecker(realConvergenceChecker54);
        double[] doubleArray58 = new double[] { 1.0d, 2147483647 };
        multiDirectional50.setStartConfiguration(doubleArray58);
        int int60 = multiDirectional50.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int62 = multiDirectional61.getMaxIterations();
        double[] doubleArray63 = new double[] {};
        multiDirectional61.setStartConfiguration(doubleArray63);
        multiDirectional50.setStartConfiguration(doubleArray63);
        multiDirectional40.setStartConfiguration(doubleArray63);
        multiDirectional21.setStartConfiguration(doubleArray63);
        multiDirectional0.setStartConfiguration(doubleArray63);
        int int69 = multiDirectional0.getEvaluations();
        int int70 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker71);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100L, (double) 100L);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(35);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker12);
        multiDirectional10.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional18.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker19);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker19);
        int int22 = multiDirectional0.getMaxIterations();
        int int23 = multiDirectional0.getEvaluations();
        int int24 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 'a', (double) 2147483647);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxEvaluations();
        multiDirectional28.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = null;
        multiDirectional28.setConvergenceChecker(realConvergenceChecker32);
        double[] doubleArray36 = new double[] { 1.0d, 2147483647 };
        multiDirectional28.setStartConfiguration(doubleArray36);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional28.getConvergenceChecker();
        multiDirectional28.setMaxEvaluations((int) (byte) 100);
        multiDirectional28.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = multiDirectional28.getConvergenceChecker();
        int int44 = multiDirectional28.getEvaluations();
        int int45 = multiDirectional28.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxEvaluations();
        int int48 = multiDirectional46.getIterations();
        int int49 = multiDirectional46.getMaxEvaluations();
        int int50 = multiDirectional46.getMaxEvaluations();
        multiDirectional46.setMaxIterations((-1));
        int int53 = multiDirectional46.getIterations();
        int int54 = multiDirectional46.getEvaluations();
        int int55 = multiDirectional46.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxEvaluations();
        multiDirectional56.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = null;
        multiDirectional56.setConvergenceChecker(realConvergenceChecker60);
        double[] doubleArray64 = new double[] { 1.0d, 2147483647 };
        multiDirectional56.setStartConfiguration(doubleArray64);
        int int66 = multiDirectional56.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxIterations();
        double[] doubleArray69 = new double[] {};
        multiDirectional67.setStartConfiguration(doubleArray69);
        multiDirectional56.setStartConfiguration(doubleArray69);
        multiDirectional46.setStartConfiguration(doubleArray69);
        multiDirectional28.setStartConfiguration(doubleArray69);
        multiDirectional27.setStartConfiguration(doubleArray69);
        multiDirectional0.setStartConfiguration(doubleArray69);
        int int76 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker38);
        org.junit.Assert.assertNull(realConvergenceChecker43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2147483647 + "'", int66 == 2147483647);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxIterations((int) (byte) -1);
        int int15 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations(1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, 0.0d);
        int int3 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = null;
        multiDirectional11.setConvergenceChecker(realConvergenceChecker13);
        multiDirectional11.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxIterations();
        double[] doubleArray19 = new double[] {};
        multiDirectional17.setStartConfiguration(doubleArray19);
        int int21 = multiDirectional17.getMaxEvaluations();
        int int22 = multiDirectional17.getMaxIterations();
        int int23 = multiDirectional17.getMaxIterations();
        multiDirectional17.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        int int28 = multiDirectional26.getIterations();
        int int29 = multiDirectional26.getMaxEvaluations();
        int int30 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxIterations((-1));
        int int33 = multiDirectional26.getMaxIterations();
        int int34 = multiDirectional26.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional35.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional35.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = multiDirectional43.getConvergenceChecker();
        multiDirectional35.setConvergenceChecker(realConvergenceChecker44);
        multiDirectional26.setConvergenceChecker(realConvergenceChecker44);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxIterations();
        double[] doubleArray52 = new double[] {};
        multiDirectional50.setStartConfiguration(doubleArray52);
        int int54 = multiDirectional50.getMaxEvaluations();
        int int55 = multiDirectional50.getIterations();
        int int56 = multiDirectional50.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = multiDirectional50.getConvergenceChecker();
        multiDirectional49.setConvergenceChecker(realConvergenceChecker57);
        double[] doubleArray59 = new double[] {};
        double[][] doubleArray60 = new double[][] { doubleArray59 };
        multiDirectional49.setStartConfiguration(doubleArray60);
        multiDirectional26.setStartConfiguration(doubleArray60);
        multiDirectional17.setStartConfiguration(doubleArray60);
        multiDirectional11.setStartConfiguration(doubleArray60);
        multiDirectional0.setStartConfiguration(doubleArray60);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker66 = multiDirectional0.getConvergenceChecker();
        int int67 = multiDirectional0.getIterations();
        int int68 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker44);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNull(realConvergenceChecker66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getIterations();
        int int6 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (short) 1);
        int int9 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        int int12 = multiDirectional10.getIterations();
        int int13 = multiDirectional10.getMaxEvaluations();
        int int14 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxIterations((-1));
        int int17 = multiDirectional10.getIterations();
        int int18 = multiDirectional10.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional10.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxEvaluations();
        int int22 = multiDirectional20.getIterations();
        int int23 = multiDirectional20.getMaxEvaluations();
        int int24 = multiDirectional20.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxIterations();
        double[] doubleArray27 = new double[] {};
        multiDirectional25.setStartConfiguration(doubleArray27);
        multiDirectional20.setStartConfiguration(doubleArray27);
        multiDirectional10.setStartConfiguration(doubleArray27);
        multiDirectional0.setStartConfiguration(doubleArray27);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction32 = null;
        org.apache.commons.math.optimization.GoalType goalType33 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        multiDirectional36.setMaxEvaluations(2147483647);
        multiDirectional36.setMaxEvaluations((int) '#');
        int int41 = multiDirectional36.getIterations();
        int int42 = multiDirectional36.getEvaluations();
        multiDirectional36.setMaxEvaluations((int) '#');
        int int45 = multiDirectional36.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        int int49 = multiDirectional48.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxEvaluations();
        int int52 = multiDirectional50.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxEvaluations();
        int int57 = multiDirectional55.getIterations();
        int int58 = multiDirectional55.getMaxEvaluations();
        int int59 = multiDirectional55.getMaxEvaluations();
        multiDirectional55.setMaxIterations((-1));
        int int62 = multiDirectional55.getMaxIterations();
        multiDirectional55.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker68 = multiDirectional67.getConvergenceChecker();
        multiDirectional55.setConvergenceChecker(realConvergenceChecker68);
        multiDirectional53.setConvergenceChecker(realConvergenceChecker68);
        multiDirectional50.setConvergenceChecker(realConvergenceChecker68);
        multiDirectional48.setConvergenceChecker(realConvergenceChecker68);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker73 = multiDirectional48.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (short) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional79 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int80 = multiDirectional79.getMaxEvaluations();
        int int81 = multiDirectional79.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional82 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int83 = multiDirectional82.getMaxEvaluations();
        multiDirectional82.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker86 = null;
        multiDirectional82.setConvergenceChecker(realConvergenceChecker86);
        double[] doubleArray89 = new double[] { 100.0d };
        multiDirectional82.setStartConfiguration(doubleArray89);
        multiDirectional79.setStartConfiguration(doubleArray89);
        multiDirectional76.setStartConfiguration(doubleArray89);
        multiDirectional48.setStartConfiguration(doubleArray89);
        multiDirectional36.setStartConfiguration(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair95 = multiDirectional0.optimize(multivariateRealFunction32, goalType33, doubleArray89);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker68);
        org.junit.Assert.assertNotNull(realConvergenceChecker73);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0]");
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 35, (double) (-1.0f));
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction3 = null;
        org.apache.commons.math.optimization.GoalType goalType4 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getIterations();
        int int13 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations(100);
        multiDirectional5.setMaxIterations((int) (short) 10);
        int int18 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxIterations(35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = null;
        multiDirectional21.setConvergenceChecker(realConvergenceChecker25);
        double[] doubleArray29 = new double[] { 1.0d, 2147483647 };
        multiDirectional21.setStartConfiguration(doubleArray29);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = multiDirectional21.getConvergenceChecker();
        multiDirectional21.setMaxEvaluations((int) (byte) 100);
        multiDirectional21.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        multiDirectional36.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = null;
        multiDirectional36.setConvergenceChecker(realConvergenceChecker40);
        double[] doubleArray44 = new double[] { 1.0d, 2147483647 };
        multiDirectional36.setStartConfiguration(doubleArray44);
        int int46 = multiDirectional36.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxIterations();
        double[] doubleArray49 = new double[] {};
        multiDirectional47.setStartConfiguration(doubleArray49);
        multiDirectional36.setStartConfiguration(doubleArray49);
        multiDirectional21.setStartConfiguration(doubleArray49);
        multiDirectional5.setStartConfiguration(doubleArray49);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair54 = multiDirectional2.optimize(multivariateRealFunction3, goalType4, doubleArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) 0L);
        multiDirectional2.setMaxIterations((int) (short) 0);
        int int5 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker12);
        double[] doubleArray16 = new double[] { 1.0d, 2147483647 };
        multiDirectional8.setStartConfiguration(doubleArray16);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional8.getConvergenceChecker();
        multiDirectional8.setMaxEvaluations((int) (byte) 100);
        multiDirectional8.setMaxIterations(35);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional8.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional24.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = multiDirectional24.getConvergenceChecker();
        multiDirectional24.setMaxIterations(0);
        multiDirectional24.setMaxEvaluations(97);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional37.getConvergenceChecker();
        int int39 = multiDirectional37.getEvaluations();
        multiDirectional37.setMaxIterations((int) (short) 1);
        int int42 = multiDirectional37.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int46 = multiDirectional45.getEvaluations();
        int int47 = multiDirectional45.getMaxEvaluations();
        multiDirectional45.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxEvaluations();
        multiDirectional50.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = null;
        multiDirectional50.setConvergenceChecker(realConvergenceChecker54);
        double[] doubleArray58 = new double[] { 1.0d, 2147483647 };
        multiDirectional50.setStartConfiguration(doubleArray58);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = multiDirectional50.getConvergenceChecker();
        multiDirectional50.setMaxEvaluations((int) (byte) 100);
        multiDirectional50.setMaxIterations(35);
        double[] doubleArray66 = new double[] { 100.0d };
        multiDirectional50.setStartConfiguration(doubleArray66);
        multiDirectional45.setStartConfiguration(doubleArray66);
        multiDirectional37.setStartConfiguration(doubleArray66);
        multiDirectional24.setStartConfiguration(doubleArray66);
        multiDirectional8.setStartConfiguration(doubleArray66);
        multiDirectional2.setStartConfiguration(doubleArray66);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker18);
        org.junit.Assert.assertNull(realConvergenceChecker23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker30);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker60);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0]");
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) (short) -1);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        int int7 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker10);
        multiDirectional8.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        double[] doubleArray16 = new double[] {};
        multiDirectional14.setStartConfiguration(doubleArray16);
        int int18 = multiDirectional14.getMaxEvaluations();
        int int19 = multiDirectional14.getMaxIterations();
        int int20 = multiDirectional14.getMaxIterations();
        multiDirectional14.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getMaxIterations();
        int int31 = multiDirectional23.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = null;
        multiDirectional32.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional32.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = multiDirectional40.getConvergenceChecker();
        multiDirectional32.setConvergenceChecker(realConvergenceChecker41);
        multiDirectional23.setConvergenceChecker(realConvergenceChecker41);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxIterations();
        double[] doubleArray49 = new double[] {};
        multiDirectional47.setStartConfiguration(doubleArray49);
        int int51 = multiDirectional47.getMaxEvaluations();
        int int52 = multiDirectional47.getIterations();
        int int53 = multiDirectional47.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = multiDirectional47.getConvergenceChecker();
        multiDirectional46.setConvergenceChecker(realConvergenceChecker54);
        double[] doubleArray56 = new double[] {};
        double[][] doubleArray57 = new double[][] { doubleArray56 };
        multiDirectional46.setStartConfiguration(doubleArray57);
        multiDirectional23.setStartConfiguration(doubleArray57);
        multiDirectional14.setStartConfiguration(doubleArray57);
        multiDirectional8.setStartConfiguration(doubleArray57);
        multiDirectional0.setStartConfiguration(doubleArray57);
        int int63 = multiDirectional0.getIterations();
        int int64 = multiDirectional0.getMaxEvaluations();
        int int65 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 32 + "'", int64 == 32);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 32 + "'", int65 == 32);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getIterations();
        int int5 = multiDirectional2.getMaxEvaluations();
        int int6 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxIterations((-1));
        int int9 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional14.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker15);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker15);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        int int19 = multiDirectional0.getMaxEvaluations();
        java.lang.Class<?> wildcardClass20 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker15);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        multiDirectional6.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional6.setConvergenceChecker(realConvergenceChecker10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker16);
        double[] doubleArray20 = new double[] { 1.0d, 2147483647 };
        multiDirectional12.setStartConfiguration(doubleArray20);
        multiDirectional6.setStartConfiguration(doubleArray20);
        multiDirectional5.setStartConfiguration(doubleArray20);
        multiDirectional2.setStartConfiguration(doubleArray20);
        multiDirectional2.setMaxIterations(97);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        int int9 = multiDirectional0.getMaxIterations();
        int int10 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        int int3 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        int int7 = multiDirectional6.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = null;
        multiDirectional11.setConvergenceChecker(realConvergenceChecker15);
        double[] doubleArray19 = new double[] { 1.0d, 2147483647 };
        multiDirectional11.setStartConfiguration(doubleArray19);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional11.getConvergenceChecker();
        multiDirectional11.setMaxEvaluations((int) (byte) 100);
        int int24 = multiDirectional11.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker29);
        double[] doubleArray33 = new double[] { 1.0d, 2147483647 };
        multiDirectional25.setStartConfiguration(doubleArray33);
        multiDirectional11.setStartConfiguration(doubleArray33);
        multiDirectional10.setStartConfiguration(doubleArray33);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = null;
        multiDirectional37.setConvergenceChecker(realConvergenceChecker39);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxEvaluations();
        multiDirectional41.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = null;
        multiDirectional41.setConvergenceChecker(realConvergenceChecker45);
        double[] doubleArray49 = new double[] { 1.0d, 2147483647 };
        multiDirectional41.setStartConfiguration(doubleArray49);
        int int51 = multiDirectional41.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxIterations();
        double[] doubleArray54 = new double[] {};
        multiDirectional52.setStartConfiguration(doubleArray54);
        multiDirectional41.setStartConfiguration(doubleArray54);
        multiDirectional37.setStartConfiguration(doubleArray54);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int59 = multiDirectional58.getMaxEvaluations();
        int int60 = multiDirectional58.getIterations();
        int int61 = multiDirectional58.getMaxEvaluations();
        int int62 = multiDirectional58.getMaxEvaluations();
        multiDirectional58.setMaxIterations((-1));
        int int65 = multiDirectional58.getMaxIterations();
        multiDirectional58.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = multiDirectional70.getConvergenceChecker();
        multiDirectional58.setConvergenceChecker(realConvergenceChecker71);
        multiDirectional37.setConvergenceChecker(realConvergenceChecker71);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker71);
        multiDirectional6.setConvergenceChecker(realConvergenceChecker71);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker76 = multiDirectional6.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker76);
        int int78 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional79 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int80 = multiDirectional79.getMaxEvaluations();
        int int81 = multiDirectional79.getIterations();
        int int82 = multiDirectional79.getMaxEvaluations();
        int int83 = multiDirectional79.getMaxEvaluations();
        multiDirectional79.setMaxIterations((-1));
        int int86 = multiDirectional79.getIterations();
        int int87 = multiDirectional79.getMaxIterations();
        multiDirectional79.setMaxEvaluations((int) (byte) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker90 = multiDirectional79.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker90);
        int int92 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker71);
        org.junit.Assert.assertNotNull(realConvergenceChecker76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker16);
        int int18 = multiDirectional3.getMaxIterations();
        int int19 = multiDirectional3.getEvaluations();
        int int20 = multiDirectional3.getMaxEvaluations();
        int int21 = multiDirectional3.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional3.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker22);
        int int24 = multiDirectional2.getMaxIterations();
        int int25 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        int int9 = multiDirectional7.getIterations();
        int int10 = multiDirectional7.getMaxEvaluations();
        int int11 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxIterations((-1));
        int int14 = multiDirectional7.getMaxIterations();
        int int15 = multiDirectional7.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional16.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional16.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxIterations();
        double[] doubleArray33 = new double[] {};
        multiDirectional31.setStartConfiguration(doubleArray33);
        int int35 = multiDirectional31.getMaxEvaluations();
        int int36 = multiDirectional31.getIterations();
        int int37 = multiDirectional31.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional31.getConvergenceChecker();
        multiDirectional30.setConvergenceChecker(realConvergenceChecker38);
        double[] doubleArray40 = new double[] {};
        double[][] doubleArray41 = new double[][] { doubleArray40 };
        multiDirectional30.setStartConfiguration(doubleArray41);
        multiDirectional7.setStartConfiguration(doubleArray41);
        multiDirectional2.setStartConfiguration(doubleArray41);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxEvaluations();
        int int47 = multiDirectional45.getIterations();
        int int48 = multiDirectional45.getMaxEvaluations();
        int int49 = multiDirectional45.getMaxEvaluations();
        multiDirectional45.setMaxIterations((-1));
        int int52 = multiDirectional45.getMaxIterations();
        multiDirectional45.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker58 = multiDirectional57.getConvergenceChecker();
        multiDirectional45.setConvergenceChecker(realConvergenceChecker58);
        int int60 = multiDirectional45.getMaxIterations();
        int int61 = multiDirectional45.getEvaluations();
        int int62 = multiDirectional45.getMaxEvaluations();
        int int63 = multiDirectional45.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = multiDirectional45.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker64);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker64);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction3 = null;
        org.apache.commons.math.optimization.GoalType goalType4 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional5.setConvergenceChecker(realConvergenceChecker9);
        double[] doubleArray13 = new double[] { 1.0d, 2147483647 };
        multiDirectional5.setStartConfiguration(doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair15 = multiDirectional2.optimize(multivariateRealFunction3, goalType4, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker5);
        multiDirectional3.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional3.getConvergenceChecker();
        int int10 = multiDirectional3.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = null;
        multiDirectional11.setConvergenceChecker(realConvergenceChecker13);
        multiDirectional11.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxIterations();
        double[] doubleArray19 = new double[] {};
        multiDirectional17.setStartConfiguration(doubleArray19);
        int int21 = multiDirectional17.getMaxEvaluations();
        int int22 = multiDirectional17.getMaxIterations();
        int int23 = multiDirectional17.getMaxIterations();
        multiDirectional17.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        int int28 = multiDirectional26.getIterations();
        int int29 = multiDirectional26.getMaxEvaluations();
        int int30 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxIterations((-1));
        int int33 = multiDirectional26.getMaxIterations();
        int int34 = multiDirectional26.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional35.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional35.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = multiDirectional43.getConvergenceChecker();
        multiDirectional35.setConvergenceChecker(realConvergenceChecker44);
        multiDirectional26.setConvergenceChecker(realConvergenceChecker44);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxIterations();
        double[] doubleArray52 = new double[] {};
        multiDirectional50.setStartConfiguration(doubleArray52);
        int int54 = multiDirectional50.getMaxEvaluations();
        int int55 = multiDirectional50.getIterations();
        int int56 = multiDirectional50.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = multiDirectional50.getConvergenceChecker();
        multiDirectional49.setConvergenceChecker(realConvergenceChecker57);
        double[] doubleArray59 = new double[] {};
        double[][] doubleArray60 = new double[][] { doubleArray59 };
        multiDirectional49.setStartConfiguration(doubleArray60);
        multiDirectional26.setStartConfiguration(doubleArray60);
        multiDirectional17.setStartConfiguration(doubleArray60);
        multiDirectional11.setStartConfiguration(doubleArray60);
        multiDirectional3.setStartConfiguration(doubleArray60);
        multiDirectional2.setStartConfiguration(doubleArray60);
        int int67 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional68 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int69 = multiDirectional68.getMaxEvaluations();
        int int70 = multiDirectional68.getIterations();
        int int71 = multiDirectional68.getMaxEvaluations();
        int int72 = multiDirectional68.getMaxEvaluations();
        multiDirectional68.setMaxIterations((-1));
        int int75 = multiDirectional68.getIterations();
        int int76 = multiDirectional68.getMaxIterations();
        int int77 = multiDirectional68.getMaxIterations();
        int int78 = multiDirectional68.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional81 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional82 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int83 = multiDirectional82.getMaxIterations();
        double[] doubleArray84 = new double[] {};
        multiDirectional82.setStartConfiguration(doubleArray84);
        int int86 = multiDirectional82.getMaxEvaluations();
        int int87 = multiDirectional82.getIterations();
        int int88 = multiDirectional82.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker89 = multiDirectional82.getConvergenceChecker();
        multiDirectional81.setConvergenceChecker(realConvergenceChecker89);
        double[] doubleArray91 = new double[] {};
        double[][] doubleArray92 = new double[][] { doubleArray91 };
        multiDirectional81.setStartConfiguration(doubleArray92);
        multiDirectional68.setStartConfiguration(doubleArray92);
        multiDirectional2.setStartConfiguration(doubleArray92);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker44);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2147483647 + "'", int86 == 2147483647);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2147483647 + "'", int88 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker89);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray92);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        int int5 = multiDirectional2.getMaxEvaluations();
        int int6 = multiDirectional2.getMaxEvaluations();
        int int7 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker12);
        double[] doubleArray16 = new double[] { 1.0d, 2147483647 };
        multiDirectional8.setStartConfiguration(doubleArray16);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional8.getConvergenceChecker();
        multiDirectional8.setMaxEvaluations((int) (byte) 100);
        int int21 = multiDirectional8.getEvaluations();
        int int22 = multiDirectional8.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getMaxIterations();
        multiDirectional23.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional35.getConvergenceChecker();
        multiDirectional23.setConvergenceChecker(realConvergenceChecker36);
        int int38 = multiDirectional23.getMaxIterations();
        int int39 = multiDirectional23.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int43 = multiDirectional42.getEvaluations();
        int int44 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxEvaluations();
        int int49 = multiDirectional47.getIterations();
        int int50 = multiDirectional47.getMaxEvaluations();
        int int51 = multiDirectional47.getMaxEvaluations();
        multiDirectional47.setMaxIterations((-1));
        int int54 = multiDirectional47.getMaxIterations();
        int int55 = multiDirectional47.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker58 = null;
        multiDirectional56.setConvergenceChecker(realConvergenceChecker58);
        multiDirectional56.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker65 = multiDirectional64.getConvergenceChecker();
        multiDirectional56.setConvergenceChecker(realConvergenceChecker65);
        multiDirectional47.setConvergenceChecker(realConvergenceChecker65);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int72 = multiDirectional71.getMaxIterations();
        double[] doubleArray73 = new double[] {};
        multiDirectional71.setStartConfiguration(doubleArray73);
        int int75 = multiDirectional71.getMaxEvaluations();
        int int76 = multiDirectional71.getIterations();
        int int77 = multiDirectional71.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker78 = multiDirectional71.getConvergenceChecker();
        multiDirectional70.setConvergenceChecker(realConvergenceChecker78);
        double[] doubleArray80 = new double[] {};
        double[][] doubleArray81 = new double[][] { doubleArray80 };
        multiDirectional70.setStartConfiguration(doubleArray81);
        multiDirectional47.setStartConfiguration(doubleArray81);
        multiDirectional42.setStartConfiguration(doubleArray81);
        multiDirectional23.setStartConfiguration(doubleArray81);
        multiDirectional8.setStartConfiguration(doubleArray81);
        multiDirectional2.setStartConfiguration(doubleArray81);
        multiDirectional2.setMaxIterations(10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10.0f, 10.0d);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations(0);
        int int9 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction12 = null;
        org.apache.commons.math.optimization.GoalType goalType13 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxEvaluations();
        int int19 = multiDirectional17.getIterations();
        int int20 = multiDirectional17.getMaxEvaluations();
        int int21 = multiDirectional17.getMaxEvaluations();
        multiDirectional17.setMaxIterations((-1));
        int int24 = multiDirectional17.getMaxIterations();
        multiDirectional17.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = multiDirectional29.getConvergenceChecker();
        multiDirectional17.setConvergenceChecker(realConvergenceChecker30);
        int int32 = multiDirectional17.getMaxIterations();
        int int33 = multiDirectional17.getEvaluations();
        int int34 = multiDirectional17.getMaxEvaluations();
        int int35 = multiDirectional17.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional17.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional17.getConvergenceChecker();
        multiDirectional16.setConvergenceChecker(realConvergenceChecker37);
        int int39 = multiDirectional16.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        int int42 = multiDirectional40.getIterations();
        int int43 = multiDirectional40.getMaxEvaluations();
        int int44 = multiDirectional40.getMaxEvaluations();
        multiDirectional40.setMaxIterations((-1));
        int int47 = multiDirectional40.getIterations();
        int int48 = multiDirectional40.getMaxIterations();
        multiDirectional40.setMaxEvaluations(100);
        multiDirectional40.setMaxIterations((int) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = multiDirectional40.getConvergenceChecker();
        multiDirectional40.setMaxEvaluations((int) 'a');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxEvaluations();
        multiDirectional59.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker63 = null;
        multiDirectional59.setConvergenceChecker(realConvergenceChecker63);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int66 = multiDirectional65.getMaxEvaluations();
        multiDirectional65.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker69 = null;
        multiDirectional65.setConvergenceChecker(realConvergenceChecker69);
        double[] doubleArray73 = new double[] { 1.0d, 2147483647 };
        multiDirectional65.setStartConfiguration(doubleArray73);
        multiDirectional59.setStartConfiguration(doubleArray73);
        multiDirectional58.setStartConfiguration(doubleArray73);
        multiDirectional40.setStartConfiguration(doubleArray73);
        multiDirectional16.setStartConfiguration(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair79 = multiDirectional0.optimize(multivariateRealFunction12, goalType13, doubleArray73);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.FunctionEvaluationException; message: org.apache.commons.math.MaxEvaluationsExceededException: Maximal number of evaluations (0) exceeded");
        } catch (org.apache.commons.math.FunctionEvaluationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker36);
        org.junit.Assert.assertNotNull(realConvergenceChecker37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker53);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2147483647 + "'", int66 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional0.getConvergenceChecker();
        int int10 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxIterations((int) (short) 1);
        int int15 = multiDirectional0.getMaxEvaluations();
        int int16 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0L, (double) 100L);
        int int3 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0L, (double) 1);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker4);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getMaxEvaluations();
        int int18 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations((int) 'a');
        java.lang.Class<?> wildcardClass22 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, 0.0d);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        int int8 = multiDirectional4.getIterations();
        multiDirectional4.setMaxIterations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        multiDirectional13.setMaxEvaluations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker18);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxEvaluations();
        multiDirectional20.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = null;
        multiDirectional20.setConvergenceChecker(realConvergenceChecker24);
        double[] doubleArray28 = new double[] { 1.0d, 2147483647 };
        multiDirectional20.setStartConfiguration(doubleArray28);
        int int30 = multiDirectional20.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxIterations();
        double[] doubleArray33 = new double[] {};
        multiDirectional31.setStartConfiguration(doubleArray33);
        multiDirectional20.setStartConfiguration(doubleArray33);
        multiDirectional16.setStartConfiguration(doubleArray33);
        int int37 = multiDirectional16.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxEvaluations();
        multiDirectional38.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = null;
        multiDirectional38.setConvergenceChecker(realConvergenceChecker42);
        double[] doubleArray46 = new double[] { 1.0d, 2147483647 };
        multiDirectional38.setStartConfiguration(doubleArray46);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = multiDirectional38.getConvergenceChecker();
        multiDirectional38.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = multiDirectional53.getConvergenceChecker();
        multiDirectional38.setConvergenceChecker(realConvergenceChecker54);
        multiDirectional16.setConvergenceChecker(realConvergenceChecker54);
        multiDirectional13.setConvergenceChecker(realConvergenceChecker54);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker54);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker54);
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker48);
        org.junit.Assert.assertNotNull(realConvergenceChecker54);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        int int24 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations((int) (byte) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        multiDirectional27.setMaxIterations((-1));
        int int34 = multiDirectional27.getIterations();
        int int35 = multiDirectional27.getEvaluations();
        int int36 = multiDirectional27.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxEvaluations();
        multiDirectional37.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = null;
        multiDirectional37.setConvergenceChecker(realConvergenceChecker41);
        double[] doubleArray45 = new double[] { 1.0d, 2147483647 };
        multiDirectional37.setStartConfiguration(doubleArray45);
        int int47 = multiDirectional37.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxIterations();
        double[] doubleArray50 = new double[] {};
        multiDirectional48.setStartConfiguration(doubleArray50);
        multiDirectional37.setStartConfiguration(doubleArray50);
        multiDirectional27.setStartConfiguration(doubleArray50);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = multiDirectional27.getConvergenceChecker();
        int int55 = multiDirectional27.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxEvaluations();
        int int58 = multiDirectional56.getIterations();
        int int59 = multiDirectional56.getMaxEvaluations();
        int int60 = multiDirectional56.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker61 = multiDirectional56.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional62 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int63 = multiDirectional62.getMaxEvaluations();
        int int64 = multiDirectional62.getIterations();
        int int65 = multiDirectional62.getMaxEvaluations();
        int int66 = multiDirectional62.getMaxEvaluations();
        multiDirectional62.setMaxIterations((-1));
        int int69 = multiDirectional62.getIterations();
        multiDirectional62.setMaxIterations((int) '#');
        multiDirectional62.setMaxEvaluations(0);
        multiDirectional62.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional78 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker79 = multiDirectional78.getConvergenceChecker();
        multiDirectional62.setConvergenceChecker(realConvergenceChecker79);
        int int81 = multiDirectional62.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker82 = multiDirectional62.getConvergenceChecker();
        multiDirectional56.setConvergenceChecker(realConvergenceChecker82);
        multiDirectional27.setConvergenceChecker(realConvergenceChecker82);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker82);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2147483647 + "'", int66 == 2147483647);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker82);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int8 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int12 = multiDirectional11.getEvaluations();
        int int13 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxIterations();
        double[] doubleArray21 = new double[] {};
        multiDirectional19.setStartConfiguration(doubleArray21);
        int int23 = multiDirectional19.getMaxEvaluations();
        int int24 = multiDirectional19.getIterations();
        int int25 = multiDirectional19.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional19.getConvergenceChecker();
        multiDirectional18.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray28 = new double[] {};
        double[][] doubleArray29 = new double[][] { doubleArray28 };
        multiDirectional18.setStartConfiguration(doubleArray29);
        multiDirectional11.setStartConfiguration(doubleArray29);
        multiDirectional0.setStartConfiguration(doubleArray29);
        double[] doubleArray33 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiDirectional0.setStartConfiguration(doubleArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        double[] doubleArray17 = new double[] {};
        multiDirectional15.setStartConfiguration(doubleArray17);
        multiDirectional4.setStartConfiguration(doubleArray17);
        multiDirectional0.setStartConfiguration(doubleArray17);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        int int23 = multiDirectional21.getIterations();
        int int24 = multiDirectional21.getMaxEvaluations();
        int int25 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxIterations((-1));
        int int28 = multiDirectional21.getMaxIterations();
        multiDirectional21.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional33.getConvergenceChecker();
        multiDirectional21.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker34);
        int int37 = multiDirectional0.getEvaluations();
        int int38 = multiDirectional0.getMaxIterations();
        int int39 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(0);
        int int4 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxIterations();
        double[] doubleArray7 = new double[] {};
        multiDirectional5.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional5.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        int int12 = multiDirectional10.getIterations();
        int int13 = multiDirectional10.getMaxEvaluations();
        int int14 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxIterations((-1));
        int int17 = multiDirectional10.getIterations();
        multiDirectional10.setMaxIterations((int) '#');
        multiDirectional10.setMaxEvaluations(0);
        multiDirectional10.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional26.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional5.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional0.setMaxIterations(1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getMaxEvaluations();
        int int15 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxIterations();
        double[] doubleArray18 = new double[] {};
        multiDirectional16.setStartConfiguration(doubleArray18);
        int int20 = multiDirectional16.getMaxEvaluations();
        int int21 = multiDirectional16.getIterations();
        int int22 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxIterations((int) (short) 1);
        int int25 = multiDirectional16.getEvaluations();
        int int26 = multiDirectional16.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 'a', (double) 2147483647);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = null;
        multiDirectional30.setConvergenceChecker(realConvergenceChecker34);
        double[] doubleArray38 = new double[] { 1.0d, 2147483647 };
        multiDirectional30.setStartConfiguration(doubleArray38);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = multiDirectional30.getConvergenceChecker();
        multiDirectional30.setMaxEvaluations((int) (byte) 100);
        multiDirectional30.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = multiDirectional30.getConvergenceChecker();
        int int46 = multiDirectional30.getEvaluations();
        int int47 = multiDirectional30.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxEvaluations();
        int int50 = multiDirectional48.getIterations();
        int int51 = multiDirectional48.getMaxEvaluations();
        int int52 = multiDirectional48.getMaxEvaluations();
        multiDirectional48.setMaxIterations((-1));
        int int55 = multiDirectional48.getIterations();
        int int56 = multiDirectional48.getEvaluations();
        int int57 = multiDirectional48.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int59 = multiDirectional58.getMaxEvaluations();
        multiDirectional58.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = null;
        multiDirectional58.setConvergenceChecker(realConvergenceChecker62);
        double[] doubleArray66 = new double[] { 1.0d, 2147483647 };
        multiDirectional58.setStartConfiguration(doubleArray66);
        int int68 = multiDirectional58.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int70 = multiDirectional69.getMaxIterations();
        double[] doubleArray71 = new double[] {};
        multiDirectional69.setStartConfiguration(doubleArray71);
        multiDirectional58.setStartConfiguration(doubleArray71);
        multiDirectional48.setStartConfiguration(doubleArray71);
        multiDirectional30.setStartConfiguration(doubleArray71);
        multiDirectional29.setStartConfiguration(doubleArray71);
        multiDirectional16.setStartConfiguration(doubleArray71);
        multiDirectional0.setStartConfiguration(doubleArray71);
        java.lang.Class<?> wildcardClass79 = doubleArray71.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker40);
        org.junit.Assert.assertNull(realConvergenceChecker45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) ' ');
        int int3 = multiDirectional2.getIterations();
        multiDirectional2.setMaxEvaluations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        int int9 = multiDirectional8.getMaxEvaluations();
        int int10 = multiDirectional8.getMaxEvaluations();
        int int11 = multiDirectional8.getMaxEvaluations();
        int int12 = multiDirectional8.getMaxEvaluations();
        int int13 = multiDirectional8.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker18);
        double[] doubleArray22 = new double[] { 1.0d, 2147483647 };
        multiDirectional14.setStartConfiguration(doubleArray22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional14.getConvergenceChecker();
        multiDirectional14.setMaxEvaluations((int) (byte) 100);
        int int27 = multiDirectional14.getEvaluations();
        int int28 = multiDirectional14.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        int int31 = multiDirectional29.getIterations();
        int int32 = multiDirectional29.getMaxEvaluations();
        int int33 = multiDirectional29.getMaxEvaluations();
        multiDirectional29.setMaxIterations((-1));
        int int36 = multiDirectional29.getMaxIterations();
        multiDirectional29.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = multiDirectional41.getConvergenceChecker();
        multiDirectional29.setConvergenceChecker(realConvergenceChecker42);
        int int44 = multiDirectional29.getMaxIterations();
        int int45 = multiDirectional29.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int49 = multiDirectional48.getEvaluations();
        int int50 = multiDirectional48.getMaxEvaluations();
        multiDirectional48.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxEvaluations();
        int int55 = multiDirectional53.getIterations();
        int int56 = multiDirectional53.getMaxEvaluations();
        int int57 = multiDirectional53.getMaxEvaluations();
        multiDirectional53.setMaxIterations((-1));
        int int60 = multiDirectional53.getMaxIterations();
        int int61 = multiDirectional53.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional62 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int63 = multiDirectional62.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = null;
        multiDirectional62.setConvergenceChecker(realConvergenceChecker64);
        multiDirectional62.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = multiDirectional70.getConvergenceChecker();
        multiDirectional62.setConvergenceChecker(realConvergenceChecker71);
        multiDirectional53.setConvergenceChecker(realConvergenceChecker71);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional77 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int78 = multiDirectional77.getMaxIterations();
        double[] doubleArray79 = new double[] {};
        multiDirectional77.setStartConfiguration(doubleArray79);
        int int81 = multiDirectional77.getMaxEvaluations();
        int int82 = multiDirectional77.getIterations();
        int int83 = multiDirectional77.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker84 = multiDirectional77.getConvergenceChecker();
        multiDirectional76.setConvergenceChecker(realConvergenceChecker84);
        double[] doubleArray86 = new double[] {};
        double[][] doubleArray87 = new double[][] { doubleArray86 };
        multiDirectional76.setStartConfiguration(doubleArray87);
        multiDirectional53.setStartConfiguration(doubleArray87);
        multiDirectional48.setStartConfiguration(doubleArray87);
        multiDirectional29.setStartConfiguration(doubleArray87);
        multiDirectional14.setStartConfiguration(doubleArray87);
        multiDirectional8.setStartConfiguration(doubleArray87);
        multiDirectional2.setStartConfiguration(doubleArray87);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker71);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker84);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(100);
        int int11 = multiDirectional0.getMaxEvaluations();
        int int12 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker18);
        double[] doubleArray22 = new double[] { 1.0d, 2147483647 };
        multiDirectional14.setStartConfiguration(doubleArray22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional14.getConvergenceChecker();
        multiDirectional14.setMaxEvaluations((int) (byte) 100);
        multiDirectional14.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional14.getConvergenceChecker();
        int int30 = multiDirectional14.getEvaluations();
        int int31 = multiDirectional14.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxEvaluations();
        int int34 = multiDirectional32.getIterations();
        int int35 = multiDirectional32.getMaxEvaluations();
        int int36 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxIterations((-1));
        int int39 = multiDirectional32.getIterations();
        int int40 = multiDirectional32.getEvaluations();
        int int41 = multiDirectional32.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional42.setConvergenceChecker(realConvergenceChecker46);
        double[] doubleArray50 = new double[] { 1.0d, 2147483647 };
        multiDirectional42.setStartConfiguration(doubleArray50);
        int int52 = multiDirectional42.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxIterations();
        double[] doubleArray55 = new double[] {};
        multiDirectional53.setStartConfiguration(doubleArray55);
        multiDirectional42.setStartConfiguration(doubleArray55);
        multiDirectional32.setStartConfiguration(doubleArray55);
        multiDirectional14.setStartConfiguration(doubleArray55);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int61 = multiDirectional60.getMaxEvaluations();
        multiDirectional60.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = null;
        multiDirectional60.setConvergenceChecker(realConvergenceChecker64);
        double[] doubleArray68 = new double[] { 1.0d, 2147483647 };
        multiDirectional60.setStartConfiguration(doubleArray68);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker70 = multiDirectional60.getConvergenceChecker();
        multiDirectional60.setMaxEvaluations((int) (byte) 100);
        multiDirectional60.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxEvaluations();
        multiDirectional75.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker79 = null;
        multiDirectional75.setConvergenceChecker(realConvergenceChecker79);
        double[] doubleArray83 = new double[] { 1.0d, 2147483647 };
        multiDirectional75.setStartConfiguration(doubleArray83);
        int int85 = multiDirectional75.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional86 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int87 = multiDirectional86.getMaxIterations();
        double[] doubleArray88 = new double[] {};
        multiDirectional86.setStartConfiguration(doubleArray88);
        multiDirectional75.setStartConfiguration(doubleArray88);
        multiDirectional60.setStartConfiguration(doubleArray88);
        multiDirectional14.setStartConfiguration(doubleArray88);
        multiDirectional0.setStartConfiguration(doubleArray88);
        multiDirectional0.setMaxEvaluations(0);
        double[] doubleArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiDirectional0.setStartConfiguration(doubleArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker24);
        org.junit.Assert.assertNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[]");
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional0.getConvergenceChecker();
        int int8 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertNotNull(realConvergenceChecker7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxEvaluations();
        multiDirectional15.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = null;
        multiDirectional15.setConvergenceChecker(realConvergenceChecker19);
        double[] doubleArray23 = new double[] { 1.0d, 2147483647 };
        multiDirectional15.setStartConfiguration(doubleArray23);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional15.getConvergenceChecker();
        multiDirectional15.setMaxEvaluations((int) (byte) 100);
        multiDirectional15.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = null;
        multiDirectional30.setConvergenceChecker(realConvergenceChecker34);
        double[] doubleArray38 = new double[] { 1.0d, 2147483647 };
        multiDirectional30.setStartConfiguration(doubleArray38);
        int int40 = multiDirectional30.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxIterations();
        double[] doubleArray43 = new double[] {};
        multiDirectional41.setStartConfiguration(doubleArray43);
        multiDirectional30.setStartConfiguration(doubleArray43);
        multiDirectional15.setStartConfiguration(doubleArray43);
        multiDirectional14.setStartConfiguration(doubleArray43);
        multiDirectional0.setStartConfiguration(doubleArray43);
        multiDirectional0.setMaxEvaluations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxEvaluations();
        int int53 = multiDirectional51.getIterations();
        int int54 = multiDirectional51.getMaxEvaluations();
        int int55 = multiDirectional51.getMaxEvaluations();
        multiDirectional51.setMaxIterations((-1));
        int int58 = multiDirectional51.getIterations();
        int int59 = multiDirectional51.getMaxIterations();
        multiDirectional51.setMaxEvaluations(100);
        multiDirectional51.setMaxIterations((int) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = multiDirectional51.getConvergenceChecker();
        multiDirectional51.setMaxEvaluations((int) 'a');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int71 = multiDirectional70.getMaxEvaluations();
        multiDirectional70.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker74 = null;
        multiDirectional70.setConvergenceChecker(realConvergenceChecker74);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int77 = multiDirectional76.getMaxEvaluations();
        multiDirectional76.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker80 = null;
        multiDirectional76.setConvergenceChecker(realConvergenceChecker80);
        double[] doubleArray84 = new double[] { 1.0d, 2147483647 };
        multiDirectional76.setStartConfiguration(doubleArray84);
        multiDirectional70.setStartConfiguration(doubleArray84);
        multiDirectional69.setStartConfiguration(doubleArray84);
        multiDirectional51.setStartConfiguration(doubleArray84);
        multiDirectional0.setStartConfiguration(doubleArray84);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional15.setConvergenceChecker(realConvergenceChecker17);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = null;
        multiDirectional19.setConvergenceChecker(realConvergenceChecker23);
        double[] doubleArray27 = new double[] { 1.0d, 2147483647 };
        multiDirectional19.setStartConfiguration(doubleArray27);
        int int29 = multiDirectional19.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxIterations();
        double[] doubleArray32 = new double[] {};
        multiDirectional30.setStartConfiguration(doubleArray32);
        multiDirectional19.setStartConfiguration(doubleArray32);
        multiDirectional15.setStartConfiguration(doubleArray32);
        multiDirectional0.setStartConfiguration(doubleArray32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxIterations();
        double[] doubleArray39 = new double[] {};
        multiDirectional37.setStartConfiguration(doubleArray39);
        int int41 = multiDirectional37.getMaxEvaluations();
        int int42 = multiDirectional37.getIterations();
        int int43 = multiDirectional37.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = multiDirectional37.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker44);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations(97);
        multiDirectional0.setMaxIterations(0);
        multiDirectional0.setMaxEvaluations(100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker44);
        org.junit.Assert.assertNotNull(realConvergenceChecker46);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxIterations();
        int int5 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker6);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        double[] doubleArray16 = new double[] {};
        multiDirectional14.setStartConfiguration(doubleArray16);
        int int18 = multiDirectional14.getMaxEvaluations();
        int int19 = multiDirectional14.getIterations();
        int int20 = multiDirectional14.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional14.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker21);
        double[] doubleArray23 = new double[] {};
        double[][] doubleArray24 = new double[][] { doubleArray23 };
        multiDirectional13.setStartConfiguration(doubleArray24);
        multiDirectional10.setStartConfiguration(doubleArray24);
        double[] doubleArray31 = new double[] { 100L, (-1), 1.0f, 10 };
        multiDirectional10.setStartConfiguration(doubleArray31);
        multiDirectional0.setStartConfiguration(doubleArray31);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, -1.0, 1.0, 10.0]");
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        int int6 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        int int11 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = null;
        multiDirectional27.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = null;
        multiDirectional31.setConvergenceChecker(realConvergenceChecker35);
        double[] doubleArray39 = new double[] { 1.0d, 2147483647 };
        multiDirectional31.setStartConfiguration(doubleArray39);
        int int41 = multiDirectional31.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxIterations();
        double[] doubleArray44 = new double[] {};
        multiDirectional42.setStartConfiguration(doubleArray44);
        multiDirectional31.setStartConfiguration(doubleArray44);
        multiDirectional27.setStartConfiguration(doubleArray44);
        multiDirectional12.setStartConfiguration(doubleArray44);
        multiDirectional0.setStartConfiguration(doubleArray44);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = multiDirectional0.getConvergenceChecker();
        int int51 = multiDirectional0.getEvaluations();
        int int52 = multiDirectional0.getMaxEvaluations();
        int int53 = multiDirectional0.getMaxEvaluations();
        int int54 = multiDirectional0.getMaxEvaluations();
        int int55 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
        org.junit.Assert.assertNotNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        int int9 = multiDirectional0.getMaxIterations();
        int int10 = multiDirectional0.getMaxEvaluations();
        int int11 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) 'a');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getMaxIterations();
        multiDirectional23.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional35.getConvergenceChecker();
        multiDirectional23.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional21.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional20.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional14.setConvergenceChecker(realConvergenceChecker36);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = multiDirectional14.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        int int44 = multiDirectional42.getIterations();
        int int45 = multiDirectional42.getMaxEvaluations();
        int int46 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxIterations((-1));
        int int49 = multiDirectional42.getIterations();
        int int50 = multiDirectional42.getMaxIterations();
        multiDirectional42.setMaxEvaluations(100);
        int int53 = multiDirectional42.getMaxEvaluations();
        int int54 = multiDirectional42.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = multiDirectional42.getConvergenceChecker();
        multiDirectional14.setConvergenceChecker(realConvergenceChecker55);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker55);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker36);
        org.junit.Assert.assertNotNull(realConvergenceChecker41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker55);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (short) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxEvaluations();
        multiDirectional15.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = null;
        multiDirectional15.setConvergenceChecker(realConvergenceChecker19);
        double[] doubleArray22 = new double[] { 100.0d };
        multiDirectional15.setStartConfiguration(doubleArray22);
        multiDirectional12.setStartConfiguration(doubleArray22);
        multiDirectional9.setStartConfiguration(doubleArray22);
        multiDirectional0.setStartConfiguration(doubleArray22);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]");
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) '#');
        int int3 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = multiDirectional4.getConvergenceChecker();
        multiDirectional4.setMaxEvaluations((int) (byte) 100);
        multiDirectional4.setMaxIterations(35);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional4.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional22.getConvergenceChecker();
        multiDirectional4.setConvergenceChecker(realConvergenceChecker23);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional4.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction27 = null;
        org.apache.commons.math.optimization.GoalType goalType28 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        multiDirectional31.setMaxEvaluations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int35 = multiDirectional34.getMaxEvaluations();
        int int36 = multiDirectional34.getIterations();
        int int37 = multiDirectional34.getMaxEvaluations();
        int int38 = multiDirectional34.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional34.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        int int42 = multiDirectional40.getIterations();
        int int43 = multiDirectional40.getMaxEvaluations();
        int int44 = multiDirectional40.getMaxEvaluations();
        multiDirectional40.setMaxIterations((-1));
        int int47 = multiDirectional40.getIterations();
        multiDirectional40.setMaxIterations((int) '#');
        multiDirectional40.setMaxEvaluations(0);
        multiDirectional40.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = multiDirectional56.getConvergenceChecker();
        multiDirectional40.setConvergenceChecker(realConvergenceChecker57);
        int int59 = multiDirectional40.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = multiDirectional40.getConvergenceChecker();
        multiDirectional34.setConvergenceChecker(realConvergenceChecker60);
        multiDirectional31.setConvergenceChecker(realConvergenceChecker60);
        int int63 = multiDirectional31.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int65 = multiDirectional64.getMaxEvaluations();
        multiDirectional64.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker68 = null;
        multiDirectional64.setConvergenceChecker(realConvergenceChecker68);
        double[] doubleArray71 = new double[] { 100.0d };
        multiDirectional64.setStartConfiguration(doubleArray71);
        multiDirectional64.setMaxIterations(1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxIterations();
        double[] doubleArray77 = new double[] {};
        multiDirectional75.setStartConfiguration(doubleArray77);
        multiDirectional64.setStartConfiguration(doubleArray77);
        multiDirectional31.setStartConfiguration(doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair81 = multiDirectional2.optimize(multivariateRealFunction27, goalType28, doubleArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker14);
        org.junit.Assert.assertNull(realConvergenceChecker19);
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        multiDirectional6.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional6.setConvergenceChecker(realConvergenceChecker10);
        double[] doubleArray14 = new double[] { 1.0d, 2147483647 };
        multiDirectional6.setStartConfiguration(doubleArray14);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional6.getConvergenceChecker();
        multiDirectional6.setMaxEvaluations((int) (byte) 100);
        multiDirectional6.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = null;
        multiDirectional21.setConvergenceChecker(realConvergenceChecker25);
        double[] doubleArray29 = new double[] { 1.0d, 2147483647 };
        multiDirectional21.setStartConfiguration(doubleArray29);
        int int31 = multiDirectional21.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        double[] doubleArray34 = new double[] {};
        multiDirectional32.setStartConfiguration(doubleArray34);
        multiDirectional21.setStartConfiguration(doubleArray34);
        multiDirectional6.setStartConfiguration(doubleArray34);
        multiDirectional5.setStartConfiguration(doubleArray34);
        int int39 = multiDirectional5.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxIterations();
        double[] doubleArray42 = new double[] {};
        multiDirectional40.setStartConfiguration(doubleArray42);
        int int44 = multiDirectional40.getMaxEvaluations();
        int int45 = multiDirectional40.getIterations();
        double[] doubleArray51 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional40.setStartConfiguration(doubleArray51);
        multiDirectional5.setStartConfiguration(doubleArray51);
        multiDirectional2.setStartConfiguration(doubleArray51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, 0.0d);
        multiDirectional2.setMaxIterations(10);
        int int5 = multiDirectional2.getEvaluations();
        int int6 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        int int4 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) (byte) 10);
        multiDirectional0.setMaxEvaluations((-1));
        int int9 = multiDirectional0.getIterations();
        int int10 = multiDirectional0.getEvaluations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker12);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) 1L);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = null;
        multiDirectional2.setConvergenceChecker(realConvergenceChecker3);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional2.getConvergenceChecker();
        java.lang.Class<?> wildcardClass6 = multiDirectional2.getClass();
        org.junit.Assert.assertNull(realConvergenceChecker5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations(0);
        int int17 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(100);
        multiDirectional0.setMaxIterations((int) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) 'a');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = null;
        multiDirectional19.setConvergenceChecker(realConvergenceChecker23);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker29);
        double[] doubleArray33 = new double[] { 1.0d, 2147483647 };
        multiDirectional25.setStartConfiguration(doubleArray33);
        multiDirectional19.setStartConfiguration(doubleArray33);
        multiDirectional18.setStartConfiguration(doubleArray33);
        multiDirectional0.setStartConfiguration(doubleArray33);
        int int38 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        multiDirectional0.setMaxEvaluations((int) '4');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker18);
        double[] doubleArray22 = new double[] { 1.0d, 2147483647 };
        multiDirectional14.setStartConfiguration(doubleArray22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional14.getConvergenceChecker();
        multiDirectional14.setMaxEvaluations((int) (byte) 100);
        multiDirectional14.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional14.getConvergenceChecker();
        int int30 = multiDirectional14.getEvaluations();
        int int31 = multiDirectional14.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxEvaluations();
        int int34 = multiDirectional32.getIterations();
        int int35 = multiDirectional32.getMaxEvaluations();
        int int36 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxIterations((-1));
        int int39 = multiDirectional32.getIterations();
        int int40 = multiDirectional32.getEvaluations();
        int int41 = multiDirectional32.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional42.setConvergenceChecker(realConvergenceChecker46);
        double[] doubleArray50 = new double[] { 1.0d, 2147483647 };
        multiDirectional42.setStartConfiguration(doubleArray50);
        int int52 = multiDirectional42.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxIterations();
        double[] doubleArray55 = new double[] {};
        multiDirectional53.setStartConfiguration(doubleArray55);
        multiDirectional42.setStartConfiguration(doubleArray55);
        multiDirectional32.setStartConfiguration(doubleArray55);
        multiDirectional14.setStartConfiguration(doubleArray55);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int61 = multiDirectional60.getMaxEvaluations();
        multiDirectional60.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = null;
        multiDirectional60.setConvergenceChecker(realConvergenceChecker64);
        double[] doubleArray68 = new double[] { 1.0d, 2147483647 };
        multiDirectional60.setStartConfiguration(doubleArray68);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker70 = multiDirectional60.getConvergenceChecker();
        multiDirectional60.setMaxEvaluations((int) (byte) 100);
        multiDirectional60.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxEvaluations();
        multiDirectional75.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker79 = null;
        multiDirectional75.setConvergenceChecker(realConvergenceChecker79);
        double[] doubleArray83 = new double[] { 1.0d, 2147483647 };
        multiDirectional75.setStartConfiguration(doubleArray83);
        int int85 = multiDirectional75.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional86 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int87 = multiDirectional86.getMaxIterations();
        double[] doubleArray88 = new double[] {};
        multiDirectional86.setStartConfiguration(doubleArray88);
        multiDirectional75.setStartConfiguration(doubleArray88);
        multiDirectional60.setStartConfiguration(doubleArray88);
        multiDirectional14.setStartConfiguration(doubleArray88);
        multiDirectional0.setStartConfiguration(doubleArray88);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker94 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker94);
        int int96 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker24);
        org.junit.Assert.assertNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 100 + "'", int96 == 100);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        multiDirectional2.setMaxEvaluations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional5.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        int int13 = multiDirectional11.getIterations();
        int int14 = multiDirectional11.getMaxEvaluations();
        int int15 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxIterations((-1));
        int int18 = multiDirectional11.getIterations();
        multiDirectional11.setMaxIterations((int) '#');
        multiDirectional11.setMaxEvaluations(0);
        multiDirectional11.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = multiDirectional27.getConvergenceChecker();
        multiDirectional11.setConvergenceChecker(realConvergenceChecker28);
        int int30 = multiDirectional11.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = multiDirectional11.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker31);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker31);
        int int34 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxEvaluations();
        int int37 = multiDirectional35.getIterations();
        int int38 = multiDirectional35.getMaxEvaluations();
        multiDirectional35.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional43.setMaxEvaluations((int) (byte) 1);
        multiDirectional43.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxIterations();
        double[] doubleArray50 = new double[] {};
        multiDirectional48.setStartConfiguration(doubleArray50);
        int int52 = multiDirectional48.getMaxEvaluations();
        int int53 = multiDirectional48.getIterations();
        double[] doubleArray59 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional48.setStartConfiguration(doubleArray59);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int62 = multiDirectional61.getMaxEvaluations();
        int int63 = multiDirectional61.getIterations();
        int int64 = multiDirectional61.getMaxEvaluations();
        int int65 = multiDirectional61.getMaxEvaluations();
        multiDirectional61.setMaxIterations((-1));
        int int68 = multiDirectional61.getIterations();
        int int69 = multiDirectional61.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker70 = multiDirectional61.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int72 = multiDirectional71.getMaxEvaluations();
        int int73 = multiDirectional71.getIterations();
        int int74 = multiDirectional71.getMaxEvaluations();
        int int75 = multiDirectional71.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int77 = multiDirectional76.getMaxIterations();
        double[] doubleArray78 = new double[] {};
        multiDirectional76.setStartConfiguration(doubleArray78);
        multiDirectional71.setStartConfiguration(doubleArray78);
        multiDirectional61.setStartConfiguration(doubleArray78);
        multiDirectional48.setStartConfiguration(doubleArray78);
        multiDirectional43.setStartConfiguration(doubleArray78);
        multiDirectional35.setStartConfiguration(doubleArray78);
        multiDirectional2.setStartConfiguration(doubleArray78);
        int int86 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2147483647 + "'", int86 == 2147483647);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int15 = multiDirectional14.getEvaluations();
        int int16 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        int int21 = multiDirectional19.getIterations();
        int int22 = multiDirectional19.getMaxEvaluations();
        int int23 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxIterations((-1));
        int int26 = multiDirectional19.getMaxIterations();
        int int27 = multiDirectional19.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = null;
        multiDirectional28.setConvergenceChecker(realConvergenceChecker30);
        multiDirectional28.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional36.getConvergenceChecker();
        multiDirectional28.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional19.setConvergenceChecker(realConvergenceChecker37);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxIterations();
        double[] doubleArray45 = new double[] {};
        multiDirectional43.setStartConfiguration(doubleArray45);
        int int47 = multiDirectional43.getMaxEvaluations();
        int int48 = multiDirectional43.getIterations();
        int int49 = multiDirectional43.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = multiDirectional43.getConvergenceChecker();
        multiDirectional42.setConvergenceChecker(realConvergenceChecker50);
        double[] doubleArray52 = new double[] {};
        double[][] doubleArray53 = new double[][] { doubleArray52 };
        multiDirectional42.setStartConfiguration(doubleArray53);
        multiDirectional19.setStartConfiguration(doubleArray53);
        multiDirectional14.setStartConfiguration(doubleArray53);
        multiDirectional0.setStartConfiguration(doubleArray53);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int65 = multiDirectional64.getMaxIterations();
        double[] doubleArray66 = new double[] {};
        multiDirectional64.setStartConfiguration(doubleArray66);
        int int68 = multiDirectional64.getMaxEvaluations();
        int int69 = multiDirectional64.getIterations();
        int int70 = multiDirectional64.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = multiDirectional64.getConvergenceChecker();
        multiDirectional63.setConvergenceChecker(realConvergenceChecker71);
        double[] doubleArray73 = new double[] {};
        double[][] doubleArray74 = new double[][] { doubleArray73 };
        multiDirectional63.setStartConfiguration(doubleArray74);
        multiDirectional60.setStartConfiguration(doubleArray74);
        double[] doubleArray81 = new double[] { 100L, (-1), 1.0f, 10 };
        multiDirectional60.setStartConfiguration(doubleArray81);
        multiDirectional0.setStartConfiguration(doubleArray81);
        int int84 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getIterations();
        int int20 = multiDirectional12.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker21);
        multiDirectional12.setMaxIterations((int) (byte) -1);
        multiDirectional12.setMaxEvaluations(100);
        int int27 = multiDirectional12.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int31 = multiDirectional30.getEvaluations();
        int int32 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxEvaluations();
        int int37 = multiDirectional35.getIterations();
        int int38 = multiDirectional35.getMaxEvaluations();
        int int39 = multiDirectional35.getMaxEvaluations();
        multiDirectional35.setMaxIterations((-1));
        int int42 = multiDirectional35.getMaxIterations();
        int int43 = multiDirectional35.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional44.setConvergenceChecker(realConvergenceChecker46);
        multiDirectional44.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = multiDirectional52.getConvergenceChecker();
        multiDirectional44.setConvergenceChecker(realConvergenceChecker53);
        multiDirectional35.setConvergenceChecker(realConvergenceChecker53);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxIterations();
        double[] doubleArray61 = new double[] {};
        multiDirectional59.setStartConfiguration(doubleArray61);
        int int63 = multiDirectional59.getMaxEvaluations();
        int int64 = multiDirectional59.getIterations();
        int int65 = multiDirectional59.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker66 = multiDirectional59.getConvergenceChecker();
        multiDirectional58.setConvergenceChecker(realConvergenceChecker66);
        double[] doubleArray68 = new double[] {};
        double[][] doubleArray69 = new double[][] { doubleArray68 };
        multiDirectional58.setStartConfiguration(doubleArray69);
        multiDirectional35.setStartConfiguration(doubleArray69);
        multiDirectional30.setStartConfiguration(doubleArray69);
        multiDirectional12.setStartConfiguration(doubleArray69);
        multiDirectional0.setStartConfiguration(doubleArray69);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker75 = multiDirectional0.getConvergenceChecker();
        java.lang.Class<?> wildcardClass76 = realConvergenceChecker75.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker53);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(realConvergenceChecker75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        int int6 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations(32);
        multiDirectional0.setMaxEvaluations((-1));
        multiDirectional0.setMaxEvaluations(0);
        int int13 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker14);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 100, (double) 1L);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        double[] doubleArray17 = new double[] {};
        multiDirectional15.setStartConfiguration(doubleArray17);
        multiDirectional4.setStartConfiguration(doubleArray17);
        multiDirectional0.setStartConfiguration(doubleArray17);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        int int23 = multiDirectional21.getIterations();
        int int24 = multiDirectional21.getMaxEvaluations();
        int int25 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxIterations((-1));
        int int28 = multiDirectional21.getIterations();
        int int29 = multiDirectional21.getMaxIterations();
        multiDirectional21.setMaxEvaluations(100);
        multiDirectional21.setMaxIterations((int) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional21.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker34);
        int int36 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker37);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        double[] doubleArray17 = new double[] {};
        multiDirectional15.setStartConfiguration(doubleArray17);
        multiDirectional4.setStartConfiguration(doubleArray17);
        multiDirectional0.setStartConfiguration(doubleArray17);
        int int21 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional22.getConvergenceChecker();
        multiDirectional22.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional37.getConvergenceChecker();
        multiDirectional22.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker38);
        int int41 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) -1);
        int int44 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker32);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        int int6 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, 0.0d);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional9.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker10);
        int int12 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getIterations();
        double[] doubleArray11 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional0.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getMaxIterations();
        multiDirectional13.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional25.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker26);
        int int28 = multiDirectional13.getMaxIterations();
        int int29 = multiDirectional13.getEvaluations();
        int int30 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxIterations();
        double[] doubleArray35 = new double[] {};
        multiDirectional33.setStartConfiguration(doubleArray35);
        int int37 = multiDirectional33.getMaxEvaluations();
        int int38 = multiDirectional33.getMaxIterations();
        int int39 = multiDirectional33.getMaxIterations();
        multiDirectional33.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        int int44 = multiDirectional42.getIterations();
        int int45 = multiDirectional42.getMaxEvaluations();
        int int46 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxIterations((-1));
        int int49 = multiDirectional42.getMaxIterations();
        int int50 = multiDirectional42.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = null;
        multiDirectional51.setConvergenceChecker(realConvergenceChecker53);
        multiDirectional51.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = multiDirectional59.getConvergenceChecker();
        multiDirectional51.setConvergenceChecker(realConvergenceChecker60);
        multiDirectional42.setConvergenceChecker(realConvergenceChecker60);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int67 = multiDirectional66.getMaxIterations();
        double[] doubleArray68 = new double[] {};
        multiDirectional66.setStartConfiguration(doubleArray68);
        int int70 = multiDirectional66.getMaxEvaluations();
        int int71 = multiDirectional66.getIterations();
        int int72 = multiDirectional66.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker73 = multiDirectional66.getConvergenceChecker();
        multiDirectional65.setConvergenceChecker(realConvergenceChecker73);
        double[] doubleArray75 = new double[] {};
        double[][] doubleArray76 = new double[][] { doubleArray75 };
        multiDirectional65.setStartConfiguration(doubleArray76);
        multiDirectional42.setStartConfiguration(doubleArray76);
        multiDirectional33.setStartConfiguration(doubleArray76);
        multiDirectional13.setStartConfiguration(doubleArray76);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker81 = multiDirectional13.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker81);
        multiDirectional0.setMaxIterations(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(realConvergenceChecker81);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) 1L);
        multiDirectional2.setMaxEvaluations(2147483647);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction5 = null;
        org.apache.commons.math.optimization.GoalType goalType6 = null;
        double[] doubleArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair8 = multiDirectional2.optimize(multivariateRealFunction5, goalType6, doubleArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, (double) (byte) -1);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        int int8 = multiDirectional0.getMaxIterations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        int int11 = multiDirectional0.getEvaluations();
        int int12 = multiDirectional0.getIterations();
        int int13 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional2.setConvergenceChecker(realConvergenceChecker4);
        int int6 = multiDirectional2.getMaxIterations();
        int int7 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) ' ');
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxIterations();
        int int5 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional0.getConvergenceChecker();
        int int10 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxIterations((int) (short) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker15);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 32);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) 0L);
        int int3 = multiDirectional2.getMaxIterations();
        int int4 = multiDirectional2.getMaxIterations();
        int int5 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        double[] doubleArray17 = new double[] {};
        multiDirectional15.setStartConfiguration(doubleArray17);
        multiDirectional4.setStartConfiguration(doubleArray17);
        multiDirectional0.setStartConfiguration(doubleArray17);
        int int21 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional22.getConvergenceChecker();
        multiDirectional22.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional37.getConvergenceChecker();
        multiDirectional22.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker38);
        int int41 = multiDirectional0.getEvaluations();
        int int42 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations(35);
        java.lang.Class<?> wildcardClass45 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker32);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        int int29 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0L, (double) '4');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = multiDirectional5.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker8);
        multiDirectional2.setMaxIterations(100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker8);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) ' ');
        int int10 = multiDirectional0.getMaxEvaluations();
        int int11 = multiDirectional0.getMaxIterations();
        int int12 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional13.setConvergenceChecker(realConvergenceChecker17);
        double[] doubleArray20 = new double[] { 100.0d };
        multiDirectional13.setStartConfiguration(doubleArray20);
        int int22 = multiDirectional13.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        int int27 = multiDirectional25.getIterations();
        int int28 = multiDirectional25.getMaxEvaluations();
        int int29 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxIterations((-1));
        int int32 = multiDirectional25.getMaxIterations();
        multiDirectional25.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional37.getConvergenceChecker();
        multiDirectional25.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional23.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional13.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional13.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = multiDirectional13.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker44);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertNotNull(realConvergenceChecker44);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        int int24 = multiDirectional0.getEvaluations();
        int int25 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getIterations();
        multiDirectional3.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker13);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxEvaluations();
        multiDirectional15.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = null;
        multiDirectional15.setConvergenceChecker(realConvergenceChecker19);
        double[] doubleArray23 = new double[] { 1.0d, 2147483647 };
        multiDirectional15.setStartConfiguration(doubleArray23);
        multiDirectional3.setStartConfiguration(doubleArray23);
        multiDirectional2.setStartConfiguration(doubleArray23);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        multiDirectional27.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = null;
        multiDirectional27.setConvergenceChecker(realConvergenceChecker31);
        double[] doubleArray35 = new double[] { 1.0d, 2147483647 };
        multiDirectional27.setStartConfiguration(doubleArray35);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional27.getConvergenceChecker();
        multiDirectional27.setMaxEvaluations((int) (byte) 100);
        multiDirectional27.setMaxIterations(35);
        multiDirectional27.setMaxIterations(100);
        multiDirectional27.setMaxIterations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxEvaluations();
        int int48 = multiDirectional46.getIterations();
        int int49 = multiDirectional46.getMaxEvaluations();
        int int50 = multiDirectional46.getMaxEvaluations();
        multiDirectional46.setMaxIterations((-1));
        int int53 = multiDirectional46.getMaxIterations();
        int int54 = multiDirectional46.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = null;
        multiDirectional55.setConvergenceChecker(realConvergenceChecker57);
        multiDirectional55.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = multiDirectional63.getConvergenceChecker();
        multiDirectional55.setConvergenceChecker(realConvergenceChecker64);
        multiDirectional46.setConvergenceChecker(realConvergenceChecker64);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int71 = multiDirectional70.getMaxIterations();
        double[] doubleArray72 = new double[] {};
        multiDirectional70.setStartConfiguration(doubleArray72);
        int int74 = multiDirectional70.getMaxEvaluations();
        int int75 = multiDirectional70.getIterations();
        int int76 = multiDirectional70.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker77 = multiDirectional70.getConvergenceChecker();
        multiDirectional69.setConvergenceChecker(realConvergenceChecker77);
        double[] doubleArray79 = new double[] {};
        double[][] doubleArray80 = new double[][] { doubleArray79 };
        multiDirectional69.setStartConfiguration(doubleArray80);
        multiDirectional46.setStartConfiguration(doubleArray80);
        multiDirectional27.setStartConfiguration(doubleArray80);
        multiDirectional2.setStartConfiguration(doubleArray80);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker85 = multiDirectional2.getConvergenceChecker();
        int int86 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker37);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(realConvergenceChecker85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2147483647 + "'", int86 == 2147483647);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 1, (double) (short) -1);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations(1);
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        int int14 = multiDirectional12.getEvaluations();
        multiDirectional12.setMaxIterations((int) (short) 1);
        int int17 = multiDirectional12.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int21 = multiDirectional20.getEvaluations();
        int int22 = multiDirectional20.getMaxEvaluations();
        multiDirectional20.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker29);
        double[] doubleArray33 = new double[] { 1.0d, 2147483647 };
        multiDirectional25.setStartConfiguration(doubleArray33);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional25.getConvergenceChecker();
        multiDirectional25.setMaxEvaluations((int) (byte) 100);
        multiDirectional25.setMaxIterations(35);
        double[] doubleArray41 = new double[] { 100.0d };
        multiDirectional25.setStartConfiguration(doubleArray41);
        multiDirectional20.setStartConfiguration(doubleArray41);
        multiDirectional12.setStartConfiguration(doubleArray41);
        multiDirectional0.setStartConfiguration(doubleArray41);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertNotNull(realConvergenceChecker46);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxEvaluations((int) (byte) 0);
        multiDirectional0.setMaxIterations(0);
        multiDirectional0.setMaxIterations((int) (byte) -1);
        int int20 = multiDirectional0.getIterations();
        int int21 = multiDirectional0.getMaxEvaluations();
        double[] doubleArray28 = new double[] { 35, (short) -1, (short) 100, 0.0d, (-1), 10.0d };
        // The following exception was thrown during execution in test generation
        try {
            multiDirectional0.setStartConfiguration(doubleArray28);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, -1.0, 100.0, 0.0, -1.0, 10.0]");
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0L, (double) 'a');
        multiDirectional2.setMaxEvaluations((int) '#');
        int int5 = multiDirectional2.getIterations();
        multiDirectional2.setMaxEvaluations(32);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        multiDirectional2.setMaxIterations(100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional2.getConvergenceChecker();
        multiDirectional2.setMaxEvaluations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional(1.0d, (double) 10.0f);
        int int12 = multiDirectional11.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional11.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker13);
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray17 = new double[] { 100.0d };
        multiDirectional10.setStartConfiguration(doubleArray17);
        int int19 = multiDirectional10.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        int int24 = multiDirectional22.getIterations();
        int int25 = multiDirectional22.getMaxEvaluations();
        int int26 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxIterations((-1));
        int int29 = multiDirectional22.getMaxIterations();
        multiDirectional22.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional34.getConvergenceChecker();
        multiDirectional22.setConvergenceChecker(realConvergenceChecker35);
        multiDirectional20.setConvergenceChecker(realConvergenceChecker35);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        int int41 = multiDirectional39.getIterations();
        int int42 = multiDirectional39.getMaxEvaluations();
        int int43 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxIterations((-1));
        int int46 = multiDirectional39.getIterations();
        multiDirectional39.setMaxIterations((int) '#');
        multiDirectional39.setMaxEvaluations(0);
        multiDirectional39.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = multiDirectional55.getConvergenceChecker();
        multiDirectional39.setConvergenceChecker(realConvergenceChecker56);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker56);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker56);
        multiDirectional0.setMaxEvaluations((int) 'a');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker56);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        int int12 = multiDirectional0.getMaxEvaluations();
        int int13 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(35);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        int int4 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        int int16 = multiDirectional14.getIterations();
        int int17 = multiDirectional14.getMaxEvaluations();
        int int18 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxIterations((-1));
        int int21 = multiDirectional14.getMaxIterations();
        multiDirectional14.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional26.getConvergenceChecker();
        multiDirectional14.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional12.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker27);
        int int31 = multiDirectional11.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int35 = multiDirectional34.getEvaluations();
        int int36 = multiDirectional34.getMaxEvaluations();
        multiDirectional34.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional34.getConvergenceChecker();
        multiDirectional11.setConvergenceChecker(realConvergenceChecker39);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker39);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
        org.junit.Assert.assertNotNull(realConvergenceChecker42);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional5.setConvergenceChecker(realConvergenceChecker9);
        double[] doubleArray13 = new double[] { 1.0d, 2147483647 };
        multiDirectional5.setStartConfiguration(doubleArray13);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional5.getConvergenceChecker();
        multiDirectional5.setMaxEvaluations((int) (byte) 100);
        multiDirectional5.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional5.getConvergenceChecker();
        int int21 = multiDirectional5.getEvaluations();
        int int22 = multiDirectional5.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getIterations();
        int int31 = multiDirectional23.getEvaluations();
        int int32 = multiDirectional23.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional33.setConvergenceChecker(realConvergenceChecker37);
        double[] doubleArray41 = new double[] { 1.0d, 2147483647 };
        multiDirectional33.setStartConfiguration(doubleArray41);
        int int43 = multiDirectional33.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxIterations();
        double[] doubleArray46 = new double[] {};
        multiDirectional44.setStartConfiguration(doubleArray46);
        multiDirectional33.setStartConfiguration(doubleArray46);
        multiDirectional23.setStartConfiguration(doubleArray46);
        multiDirectional5.setStartConfiguration(doubleArray46);
        multiDirectional2.setStartConfiguration(doubleArray46);
        int int52 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = multiDirectional2.getConvergenceChecker();
        int int55 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertNull(realConvergenceChecker20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(realConvergenceChecker53);
        org.junit.Assert.assertNotNull(realConvergenceChecker54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker5);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = null;
        multiDirectional7.setConvergenceChecker(realConvergenceChecker11);
        double[] doubleArray15 = new double[] { 1.0d, 2147483647 };
        multiDirectional7.setStartConfiguration(doubleArray15);
        int int17 = multiDirectional7.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxIterations();
        double[] doubleArray20 = new double[] {};
        multiDirectional18.setStartConfiguration(doubleArray20);
        multiDirectional7.setStartConfiguration(doubleArray20);
        multiDirectional3.setStartConfiguration(doubleArray20);
        int int24 = multiDirectional3.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        multiDirectional27.setMaxIterations((-1));
        int int34 = multiDirectional27.getMaxIterations();
        multiDirectional27.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = multiDirectional39.getConvergenceChecker();
        multiDirectional27.setConvergenceChecker(realConvergenceChecker40);
        multiDirectional25.setConvergenceChecker(realConvergenceChecker40);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = multiDirectional25.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker43);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional47.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxEvaluations();
        multiDirectional50.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = null;
        multiDirectional50.setConvergenceChecker(realConvergenceChecker54);
        double[] doubleArray58 = new double[] { 1.0d, 2147483647 };
        multiDirectional50.setStartConfiguration(doubleArray58);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = multiDirectional50.getConvergenceChecker();
        multiDirectional50.setMaxEvaluations((int) (byte) 100);
        multiDirectional50.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker65 = multiDirectional50.getConvergenceChecker();
        int int66 = multiDirectional50.getEvaluations();
        int int67 = multiDirectional50.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional68 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int69 = multiDirectional68.getMaxEvaluations();
        int int70 = multiDirectional68.getIterations();
        int int71 = multiDirectional68.getMaxEvaluations();
        int int72 = multiDirectional68.getMaxEvaluations();
        multiDirectional68.setMaxIterations((-1));
        int int75 = multiDirectional68.getIterations();
        int int76 = multiDirectional68.getEvaluations();
        int int77 = multiDirectional68.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional78 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int79 = multiDirectional78.getMaxEvaluations();
        multiDirectional78.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker82 = null;
        multiDirectional78.setConvergenceChecker(realConvergenceChecker82);
        double[] doubleArray86 = new double[] { 1.0d, 2147483647 };
        multiDirectional78.setStartConfiguration(doubleArray86);
        int int88 = multiDirectional78.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional89 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int90 = multiDirectional89.getMaxIterations();
        double[] doubleArray91 = new double[] {};
        multiDirectional89.setStartConfiguration(doubleArray91);
        multiDirectional78.setStartConfiguration(doubleArray91);
        multiDirectional68.setStartConfiguration(doubleArray91);
        multiDirectional50.setStartConfiguration(doubleArray91);
        multiDirectional47.setStartConfiguration(doubleArray91);
        multiDirectional3.setStartConfiguration(doubleArray91);
        multiDirectional2.setStartConfiguration(doubleArray91);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker40);
        org.junit.Assert.assertNotNull(realConvergenceChecker43);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker60);
        org.junit.Assert.assertNull(realConvergenceChecker65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2147483647 + "'", int79 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2147483647 + "'", int88 == 2147483647);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2147483647 + "'", int90 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        multiDirectional2.setMaxIterations((int) '4');
        int int7 = multiDirectional2.getEvaluations();
        multiDirectional2.setMaxIterations((int) (short) 100);
        int int10 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setMaxIterations(100);
        int int31 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (byte) 0);
        int int35 = multiDirectional34.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional34.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = multiDirectional39.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxEvaluations();
        multiDirectional41.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = null;
        multiDirectional41.setConvergenceChecker(realConvergenceChecker45);
        double[] doubleArray49 = new double[] { 1.0d, 2147483647 };
        multiDirectional41.setStartConfiguration(doubleArray49);
        multiDirectional41.setMaxIterations((int) (byte) 100);
        int int53 = multiDirectional41.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional56.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int66 = multiDirectional65.getMaxIterations();
        double[] doubleArray67 = new double[] {};
        multiDirectional65.setStartConfiguration(doubleArray67);
        int int69 = multiDirectional65.getMaxEvaluations();
        int int70 = multiDirectional65.getIterations();
        int int71 = multiDirectional65.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker72 = multiDirectional65.getConvergenceChecker();
        multiDirectional64.setConvergenceChecker(realConvergenceChecker72);
        double[] doubleArray74 = new double[] {};
        double[][] doubleArray75 = new double[][] { doubleArray74 };
        multiDirectional64.setStartConfiguration(doubleArray75);
        multiDirectional61.setStartConfiguration(doubleArray75);
        multiDirectional56.setStartConfiguration(doubleArray75);
        multiDirectional41.setStartConfiguration(doubleArray75);
        multiDirectional39.setStartConfiguration(doubleArray75);
        multiDirectional34.setStartConfiguration(doubleArray75);
        multiDirectional0.setStartConfiguration(doubleArray75);
        java.lang.Class<?> wildcardClass83 = doubleArray75.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker36);
        org.junit.Assert.assertNotNull(realConvergenceChecker40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2147483647 + "'", int66 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 100, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int6 = multiDirectional5.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxIterations((-1));
        int int16 = multiDirectional9.getMaxIterations();
        multiDirectional9.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional7.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        int int32 = multiDirectional30.getIterations();
        int int33 = multiDirectional30.getMaxEvaluations();
        int int34 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxIterations((-1));
        int int37 = multiDirectional30.getMaxIterations();
        multiDirectional30.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = multiDirectional42.getConvergenceChecker();
        multiDirectional30.setConvergenceChecker(realConvergenceChecker43);
        multiDirectional28.setConvergenceChecker(realConvergenceChecker43);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional28.getConvergenceChecker();
        int int47 = multiDirectional28.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = multiDirectional28.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker48);
        multiDirectional2.setMaxEvaluations(2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker43);
        org.junit.Assert.assertNotNull(realConvergenceChecker46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker48);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        multiDirectional2.setMaxEvaluations(2147483647);
        multiDirectional2.setMaxEvaluations((int) '#');
        int int7 = multiDirectional2.getIterations();
        int int8 = multiDirectional2.getEvaluations();
        multiDirectional2.setMaxEvaluations((int) '#');
        int int11 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        int int15 = multiDirectional14.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        int int18 = multiDirectional16.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        int int23 = multiDirectional21.getIterations();
        int int24 = multiDirectional21.getMaxEvaluations();
        int int25 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxIterations((-1));
        int int28 = multiDirectional21.getMaxIterations();
        multiDirectional21.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional33.getConvergenceChecker();
        multiDirectional21.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional19.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional16.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional14.setConvergenceChecker(realConvergenceChecker34);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional14.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (short) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int46 = multiDirectional45.getMaxEvaluations();
        int int47 = multiDirectional45.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxEvaluations();
        multiDirectional48.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = null;
        multiDirectional48.setConvergenceChecker(realConvergenceChecker52);
        double[] doubleArray55 = new double[] { 100.0d };
        multiDirectional48.setStartConfiguration(doubleArray55);
        multiDirectional45.setStartConfiguration(doubleArray55);
        multiDirectional42.setStartConfiguration(doubleArray55);
        multiDirectional14.setStartConfiguration(doubleArray55);
        multiDirectional2.setStartConfiguration(doubleArray55);
        java.lang.Class<?> wildcardClass61 = doubleArray55.getClass();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional5.setConvergenceChecker(realConvergenceChecker9);
        double[] doubleArray13 = new double[] { 1.0d, 2147483647 };
        multiDirectional5.setStartConfiguration(doubleArray13);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional5.getConvergenceChecker();
        multiDirectional5.setMaxEvaluations((int) (byte) 100);
        multiDirectional5.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional5.getConvergenceChecker();
        int int21 = multiDirectional5.getEvaluations();
        int int22 = multiDirectional5.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getIterations();
        int int31 = multiDirectional23.getEvaluations();
        int int32 = multiDirectional23.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional33.setConvergenceChecker(realConvergenceChecker37);
        double[] doubleArray41 = new double[] { 1.0d, 2147483647 };
        multiDirectional33.setStartConfiguration(doubleArray41);
        int int43 = multiDirectional33.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxIterations();
        double[] doubleArray46 = new double[] {};
        multiDirectional44.setStartConfiguration(doubleArray46);
        multiDirectional33.setStartConfiguration(doubleArray46);
        multiDirectional23.setStartConfiguration(doubleArray46);
        multiDirectional5.setStartConfiguration(doubleArray46);
        multiDirectional2.setStartConfiguration(doubleArray46);
        int int52 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxEvaluations();
        multiDirectional56.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = null;
        multiDirectional56.setConvergenceChecker(realConvergenceChecker60);
        double[] doubleArray64 = new double[] { 1.0d, 2147483647 };
        multiDirectional56.setStartConfiguration(doubleArray64);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker66 = multiDirectional56.getConvergenceChecker();
        multiDirectional56.setMaxEvaluations((int) (byte) 100);
        multiDirectional56.setMaxIterations(35);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = multiDirectional56.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional74 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker75 = multiDirectional74.getConvergenceChecker();
        multiDirectional56.setConvergenceChecker(realConvergenceChecker75);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional79 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional80 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int81 = multiDirectional80.getMaxEvaluations();
        int int82 = multiDirectional80.getIterations();
        int int83 = multiDirectional80.getMaxEvaluations();
        int int84 = multiDirectional80.getMaxEvaluations();
        multiDirectional80.setMaxIterations((-1));
        int int87 = multiDirectional80.getIterations();
        int int88 = multiDirectional80.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker89 = multiDirectional80.getConvergenceChecker();
        multiDirectional79.setConvergenceChecker(realConvergenceChecker89);
        multiDirectional56.setConvergenceChecker(realConvergenceChecker89);
        multiDirectional55.setConvergenceChecker(realConvergenceChecker89);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker89);
        java.lang.Class<?> wildcardClass94 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertNull(realConvergenceChecker20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker66);
        org.junit.Assert.assertNull(realConvergenceChecker71);
        org.junit.Assert.assertNotNull(realConvergenceChecker75);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2147483647 + "'", int84 == 2147483647);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker89);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        multiDirectional2.setMaxIterations((int) (byte) 1);
        int int5 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional2.getConvergenceChecker();
        int int7 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1), (double) 1.0f);
        int int3 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100L, (double) 35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxIterations();
        double[] doubleArray5 = new double[] {};
        multiDirectional3.setStartConfiguration(doubleArray5);
        int int7 = multiDirectional3.getMaxEvaluations();
        int int8 = multiDirectional3.getMaxIterations();
        int int9 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = multiDirectional3.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional3.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker13);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker12);
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertNotNull(realConvergenceChecker15);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        int int20 = multiDirectional18.getIterations();
        int int21 = multiDirectional18.getMaxEvaluations();
        int int22 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxIterations((-1));
        int int25 = multiDirectional18.getIterations();
        multiDirectional18.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker28);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = null;
        multiDirectional30.setConvergenceChecker(realConvergenceChecker34);
        double[] doubleArray38 = new double[] { 1.0d, 2147483647 };
        multiDirectional30.setStartConfiguration(doubleArray38);
        multiDirectional18.setStartConfiguration(doubleArray38);
        multiDirectional17.setStartConfiguration(doubleArray38);
        multiDirectional0.setStartConfiguration(doubleArray38);
        int int43 = multiDirectional0.getEvaluations();
        int int44 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 0, (double) (short) -1);
        int int3 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional7.setMaxEvaluations((int) (byte) 0);
        double[] doubleArray12 = new double[] { (-1.0f), ' ' };
        multiDirectional7.setStartConfiguration(doubleArray12);
        multiDirectional2.setStartConfiguration(doubleArray12);
        int int15 = multiDirectional2.getIterations();
        multiDirectional2.setMaxEvaluations((int) (byte) 10);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction18 = null;
        org.apache.commons.math.optimization.GoalType goalType19 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxIterations();
        double[] doubleArray22 = new double[] {};
        multiDirectional20.setStartConfiguration(doubleArray22);
        int int24 = multiDirectional20.getMaxEvaluations();
        int int25 = multiDirectional20.getIterations();
        double[] doubleArray31 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional20.setStartConfiguration(doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair33 = multiDirectional2.optimize(multivariateRealFunction18, goalType19, doubleArray31);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker4);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 32.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getIterations();
        double[] doubleArray11 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional0.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getIterations();
        int int21 = multiDirectional13.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional13.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        multiDirectional23.setStartConfiguration(doubleArray30);
        multiDirectional13.setStartConfiguration(doubleArray30);
        multiDirectional0.setStartConfiguration(doubleArray30);
        multiDirectional0.setMaxEvaluations((int) '#');
        int int37 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional0.getConvergenceChecker();
        int int39 = multiDirectional0.getMaxIterations();
        int int40 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(1.0d, (double) 10.0f);
        multiDirectional2.setMaxEvaluations((int) (byte) 0);
        int int5 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 'a');
        int int9 = multiDirectional8.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional8.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker10);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100.0f, (double) 10.0f);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) (byte) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker16);
        int int18 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxIterations();
        multiDirectional19.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional19.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker23);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker23);
        java.lang.Class<?> wildcardClass26 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        int int9 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations(97);
        multiDirectional0.setMaxEvaluations((int) (byte) 10);
        int int14 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        int int20 = multiDirectional5.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxIterations();
        multiDirectional21.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional21.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker25);
        int int28 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100.0f, (double) (byte) 10);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getIterations();
        int int6 = multiDirectional0.getMaxEvaluations();
        int int7 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(32);
        multiDirectional0.setMaxIterations((int) '4');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        int int5 = multiDirectional2.getMaxIterations();
        int int6 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        double[] doubleArray17 = new double[] {};
        multiDirectional15.setStartConfiguration(doubleArray17);
        multiDirectional4.setStartConfiguration(doubleArray17);
        multiDirectional0.setStartConfiguration(doubleArray17);
        int int21 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional22.getConvergenceChecker();
        multiDirectional22.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional37.getConvergenceChecker();
        multiDirectional22.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker38);
        int int41 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations(97);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker32);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray18 = new double[] { 1.0d, 2147483647 };
        multiDirectional10.setStartConfiguration(doubleArray18);
        int int20 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxIterations();
        double[] doubleArray23 = new double[] {};
        multiDirectional21.setStartConfiguration(doubleArray23);
        multiDirectional10.setStartConfiguration(doubleArray23);
        multiDirectional0.setStartConfiguration(doubleArray23);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxEvaluations();
        int int34 = multiDirectional32.getIterations();
        int int35 = multiDirectional32.getMaxEvaluations();
        int int36 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxIterations((-1));
        int int39 = multiDirectional32.getMaxIterations();
        multiDirectional32.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = multiDirectional44.getConvergenceChecker();
        multiDirectional32.setConvergenceChecker(realConvergenceChecker45);
        multiDirectional30.setConvergenceChecker(realConvergenceChecker45);
        multiDirectional27.setConvergenceChecker(realConvergenceChecker45);
        multiDirectional27.setMaxIterations((int) (byte) 100);
        multiDirectional27.setMaxIterations((-1));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = null;
        multiDirectional53.setConvergenceChecker(realConvergenceChecker55);
        multiDirectional53.setMaxEvaluations((int) ' ');
        int int59 = multiDirectional53.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = multiDirectional53.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int62 = multiDirectional61.getMaxEvaluations();
        int int63 = multiDirectional61.getIterations();
        int int64 = multiDirectional61.getMaxEvaluations();
        int int65 = multiDirectional61.getMaxEvaluations();
        multiDirectional61.setMaxIterations((-1));
        int int68 = multiDirectional61.getIterations();
        multiDirectional61.setMaxIterations((int) '#');
        multiDirectional61.setMaxEvaluations(0);
        multiDirectional61.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional77 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker78 = multiDirectional77.getConvergenceChecker();
        multiDirectional61.setConvergenceChecker(realConvergenceChecker78);
        multiDirectional53.setConvergenceChecker(realConvergenceChecker78);
        multiDirectional27.setConvergenceChecker(realConvergenceChecker78);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker78);
        int int83 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker45);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker78);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = multiDirectional4.getConvergenceChecker();
        multiDirectional4.setMaxEvaluations((int) (byte) 100);
        multiDirectional4.setMaxIterations(35);
        int int19 = multiDirectional4.getEvaluations();
        int int20 = multiDirectional4.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker28);
        double[] doubleArray32 = new double[] { 1.0d, 2147483647 };
        multiDirectional24.setStartConfiguration(doubleArray32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional24.getConvergenceChecker();
        multiDirectional24.setMaxEvaluations((int) (byte) 100);
        multiDirectional24.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = null;
        multiDirectional39.setConvergenceChecker(realConvergenceChecker43);
        double[] doubleArray47 = new double[] { 1.0d, 2147483647 };
        multiDirectional39.setStartConfiguration(doubleArray47);
        int int49 = multiDirectional39.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxIterations();
        double[] doubleArray52 = new double[] {};
        multiDirectional50.setStartConfiguration(doubleArray52);
        multiDirectional39.setStartConfiguration(doubleArray52);
        multiDirectional24.setStartConfiguration(doubleArray52);
        multiDirectional23.setStartConfiguration(doubleArray52);
        int int57 = multiDirectional23.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int59 = multiDirectional58.getMaxIterations();
        double[] doubleArray60 = new double[] {};
        multiDirectional58.setStartConfiguration(doubleArray60);
        int int62 = multiDirectional58.getMaxEvaluations();
        int int63 = multiDirectional58.getIterations();
        double[] doubleArray69 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional58.setStartConfiguration(doubleArray69);
        multiDirectional23.setStartConfiguration(doubleArray69);
        multiDirectional4.setStartConfiguration(doubleArray69);
        multiDirectional2.setStartConfiguration(doubleArray69);
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxIterations();
        double[] doubleArray10 = new double[] {};
        multiDirectional8.setStartConfiguration(doubleArray10);
        multiDirectional3.setStartConfiguration(doubleArray10);
        multiDirectional2.setStartConfiguration(doubleArray10);
        multiDirectional2.setMaxEvaluations(97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        double[] doubleArray17 = new double[] {};
        multiDirectional15.setStartConfiguration(doubleArray17);
        multiDirectional4.setStartConfiguration(doubleArray17);
        multiDirectional0.setStartConfiguration(doubleArray17);
        int int21 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional22.getConvergenceChecker();
        multiDirectional22.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional37.getConvergenceChecker();
        multiDirectional22.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker38);
        int int41 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) -1);
        int int44 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxEvaluations();
        int int47 = multiDirectional45.getIterations();
        int int48 = multiDirectional45.getMaxEvaluations();
        int int49 = multiDirectional45.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxIterations();
        double[] doubleArray52 = new double[] {};
        multiDirectional50.setStartConfiguration(doubleArray52);
        multiDirectional45.setStartConfiguration(doubleArray52);
        multiDirectional0.setStartConfiguration(doubleArray52);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker32);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        int int4 = multiDirectional0.getMaxIterations();
        int int5 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        int int7 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations((int) ' ');
        int int10 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations(2147483647);
        int int13 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        multiDirectional2.setMaxIterations((int) '4');
        int int7 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        int int10 = multiDirectional8.getIterations();
        int int11 = multiDirectional8.getMaxEvaluations();
        int int12 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxIterations((-1));
        int int15 = multiDirectional8.getIterations();
        int int16 = multiDirectional8.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker17);
        multiDirectional8.setMaxIterations((int) (byte) -1);
        multiDirectional8.setMaxEvaluations(100);
        int int23 = multiDirectional8.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int27 = multiDirectional26.getEvaluations();
        int int28 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        int int33 = multiDirectional31.getIterations();
        int int34 = multiDirectional31.getMaxEvaluations();
        int int35 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxIterations((-1));
        int int38 = multiDirectional31.getMaxIterations();
        int int39 = multiDirectional31.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = null;
        multiDirectional40.setConvergenceChecker(realConvergenceChecker42);
        multiDirectional40.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = multiDirectional48.getConvergenceChecker();
        multiDirectional40.setConvergenceChecker(realConvergenceChecker49);
        multiDirectional31.setConvergenceChecker(realConvergenceChecker49);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxIterations();
        double[] doubleArray57 = new double[] {};
        multiDirectional55.setStartConfiguration(doubleArray57);
        int int59 = multiDirectional55.getMaxEvaluations();
        int int60 = multiDirectional55.getIterations();
        int int61 = multiDirectional55.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = multiDirectional55.getConvergenceChecker();
        multiDirectional54.setConvergenceChecker(realConvergenceChecker62);
        double[] doubleArray64 = new double[] {};
        double[][] doubleArray65 = new double[][] { doubleArray64 };
        multiDirectional54.setStartConfiguration(doubleArray65);
        multiDirectional31.setStartConfiguration(doubleArray65);
        multiDirectional26.setStartConfiguration(doubleArray65);
        multiDirectional8.setStartConfiguration(doubleArray65);
        multiDirectional2.setStartConfiguration(doubleArray65);
        int int71 = multiDirectional2.getEvaluations();
        int int72 = multiDirectional2.getEvaluations();
        int int73 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker49);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        double[] doubleArray17 = new double[] {};
        multiDirectional15.setStartConfiguration(doubleArray17);
        multiDirectional4.setStartConfiguration(doubleArray17);
        multiDirectional0.setStartConfiguration(doubleArray17);
        int int21 = multiDirectional0.getMaxIterations();
        int int22 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        multiDirectional27.setMaxEvaluations(0);
        int int31 = multiDirectional27.getIterations();
        multiDirectional27.setMaxIterations((int) (byte) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = null;
        multiDirectional27.setConvergenceChecker(realConvergenceChecker34);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        multiDirectional36.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = null;
        multiDirectional36.setConvergenceChecker(realConvergenceChecker40);
        double[] doubleArray43 = new double[] { 100.0d };
        multiDirectional36.setStartConfiguration(doubleArray43);
        int int45 = multiDirectional36.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxEvaluations();
        int int50 = multiDirectional48.getIterations();
        int int51 = multiDirectional48.getMaxEvaluations();
        int int52 = multiDirectional48.getMaxEvaluations();
        multiDirectional48.setMaxIterations((-1));
        int int55 = multiDirectional48.getMaxIterations();
        multiDirectional48.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker61 = multiDirectional60.getConvergenceChecker();
        multiDirectional48.setConvergenceChecker(realConvergenceChecker61);
        multiDirectional46.setConvergenceChecker(realConvergenceChecker61);
        multiDirectional36.setConvergenceChecker(realConvergenceChecker61);
        multiDirectional36.setMaxIterations(100);
        multiDirectional36.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional71.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional79 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional80 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int81 = multiDirectional80.getMaxIterations();
        double[] doubleArray82 = new double[] {};
        multiDirectional80.setStartConfiguration(doubleArray82);
        int int84 = multiDirectional80.getMaxEvaluations();
        int int85 = multiDirectional80.getIterations();
        int int86 = multiDirectional80.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker87 = multiDirectional80.getConvergenceChecker();
        multiDirectional79.setConvergenceChecker(realConvergenceChecker87);
        double[] doubleArray89 = new double[] {};
        double[][] doubleArray90 = new double[][] { doubleArray89 };
        multiDirectional79.setStartConfiguration(doubleArray90);
        multiDirectional76.setStartConfiguration(doubleArray90);
        multiDirectional71.setStartConfiguration(doubleArray90);
        multiDirectional36.setStartConfiguration(doubleArray90);
        multiDirectional27.setStartConfiguration(doubleArray90);
        multiDirectional25.setStartConfiguration(doubleArray90);
        multiDirectional0.setStartConfiguration(doubleArray90);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker61);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2147483647 + "'", int84 == 2147483647);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2147483647 + "'", int86 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker87);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        double[] doubleArray17 = new double[] {};
        multiDirectional15.setStartConfiguration(doubleArray17);
        multiDirectional4.setStartConfiguration(doubleArray17);
        multiDirectional0.setStartConfiguration(doubleArray17);
        int int21 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional22.getConvergenceChecker();
        multiDirectional22.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional37.getConvergenceChecker();
        multiDirectional22.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker38);
        int int41 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = multiDirectional0.getConvergenceChecker();
        java.lang.Class<?> wildcardClass43 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker32);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setMaxIterations((int) (short) -1);
        int int24 = multiDirectional0.getIterations();
        int int25 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        int int28 = multiDirectional26.getIterations();
        int int29 = multiDirectional26.getMaxEvaluations();
        int int30 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxIterations((-1));
        int int33 = multiDirectional26.getIterations();
        int int34 = multiDirectional26.getMaxIterations();
        multiDirectional26.setMaxEvaluations(100);
        multiDirectional26.setMaxIterations((int) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional26.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker39);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker7);
        double[] doubleArray11 = new double[] { 1.0d, 2147483647 };
        multiDirectional3.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional3.getConvergenceChecker();
        multiDirectional3.setMaxEvaluations((int) (byte) 100);
        multiDirectional3.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker22);
        double[] doubleArray26 = new double[] { 1.0d, 2147483647 };
        multiDirectional18.setStartConfiguration(doubleArray26);
        int int28 = multiDirectional18.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxIterations();
        double[] doubleArray31 = new double[] {};
        multiDirectional29.setStartConfiguration(doubleArray31);
        multiDirectional18.setStartConfiguration(doubleArray31);
        multiDirectional3.setStartConfiguration(doubleArray31);
        multiDirectional2.setStartConfiguration(doubleArray31);
        multiDirectional2.setMaxEvaluations((int) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional2.getConvergenceChecker();
        int int39 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (byte) 0);
        int int3 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = multiDirectional2.getConvergenceChecker();
        int int5 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) 52);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction3 = null;
        org.apache.commons.math.optimization.GoalType goalType4 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker12);
        double[] doubleArray16 = new double[] { 1.0d, 2147483647 };
        multiDirectional8.setStartConfiguration(doubleArray16);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional8.getConvergenceChecker();
        multiDirectional8.setMaxEvaluations((int) (byte) 100);
        multiDirectional8.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = null;
        multiDirectional23.setConvergenceChecker(realConvergenceChecker27);
        double[] doubleArray31 = new double[] { 1.0d, 2147483647 };
        multiDirectional23.setStartConfiguration(doubleArray31);
        int int33 = multiDirectional23.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int35 = multiDirectional34.getMaxIterations();
        double[] doubleArray36 = new double[] {};
        multiDirectional34.setStartConfiguration(doubleArray36);
        multiDirectional23.setStartConfiguration(doubleArray36);
        multiDirectional8.setStartConfiguration(doubleArray36);
        multiDirectional7.setStartConfiguration(doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair41 = multiDirectional2.optimize(multivariateRealFunction3, goalType4, doubleArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional16.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker17);
        int int19 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (short) -1);
        int int23 = multiDirectional0.getMaxIterations();
        int int24 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional25.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = multiDirectional25.getConvergenceChecker();
        multiDirectional25.setMaxIterations(0);
        multiDirectional25.setMaxEvaluations(97);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional38.getConvergenceChecker();
        int int40 = multiDirectional38.getEvaluations();
        multiDirectional38.setMaxIterations((int) (short) 1);
        int int43 = multiDirectional38.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int47 = multiDirectional46.getEvaluations();
        int int48 = multiDirectional46.getMaxEvaluations();
        multiDirectional46.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxEvaluations();
        multiDirectional51.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = null;
        multiDirectional51.setConvergenceChecker(realConvergenceChecker55);
        double[] doubleArray59 = new double[] { 1.0d, 2147483647 };
        multiDirectional51.setStartConfiguration(doubleArray59);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker61 = multiDirectional51.getConvergenceChecker();
        multiDirectional51.setMaxEvaluations((int) (byte) 100);
        multiDirectional51.setMaxIterations(35);
        double[] doubleArray67 = new double[] { 100.0d };
        multiDirectional51.setStartConfiguration(doubleArray67);
        multiDirectional46.setStartConfiguration(doubleArray67);
        multiDirectional38.setStartConfiguration(doubleArray67);
        multiDirectional25.setStartConfiguration(doubleArray67);
        multiDirectional0.setStartConfiguration(doubleArray67);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker31);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker61);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0]");
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100L, (double) 35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxIterations();
        double[] doubleArray5 = new double[] {};
        multiDirectional3.setStartConfiguration(doubleArray5);
        int int7 = multiDirectional3.getMaxEvaluations();
        int int8 = multiDirectional3.getMaxIterations();
        int int9 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = multiDirectional3.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional3.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker13);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        int int19 = multiDirectional17.getEvaluations();
        multiDirectional17.setMaxIterations((int) (short) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        int int27 = multiDirectional25.getIterations();
        int int28 = multiDirectional25.getMaxEvaluations();
        int int29 = multiDirectional25.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxIterations();
        double[] doubleArray32 = new double[] {};
        multiDirectional30.setStartConfiguration(doubleArray32);
        multiDirectional25.setStartConfiguration(doubleArray32);
        multiDirectional24.setStartConfiguration(doubleArray32);
        multiDirectional17.setStartConfiguration(doubleArray32);
        multiDirectional2.setStartConfiguration(doubleArray32);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker12);
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        int int10 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = multiDirectional13.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxEvaluations();
        int int17 = multiDirectional15.getIterations();
        int int18 = multiDirectional15.getMaxEvaluations();
        int int19 = multiDirectional15.getMaxEvaluations();
        multiDirectional15.setMaxIterations((-1));
        int int22 = multiDirectional15.getIterations();
        multiDirectional15.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = null;
        multiDirectional15.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        multiDirectional27.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = null;
        multiDirectional27.setConvergenceChecker(realConvergenceChecker31);
        double[] doubleArray35 = new double[] { 1.0d, 2147483647 };
        multiDirectional27.setStartConfiguration(doubleArray35);
        multiDirectional15.setStartConfiguration(doubleArray35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxEvaluations();
        int int40 = multiDirectional38.getIterations();
        int int41 = multiDirectional38.getMaxEvaluations();
        int int42 = multiDirectional38.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxIterations();
        double[] doubleArray45 = new double[] {};
        multiDirectional43.setStartConfiguration(doubleArray45);
        multiDirectional38.setStartConfiguration(doubleArray45);
        multiDirectional15.setStartConfiguration(doubleArray45);
        multiDirectional13.setStartConfiguration(doubleArray45);
        int int50 = multiDirectional13.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxEvaluations();
        int int53 = multiDirectional51.getIterations();
        int int54 = multiDirectional51.getMaxEvaluations();
        int int55 = multiDirectional51.getMaxEvaluations();
        multiDirectional51.setMaxIterations((-1));
        int int58 = multiDirectional51.getIterations();
        int int59 = multiDirectional51.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int61 = multiDirectional60.getMaxEvaluations();
        int int62 = multiDirectional60.getIterations();
        int int63 = multiDirectional60.getMaxEvaluations();
        int int64 = multiDirectional60.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int66 = multiDirectional65.getMaxIterations();
        double[] doubleArray67 = new double[] {};
        multiDirectional65.setStartConfiguration(doubleArray67);
        multiDirectional60.setStartConfiguration(doubleArray67);
        multiDirectional51.setStartConfiguration(doubleArray67);
        double[] doubleArray72 = new double[] { 35 };
        multiDirectional51.setStartConfiguration(doubleArray72);
        multiDirectional13.setStartConfiguration(doubleArray72);
        multiDirectional0.setStartConfiguration(doubleArray72);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2147483647 + "'", int66 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[35.0]");
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 'a', (double) 2147483647);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker7);
        double[] doubleArray11 = new double[] { 1.0d, 2147483647 };
        multiDirectional3.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional3.getConvergenceChecker();
        multiDirectional3.setMaxEvaluations((int) (byte) 100);
        multiDirectional3.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional3.getConvergenceChecker();
        int int19 = multiDirectional3.getEvaluations();
        int int20 = multiDirectional3.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        int int23 = multiDirectional21.getIterations();
        int int24 = multiDirectional21.getMaxEvaluations();
        int int25 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxIterations((-1));
        int int28 = multiDirectional21.getIterations();
        int int29 = multiDirectional21.getEvaluations();
        int int30 = multiDirectional21.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = null;
        multiDirectional31.setConvergenceChecker(realConvergenceChecker35);
        double[] doubleArray39 = new double[] { 1.0d, 2147483647 };
        multiDirectional31.setStartConfiguration(doubleArray39);
        int int41 = multiDirectional31.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxIterations();
        double[] doubleArray44 = new double[] {};
        multiDirectional42.setStartConfiguration(doubleArray44);
        multiDirectional31.setStartConfiguration(doubleArray44);
        multiDirectional21.setStartConfiguration(doubleArray44);
        multiDirectional3.setStartConfiguration(doubleArray44);
        multiDirectional2.setStartConfiguration(doubleArray44);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = null;
        multiDirectional50.setConvergenceChecker(realConvergenceChecker52);
        multiDirectional50.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = multiDirectional50.getConvergenceChecker();
        int int57 = multiDirectional50.getMaxIterations();
        int int58 = multiDirectional50.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxEvaluations();
        int int61 = multiDirectional59.getIterations();
        int int62 = multiDirectional59.getMaxEvaluations();
        int int63 = multiDirectional59.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int65 = multiDirectional64.getMaxIterations();
        double[] doubleArray66 = new double[] {};
        multiDirectional64.setStartConfiguration(doubleArray66);
        multiDirectional59.setStartConfiguration(doubleArray66);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int70 = multiDirectional69.getMaxIterations();
        double[] doubleArray71 = new double[] {};
        multiDirectional69.setStartConfiguration(doubleArray71);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional73 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int74 = multiDirectional73.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxEvaluations();
        int int77 = multiDirectional75.getIterations();
        int int78 = multiDirectional75.getMaxEvaluations();
        int int79 = multiDirectional75.getMaxEvaluations();
        multiDirectional75.setMaxIterations((-1));
        int int82 = multiDirectional75.getMaxIterations();
        multiDirectional75.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional87 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker88 = multiDirectional87.getConvergenceChecker();
        multiDirectional75.setConvergenceChecker(realConvergenceChecker88);
        multiDirectional73.setConvergenceChecker(realConvergenceChecker88);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker91 = multiDirectional73.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker92 = multiDirectional73.getConvergenceChecker();
        multiDirectional69.setConvergenceChecker(realConvergenceChecker92);
        multiDirectional59.setConvergenceChecker(realConvergenceChecker92);
        multiDirectional50.setConvergenceChecker(realConvergenceChecker92);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker92);
        java.lang.Class<?> wildcardClass97 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker13);
        org.junit.Assert.assertNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2147483647 + "'", int79 == 2147483647);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker88);
        org.junit.Assert.assertNotNull(realConvergenceChecker91);
        org.junit.Assert.assertNotNull(realConvergenceChecker92);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getMaxEvaluations();
        int int15 = multiDirectional0.getMaxEvaluations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxIterations();
        double[] doubleArray23 = new double[] {};
        multiDirectional21.setStartConfiguration(doubleArray23);
        int int25 = multiDirectional21.getMaxEvaluations();
        int int26 = multiDirectional21.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional21.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxEvaluations();
        multiDirectional28.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = null;
        multiDirectional28.setConvergenceChecker(realConvergenceChecker32);
        double[] doubleArray36 = new double[] { 1.0d, 2147483647 };
        multiDirectional28.setStartConfiguration(doubleArray36);
        multiDirectional28.setMaxIterations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int43 = multiDirectional42.getEvaluations();
        int int44 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxEvaluations();
        int int49 = multiDirectional47.getIterations();
        int int50 = multiDirectional47.getMaxEvaluations();
        int int51 = multiDirectional47.getMaxEvaluations();
        multiDirectional47.setMaxIterations((-1));
        int int54 = multiDirectional47.getMaxIterations();
        int int55 = multiDirectional47.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker58 = null;
        multiDirectional56.setConvergenceChecker(realConvergenceChecker58);
        multiDirectional56.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker65 = multiDirectional64.getConvergenceChecker();
        multiDirectional56.setConvergenceChecker(realConvergenceChecker65);
        multiDirectional47.setConvergenceChecker(realConvergenceChecker65);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int72 = multiDirectional71.getMaxIterations();
        double[] doubleArray73 = new double[] {};
        multiDirectional71.setStartConfiguration(doubleArray73);
        int int75 = multiDirectional71.getMaxEvaluations();
        int int76 = multiDirectional71.getIterations();
        int int77 = multiDirectional71.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker78 = multiDirectional71.getConvergenceChecker();
        multiDirectional70.setConvergenceChecker(realConvergenceChecker78);
        double[] doubleArray80 = new double[] {};
        double[][] doubleArray81 = new double[][] { doubleArray80 };
        multiDirectional70.setStartConfiguration(doubleArray81);
        multiDirectional47.setStartConfiguration(doubleArray81);
        multiDirectional42.setStartConfiguration(doubleArray81);
        multiDirectional28.setStartConfiguration(doubleArray81);
        multiDirectional21.setStartConfiguration(doubleArray81);
        multiDirectional20.setStartConfiguration(doubleArray81);
        multiDirectional0.setStartConfiguration(doubleArray81);
        int int89 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional0.getConvergenceChecker();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        int int20 = multiDirectional18.getIterations();
        int int21 = multiDirectional18.getMaxEvaluations();
        int int22 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxIterations((-1));
        int int25 = multiDirectional18.getMaxIterations();
        int int26 = multiDirectional18.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = null;
        multiDirectional27.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional27.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional35.getConvergenceChecker();
        multiDirectional27.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional18.setConvergenceChecker(realConvergenceChecker36);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxIterations();
        double[] doubleArray44 = new double[] {};
        multiDirectional42.setStartConfiguration(doubleArray44);
        int int46 = multiDirectional42.getMaxEvaluations();
        int int47 = multiDirectional42.getIterations();
        int int48 = multiDirectional42.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = multiDirectional42.getConvergenceChecker();
        multiDirectional41.setConvergenceChecker(realConvergenceChecker49);
        double[] doubleArray51 = new double[] {};
        double[][] doubleArray52 = new double[][] { doubleArray51 };
        multiDirectional41.setStartConfiguration(doubleArray52);
        multiDirectional18.setStartConfiguration(doubleArray52);
        multiDirectional0.setStartConfiguration(doubleArray52);
        int int56 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 100, (double) 100.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional62 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int63 = multiDirectional62.getMaxEvaluations();
        int int64 = multiDirectional62.getIterations();
        int int65 = multiDirectional62.getMaxEvaluations();
        int int66 = multiDirectional62.getMaxEvaluations();
        multiDirectional62.setMaxIterations((-1));
        int int69 = multiDirectional62.getIterations();
        int int70 = multiDirectional62.getMaxIterations();
        multiDirectional62.setMaxEvaluations(100);
        int int73 = multiDirectional62.getMaxEvaluations();
        int int74 = multiDirectional62.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker75 = multiDirectional62.getConvergenceChecker();
        multiDirectional61.setConvergenceChecker(realConvergenceChecker75);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker75);
        int int78 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2147483647 + "'", int66 == 2147483647);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        multiDirectional2.setMaxIterations((int) (byte) 1);
        int int5 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        int int8 = multiDirectional6.getIterations();
        int int9 = multiDirectional6.getMaxEvaluations();
        int int10 = multiDirectional6.getMaxEvaluations();
        multiDirectional6.setMaxIterations((-1));
        int int13 = multiDirectional6.getMaxIterations();
        multiDirectional6.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional18.getConvergenceChecker();
        multiDirectional6.setConvergenceChecker(realConvergenceChecker19);
        int int21 = multiDirectional6.getMaxIterations();
        int int22 = multiDirectional6.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getIterations();
        int int31 = multiDirectional23.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxEvaluations();
        int int34 = multiDirectional32.getIterations();
        int int35 = multiDirectional32.getMaxEvaluations();
        int int36 = multiDirectional32.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxIterations();
        double[] doubleArray39 = new double[] {};
        multiDirectional37.setStartConfiguration(doubleArray39);
        multiDirectional32.setStartConfiguration(doubleArray39);
        multiDirectional23.setStartConfiguration(doubleArray39);
        multiDirectional6.setStartConfiguration(doubleArray39);
        multiDirectional2.setStartConfiguration(doubleArray39);
        multiDirectional2.setMaxEvaluations((int) 'a');
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxIterations();
        double[] doubleArray7 = new double[] {};
        multiDirectional5.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional5.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        int int12 = multiDirectional10.getIterations();
        int int13 = multiDirectional10.getMaxEvaluations();
        int int14 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxIterations((-1));
        int int17 = multiDirectional10.getIterations();
        multiDirectional10.setMaxIterations((int) '#');
        multiDirectional10.setMaxEvaluations(0);
        multiDirectional10.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional26.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional5.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker27);
        int int31 = multiDirectional0.getIterations();
        int int32 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = multiDirectional0.getConvergenceChecker();
        int int34 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        double[] doubleArray17 = new double[] {};
        multiDirectional15.setStartConfiguration(doubleArray17);
        multiDirectional4.setStartConfiguration(doubleArray17);
        multiDirectional0.setStartConfiguration(doubleArray17);
        int int21 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional22.getConvergenceChecker();
        multiDirectional22.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional37.getConvergenceChecker();
        multiDirectional22.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker38);
        int int41 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) -1);
        int int44 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker32);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker16);
        int int18 = multiDirectional3.getMaxIterations();
        int int19 = multiDirectional3.getEvaluations();
        int int20 = multiDirectional3.getMaxEvaluations();
        int int21 = multiDirectional3.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional3.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional2.setMaxEvaluations((int) (byte) 10);
        int int26 = multiDirectional2.getIterations();
        int int27 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker16);
        int int18 = multiDirectional3.getMaxIterations();
        int int19 = multiDirectional3.getEvaluations();
        int int20 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxIterations();
        double[] doubleArray25 = new double[] {};
        multiDirectional23.setStartConfiguration(doubleArray25);
        int int27 = multiDirectional23.getMaxEvaluations();
        int int28 = multiDirectional23.getMaxIterations();
        int int29 = multiDirectional23.getMaxIterations();
        multiDirectional23.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxEvaluations();
        int int34 = multiDirectional32.getIterations();
        int int35 = multiDirectional32.getMaxEvaluations();
        int int36 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxIterations((-1));
        int int39 = multiDirectional32.getMaxIterations();
        int int40 = multiDirectional32.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = null;
        multiDirectional41.setConvergenceChecker(realConvergenceChecker43);
        multiDirectional41.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = multiDirectional49.getConvergenceChecker();
        multiDirectional41.setConvergenceChecker(realConvergenceChecker50);
        multiDirectional32.setConvergenceChecker(realConvergenceChecker50);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxIterations();
        double[] doubleArray58 = new double[] {};
        multiDirectional56.setStartConfiguration(doubleArray58);
        int int60 = multiDirectional56.getMaxEvaluations();
        int int61 = multiDirectional56.getIterations();
        int int62 = multiDirectional56.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker63 = multiDirectional56.getConvergenceChecker();
        multiDirectional55.setConvergenceChecker(realConvergenceChecker63);
        double[] doubleArray65 = new double[] {};
        double[][] doubleArray66 = new double[][] { doubleArray65 };
        multiDirectional55.setStartConfiguration(doubleArray66);
        multiDirectional32.setStartConfiguration(doubleArray66);
        multiDirectional23.setStartConfiguration(doubleArray66);
        multiDirectional3.setStartConfiguration(doubleArray66);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = multiDirectional3.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker71);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(realConvergenceChecker71);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (byte) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((int) (byte) 0);
        int int16 = multiDirectional12.getMaxIterations();
        int int17 = multiDirectional12.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker12);
        multiDirectional10.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional18.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker19);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker19);
        int int22 = multiDirectional0.getMaxIterations();
        int int23 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        multiDirectional2.setMaxEvaluations(2147483647);
        multiDirectional2.setMaxEvaluations((int) '#');
        int int7 = multiDirectional2.getIterations();
        int int8 = multiDirectional2.getEvaluations();
        multiDirectional2.setMaxEvaluations((int) '#');
        multiDirectional2.setMaxEvaluations((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxIterations();
        double[] doubleArray5 = new double[] {};
        multiDirectional3.setStartConfiguration(doubleArray5);
        int int7 = multiDirectional3.getMaxEvaluations();
        int int8 = multiDirectional3.getIterations();
        int int9 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((int) (short) 1);
        int int12 = multiDirectional3.getEvaluations();
        int int13 = multiDirectional3.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        int int18 = multiDirectional16.getIterations();
        int int19 = multiDirectional16.getMaxEvaluations();
        int int20 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxIterations((-1));
        int int23 = multiDirectional16.getMaxIterations();
        multiDirectional16.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional28.getConvergenceChecker();
        multiDirectional16.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional14.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional14.getConvergenceChecker();
        int int33 = multiDirectional14.getMaxIterations();
        multiDirectional14.setMaxEvaluations(10);
        int int36 = multiDirectional14.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional39.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional42.setConvergenceChecker(realConvergenceChecker46);
        double[] doubleArray50 = new double[] { 1.0d, 2147483647 };
        multiDirectional42.setStartConfiguration(doubleArray50);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = multiDirectional42.getConvergenceChecker();
        multiDirectional42.setMaxEvaluations((int) (byte) 100);
        multiDirectional42.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = multiDirectional42.getConvergenceChecker();
        int int58 = multiDirectional42.getEvaluations();
        int int59 = multiDirectional42.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int61 = multiDirectional60.getMaxEvaluations();
        int int62 = multiDirectional60.getIterations();
        int int63 = multiDirectional60.getMaxEvaluations();
        int int64 = multiDirectional60.getMaxEvaluations();
        multiDirectional60.setMaxIterations((-1));
        int int67 = multiDirectional60.getIterations();
        int int68 = multiDirectional60.getEvaluations();
        int int69 = multiDirectional60.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int71 = multiDirectional70.getMaxEvaluations();
        multiDirectional70.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker74 = null;
        multiDirectional70.setConvergenceChecker(realConvergenceChecker74);
        double[] doubleArray78 = new double[] { 1.0d, 2147483647 };
        multiDirectional70.setStartConfiguration(doubleArray78);
        int int80 = multiDirectional70.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional81 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int82 = multiDirectional81.getMaxIterations();
        double[] doubleArray83 = new double[] {};
        multiDirectional81.setStartConfiguration(doubleArray83);
        multiDirectional70.setStartConfiguration(doubleArray83);
        multiDirectional60.setStartConfiguration(doubleArray83);
        multiDirectional42.setStartConfiguration(doubleArray83);
        multiDirectional39.setStartConfiguration(doubleArray83);
        multiDirectional14.setStartConfiguration(doubleArray83);
        multiDirectional3.setStartConfiguration(doubleArray83);
        multiDirectional2.setStartConfiguration(doubleArray83);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker52);
        org.junit.Assert.assertNull(realConvergenceChecker57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations((int) ' ');
        multiDirectional0.setMaxEvaluations(32);
        int int12 = multiDirectional0.getMaxEvaluations();
        int int13 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional2.setConvergenceChecker(realConvergenceChecker4);
        int int6 = multiDirectional2.getMaxEvaluations();
        int int7 = multiDirectional2.getIterations();
        int int8 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 100, (double) ' ');
        multiDirectional2.setMaxEvaluations((int) (byte) -1);
        int int5 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations(35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxIterations();
        double[] doubleArray13 = new double[] {};
        multiDirectional11.setStartConfiguration(doubleArray13);
        multiDirectional0.setStartConfiguration(doubleArray13);
        multiDirectional0.setMaxEvaluations((int) 'a');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker20);
        multiDirectional18.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional18.getConvergenceChecker();
        multiDirectional18.setMaxIterations((int) (byte) -1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        int int31 = multiDirectional29.getIterations();
        int int32 = multiDirectional29.getMaxEvaluations();
        int int33 = multiDirectional29.getMaxEvaluations();
        multiDirectional29.setMaxIterations((-1));
        int int36 = multiDirectional29.getMaxIterations();
        multiDirectional29.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = multiDirectional41.getConvergenceChecker();
        multiDirectional29.setConvergenceChecker(realConvergenceChecker42);
        multiDirectional27.setConvergenceChecker(realConvergenceChecker42);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = multiDirectional27.getConvergenceChecker();
        int int46 = multiDirectional27.getMaxIterations();
        multiDirectional27.setMaxEvaluations(10);
        multiDirectional27.setMaxEvaluations(100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxEvaluations();
        multiDirectional51.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = null;
        multiDirectional51.setConvergenceChecker(realConvergenceChecker55);
        double[] doubleArray58 = new double[] { 100.0d };
        multiDirectional51.setStartConfiguration(doubleArray58);
        multiDirectional51.setMaxEvaluations(2147483647);
        int int62 = multiDirectional51.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int64 = multiDirectional63.getMaxIterations();
        double[] doubleArray65 = new double[] {};
        multiDirectional63.setStartConfiguration(doubleArray65);
        int int67 = multiDirectional63.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional68 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int69 = multiDirectional68.getMaxEvaluations();
        int int70 = multiDirectional68.getIterations();
        int int71 = multiDirectional68.getMaxEvaluations();
        int int72 = multiDirectional68.getMaxEvaluations();
        multiDirectional68.setMaxIterations((-1));
        int int75 = multiDirectional68.getIterations();
        multiDirectional68.setMaxIterations((int) '#');
        multiDirectional68.setMaxEvaluations(0);
        multiDirectional68.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional84 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker85 = multiDirectional84.getConvergenceChecker();
        multiDirectional68.setConvergenceChecker(realConvergenceChecker85);
        multiDirectional63.setConvergenceChecker(realConvergenceChecker85);
        multiDirectional51.setConvergenceChecker(realConvergenceChecker85);
        multiDirectional27.setConvergenceChecker(realConvergenceChecker85);
        multiDirectional18.setConvergenceChecker(realConvergenceChecker85);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker85);
        multiDirectional0.setMaxEvaluations((int) (byte) 1);
        java.lang.Class<?> wildcardClass94 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker42);
        org.junit.Assert.assertNotNull(realConvergenceChecker45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker85);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        int int8 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = null;
        multiDirectional9.setConvergenceChecker(realConvergenceChecker11);
        multiDirectional9.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        int int27 = multiDirectional25.getIterations();
        int int28 = multiDirectional25.getMaxEvaluations();
        int int29 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxIterations((-1));
        int int32 = multiDirectional25.getMaxIterations();
        multiDirectional25.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional37.getConvergenceChecker();
        multiDirectional25.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional23.setConvergenceChecker(realConvergenceChecker38);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = multiDirectional23.getConvergenceChecker();
        int int42 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = multiDirectional23.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker43);
        int int45 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertNotNull(realConvergenceChecker41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 97);
        int int3 = multiDirectional2.getMaxIterations();
        int int4 = multiDirectional2.getIterations();
        int int5 = multiDirectional2.getEvaluations();
        multiDirectional2.setMaxIterations(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker7);
        double[] doubleArray11 = new double[] { 1.0d, 2147483647 };
        multiDirectional3.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional3.getConvergenceChecker();
        multiDirectional3.setMaxEvaluations((int) (byte) 100);
        multiDirectional3.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker22);
        double[] doubleArray26 = new double[] { 1.0d, 2147483647 };
        multiDirectional18.setStartConfiguration(doubleArray26);
        int int28 = multiDirectional18.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxIterations();
        double[] doubleArray31 = new double[] {};
        multiDirectional29.setStartConfiguration(doubleArray31);
        multiDirectional18.setStartConfiguration(doubleArray31);
        multiDirectional3.setStartConfiguration(doubleArray31);
        multiDirectional2.setStartConfiguration(doubleArray31);
        int int36 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxEvaluations();
        int int39 = multiDirectional37.getIterations();
        int int40 = multiDirectional37.getMaxEvaluations();
        int int41 = multiDirectional37.getMaxEvaluations();
        multiDirectional37.setMaxIterations((-1));
        int int44 = multiDirectional37.getIterations();
        multiDirectional37.setMaxIterations((int) '#');
        multiDirectional37.setMaxEvaluations(0);
        multiDirectional37.setMaxIterations((int) (byte) 0);
        multiDirectional37.setMaxEvaluations((int) (byte) 0);
        int int53 = multiDirectional37.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = multiDirectional37.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker54);
        java.lang.Class<?> wildcardClass56 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker54);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxIterations();
        double[] doubleArray20 = new double[] {};
        multiDirectional18.setStartConfiguration(doubleArray20);
        multiDirectional0.setStartConfiguration(doubleArray20);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getIterations();
        int int31 = multiDirectional23.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional23.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        int int35 = multiDirectional33.getIterations();
        int int36 = multiDirectional33.getMaxEvaluations();
        int int37 = multiDirectional33.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxIterations();
        double[] doubleArray40 = new double[] {};
        multiDirectional38.setStartConfiguration(doubleArray40);
        multiDirectional33.setStartConfiguration(doubleArray40);
        multiDirectional23.setStartConfiguration(doubleArray40);
        multiDirectional0.setStartConfiguration(doubleArray40);
        int int45 = multiDirectional0.getMaxEvaluations();
        int int46 = multiDirectional0.getIterations();
        int int47 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker48);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((-1));
        int int11 = multiDirectional4.getIterations();
        multiDirectional4.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker14);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        multiDirectional4.setStartConfiguration(doubleArray24);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        double[] doubleArray34 = new double[] {};
        multiDirectional32.setStartConfiguration(doubleArray34);
        multiDirectional27.setStartConfiguration(doubleArray34);
        multiDirectional4.setStartConfiguration(doubleArray34);
        multiDirectional2.setStartConfiguration(doubleArray34);
        int int39 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction40 = null;
        org.apache.commons.math.optimization.GoalType goalType41 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxIterations();
        double[] doubleArray50 = new double[] {};
        multiDirectional48.setStartConfiguration(doubleArray50);
        int int52 = multiDirectional48.getMaxEvaluations();
        int int53 = multiDirectional48.getIterations();
        int int54 = multiDirectional48.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = multiDirectional48.getConvergenceChecker();
        multiDirectional47.setConvergenceChecker(realConvergenceChecker55);
        double[] doubleArray57 = new double[] {};
        double[][] doubleArray58 = new double[][] { doubleArray57 };
        multiDirectional47.setStartConfiguration(doubleArray58);
        multiDirectional44.setStartConfiguration(doubleArray58);
        double[] doubleArray65 = new double[] { 100L, (-1), 1.0f, 10 };
        multiDirectional44.setStartConfiguration(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair67 = multiDirectional2.optimize(multivariateRealFunction40, goalType41, doubleArray65);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, -1.0, 1.0, 10.0]");
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 0, (double) 35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxEvaluations(0);
        int int7 = multiDirectional3.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int11 = multiDirectional10.getEvaluations();
        int int12 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional10.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker15);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker15);
        int int18 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) (short) 10);
        int int3 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations((-1));
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxIterations();
        double[] doubleArray20 = new double[] {};
        multiDirectional18.setStartConfiguration(doubleArray20);
        multiDirectional0.setStartConfiguration(doubleArray20);
        multiDirectional0.setMaxEvaluations((int) (byte) 1);
        int int25 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        multiDirectional6.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional6.setConvergenceChecker(realConvergenceChecker10);
        double[] doubleArray14 = new double[] { 1.0d, 2147483647 };
        multiDirectional6.setStartConfiguration(doubleArray14);
        int int16 = multiDirectional6.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional6.getConvergenceChecker();
        int int18 = multiDirectional6.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional6.getConvergenceChecker();
        int int20 = multiDirectional6.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '4', (double) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional24.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxIterations();
        double[] doubleArray32 = new double[] {};
        multiDirectional30.setStartConfiguration(doubleArray32);
        int int34 = multiDirectional30.getMaxEvaluations();
        int int35 = multiDirectional30.getMaxIterations();
        int int36 = multiDirectional30.getMaxIterations();
        multiDirectional30.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        int int41 = multiDirectional39.getIterations();
        int int42 = multiDirectional39.getMaxEvaluations();
        int int43 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxIterations((-1));
        int int46 = multiDirectional39.getMaxIterations();
        int int47 = multiDirectional39.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = null;
        multiDirectional48.setConvergenceChecker(realConvergenceChecker50);
        multiDirectional48.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = multiDirectional56.getConvergenceChecker();
        multiDirectional48.setConvergenceChecker(realConvergenceChecker57);
        multiDirectional39.setConvergenceChecker(realConvergenceChecker57);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional62 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int64 = multiDirectional63.getMaxIterations();
        double[] doubleArray65 = new double[] {};
        multiDirectional63.setStartConfiguration(doubleArray65);
        int int67 = multiDirectional63.getMaxEvaluations();
        int int68 = multiDirectional63.getIterations();
        int int69 = multiDirectional63.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker70 = multiDirectional63.getConvergenceChecker();
        multiDirectional62.setConvergenceChecker(realConvergenceChecker70);
        double[] doubleArray72 = new double[] {};
        double[][] doubleArray73 = new double[][] { doubleArray72 };
        multiDirectional62.setStartConfiguration(doubleArray73);
        multiDirectional39.setStartConfiguration(doubleArray73);
        multiDirectional30.setStartConfiguration(doubleArray73);
        multiDirectional24.setStartConfiguration(doubleArray73);
        multiDirectional23.setStartConfiguration(doubleArray73);
        multiDirectional6.setStartConfiguration(doubleArray73);
        multiDirectional2.setStartConfiguration(doubleArray73);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker57);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        int int5 = multiDirectional2.getEvaluations();
        int int6 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations((int) (byte) -1);
        int int12 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations(2147483647);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = null;
        multiDirectional7.setConvergenceChecker(realConvergenceChecker11);
        double[] doubleArray15 = new double[] { 1.0d, 2147483647 };
        multiDirectional7.setStartConfiguration(doubleArray15);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional7.getConvergenceChecker();
        multiDirectional7.setMaxEvaluations((int) (byte) 100);
        int int20 = multiDirectional7.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = null;
        multiDirectional21.setConvergenceChecker(realConvergenceChecker25);
        double[] doubleArray29 = new double[] { 1.0d, 2147483647 };
        multiDirectional21.setStartConfiguration(doubleArray29);
        multiDirectional7.setStartConfiguration(doubleArray29);
        multiDirectional6.setStartConfiguration(doubleArray29);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = null;
        multiDirectional33.setConvergenceChecker(realConvergenceChecker35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxEvaluations();
        multiDirectional37.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = null;
        multiDirectional37.setConvergenceChecker(realConvergenceChecker41);
        double[] doubleArray45 = new double[] { 1.0d, 2147483647 };
        multiDirectional37.setStartConfiguration(doubleArray45);
        int int47 = multiDirectional37.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxIterations();
        double[] doubleArray50 = new double[] {};
        multiDirectional48.setStartConfiguration(doubleArray50);
        multiDirectional37.setStartConfiguration(doubleArray50);
        multiDirectional33.setStartConfiguration(doubleArray50);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int55 = multiDirectional54.getMaxEvaluations();
        int int56 = multiDirectional54.getIterations();
        int int57 = multiDirectional54.getMaxEvaluations();
        int int58 = multiDirectional54.getMaxEvaluations();
        multiDirectional54.setMaxIterations((-1));
        int int61 = multiDirectional54.getMaxIterations();
        multiDirectional54.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker67 = multiDirectional66.getConvergenceChecker();
        multiDirectional54.setConvergenceChecker(realConvergenceChecker67);
        multiDirectional33.setConvergenceChecker(realConvergenceChecker67);
        multiDirectional6.setConvergenceChecker(realConvergenceChecker67);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker67);
        int int72 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker67);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) (-1));
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        int int4 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional7.setMaxEvaluations((int) (byte) 1);
        multiDirectional7.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker16);
        double[] doubleArray20 = new double[] { 1.0d, 2147483647 };
        multiDirectional12.setStartConfiguration(doubleArray20);
        multiDirectional12.setMaxIterations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int27 = multiDirectional26.getEvaluations();
        int int28 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        int int33 = multiDirectional31.getIterations();
        int int34 = multiDirectional31.getMaxEvaluations();
        int int35 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxIterations((-1));
        int int38 = multiDirectional31.getMaxIterations();
        int int39 = multiDirectional31.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = null;
        multiDirectional40.setConvergenceChecker(realConvergenceChecker42);
        multiDirectional40.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = multiDirectional48.getConvergenceChecker();
        multiDirectional40.setConvergenceChecker(realConvergenceChecker49);
        multiDirectional31.setConvergenceChecker(realConvergenceChecker49);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxIterations();
        double[] doubleArray57 = new double[] {};
        multiDirectional55.setStartConfiguration(doubleArray57);
        int int59 = multiDirectional55.getMaxEvaluations();
        int int60 = multiDirectional55.getIterations();
        int int61 = multiDirectional55.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = multiDirectional55.getConvergenceChecker();
        multiDirectional54.setConvergenceChecker(realConvergenceChecker62);
        double[] doubleArray64 = new double[] {};
        double[][] doubleArray65 = new double[][] { doubleArray64 };
        multiDirectional54.setStartConfiguration(doubleArray65);
        multiDirectional31.setStartConfiguration(doubleArray65);
        multiDirectional26.setStartConfiguration(doubleArray65);
        multiDirectional12.setStartConfiguration(doubleArray65);
        multiDirectional7.setStartConfiguration(doubleArray65);
        multiDirectional2.setStartConfiguration(doubleArray65);
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker49);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        int int12 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional13.setConvergenceChecker(realConvergenceChecker17);
        double[] doubleArray21 = new double[] { 1.0d, 2147483647 };
        multiDirectional13.setStartConfiguration(doubleArray21);
        int int23 = multiDirectional13.getMaxIterations();
        int int24 = multiDirectional13.getMaxIterations();
        multiDirectional13.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional13.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        int int32 = multiDirectional28.getMaxEvaluations();
        int int33 = multiDirectional28.getIterations();
        int int34 = multiDirectional28.getMaxEvaluations();
        int int35 = multiDirectional28.getMaxEvaluations();
        multiDirectional28.setMaxEvaluations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxEvaluations();
        multiDirectional38.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = null;
        multiDirectional38.setConvergenceChecker(realConvergenceChecker42);
        double[] doubleArray45 = new double[] { 100.0d };
        multiDirectional38.setStartConfiguration(doubleArray45);
        multiDirectional28.setStartConfiguration(doubleArray45);
        multiDirectional13.setStartConfiguration(doubleArray45);
        multiDirectional0.setStartConfiguration(doubleArray45);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations(10);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxIterations((int) (byte) 10);
        int int12 = multiDirectional0.getEvaluations();
        java.lang.Class<?> wildcardClass13 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations((int) (byte) 1);
        multiDirectional0.setMaxIterations((int) (short) 1);
        int int12 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertNotNull(realConvergenceChecker7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional16.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker17);
        int int19 = multiDirectional0.getMaxEvaluations();
        int int20 = multiDirectional0.getIterations();
        multiDirectional0.setMaxEvaluations(35);
        double[] doubleArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiDirectional0.setStartConfiguration(doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        int int8 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = null;
        multiDirectional9.setConvergenceChecker(realConvergenceChecker11);
        multiDirectional9.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker18);
        int int21 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations(1);
        java.lang.Class<?> wildcardClass24 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(0);
        int int4 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int8 = multiDirectional7.getEvaluations();
        int int9 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = multiDirectional7.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker18);
        double[] doubleArray21 = new double[] { 100.0d };
        multiDirectional14.setStartConfiguration(doubleArray21);
        int int23 = multiDirectional14.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        int int28 = multiDirectional26.getIterations();
        int int29 = multiDirectional26.getMaxEvaluations();
        int int30 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxIterations((-1));
        int int33 = multiDirectional26.getMaxIterations();
        multiDirectional26.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional38.getConvergenceChecker();
        multiDirectional26.setConvergenceChecker(realConvergenceChecker39);
        multiDirectional24.setConvergenceChecker(realConvergenceChecker39);
        multiDirectional14.setConvergenceChecker(realConvergenceChecker39);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxEvaluations();
        int int45 = multiDirectional43.getIterations();
        int int46 = multiDirectional43.getMaxEvaluations();
        int int47 = multiDirectional43.getMaxEvaluations();
        multiDirectional43.setMaxIterations((-1));
        int int50 = multiDirectional43.getIterations();
        multiDirectional43.setMaxIterations((int) '#');
        multiDirectional43.setMaxEvaluations(0);
        multiDirectional43.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = multiDirectional59.getConvergenceChecker();
        multiDirectional43.setConvergenceChecker(realConvergenceChecker60);
        multiDirectional14.setConvergenceChecker(realConvergenceChecker60);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker60);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker60);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(100);
        multiDirectional0.setMaxIterations((int) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) 'a');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = null;
        multiDirectional19.setConvergenceChecker(realConvergenceChecker23);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker29);
        double[] doubleArray33 = new double[] { 1.0d, 2147483647 };
        multiDirectional25.setStartConfiguration(doubleArray33);
        multiDirectional19.setStartConfiguration(doubleArray33);
        multiDirectional18.setStartConfiguration(doubleArray33);
        multiDirectional0.setStartConfiguration(doubleArray33);
        int int38 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        int int42 = multiDirectional40.getIterations();
        int int43 = multiDirectional40.getMaxEvaluations();
        int int44 = multiDirectional40.getMaxEvaluations();
        multiDirectional40.setMaxIterations((-1));
        int int47 = multiDirectional40.getIterations();
        multiDirectional40.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = null;
        multiDirectional40.setConvergenceChecker(realConvergenceChecker50);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxEvaluations();
        multiDirectional52.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = null;
        multiDirectional52.setConvergenceChecker(realConvergenceChecker56);
        double[] doubleArray60 = new double[] { 1.0d, 2147483647 };
        multiDirectional52.setStartConfiguration(doubleArray60);
        multiDirectional40.setStartConfiguration(doubleArray60);
        multiDirectional0.setStartConfiguration(doubleArray60);
        multiDirectional0.setMaxEvaluations((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        int int4 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations((int) '#');
        int int7 = multiDirectional0.getMaxEvaluations();
        int int8 = multiDirectional0.getMaxEvaluations();
        int int9 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        int int12 = multiDirectional10.getIterations();
        int int13 = multiDirectional10.getMaxEvaluations();
        int int14 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxIterations((-1));
        int int17 = multiDirectional10.getMaxIterations();
        multiDirectional10.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional22.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker23);
        int int25 = multiDirectional10.getMaxIterations();
        int int26 = multiDirectional10.getEvaluations();
        int int27 = multiDirectional10.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        multiDirectional10.setStartConfiguration(doubleArray30);
        multiDirectional0.setStartConfiguration(doubleArray30);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 35, (double) (byte) 10);
        multiDirectional2.setMaxEvaluations((int) (byte) 100);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations((int) (short) 0);
        java.lang.Class<?> wildcardClass12 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations(0);
        multiDirectional0.setMaxEvaluations(97);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = multiDirectional13.getConvergenceChecker();
        int int15 = multiDirectional13.getEvaluations();
        multiDirectional13.setMaxIterations((int) (short) 1);
        int int18 = multiDirectional13.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int22 = multiDirectional21.getEvaluations();
        int int23 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = null;
        multiDirectional26.setConvergenceChecker(realConvergenceChecker30);
        double[] doubleArray34 = new double[] { 1.0d, 2147483647 };
        multiDirectional26.setStartConfiguration(doubleArray34);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional26.getConvergenceChecker();
        multiDirectional26.setMaxEvaluations((int) (byte) 100);
        multiDirectional26.setMaxIterations(35);
        double[] doubleArray42 = new double[] { 100.0d };
        multiDirectional26.setStartConfiguration(doubleArray42);
        multiDirectional21.setStartConfiguration(doubleArray42);
        multiDirectional13.setStartConfiguration(doubleArray42);
        multiDirectional0.setStartConfiguration(doubleArray42);
        multiDirectional0.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxEvaluations();
        int int54 = multiDirectional52.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int58 = multiDirectional57.getMaxEvaluations();
        int int59 = multiDirectional57.getIterations();
        int int60 = multiDirectional57.getMaxEvaluations();
        int int61 = multiDirectional57.getMaxEvaluations();
        multiDirectional57.setMaxIterations((-1));
        int int64 = multiDirectional57.getMaxIterations();
        multiDirectional57.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker70 = multiDirectional69.getConvergenceChecker();
        multiDirectional57.setConvergenceChecker(realConvergenceChecker70);
        multiDirectional55.setConvergenceChecker(realConvergenceChecker70);
        multiDirectional52.setConvergenceChecker(realConvergenceChecker70);
        multiDirectional52.setMaxIterations((int) (byte) 100);
        int int76 = multiDirectional52.getEvaluations();
        int int77 = multiDirectional52.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional80 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional81 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int82 = multiDirectional81.getMaxIterations();
        double[] doubleArray83 = new double[] {};
        multiDirectional81.setStartConfiguration(doubleArray83);
        int int85 = multiDirectional81.getMaxEvaluations();
        int int86 = multiDirectional81.getIterations();
        int int87 = multiDirectional81.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker88 = multiDirectional81.getConvergenceChecker();
        multiDirectional80.setConvergenceChecker(realConvergenceChecker88);
        double[] doubleArray90 = new double[] {};
        double[][] doubleArray91 = new double[][] { doubleArray90 };
        multiDirectional80.setStartConfiguration(doubleArray91);
        multiDirectional52.setStartConfiguration(doubleArray91);
        multiDirectional51.setStartConfiguration(doubleArray91);
        multiDirectional0.setStartConfiguration(doubleArray91);
        int int96 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertNotNull(realConvergenceChecker14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker36);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker88);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 10 + "'", int96 == 10);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getMaxEvaluations();
        int int15 = multiDirectional0.getMaxEvaluations();
        int int16 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        int int20 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 0, (double) (short) -1);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) 0L);
        multiDirectional6.setMaxIterations((int) (short) 0);
        int int9 = multiDirectional6.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional6.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = multiDirectional6.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker11);
        int int13 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker10);
        org.junit.Assert.assertNotNull(realConvergenceChecker11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setMaxIterations((int) '#');
        int int31 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional0.getConvergenceChecker();
        int int33 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) (short) 10);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1, (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        int int9 = multiDirectional7.getIterations();
        int int10 = multiDirectional7.getMaxEvaluations();
        int int11 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxIterations((-1));
        int int14 = multiDirectional7.getMaxIterations();
        int int15 = multiDirectional7.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional16.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional16.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional6.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker25);
        int int30 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        int int8 = multiDirectional6.getIterations();
        int int9 = multiDirectional6.getMaxEvaluations();
        int int10 = multiDirectional6.getMaxEvaluations();
        multiDirectional6.setMaxIterations((-1));
        int int13 = multiDirectional6.getMaxIterations();
        multiDirectional6.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional18.getConvergenceChecker();
        multiDirectional6.setConvergenceChecker(realConvergenceChecker19);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker19);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional4.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional4.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker23);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxEvaluations();
        multiDirectional28.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = null;
        multiDirectional28.setConvergenceChecker(realConvergenceChecker32);
        double[] doubleArray36 = new double[] { 1.0d, 2147483647 };
        multiDirectional28.setStartConfiguration(doubleArray36);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional28.getConvergenceChecker();
        multiDirectional28.setMaxEvaluations((int) (byte) 100);
        multiDirectional28.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxEvaluations();
        multiDirectional43.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker47 = null;
        multiDirectional43.setConvergenceChecker(realConvergenceChecker47);
        double[] doubleArray51 = new double[] { 1.0d, 2147483647 };
        multiDirectional43.setStartConfiguration(doubleArray51);
        int int53 = multiDirectional43.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int55 = multiDirectional54.getMaxIterations();
        double[] doubleArray56 = new double[] {};
        multiDirectional54.setStartConfiguration(doubleArray56);
        multiDirectional43.setStartConfiguration(doubleArray56);
        multiDirectional28.setStartConfiguration(doubleArray56);
        multiDirectional27.setStartConfiguration(doubleArray56);
        multiDirectional0.setStartConfiguration(doubleArray56);
        int int62 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxIterations();
        double[] doubleArray13 = new double[] {};
        multiDirectional11.setStartConfiguration(doubleArray13);
        multiDirectional0.setStartConfiguration(doubleArray13);
        multiDirectional0.setMaxEvaluations((int) 'a');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = null;
        multiDirectional21.setConvergenceChecker(realConvergenceChecker23);
        multiDirectional21.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional21.getConvergenceChecker();
        int int28 = multiDirectional21.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = null;
        multiDirectional29.setConvergenceChecker(realConvergenceChecker31);
        multiDirectional29.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxIterations();
        double[] doubleArray37 = new double[] {};
        multiDirectional35.setStartConfiguration(doubleArray37);
        int int39 = multiDirectional35.getMaxEvaluations();
        int int40 = multiDirectional35.getMaxIterations();
        int int41 = multiDirectional35.getMaxIterations();
        multiDirectional35.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxEvaluations();
        int int46 = multiDirectional44.getIterations();
        int int47 = multiDirectional44.getMaxEvaluations();
        int int48 = multiDirectional44.getMaxEvaluations();
        multiDirectional44.setMaxIterations((-1));
        int int51 = multiDirectional44.getMaxIterations();
        int int52 = multiDirectional44.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = null;
        multiDirectional53.setConvergenceChecker(realConvergenceChecker55);
        multiDirectional53.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = multiDirectional61.getConvergenceChecker();
        multiDirectional53.setConvergenceChecker(realConvergenceChecker62);
        multiDirectional44.setConvergenceChecker(realConvergenceChecker62);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional68 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int69 = multiDirectional68.getMaxIterations();
        double[] doubleArray70 = new double[] {};
        multiDirectional68.setStartConfiguration(doubleArray70);
        int int72 = multiDirectional68.getMaxEvaluations();
        int int73 = multiDirectional68.getIterations();
        int int74 = multiDirectional68.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker75 = multiDirectional68.getConvergenceChecker();
        multiDirectional67.setConvergenceChecker(realConvergenceChecker75);
        double[] doubleArray77 = new double[] {};
        double[][] doubleArray78 = new double[][] { doubleArray77 };
        multiDirectional67.setStartConfiguration(doubleArray78);
        multiDirectional44.setStartConfiguration(doubleArray78);
        multiDirectional35.setStartConfiguration(doubleArray78);
        multiDirectional29.setStartConfiguration(doubleArray78);
        multiDirectional21.setStartConfiguration(doubleArray78);
        multiDirectional20.setStartConfiguration(doubleArray78);
        multiDirectional0.setStartConfiguration(doubleArray78);
        multiDirectional0.setMaxEvaluations(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker62);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 52, (double) 10);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getMaxEvaluations();
        int int18 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations((int) 'a');
        int int22 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxIterations();
        int int28 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        multiDirectional29.setMaxIterations((int) (byte) 0);
        int int33 = multiDirectional29.getMaxIterations();
        int int34 = multiDirectional29.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional29.getConvergenceChecker();
        multiDirectional23.setConvergenceChecker(realConvergenceChecker35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int40 = multiDirectional39.getEvaluations();
        int int41 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxEvaluations();
        multiDirectional44.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = null;
        multiDirectional44.setConvergenceChecker(realConvergenceChecker48);
        double[] doubleArray52 = new double[] { 1.0d, 2147483647 };
        multiDirectional44.setStartConfiguration(doubleArray52);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = multiDirectional44.getConvergenceChecker();
        multiDirectional44.setMaxEvaluations((int) (byte) 100);
        multiDirectional44.setMaxIterations(35);
        double[] doubleArray60 = new double[] { 100.0d };
        multiDirectional44.setStartConfiguration(doubleArray60);
        multiDirectional39.setStartConfiguration(doubleArray60);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional68 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional68.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional73 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional77 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int78 = multiDirectional77.getMaxIterations();
        double[] doubleArray79 = new double[] {};
        multiDirectional77.setStartConfiguration(doubleArray79);
        int int81 = multiDirectional77.getMaxEvaluations();
        int int82 = multiDirectional77.getIterations();
        int int83 = multiDirectional77.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker84 = multiDirectional77.getConvergenceChecker();
        multiDirectional76.setConvergenceChecker(realConvergenceChecker84);
        double[] doubleArray86 = new double[] {};
        double[][] doubleArray87 = new double[][] { doubleArray86 };
        multiDirectional76.setStartConfiguration(doubleArray87);
        multiDirectional73.setStartConfiguration(doubleArray87);
        multiDirectional68.setStartConfiguration(doubleArray87);
        multiDirectional65.setStartConfiguration(doubleArray87);
        multiDirectional39.setStartConfiguration(doubleArray87);
        multiDirectional23.setStartConfiguration(doubleArray87);
        multiDirectional0.setStartConfiguration(doubleArray87);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker54);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker84);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        multiDirectional0.setMaxEvaluations((int) (byte) 1);
        int int16 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxEvaluations();
        int int19 = multiDirectional17.getIterations();
        int int20 = multiDirectional17.getMaxEvaluations();
        int int21 = multiDirectional17.getMaxEvaluations();
        multiDirectional17.setMaxIterations((-1));
        int int24 = multiDirectional17.getIterations();
        multiDirectional17.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = null;
        multiDirectional17.setConvergenceChecker(realConvergenceChecker27);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        multiDirectional29.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = null;
        multiDirectional29.setConvergenceChecker(realConvergenceChecker33);
        double[] doubleArray37 = new double[] { 1.0d, 2147483647 };
        multiDirectional29.setStartConfiguration(doubleArray37);
        multiDirectional17.setStartConfiguration(doubleArray37);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        int int42 = multiDirectional40.getIterations();
        int int43 = multiDirectional40.getMaxEvaluations();
        int int44 = multiDirectional40.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxIterations();
        double[] doubleArray47 = new double[] {};
        multiDirectional45.setStartConfiguration(doubleArray47);
        multiDirectional40.setStartConfiguration(doubleArray47);
        multiDirectional17.setStartConfiguration(doubleArray47);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker51 = multiDirectional17.getConvergenceChecker();
        int int52 = multiDirectional17.getMaxIterations();
        int int53 = multiDirectional17.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int57 = multiDirectional56.getEvaluations();
        int int58 = multiDirectional56.getMaxEvaluations();
        multiDirectional56.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int62 = multiDirectional61.getMaxEvaluations();
        multiDirectional61.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker65 = null;
        multiDirectional61.setConvergenceChecker(realConvergenceChecker65);
        double[] doubleArray69 = new double[] { 1.0d, 2147483647 };
        multiDirectional61.setStartConfiguration(doubleArray69);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = multiDirectional61.getConvergenceChecker();
        multiDirectional61.setMaxEvaluations((int) (byte) 100);
        multiDirectional61.setMaxIterations(35);
        double[] doubleArray77 = new double[] { 100.0d };
        multiDirectional61.setStartConfiguration(doubleArray77);
        multiDirectional56.setStartConfiguration(doubleArray77);
        multiDirectional17.setStartConfiguration(doubleArray77);
        multiDirectional0.setStartConfiguration(doubleArray77);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNull(realConvergenceChecker51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker71);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0]");
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxIterations(35);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional18.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker19);
        int int21 = multiDirectional0.getMaxIterations();
        int int22 = multiDirectional0.getIterations();
        java.lang.Class<?> wildcardClass23 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = null;
        multiDirectional2.setConvergenceChecker(realConvergenceChecker3);
        multiDirectional2.setMaxEvaluations(0);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = multiDirectional0.getConvergenceChecker();
        int int5 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 100, (double) '4');
        double[] doubleArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiDirectional2.setStartConfiguration(doubleArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker12);
        double[] doubleArray16 = new double[] { 1.0d, 2147483647 };
        multiDirectional8.setStartConfiguration(doubleArray16);
        int int18 = multiDirectional8.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxIterations();
        double[] doubleArray21 = new double[] {};
        multiDirectional19.setStartConfiguration(doubleArray21);
        multiDirectional8.setStartConfiguration(doubleArray21);
        multiDirectional8.setMaxEvaluations((int) 'a');
        int int26 = multiDirectional8.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxIterations();
        double[] doubleArray29 = new double[] {};
        multiDirectional27.setStartConfiguration(doubleArray29);
        int int31 = multiDirectional27.getMaxEvaluations();
        int int32 = multiDirectional27.getMaxIterations();
        int int33 = multiDirectional27.getMaxIterations();
        multiDirectional27.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional27.getConvergenceChecker();
        multiDirectional27.setMaxEvaluations(0);
        multiDirectional27.setMaxEvaluations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxEvaluations();
        int int43 = multiDirectional41.getIterations();
        int int44 = multiDirectional41.getMaxEvaluations();
        multiDirectional41.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = multiDirectional49.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxEvaluations();
        int int53 = multiDirectional51.getIterations();
        int int54 = multiDirectional51.getMaxEvaluations();
        int int55 = multiDirectional51.getMaxEvaluations();
        multiDirectional51.setMaxIterations((-1));
        int int58 = multiDirectional51.getMaxIterations();
        int int59 = multiDirectional51.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int61 = multiDirectional60.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = null;
        multiDirectional60.setConvergenceChecker(realConvergenceChecker62);
        multiDirectional60.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional68 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker69 = multiDirectional68.getConvergenceChecker();
        multiDirectional60.setConvergenceChecker(realConvergenceChecker69);
        multiDirectional51.setConvergenceChecker(realConvergenceChecker69);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional74 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxIterations();
        double[] doubleArray77 = new double[] {};
        multiDirectional75.setStartConfiguration(doubleArray77);
        int int79 = multiDirectional75.getMaxEvaluations();
        int int80 = multiDirectional75.getIterations();
        int int81 = multiDirectional75.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker82 = multiDirectional75.getConvergenceChecker();
        multiDirectional74.setConvergenceChecker(realConvergenceChecker82);
        double[] doubleArray84 = new double[] {};
        double[][] doubleArray85 = new double[][] { doubleArray84 };
        multiDirectional74.setStartConfiguration(doubleArray85);
        multiDirectional51.setStartConfiguration(doubleArray85);
        multiDirectional49.setStartConfiguration(doubleArray85);
        multiDirectional41.setStartConfiguration(doubleArray85);
        multiDirectional27.setStartConfiguration(doubleArray85);
        multiDirectional8.setStartConfiguration(doubleArray85);
        multiDirectional0.setStartConfiguration(doubleArray85);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker69);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2147483647 + "'", int79 == 2147483647);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker82);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(1.0d, (double) 100L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker16);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker20);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        int int32 = multiDirectional22.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxIterations();
        double[] doubleArray35 = new double[] {};
        multiDirectional33.setStartConfiguration(doubleArray35);
        multiDirectional22.setStartConfiguration(doubleArray35);
        multiDirectional18.setStartConfiguration(doubleArray35);
        multiDirectional3.setStartConfiguration(doubleArray35);
        multiDirectional2.setStartConfiguration(doubleArray35);
        int int41 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) (short) 1);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker4);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker10);
        int int12 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        int int6 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations(0);
        int int12 = multiDirectional0.getMaxEvaluations();
        int int13 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        int int4 = multiDirectional0.getEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional9.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        int int13 = multiDirectional11.getIterations();
        int int14 = multiDirectional11.getMaxEvaluations();
        int int15 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxIterations((-1));
        int int18 = multiDirectional11.getMaxIterations();
        int int19 = multiDirectional11.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = null;
        multiDirectional20.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional20.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional28.getConvergenceChecker();
        multiDirectional20.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxIterations();
        double[] doubleArray37 = new double[] {};
        multiDirectional35.setStartConfiguration(doubleArray37);
        int int39 = multiDirectional35.getMaxEvaluations();
        int int40 = multiDirectional35.getIterations();
        int int41 = multiDirectional35.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = multiDirectional35.getConvergenceChecker();
        multiDirectional34.setConvergenceChecker(realConvergenceChecker42);
        double[] doubleArray44 = new double[] {};
        double[][] doubleArray45 = new double[][] { doubleArray44 };
        multiDirectional34.setStartConfiguration(doubleArray45);
        multiDirectional11.setStartConfiguration(doubleArray45);
        multiDirectional9.setStartConfiguration(doubleArray45);
        multiDirectional0.setStartConfiguration(doubleArray45);
        multiDirectional0.setMaxIterations((int) (short) 100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertNotNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(1.0d, (double) (byte) 1);
        int int3 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, 1.0d);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(100.0d, (double) 0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 32);
        double[] doubleArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiDirectional2.setStartConfiguration(doubleArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker16);
        double[] doubleArray20 = new double[] { 1.0d, 2147483647 };
        multiDirectional12.setStartConfiguration(doubleArray20);
        multiDirectional0.setStartConfiguration(doubleArray20);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxIterations();
        double[] doubleArray25 = new double[] {};
        multiDirectional23.setStartConfiguration(doubleArray25);
        int int27 = multiDirectional23.getMaxEvaluations();
        int int28 = multiDirectional23.getMaxIterations();
        int int29 = multiDirectional23.getMaxIterations();
        multiDirectional23.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional23.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = multiDirectional23.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker33);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertNotNull(realConvergenceChecker33);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 1, (double) 10L);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional2.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxIterations();
        double[] doubleArray13 = new double[] {};
        multiDirectional11.setStartConfiguration(doubleArray13);
        int int15 = multiDirectional11.getMaxEvaluations();
        int int16 = multiDirectional11.getIterations();
        int int17 = multiDirectional11.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional11.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker18);
        double[] doubleArray20 = new double[] {};
        double[][] doubleArray21 = new double[][] { doubleArray20 };
        multiDirectional10.setStartConfiguration(doubleArray21);
        multiDirectional7.setStartConfiguration(doubleArray21);
        multiDirectional2.setStartConfiguration(doubleArray21);
        multiDirectional2.setMaxIterations((int) (byte) 10);
        multiDirectional2.setMaxEvaluations((int) ' ');
        int int29 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxIterations();
        int int32 = multiDirectional30.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = multiDirectional30.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker33);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker33);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxIterations((-1));
        int int16 = multiDirectional9.getMaxIterations();
        multiDirectional9.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (short) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int34 = multiDirectional33.getMaxEvaluations();
        int int35 = multiDirectional33.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        multiDirectional36.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = null;
        multiDirectional36.setConvergenceChecker(realConvergenceChecker40);
        double[] doubleArray43 = new double[] { 100.0d };
        multiDirectional36.setStartConfiguration(doubleArray43);
        multiDirectional33.setStartConfiguration(doubleArray43);
        multiDirectional30.setStartConfiguration(doubleArray43);
        multiDirectional2.setStartConfiguration(doubleArray43);
        multiDirectional2.setMaxIterations(2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0]");
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        double[] doubleArray17 = new double[] {};
        multiDirectional15.setStartConfiguration(doubleArray17);
        multiDirectional4.setStartConfiguration(doubleArray17);
        multiDirectional0.setStartConfiguration(doubleArray17);
        int int21 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        int int26 = multiDirectional24.getIterations();
        int int27 = multiDirectional24.getMaxEvaluations();
        int int28 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxIterations((-1));
        int int31 = multiDirectional24.getMaxIterations();
        multiDirectional24.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional36.getConvergenceChecker();
        multiDirectional24.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional22.setConvergenceChecker(realConvergenceChecker37);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = multiDirectional22.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker40);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional44.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxEvaluations();
        multiDirectional47.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker51 = null;
        multiDirectional47.setConvergenceChecker(realConvergenceChecker51);
        double[] doubleArray55 = new double[] { 1.0d, 2147483647 };
        multiDirectional47.setStartConfiguration(doubleArray55);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = multiDirectional47.getConvergenceChecker();
        multiDirectional47.setMaxEvaluations((int) (byte) 100);
        multiDirectional47.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = multiDirectional47.getConvergenceChecker();
        int int63 = multiDirectional47.getEvaluations();
        int int64 = multiDirectional47.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int66 = multiDirectional65.getMaxEvaluations();
        int int67 = multiDirectional65.getIterations();
        int int68 = multiDirectional65.getMaxEvaluations();
        int int69 = multiDirectional65.getMaxEvaluations();
        multiDirectional65.setMaxIterations((-1));
        int int72 = multiDirectional65.getIterations();
        int int73 = multiDirectional65.getEvaluations();
        int int74 = multiDirectional65.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxEvaluations();
        multiDirectional75.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker79 = null;
        multiDirectional75.setConvergenceChecker(realConvergenceChecker79);
        double[] doubleArray83 = new double[] { 1.0d, 2147483647 };
        multiDirectional75.setStartConfiguration(doubleArray83);
        int int85 = multiDirectional75.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional86 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int87 = multiDirectional86.getMaxIterations();
        double[] doubleArray88 = new double[] {};
        multiDirectional86.setStartConfiguration(doubleArray88);
        multiDirectional75.setStartConfiguration(doubleArray88);
        multiDirectional65.setStartConfiguration(doubleArray88);
        multiDirectional47.setStartConfiguration(doubleArray88);
        multiDirectional44.setStartConfiguration(doubleArray88);
        int int94 = multiDirectional44.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker95 = multiDirectional44.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker95);
        java.lang.Class<?> wildcardClass97 = realConvergenceChecker95.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker37);
        org.junit.Assert.assertNotNull(realConvergenceChecker40);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker57);
        org.junit.Assert.assertNull(realConvergenceChecker62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2147483647 + "'", int66 == 2147483647);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(realConvergenceChecker95);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10.0f, (double) (-1.0f));
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 0, (double) (-1.0f));
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations((int) (short) 0);
        multiDirectional0.setMaxEvaluations((int) ' ');
        multiDirectional0.setMaxIterations((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100L);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        int int6 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = multiDirectional0.getConvergenceChecker();
        int int15 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
        org.junit.Assert.assertNotNull(realConvergenceChecker14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker16);
        int int18 = multiDirectional3.getMaxIterations();
        int int19 = multiDirectional3.getEvaluations();
        int int20 = multiDirectional3.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional3.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int25 = multiDirectional24.getEvaluations();
        int int26 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional24.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 10);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 0, (double) 35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker7);
        double[] doubleArray10 = new double[] { 100.0d };
        multiDirectional3.setStartConfiguration(doubleArray10);
        multiDirectional3.setMaxIterations(1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        double[] doubleArray16 = new double[] {};
        multiDirectional14.setStartConfiguration(doubleArray16);
        multiDirectional3.setStartConfiguration(doubleArray16);
        multiDirectional2.setStartConfiguration(doubleArray16);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxEvaluations();
        int int22 = multiDirectional20.getIterations();
        int int23 = multiDirectional20.getMaxEvaluations();
        int int24 = multiDirectional20.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional20.getConvergenceChecker();
        int int26 = multiDirectional20.getIterations();
        int int27 = multiDirectional20.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        int int32 = multiDirectional28.getMaxEvaluations();
        int int33 = multiDirectional28.getMaxIterations();
        int int34 = multiDirectional28.getMaxIterations();
        multiDirectional28.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional28.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional28.getConvergenceChecker();
        multiDirectional20.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker38);
        int int41 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker37);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxIterations(35);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional16.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional16.getConvergenceChecker();
        multiDirectional16.setMaxIterations(0);
        multiDirectional16.setMaxEvaluations(97);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = multiDirectional29.getConvergenceChecker();
        int int31 = multiDirectional29.getEvaluations();
        multiDirectional29.setMaxIterations((int) (short) 1);
        int int34 = multiDirectional29.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int38 = multiDirectional37.getEvaluations();
        int int39 = multiDirectional37.getMaxEvaluations();
        multiDirectional37.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional42.setConvergenceChecker(realConvergenceChecker46);
        double[] doubleArray50 = new double[] { 1.0d, 2147483647 };
        multiDirectional42.setStartConfiguration(doubleArray50);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = multiDirectional42.getConvergenceChecker();
        multiDirectional42.setMaxEvaluations((int) (byte) 100);
        multiDirectional42.setMaxIterations(35);
        double[] doubleArray58 = new double[] { 100.0d };
        multiDirectional42.setStartConfiguration(doubleArray58);
        multiDirectional37.setStartConfiguration(doubleArray58);
        multiDirectional29.setStartConfiguration(doubleArray58);
        multiDirectional16.setStartConfiguration(doubleArray58);
        multiDirectional0.setStartConfiguration(doubleArray58);
        multiDirectional0.setMaxEvaluations((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker22);
        org.junit.Assert.assertNotNull(realConvergenceChecker30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker52);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]");
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        int int12 = multiDirectional0.getIterations();
        int int13 = multiDirectional0.getMaxEvaluations();
        int int14 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        int int6 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        int int11 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations((int) (byte) 100);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction17 = null;
        org.apache.commons.math.optimization.GoalType goalType18 = null;
        double[] doubleArray19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair20 = multiDirectional0.optimize(multivariateRealFunction17, goalType18, doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
        org.junit.Assert.assertNotNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker14);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 10, (double) (byte) 1);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxIterations((int) '#');
        int int8 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = null;
        multiDirectional11.setConvergenceChecker(realConvergenceChecker15);
        double[] doubleArray18 = new double[] { 100.0d };
        multiDirectional11.setStartConfiguration(doubleArray18);
        int int20 = multiDirectional11.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getMaxIterations();
        multiDirectional23.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional35.getConvergenceChecker();
        multiDirectional23.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional21.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker36);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        int int42 = multiDirectional40.getIterations();
        int int43 = multiDirectional40.getMaxEvaluations();
        int int44 = multiDirectional40.getMaxEvaluations();
        multiDirectional40.setMaxIterations((-1));
        int int47 = multiDirectional40.getIterations();
        multiDirectional40.setMaxIterations((int) '#');
        multiDirectional40.setMaxEvaluations(0);
        multiDirectional40.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = multiDirectional56.getConvergenceChecker();
        multiDirectional40.setConvergenceChecker(realConvergenceChecker57);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker57);
        int int60 = multiDirectional11.getMaxIterations();
        int int61 = multiDirectional11.getMaxEvaluations();
        int int62 = multiDirectional11.getEvaluations();
        int int63 = multiDirectional11.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), 10.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int71 = multiDirectional70.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional72 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int73 = multiDirectional72.getMaxEvaluations();
        int int74 = multiDirectional72.getIterations();
        int int75 = multiDirectional72.getMaxEvaluations();
        int int76 = multiDirectional72.getMaxEvaluations();
        multiDirectional72.setMaxIterations((-1));
        int int79 = multiDirectional72.getMaxIterations();
        multiDirectional72.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional84 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker85 = multiDirectional84.getConvergenceChecker();
        multiDirectional72.setConvergenceChecker(realConvergenceChecker85);
        multiDirectional70.setConvergenceChecker(realConvergenceChecker85);
        multiDirectional69.setConvergenceChecker(realConvergenceChecker85);
        multiDirectional66.setConvergenceChecker(realConvergenceChecker85);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker85);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker85);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker85);
    }
}


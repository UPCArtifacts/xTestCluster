import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        int int4 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) (byte) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker7);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1L, (double) (byte) 1);
        int int12 = multiDirectional11.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getMaxIterations();
        multiDirectional13.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional25.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker26);
        int int28 = multiDirectional13.getMaxIterations();
        int int29 = multiDirectional13.getEvaluations();
        int int30 = multiDirectional13.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxIterations();
        double[] doubleArray33 = new double[] {};
        multiDirectional31.setStartConfiguration(doubleArray33);
        multiDirectional13.setStartConfiguration(doubleArray33);
        multiDirectional11.setStartConfiguration(doubleArray33);
        int int37 = multiDirectional11.getMaxEvaluations();
        int int38 = multiDirectional11.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional11.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker39);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        multiDirectional2.setMaxEvaluations(2147483647);
        multiDirectional2.setMaxEvaluations((int) '#');
        int int7 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100L, 0.0d);
        int int3 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker10);
        int int12 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = null;
        multiDirectional13.setConvergenceChecker(realConvergenceChecker15);
        multiDirectional13.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional13.getConvergenceChecker();
        int int20 = multiDirectional13.getMaxIterations();
        int int21 = multiDirectional13.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        int int24 = multiDirectional22.getIterations();
        int int25 = multiDirectional22.getMaxEvaluations();
        int int26 = multiDirectional22.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxIterations();
        double[] doubleArray29 = new double[] {};
        multiDirectional27.setStartConfiguration(doubleArray29);
        multiDirectional22.setStartConfiguration(doubleArray29);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        double[] doubleArray34 = new double[] {};
        multiDirectional32.setStartConfiguration(doubleArray34);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxEvaluations();
        int int40 = multiDirectional38.getIterations();
        int int41 = multiDirectional38.getMaxEvaluations();
        int int42 = multiDirectional38.getMaxEvaluations();
        multiDirectional38.setMaxIterations((-1));
        int int45 = multiDirectional38.getMaxIterations();
        multiDirectional38.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker51 = multiDirectional50.getConvergenceChecker();
        multiDirectional38.setConvergenceChecker(realConvergenceChecker51);
        multiDirectional36.setConvergenceChecker(realConvergenceChecker51);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = multiDirectional36.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = multiDirectional36.getConvergenceChecker();
        multiDirectional32.setConvergenceChecker(realConvergenceChecker55);
        multiDirectional22.setConvergenceChecker(realConvergenceChecker55);
        multiDirectional13.setConvergenceChecker(realConvergenceChecker55);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxEvaluations();
        multiDirectional59.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker63 = null;
        multiDirectional59.setConvergenceChecker(realConvergenceChecker63);
        double[] doubleArray67 = new double[] { 1.0d, 2147483647 };
        multiDirectional59.setStartConfiguration(doubleArray67);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker69 = multiDirectional59.getConvergenceChecker();
        multiDirectional59.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional74 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker75 = multiDirectional74.getConvergenceChecker();
        multiDirectional59.setConvergenceChecker(realConvergenceChecker75);
        multiDirectional13.setConvergenceChecker(realConvergenceChecker75);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker75);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker79 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker51);
        org.junit.Assert.assertNotNull(realConvergenceChecker54);
        org.junit.Assert.assertNotNull(realConvergenceChecker55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker69);
        org.junit.Assert.assertNotNull(realConvergenceChecker75);
        org.junit.Assert.assertNotNull(realConvergenceChecker79);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 52, (double) 100L);
        multiDirectional2.setMaxIterations((int) 'a');
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxEvaluations((int) 'a');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((-1));
        int int11 = multiDirectional4.getIterations();
        multiDirectional4.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker14);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        multiDirectional4.setStartConfiguration(doubleArray24);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        double[] doubleArray34 = new double[] {};
        multiDirectional32.setStartConfiguration(doubleArray34);
        multiDirectional27.setStartConfiguration(doubleArray34);
        multiDirectional4.setStartConfiguration(doubleArray34);
        multiDirectional2.setStartConfiguration(doubleArray34);
        multiDirectional2.setMaxEvaluations(97);
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int22 = multiDirectional21.getEvaluations();
        int int23 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional21.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker26);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        int int33 = multiDirectional31.getIterations();
        int int34 = multiDirectional31.getMaxEvaluations();
        int int35 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxIterations((-1));
        int int38 = multiDirectional31.getIterations();
        multiDirectional31.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = null;
        multiDirectional31.setConvergenceChecker(realConvergenceChecker41);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxEvaluations();
        multiDirectional43.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker47 = null;
        multiDirectional43.setConvergenceChecker(realConvergenceChecker47);
        double[] doubleArray51 = new double[] { 1.0d, 2147483647 };
        multiDirectional43.setStartConfiguration(doubleArray51);
        multiDirectional31.setStartConfiguration(doubleArray51);
        multiDirectional30.setStartConfiguration(doubleArray51);
        multiDirectional0.setStartConfiguration(doubleArray51);
        int int56 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxIterations(35);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional18.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker19);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        int int26 = multiDirectional24.getIterations();
        int int27 = multiDirectional24.getMaxEvaluations();
        int int28 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxIterations((-1));
        int int31 = multiDirectional24.getIterations();
        int int32 = multiDirectional24.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = multiDirectional24.getConvergenceChecker();
        multiDirectional23.setConvergenceChecker(realConvergenceChecker33);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker33);
        int int36 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getIterations();
        int int20 = multiDirectional12.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker21);
        multiDirectional12.setMaxIterations((int) (byte) -1);
        multiDirectional12.setMaxEvaluations(100);
        int int27 = multiDirectional12.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int31 = multiDirectional30.getEvaluations();
        int int32 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxEvaluations();
        int int37 = multiDirectional35.getIterations();
        int int38 = multiDirectional35.getMaxEvaluations();
        int int39 = multiDirectional35.getMaxEvaluations();
        multiDirectional35.setMaxIterations((-1));
        int int42 = multiDirectional35.getMaxIterations();
        int int43 = multiDirectional35.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional44.setConvergenceChecker(realConvergenceChecker46);
        multiDirectional44.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = multiDirectional52.getConvergenceChecker();
        multiDirectional44.setConvergenceChecker(realConvergenceChecker53);
        multiDirectional35.setConvergenceChecker(realConvergenceChecker53);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxIterations();
        double[] doubleArray61 = new double[] {};
        multiDirectional59.setStartConfiguration(doubleArray61);
        int int63 = multiDirectional59.getMaxEvaluations();
        int int64 = multiDirectional59.getIterations();
        int int65 = multiDirectional59.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker66 = multiDirectional59.getConvergenceChecker();
        multiDirectional58.setConvergenceChecker(realConvergenceChecker66);
        double[] doubleArray68 = new double[] {};
        double[][] doubleArray69 = new double[][] { doubleArray68 };
        multiDirectional58.setStartConfiguration(doubleArray69);
        multiDirectional35.setStartConfiguration(doubleArray69);
        multiDirectional30.setStartConfiguration(doubleArray69);
        multiDirectional12.setStartConfiguration(doubleArray69);
        multiDirectional0.setStartConfiguration(doubleArray69);
        int int75 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker53);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        int int21 = multiDirectional19.getIterations();
        int int22 = multiDirectional19.getMaxEvaluations();
        int int23 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxIterations((-1));
        int int26 = multiDirectional19.getMaxIterations();
        multiDirectional19.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional31.getConvergenceChecker();
        multiDirectional19.setConvergenceChecker(realConvergenceChecker32);
        int int34 = multiDirectional19.getMaxIterations();
        int int35 = multiDirectional19.getEvaluations();
        int int36 = multiDirectional19.getMaxEvaluations();
        int int37 = multiDirectional19.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxEvaluations();
        multiDirectional38.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = null;
        multiDirectional38.setConvergenceChecker(realConvergenceChecker42);
        double[] doubleArray45 = new double[] { 100.0d };
        multiDirectional38.setStartConfiguration(doubleArray45);
        int int47 = multiDirectional38.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxEvaluations();
        int int52 = multiDirectional50.getIterations();
        int int53 = multiDirectional50.getMaxEvaluations();
        int int54 = multiDirectional50.getMaxEvaluations();
        multiDirectional50.setMaxIterations((-1));
        int int57 = multiDirectional50.getMaxIterations();
        multiDirectional50.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional62 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker63 = multiDirectional62.getConvergenceChecker();
        multiDirectional50.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional48.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional38.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional19.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker63);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker69 = multiDirectional0.getConvergenceChecker();
        int int70 = multiDirectional0.getIterations();
        int int71 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker63);
        org.junit.Assert.assertNotNull(realConvergenceChecker69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(100.0d, (double) (byte) 100);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((-1));
        int int11 = multiDirectional4.getIterations();
        multiDirectional4.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker14);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        multiDirectional4.setStartConfiguration(doubleArray24);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        double[] doubleArray34 = new double[] {};
        multiDirectional32.setStartConfiguration(doubleArray34);
        multiDirectional27.setStartConfiguration(doubleArray34);
        multiDirectional4.setStartConfiguration(doubleArray34);
        multiDirectional2.setStartConfiguration(doubleArray34);
        int int39 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = multiDirectional2.getConvergenceChecker();
        int int41 = multiDirectional2.getMaxEvaluations();
        int int42 = multiDirectional2.getIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction43 = null;
        org.apache.commons.math.optimization.GoalType goalType44 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxIterations();
        double[] doubleArray47 = new double[] {};
        multiDirectional45.setStartConfiguration(doubleArray47);
        int int49 = multiDirectional45.getMaxEvaluations();
        int int50 = multiDirectional45.getIterations();
        int int51 = multiDirectional45.getMaxEvaluations();
        multiDirectional45.setMaxIterations((int) (short) 1);
        int int54 = multiDirectional45.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxEvaluations();
        int int57 = multiDirectional55.getIterations();
        int int58 = multiDirectional55.getMaxEvaluations();
        int int59 = multiDirectional55.getMaxEvaluations();
        multiDirectional55.setMaxIterations((-1));
        int int62 = multiDirectional55.getIterations();
        int int63 = multiDirectional55.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = multiDirectional55.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int66 = multiDirectional65.getMaxEvaluations();
        int int67 = multiDirectional65.getIterations();
        int int68 = multiDirectional65.getMaxEvaluations();
        int int69 = multiDirectional65.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int71 = multiDirectional70.getMaxIterations();
        double[] doubleArray72 = new double[] {};
        multiDirectional70.setStartConfiguration(doubleArray72);
        multiDirectional65.setStartConfiguration(doubleArray72);
        multiDirectional55.setStartConfiguration(doubleArray72);
        multiDirectional45.setStartConfiguration(doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair77 = multiDirectional2.optimize(multivariateRealFunction43, goalType44, doubleArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2147483647 + "'", int66 == 2147483647);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional0.getConvergenceChecker();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        int int20 = multiDirectional18.getIterations();
        int int21 = multiDirectional18.getMaxEvaluations();
        int int22 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxIterations((-1));
        int int25 = multiDirectional18.getIterations();
        int int26 = multiDirectional18.getEvaluations();
        int int27 = multiDirectional18.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxEvaluations();
        multiDirectional28.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = null;
        multiDirectional28.setConvergenceChecker(realConvergenceChecker32);
        double[] doubleArray36 = new double[] { 1.0d, 2147483647 };
        multiDirectional28.setStartConfiguration(doubleArray36);
        int int38 = multiDirectional28.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxIterations();
        double[] doubleArray41 = new double[] {};
        multiDirectional39.setStartConfiguration(doubleArray41);
        multiDirectional28.setStartConfiguration(doubleArray41);
        multiDirectional18.setStartConfiguration(doubleArray41);
        multiDirectional0.setStartConfiguration(doubleArray41);
        int int46 = multiDirectional0.getIterations();
        int int47 = multiDirectional0.getMaxEvaluations();
        int int48 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations((int) (byte) -1);
        int int51 = multiDirectional0.getIterations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker54);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        multiDirectional2.setMaxIterations((int) (byte) 1);
        multiDirectional2.setMaxIterations((int) (byte) 0);
        multiDirectional2.setMaxEvaluations((int) (byte) -1);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0L, (double) 0);
        multiDirectional2.setMaxEvaluations((-1));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxIterations();
        double[] doubleArray7 = new double[] {};
        multiDirectional5.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional5.getMaxEvaluations();
        int int10 = multiDirectional5.getIterations();
        double[] doubleArray16 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional5.setStartConfiguration(doubleArray16);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        int int20 = multiDirectional18.getIterations();
        int int21 = multiDirectional18.getMaxEvaluations();
        int int22 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxIterations((-1));
        int int25 = multiDirectional18.getIterations();
        int int26 = multiDirectional18.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional18.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxEvaluations();
        int int30 = multiDirectional28.getIterations();
        int int31 = multiDirectional28.getMaxEvaluations();
        int int32 = multiDirectional28.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxIterations();
        double[] doubleArray35 = new double[] {};
        multiDirectional33.setStartConfiguration(doubleArray35);
        multiDirectional28.setStartConfiguration(doubleArray35);
        multiDirectional18.setStartConfiguration(doubleArray35);
        multiDirectional5.setStartConfiguration(doubleArray35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        multiDirectional40.setMaxIterations((int) (byte) 0);
        int int44 = multiDirectional40.getMaxIterations();
        int int45 = multiDirectional40.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional40.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker46);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker46);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker46);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getIterations();
        multiDirectional3.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker13);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxEvaluations();
        multiDirectional15.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = null;
        multiDirectional15.setConvergenceChecker(realConvergenceChecker19);
        double[] doubleArray23 = new double[] { 1.0d, 2147483647 };
        multiDirectional15.setStartConfiguration(doubleArray23);
        multiDirectional3.setStartConfiguration(doubleArray23);
        multiDirectional2.setStartConfiguration(doubleArray23);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction27 = null;
        org.apache.commons.math.optimization.GoalType goalType28 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional31.setMaxEvaluations((int) (byte) 0);
        double[] doubleArray36 = new double[] { (-1.0f), ' ' };
        multiDirectional31.setStartConfiguration(doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair38 = multiDirectional2.optimize(multivariateRealFunction27, goalType28, doubleArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 32.0]");
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 0, (double) 0L);
        multiDirectional2.setMaxIterations(0);
        java.lang.Class<?> wildcardClass5 = multiDirectional2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations(1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker7);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int22 = multiDirectional21.getEvaluations();
        int int23 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional21.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction30 = null;
        org.apache.commons.math.optimization.GoalType goalType31 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int35 = multiDirectional34.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        multiDirectional36.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = null;
        multiDirectional36.setConvergenceChecker(realConvergenceChecker40);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional42.setConvergenceChecker(realConvergenceChecker46);
        double[] doubleArray50 = new double[] { 1.0d, 2147483647 };
        multiDirectional42.setStartConfiguration(doubleArray50);
        multiDirectional36.setStartConfiguration(doubleArray50);
        multiDirectional34.setStartConfiguration(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair54 = multiDirectional0.optimize(multivariateRealFunction30, goalType31, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxEvaluations(100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getIterations();
        double[] doubleArray11 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional0.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getIterations();
        int int21 = multiDirectional13.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional13.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        multiDirectional23.setStartConfiguration(doubleArray30);
        multiDirectional13.setStartConfiguration(doubleArray30);
        multiDirectional0.setStartConfiguration(doubleArray30);
        multiDirectional0.setMaxEvaluations((int) '#');
        int int37 = multiDirectional0.getMaxEvaluations();
        int int38 = multiDirectional0.getEvaluations();
        int int39 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        int int8 = multiDirectional6.getIterations();
        int int9 = multiDirectional6.getMaxEvaluations();
        int int10 = multiDirectional6.getMaxEvaluations();
        multiDirectional6.setMaxIterations((-1));
        int int13 = multiDirectional6.getMaxIterations();
        multiDirectional6.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional18.getConvergenceChecker();
        multiDirectional6.setConvergenceChecker(realConvergenceChecker19);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker19);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional4.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional4.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker23);
        int int25 = multiDirectional0.getEvaluations();
        int int26 = multiDirectional0.getIterations();
        int int27 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        int int9 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations(97);
        int int12 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker7);
        double[] doubleArray11 = new double[] { 1.0d, 2147483647 };
        multiDirectional3.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional3.getConvergenceChecker();
        multiDirectional3.setMaxEvaluations((int) (byte) 100);
        int int16 = multiDirectional3.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxEvaluations();
        multiDirectional17.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = null;
        multiDirectional17.setConvergenceChecker(realConvergenceChecker21);
        double[] doubleArray25 = new double[] { 1.0d, 2147483647 };
        multiDirectional17.setStartConfiguration(doubleArray25);
        multiDirectional3.setStartConfiguration(doubleArray25);
        multiDirectional2.setStartConfiguration(doubleArray25);
        int int29 = multiDirectional2.getMaxEvaluations();
        int int30 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, 100.0d);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        int int6 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        int int11 = multiDirectional0.getMaxEvaluations();
        int int12 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
        org.junit.Assert.assertNotNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations(100);
        int int9 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        int int8 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = null;
        multiDirectional9.setConvergenceChecker(realConvergenceChecker11);
        multiDirectional9.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker18);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxIterations();
        double[] doubleArray26 = new double[] {};
        multiDirectional24.setStartConfiguration(doubleArray26);
        int int28 = multiDirectional24.getMaxEvaluations();
        int int29 = multiDirectional24.getIterations();
        int int30 = multiDirectional24.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = multiDirectional24.getConvergenceChecker();
        multiDirectional23.setConvergenceChecker(realConvergenceChecker31);
        double[] doubleArray33 = new double[] {};
        double[][] doubleArray34 = new double[][] { doubleArray33 };
        multiDirectional23.setStartConfiguration(doubleArray34);
        multiDirectional0.setStartConfiguration(doubleArray34);
        java.lang.Class<?> wildcardClass37 = doubleArray34.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional2.setMaxEvaluations((int) (byte) 0);
        int int5 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        int int8 = multiDirectional6.getIterations();
        int int9 = multiDirectional6.getMaxEvaluations();
        int int10 = multiDirectional6.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = multiDirectional6.getConvergenceChecker();
        int int12 = multiDirectional6.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, 10.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        int int18 = multiDirectional16.getIterations();
        int int19 = multiDirectional16.getMaxEvaluations();
        int int20 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxIterations((-1));
        int int23 = multiDirectional16.getMaxIterations();
        multiDirectional16.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional28.getConvergenceChecker();
        multiDirectional16.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = null;
        multiDirectional31.setConvergenceChecker(realConvergenceChecker33);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxEvaluations();
        multiDirectional35.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = null;
        multiDirectional35.setConvergenceChecker(realConvergenceChecker39);
        double[] doubleArray43 = new double[] { 1.0d, 2147483647 };
        multiDirectional35.setStartConfiguration(doubleArray43);
        int int45 = multiDirectional35.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxIterations();
        double[] doubleArray48 = new double[] {};
        multiDirectional46.setStartConfiguration(doubleArray48);
        multiDirectional35.setStartConfiguration(doubleArray48);
        multiDirectional31.setStartConfiguration(doubleArray48);
        multiDirectional16.setStartConfiguration(doubleArray48);
        multiDirectional15.setStartConfiguration(doubleArray48);
        multiDirectional6.setStartConfiguration(doubleArray48);
        multiDirectional2.setStartConfiguration(doubleArray48);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker59 = multiDirectional58.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker59);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker59);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional2.setConvergenceChecker(realConvergenceChecker4);
        int int6 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10.0f, 100.0d);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxIterations((int) (byte) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker7);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (byte) 0);
        int int3 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction5 = null;
        org.apache.commons.math.optimization.GoalType goalType6 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = null;
        multiDirectional7.setConvergenceChecker(realConvergenceChecker11);
        double[] doubleArray15 = new double[] { 1.0d, 2147483647 };
        multiDirectional7.setStartConfiguration(doubleArray15);
        int int17 = multiDirectional7.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100L, (double) 35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxIterations();
        double[] doubleArray23 = new double[] {};
        multiDirectional21.setStartConfiguration(doubleArray23);
        int int25 = multiDirectional21.getMaxEvaluations();
        int int26 = multiDirectional21.getMaxIterations();
        int int27 = multiDirectional21.getMaxIterations();
        multiDirectional21.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = multiDirectional21.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = multiDirectional21.getConvergenceChecker();
        multiDirectional20.setConvergenceChecker(realConvergenceChecker31);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        multiDirectional36.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = null;
        multiDirectional36.setConvergenceChecker(realConvergenceChecker40);
        double[] doubleArray44 = new double[] { 1.0d, 2147483647 };
        multiDirectional36.setStartConfiguration(doubleArray44);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional36.getConvergenceChecker();
        multiDirectional36.setMaxEvaluations((int) (byte) 100);
        multiDirectional36.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxEvaluations();
        multiDirectional51.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = null;
        multiDirectional51.setConvergenceChecker(realConvergenceChecker55);
        double[] doubleArray59 = new double[] { 1.0d, 2147483647 };
        multiDirectional51.setStartConfiguration(doubleArray59);
        int int61 = multiDirectional51.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional62 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int63 = multiDirectional62.getMaxIterations();
        double[] doubleArray64 = new double[] {};
        multiDirectional62.setStartConfiguration(doubleArray64);
        multiDirectional51.setStartConfiguration(doubleArray64);
        multiDirectional36.setStartConfiguration(doubleArray64);
        multiDirectional35.setStartConfiguration(doubleArray64);
        int int69 = multiDirectional35.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional72 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional73 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int74 = multiDirectional73.getMaxEvaluations();
        multiDirectional73.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker77 = null;
        multiDirectional73.setConvergenceChecker(realConvergenceChecker77);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional79 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int80 = multiDirectional79.getMaxEvaluations();
        multiDirectional79.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker83 = null;
        multiDirectional79.setConvergenceChecker(realConvergenceChecker83);
        double[] doubleArray87 = new double[] { 1.0d, 2147483647 };
        multiDirectional79.setStartConfiguration(doubleArray87);
        multiDirectional73.setStartConfiguration(doubleArray87);
        multiDirectional72.setStartConfiguration(doubleArray87);
        multiDirectional35.setStartConfiguration(doubleArray87);
        multiDirectional20.setStartConfiguration(doubleArray87);
        multiDirectional7.setStartConfiguration(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair94 = multiDirectional2.optimize(multivariateRealFunction5, goalType6, doubleArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker30);
        org.junit.Assert.assertNotNull(realConvergenceChecker31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        int int6 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations(35);
        multiDirectional0.setMaxEvaluations((int) '#');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = null;
        multiDirectional7.setConvergenceChecker(realConvergenceChecker11);
        double[] doubleArray15 = new double[] { 1.0d, 2147483647 };
        multiDirectional7.setStartConfiguration(doubleArray15);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional7.getConvergenceChecker();
        multiDirectional7.setMaxEvaluations((int) (byte) 100);
        multiDirectional7.setMaxIterations(35);
        double[] doubleArray23 = new double[] { 100.0d };
        multiDirectional7.setStartConfiguration(doubleArray23);
        multiDirectional2.setStartConfiguration(doubleArray23);
        int int26 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional29.setMaxEvaluations((int) (byte) 1);
        multiDirectional29.setMaxIterations((int) '4');
        int int34 = multiDirectional29.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxEvaluations();
        int int37 = multiDirectional35.getIterations();
        int int38 = multiDirectional35.getMaxEvaluations();
        int int39 = multiDirectional35.getMaxEvaluations();
        multiDirectional35.setMaxIterations((-1));
        int int42 = multiDirectional35.getIterations();
        int int43 = multiDirectional35.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = null;
        multiDirectional35.setConvergenceChecker(realConvergenceChecker44);
        multiDirectional35.setMaxIterations((int) (byte) -1);
        multiDirectional35.setMaxEvaluations(100);
        int int50 = multiDirectional35.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int54 = multiDirectional53.getEvaluations();
        int int55 = multiDirectional53.getMaxEvaluations();
        multiDirectional53.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int59 = multiDirectional58.getMaxEvaluations();
        int int60 = multiDirectional58.getIterations();
        int int61 = multiDirectional58.getMaxEvaluations();
        int int62 = multiDirectional58.getMaxEvaluations();
        multiDirectional58.setMaxIterations((-1));
        int int65 = multiDirectional58.getMaxIterations();
        int int66 = multiDirectional58.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker69 = null;
        multiDirectional67.setConvergenceChecker(realConvergenceChecker69);
        multiDirectional67.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker76 = multiDirectional75.getConvergenceChecker();
        multiDirectional67.setConvergenceChecker(realConvergenceChecker76);
        multiDirectional58.setConvergenceChecker(realConvergenceChecker76);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional81 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional82 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int83 = multiDirectional82.getMaxIterations();
        double[] doubleArray84 = new double[] {};
        multiDirectional82.setStartConfiguration(doubleArray84);
        int int86 = multiDirectional82.getMaxEvaluations();
        int int87 = multiDirectional82.getIterations();
        int int88 = multiDirectional82.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker89 = multiDirectional82.getConvergenceChecker();
        multiDirectional81.setConvergenceChecker(realConvergenceChecker89);
        double[] doubleArray91 = new double[] {};
        double[][] doubleArray92 = new double[][] { doubleArray91 };
        multiDirectional81.setStartConfiguration(doubleArray92);
        multiDirectional58.setStartConfiguration(doubleArray92);
        multiDirectional53.setStartConfiguration(doubleArray92);
        multiDirectional35.setStartConfiguration(doubleArray92);
        multiDirectional29.setStartConfiguration(doubleArray92);
        multiDirectional2.setStartConfiguration(doubleArray92);
        int int99 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker17);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker76);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2147483647 + "'", int86 == 2147483647);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2147483647 + "'", int88 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker89);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100L, (double) 35);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction3 = null;
        org.apache.commons.math.optimization.GoalType goalType4 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker12);
        double[] doubleArray16 = new double[] { 1.0d, 2147483647 };
        multiDirectional8.setStartConfiguration(doubleArray16);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional8.getConvergenceChecker();
        multiDirectional8.setMaxEvaluations((int) (byte) 100);
        int int21 = multiDirectional8.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        multiDirectional8.setStartConfiguration(doubleArray30);
        multiDirectional7.setStartConfiguration(doubleArray30);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional36.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = null;
        multiDirectional39.setConvergenceChecker(realConvergenceChecker43);
        double[] doubleArray47 = new double[] { 1.0d, 2147483647 };
        multiDirectional39.setStartConfiguration(doubleArray47);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = multiDirectional39.getConvergenceChecker();
        multiDirectional39.setMaxEvaluations((int) (byte) 100);
        multiDirectional39.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = multiDirectional39.getConvergenceChecker();
        int int55 = multiDirectional39.getEvaluations();
        int int56 = multiDirectional39.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int58 = multiDirectional57.getMaxEvaluations();
        int int59 = multiDirectional57.getIterations();
        int int60 = multiDirectional57.getMaxEvaluations();
        int int61 = multiDirectional57.getMaxEvaluations();
        multiDirectional57.setMaxIterations((-1));
        int int64 = multiDirectional57.getIterations();
        int int65 = multiDirectional57.getEvaluations();
        int int66 = multiDirectional57.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxEvaluations();
        multiDirectional67.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = null;
        multiDirectional67.setConvergenceChecker(realConvergenceChecker71);
        double[] doubleArray75 = new double[] { 1.0d, 2147483647 };
        multiDirectional67.setStartConfiguration(doubleArray75);
        int int77 = multiDirectional67.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional78 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int79 = multiDirectional78.getMaxIterations();
        double[] doubleArray80 = new double[] {};
        multiDirectional78.setStartConfiguration(doubleArray80);
        multiDirectional67.setStartConfiguration(doubleArray80);
        multiDirectional57.setStartConfiguration(doubleArray80);
        multiDirectional39.setStartConfiguration(doubleArray80);
        multiDirectional36.setStartConfiguration(doubleArray80);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional88 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional88.setMaxEvaluations((int) (byte) 0);
        double[] doubleArray93 = new double[] { (-1.0f), ' ' };
        multiDirectional88.setStartConfiguration(doubleArray93);
        multiDirectional36.setStartConfiguration(doubleArray93);
        multiDirectional7.setStartConfiguration(doubleArray93);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair97 = multiDirectional2.optimize(multivariateRealFunction3, goalType4, doubleArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker49);
        org.junit.Assert.assertNull(realConvergenceChecker54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2147483647 + "'", int79 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[-1.0, 32.0]");
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) ' ');
        int int10 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        int int13 = multiDirectional11.getIterations();
        int int14 = multiDirectional11.getMaxEvaluations();
        int int15 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxIterations((-1));
        int int18 = multiDirectional11.getIterations();
        int int19 = multiDirectional11.getMaxIterations();
        multiDirectional11.setMaxEvaluations(100);
        multiDirectional11.setMaxIterations((int) (short) 10);
        int int24 = multiDirectional11.getMaxIterations();
        multiDirectional11.setMaxIterations(35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        multiDirectional27.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = null;
        multiDirectional27.setConvergenceChecker(realConvergenceChecker31);
        double[] doubleArray35 = new double[] { 1.0d, 2147483647 };
        multiDirectional27.setStartConfiguration(doubleArray35);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional27.getConvergenceChecker();
        multiDirectional27.setMaxEvaluations((int) (byte) 100);
        multiDirectional27.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional42.setConvergenceChecker(realConvergenceChecker46);
        double[] doubleArray50 = new double[] { 1.0d, 2147483647 };
        multiDirectional42.setStartConfiguration(doubleArray50);
        int int52 = multiDirectional42.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxIterations();
        double[] doubleArray55 = new double[] {};
        multiDirectional53.setStartConfiguration(doubleArray55);
        multiDirectional42.setStartConfiguration(doubleArray55);
        multiDirectional27.setStartConfiguration(doubleArray55);
        multiDirectional11.setStartConfiguration(doubleArray55);
        multiDirectional0.setStartConfiguration(doubleArray55);
        java.lang.Class<?> wildcardClass61 = doubleArray55.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional16.getConvergenceChecker();
        multiDirectional16.setMaxEvaluations((int) (byte) 100);
        multiDirectional16.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = multiDirectional16.getConvergenceChecker();
        int int32 = multiDirectional16.getEvaluations();
        int int33 = multiDirectional16.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int35 = multiDirectional34.getMaxEvaluations();
        int int36 = multiDirectional34.getIterations();
        int int37 = multiDirectional34.getMaxEvaluations();
        int int38 = multiDirectional34.getMaxEvaluations();
        multiDirectional34.setMaxIterations((-1));
        int int41 = multiDirectional34.getMaxIterations();
        int int42 = multiDirectional34.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = null;
        multiDirectional43.setConvergenceChecker(realConvergenceChecker45);
        multiDirectional43.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = multiDirectional51.getConvergenceChecker();
        multiDirectional43.setConvergenceChecker(realConvergenceChecker52);
        multiDirectional34.setConvergenceChecker(realConvergenceChecker52);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int59 = multiDirectional58.getMaxIterations();
        double[] doubleArray60 = new double[] {};
        multiDirectional58.setStartConfiguration(doubleArray60);
        int int62 = multiDirectional58.getMaxEvaluations();
        int int63 = multiDirectional58.getIterations();
        int int64 = multiDirectional58.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker65 = multiDirectional58.getConvergenceChecker();
        multiDirectional57.setConvergenceChecker(realConvergenceChecker65);
        double[] doubleArray67 = new double[] {};
        double[][] doubleArray68 = new double[][] { doubleArray67 };
        multiDirectional57.setStartConfiguration(doubleArray68);
        multiDirectional34.setStartConfiguration(doubleArray68);
        multiDirectional16.setStartConfiguration(doubleArray68);
        multiDirectional13.setStartConfiguration(doubleArray68);
        multiDirectional0.setStartConfiguration(doubleArray68);
        int int74 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker26);
        org.junit.Assert.assertNull(realConvergenceChecker31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxIterations((-1));
        int int16 = multiDirectional9.getMaxIterations();
        multiDirectional9.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional2.getConvergenceChecker();
        int int28 = multiDirectional2.getMaxEvaluations();
        int int29 = multiDirectional2.getIterations();
        int int30 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1, (double) 2147483647);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(100);
        multiDirectional0.setMaxIterations((int) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) 'a');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional21.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxIterations();
        double[] doubleArray32 = new double[] {};
        multiDirectional30.setStartConfiguration(doubleArray32);
        int int34 = multiDirectional30.getMaxEvaluations();
        int int35 = multiDirectional30.getIterations();
        int int36 = multiDirectional30.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional30.getConvergenceChecker();
        multiDirectional29.setConvergenceChecker(realConvergenceChecker37);
        double[] doubleArray39 = new double[] {};
        double[][] doubleArray40 = new double[][] { doubleArray39 };
        multiDirectional29.setStartConfiguration(doubleArray40);
        multiDirectional26.setStartConfiguration(doubleArray40);
        multiDirectional21.setStartConfiguration(doubleArray40);
        multiDirectional18.setStartConfiguration(doubleArray40);
        multiDirectional0.setStartConfiguration(doubleArray40);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker46);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        int int29 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        int int32 = multiDirectional30.getIterations();
        int int33 = multiDirectional30.getMaxEvaluations();
        int int34 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxIterations((-1));
        int int37 = multiDirectional30.getMaxIterations();
        int int38 = multiDirectional30.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = null;
        multiDirectional39.setConvergenceChecker(realConvergenceChecker41);
        multiDirectional39.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = multiDirectional47.getConvergenceChecker();
        multiDirectional39.setConvergenceChecker(realConvergenceChecker48);
        multiDirectional30.setConvergenceChecker(realConvergenceChecker48);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int55 = multiDirectional54.getMaxIterations();
        double[] doubleArray56 = new double[] {};
        multiDirectional54.setStartConfiguration(doubleArray56);
        int int58 = multiDirectional54.getMaxEvaluations();
        int int59 = multiDirectional54.getIterations();
        int int60 = multiDirectional54.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker61 = multiDirectional54.getConvergenceChecker();
        multiDirectional53.setConvergenceChecker(realConvergenceChecker61);
        double[] doubleArray63 = new double[] {};
        double[][] doubleArray64 = new double[][] { doubleArray63 };
        multiDirectional53.setStartConfiguration(doubleArray64);
        multiDirectional30.setStartConfiguration(doubleArray64);
        multiDirectional0.setStartConfiguration(doubleArray64);
        multiDirectional0.setMaxEvaluations(2147483647);
        int int70 = multiDirectional0.getIterations();
        double[][] doubleArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiDirectional0.setStartConfiguration(doubleArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker48);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (short) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker12);
        double[] doubleArray15 = new double[] { 100.0d };
        multiDirectional8.setStartConfiguration(doubleArray15);
        multiDirectional5.setStartConfiguration(doubleArray15);
        multiDirectional2.setStartConfiguration(doubleArray15);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = null;
        multiDirectional19.setConvergenceChecker(realConvergenceChecker23);
        double[] doubleArray27 = new double[] { 1.0d, 2147483647 };
        multiDirectional19.setStartConfiguration(doubleArray27);
        int int29 = multiDirectional19.getMaxIterations();
        int int30 = multiDirectional19.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = null;
        multiDirectional19.setConvergenceChecker(realConvergenceChecker31);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = multiDirectional19.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxEvaluations();
        multiDirectional37.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = null;
        multiDirectional37.setConvergenceChecker(realConvergenceChecker41);
        double[] doubleArray44 = new double[] { 100.0d };
        multiDirectional37.setStartConfiguration(doubleArray44);
        int int46 = multiDirectional37.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxEvaluations();
        int int51 = multiDirectional49.getIterations();
        int int52 = multiDirectional49.getMaxEvaluations();
        int int53 = multiDirectional49.getMaxEvaluations();
        multiDirectional49.setMaxIterations((-1));
        int int56 = multiDirectional49.getMaxIterations();
        multiDirectional49.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = multiDirectional61.getConvergenceChecker();
        multiDirectional49.setConvergenceChecker(realConvergenceChecker62);
        multiDirectional47.setConvergenceChecker(realConvergenceChecker62);
        multiDirectional37.setConvergenceChecker(realConvergenceChecker62);
        multiDirectional37.setMaxIterations(100);
        multiDirectional37.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional72 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional72.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional77 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional80 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional81 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int82 = multiDirectional81.getMaxIterations();
        double[] doubleArray83 = new double[] {};
        multiDirectional81.setStartConfiguration(doubleArray83);
        int int85 = multiDirectional81.getMaxEvaluations();
        int int86 = multiDirectional81.getIterations();
        int int87 = multiDirectional81.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker88 = multiDirectional81.getConvergenceChecker();
        multiDirectional80.setConvergenceChecker(realConvergenceChecker88);
        double[] doubleArray90 = new double[] {};
        double[][] doubleArray91 = new double[][] { doubleArray90 };
        multiDirectional80.setStartConfiguration(doubleArray91);
        multiDirectional77.setStartConfiguration(doubleArray91);
        multiDirectional72.setStartConfiguration(doubleArray91);
        multiDirectional37.setStartConfiguration(doubleArray91);
        multiDirectional36.setStartConfiguration(doubleArray91);
        multiDirectional19.setStartConfiguration(doubleArray91);
        multiDirectional2.setStartConfiguration(doubleArray91);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker62);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker88);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        multiDirectional0.setMaxIterations(0);
        int int6 = multiDirectional0.getIterations();
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(97);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        double[] doubleArray17 = new double[] {};
        multiDirectional15.setStartConfiguration(doubleArray17);
        multiDirectional4.setStartConfiguration(doubleArray17);
        multiDirectional0.setStartConfiguration(doubleArray17);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional0.getConvergenceChecker();
        int int22 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNull(realConvergenceChecker21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1), (double) 1L);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional4.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker9);
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        multiDirectional6.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional6.setConvergenceChecker(realConvergenceChecker10);
        double[] doubleArray14 = new double[] { 1.0d, 2147483647 };
        multiDirectional6.setStartConfiguration(doubleArray14);
        multiDirectional0.setStartConfiguration(doubleArray14);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional0.getConvergenceChecker();
        double[] doubleArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiDirectional0.setStartConfiguration(doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker17);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getIterations();
        int int6 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        int int10 = multiDirectional8.getIterations();
        int int11 = multiDirectional8.getMaxEvaluations();
        int int12 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxIterations((-1));
        int int15 = multiDirectional8.getIterations();
        int int16 = multiDirectional8.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxEvaluations();
        int int19 = multiDirectional17.getIterations();
        int int20 = multiDirectional17.getMaxEvaluations();
        int int21 = multiDirectional17.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxIterations();
        double[] doubleArray24 = new double[] {};
        multiDirectional22.setStartConfiguration(doubleArray24);
        multiDirectional17.setStartConfiguration(doubleArray24);
        multiDirectional8.setStartConfiguration(doubleArray24);
        multiDirectional0.setStartConfiguration(doubleArray24);
        java.lang.Class<?> wildcardClass29 = doubleArray24.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1L, (double) (byte) 1);
        int int3 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((-1));
        int int11 = multiDirectional4.getMaxIterations();
        multiDirectional4.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional16.getConvergenceChecker();
        multiDirectional4.setConvergenceChecker(realConvergenceChecker17);
        int int19 = multiDirectional4.getMaxIterations();
        int int20 = multiDirectional4.getEvaluations();
        int int21 = multiDirectional4.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxIterations();
        double[] doubleArray24 = new double[] {};
        multiDirectional22.setStartConfiguration(doubleArray24);
        multiDirectional4.setStartConfiguration(doubleArray24);
        multiDirectional2.setStartConfiguration(doubleArray24);
        int int28 = multiDirectional2.getEvaluations();
        int int29 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxIterations();
        double[] doubleArray20 = new double[] {};
        multiDirectional18.setStartConfiguration(doubleArray20);
        multiDirectional0.setStartConfiguration(doubleArray20);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getIterations();
        int int31 = multiDirectional23.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional23.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        int int35 = multiDirectional33.getIterations();
        int int36 = multiDirectional33.getMaxEvaluations();
        int int37 = multiDirectional33.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxIterations();
        double[] doubleArray40 = new double[] {};
        multiDirectional38.setStartConfiguration(doubleArray40);
        multiDirectional33.setStartConfiguration(doubleArray40);
        multiDirectional23.setStartConfiguration(doubleArray40);
        multiDirectional0.setStartConfiguration(doubleArray40);
        int int45 = multiDirectional0.getMaxEvaluations();
        int int46 = multiDirectional0.getIterations();
        int int47 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxEvaluations();
        int int52 = multiDirectional50.getIterations();
        int int53 = multiDirectional50.getMaxEvaluations();
        int int54 = multiDirectional50.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxIterations();
        double[] doubleArray57 = new double[] {};
        multiDirectional55.setStartConfiguration(doubleArray57);
        int int59 = multiDirectional55.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int61 = multiDirectional60.getMaxEvaluations();
        int int62 = multiDirectional60.getIterations();
        int int63 = multiDirectional60.getMaxEvaluations();
        int int64 = multiDirectional60.getMaxEvaluations();
        multiDirectional60.setMaxIterations((-1));
        int int67 = multiDirectional60.getIterations();
        multiDirectional60.setMaxIterations((int) '#');
        multiDirectional60.setMaxEvaluations(0);
        multiDirectional60.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker77 = multiDirectional76.getConvergenceChecker();
        multiDirectional60.setConvergenceChecker(realConvergenceChecker77);
        multiDirectional55.setConvergenceChecker(realConvergenceChecker77);
        multiDirectional50.setConvergenceChecker(realConvergenceChecker77);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker77);
        int int82 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker77);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getIterations();
        multiDirectional3.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker13);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxEvaluations();
        multiDirectional15.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = null;
        multiDirectional15.setConvergenceChecker(realConvergenceChecker19);
        double[] doubleArray23 = new double[] { 1.0d, 2147483647 };
        multiDirectional15.setStartConfiguration(doubleArray23);
        multiDirectional3.setStartConfiguration(doubleArray23);
        multiDirectional2.setStartConfiguration(doubleArray23);
        int int27 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int6 = multiDirectional0.getEvaluations();
        int int7 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations((int) 'a');
        double[][] doubleArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiDirectional0.setStartConfiguration(doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getIterations();
        int int5 = multiDirectional2.getMaxEvaluations();
        int int6 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxIterations((-1));
        int int9 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional14.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker15);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker15);
        multiDirectional0.setMaxIterations(100);
        int int20 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getIterations();
        int int6 = multiDirectional0.getIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations((int) ' ');
        multiDirectional0.setMaxEvaluations(32);
        int int12 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional0.getConvergenceChecker();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxEvaluations();
        multiDirectional20.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = null;
        multiDirectional20.setConvergenceChecker(realConvergenceChecker24);
        double[] doubleArray28 = new double[] { 1.0d, 2147483647 };
        multiDirectional20.setStartConfiguration(doubleArray28);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = multiDirectional20.getConvergenceChecker();
        multiDirectional20.setMaxEvaluations((int) (byte) 100);
        multiDirectional20.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional20.getConvergenceChecker();
        int int36 = multiDirectional20.getEvaluations();
        int int37 = multiDirectional20.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxEvaluations();
        int int40 = multiDirectional38.getIterations();
        int int41 = multiDirectional38.getMaxEvaluations();
        int int42 = multiDirectional38.getMaxEvaluations();
        multiDirectional38.setMaxIterations((-1));
        int int45 = multiDirectional38.getIterations();
        int int46 = multiDirectional38.getEvaluations();
        int int47 = multiDirectional38.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxEvaluations();
        multiDirectional48.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = null;
        multiDirectional48.setConvergenceChecker(realConvergenceChecker52);
        double[] doubleArray56 = new double[] { 1.0d, 2147483647 };
        multiDirectional48.setStartConfiguration(doubleArray56);
        int int58 = multiDirectional48.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxIterations();
        double[] doubleArray61 = new double[] {};
        multiDirectional59.setStartConfiguration(doubleArray61);
        multiDirectional48.setStartConfiguration(doubleArray61);
        multiDirectional38.setStartConfiguration(doubleArray61);
        multiDirectional20.setStartConfiguration(doubleArray61);
        multiDirectional0.setStartConfiguration(doubleArray61);
        int int67 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker30);
        org.junit.Assert.assertNull(realConvergenceChecker35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (short) 0);
        java.lang.Class<?> wildcardClass3 = multiDirectional2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) 32);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction3 = null;
        org.apache.commons.math.optimization.GoalType goalType4 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getIterations();
        int int13 = multiDirectional5.getMaxIterations();
        int int14 = multiDirectional5.getMaxEvaluations();
        int int15 = multiDirectional5.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = null;
        multiDirectional19.setConvergenceChecker(realConvergenceChecker23);
        double[] doubleArray27 = new double[] { 1.0d, 2147483647 };
        multiDirectional19.setStartConfiguration(doubleArray27);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional19.getConvergenceChecker();
        multiDirectional19.setMaxEvaluations((int) (byte) 100);
        int int32 = multiDirectional19.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional33.setConvergenceChecker(realConvergenceChecker37);
        double[] doubleArray41 = new double[] { 1.0d, 2147483647 };
        multiDirectional33.setStartConfiguration(doubleArray41);
        multiDirectional19.setStartConfiguration(doubleArray41);
        multiDirectional18.setStartConfiguration(doubleArray41);
        multiDirectional5.setStartConfiguration(doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair46 = multiDirectional2.optimize(multivariateRealFunction3, goalType4, doubleArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = multiDirectional0.getConvergenceChecker();
        int int12 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional0.getConvergenceChecker();
        int int14 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations(100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxEvaluations();
        int int19 = multiDirectional17.getIterations();
        int int20 = multiDirectional17.getMaxEvaluations();
        int int21 = multiDirectional17.getMaxEvaluations();
        multiDirectional17.setMaxIterations((-1));
        int int24 = multiDirectional17.getIterations();
        int int25 = multiDirectional17.getMaxIterations();
        multiDirectional17.setMaxEvaluations(100);
        multiDirectional17.setMaxIterations((int) (short) 10);
        int int30 = multiDirectional17.getMaxIterations();
        multiDirectional17.setMaxIterations(35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional33.setConvergenceChecker(realConvergenceChecker37);
        double[] doubleArray41 = new double[] { 1.0d, 2147483647 };
        multiDirectional33.setStartConfiguration(doubleArray41);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = multiDirectional33.getConvergenceChecker();
        multiDirectional33.setMaxEvaluations((int) (byte) 100);
        multiDirectional33.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxEvaluations();
        multiDirectional48.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = null;
        multiDirectional48.setConvergenceChecker(realConvergenceChecker52);
        double[] doubleArray56 = new double[] { 1.0d, 2147483647 };
        multiDirectional48.setStartConfiguration(doubleArray56);
        int int58 = multiDirectional48.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxIterations();
        double[] doubleArray61 = new double[] {};
        multiDirectional59.setStartConfiguration(doubleArray61);
        multiDirectional48.setStartConfiguration(doubleArray61);
        multiDirectional33.setStartConfiguration(doubleArray61);
        multiDirectional17.setStartConfiguration(doubleArray61);
        multiDirectional0.setStartConfiguration(doubleArray61);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker43);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        double[] doubleArray17 = new double[] {};
        multiDirectional15.setStartConfiguration(doubleArray17);
        multiDirectional4.setStartConfiguration(doubleArray17);
        multiDirectional0.setStartConfiguration(doubleArray17);
        int int21 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(52);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxIterations();
        double[] doubleArray13 = new double[] {};
        multiDirectional11.setStartConfiguration(doubleArray13);
        multiDirectional0.setStartConfiguration(doubleArray13);
        multiDirectional0.setMaxEvaluations((int) 'a');
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (short) 1);
        int int22 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray18 = new double[] { 1.0d, 2147483647 };
        multiDirectional10.setStartConfiguration(doubleArray18);
        int int20 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxIterations();
        double[] doubleArray23 = new double[] {};
        multiDirectional21.setStartConfiguration(doubleArray23);
        multiDirectional10.setStartConfiguration(doubleArray23);
        multiDirectional0.setStartConfiguration(doubleArray23);
        int int27 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxEvaluations();
        multiDirectional28.setMaxIterations((int) (byte) 0);
        multiDirectional28.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional28.getConvergenceChecker();
        multiDirectional28.setMaxIterations((int) (byte) -1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxEvaluations();
        multiDirectional37.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = null;
        multiDirectional37.setConvergenceChecker(realConvergenceChecker41);
        double[] doubleArray45 = new double[] { 1.0d, 2147483647 };
        multiDirectional37.setStartConfiguration(doubleArray45);
        multiDirectional37.setMaxIterations((int) (byte) 100);
        int int49 = multiDirectional37.getMaxEvaluations();
        int int50 = multiDirectional37.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = null;
        multiDirectional51.setConvergenceChecker(realConvergenceChecker53);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxEvaluations();
        multiDirectional55.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker59 = null;
        multiDirectional55.setConvergenceChecker(realConvergenceChecker59);
        double[] doubleArray63 = new double[] { 1.0d, 2147483647 };
        multiDirectional55.setStartConfiguration(doubleArray63);
        int int65 = multiDirectional55.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int67 = multiDirectional66.getMaxIterations();
        double[] doubleArray68 = new double[] {};
        multiDirectional66.setStartConfiguration(doubleArray68);
        multiDirectional55.setStartConfiguration(doubleArray68);
        multiDirectional51.setStartConfiguration(doubleArray68);
        multiDirectional37.setStartConfiguration(doubleArray68);
        multiDirectional28.setStartConfiguration(doubleArray68);
        multiDirectional0.setStartConfiguration(doubleArray68);
        multiDirectional0.setMaxIterations(52);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker77 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker77);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        int int6 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker7);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional2.setMaxEvaluations((int) (byte) 0);
        int int5 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        int int8 = multiDirectional6.getIterations();
        int int9 = multiDirectional6.getMaxEvaluations();
        int int10 = multiDirectional6.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = multiDirectional6.getConvergenceChecker();
        int int12 = multiDirectional6.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, 10.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        int int18 = multiDirectional16.getIterations();
        int int19 = multiDirectional16.getMaxEvaluations();
        int int20 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxIterations((-1));
        int int23 = multiDirectional16.getMaxIterations();
        multiDirectional16.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional28.getConvergenceChecker();
        multiDirectional16.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = null;
        multiDirectional31.setConvergenceChecker(realConvergenceChecker33);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxEvaluations();
        multiDirectional35.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = null;
        multiDirectional35.setConvergenceChecker(realConvergenceChecker39);
        double[] doubleArray43 = new double[] { 1.0d, 2147483647 };
        multiDirectional35.setStartConfiguration(doubleArray43);
        int int45 = multiDirectional35.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxIterations();
        double[] doubleArray48 = new double[] {};
        multiDirectional46.setStartConfiguration(doubleArray48);
        multiDirectional35.setStartConfiguration(doubleArray48);
        multiDirectional31.setStartConfiguration(doubleArray48);
        multiDirectional16.setStartConfiguration(doubleArray48);
        multiDirectional15.setStartConfiguration(doubleArray48);
        multiDirectional6.setStartConfiguration(doubleArray48);
        multiDirectional2.setStartConfiguration(doubleArray48);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker56);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, (double) 10);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxIterations();
        double[] doubleArray6 = new double[] {};
        multiDirectional4.setStartConfiguration(doubleArray6);
        int int8 = multiDirectional4.getMaxEvaluations();
        int int9 = multiDirectional4.getIterations();
        int int10 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((int) (short) 1);
        int int13 = multiDirectional4.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        int int16 = multiDirectional14.getIterations();
        int int17 = multiDirectional14.getMaxEvaluations();
        int int18 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxIterations((-1));
        int int21 = multiDirectional14.getIterations();
        int int22 = multiDirectional14.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional14.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        int int26 = multiDirectional24.getIterations();
        int int27 = multiDirectional24.getMaxEvaluations();
        int int28 = multiDirectional24.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxIterations();
        double[] doubleArray31 = new double[] {};
        multiDirectional29.setStartConfiguration(doubleArray31);
        multiDirectional24.setStartConfiguration(doubleArray31);
        multiDirectional14.setStartConfiguration(doubleArray31);
        multiDirectional4.setStartConfiguration(doubleArray31);
        multiDirectional2.setStartConfiguration(doubleArray31);
        int int37 = multiDirectional2.getIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction38 = null;
        org.apache.commons.math.optimization.GoalType goalType39 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, (double) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxEvaluations();
        multiDirectional49.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = null;
        multiDirectional49.setConvergenceChecker(realConvergenceChecker53);
        double[] doubleArray57 = new double[] { 1.0d, 2147483647 };
        multiDirectional49.setStartConfiguration(doubleArray57);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker59 = multiDirectional49.getConvergenceChecker();
        multiDirectional49.setMaxEvaluations((int) (byte) 100);
        multiDirectional49.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int65 = multiDirectional64.getMaxEvaluations();
        multiDirectional64.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker68 = null;
        multiDirectional64.setConvergenceChecker(realConvergenceChecker68);
        double[] doubleArray72 = new double[] { 1.0d, 2147483647 };
        multiDirectional64.setStartConfiguration(doubleArray72);
        int int74 = multiDirectional64.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxIterations();
        double[] doubleArray77 = new double[] {};
        multiDirectional75.setStartConfiguration(doubleArray77);
        multiDirectional64.setStartConfiguration(doubleArray77);
        multiDirectional49.setStartConfiguration(doubleArray77);
        multiDirectional48.setStartConfiguration(doubleArray77);
        int int82 = multiDirectional48.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional83 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int84 = multiDirectional83.getMaxIterations();
        double[] doubleArray85 = new double[] {};
        multiDirectional83.setStartConfiguration(doubleArray85);
        int int87 = multiDirectional83.getMaxEvaluations();
        int int88 = multiDirectional83.getIterations();
        double[] doubleArray94 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional83.setStartConfiguration(doubleArray94);
        multiDirectional48.setStartConfiguration(doubleArray94);
        multiDirectional45.setStartConfiguration(doubleArray94);
        multiDirectional42.setStartConfiguration(doubleArray94);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair99 = multiDirectional2.optimize(multivariateRealFunction38, goalType39, doubleArray94);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2147483647 + "'", int84 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int6 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations(1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxIterations();
        double[] doubleArray14 = new double[] {};
        multiDirectional12.setStartConfiguration(doubleArray14);
        int int16 = multiDirectional12.getMaxEvaluations();
        int int17 = multiDirectional12.getIterations();
        int int18 = multiDirectional12.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional12.getConvergenceChecker();
        multiDirectional11.setConvergenceChecker(realConvergenceChecker19);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker19);
        double[][] doubleArray22 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiDirectional0.setStartConfiguration(doubleArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker18);
        int int22 = multiDirectional2.getMaxEvaluations();
        java.lang.Class<?> wildcardClass23 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker10);
        int int12 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations(2147483647);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 10, (double) ' ');
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int3 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations((int) (byte) 0);
        int int6 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional16.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker17);
        int int19 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations(100);
        int int22 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker7);
        double[] doubleArray11 = new double[] { 1.0d, 2147483647 };
        multiDirectional3.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional3.getConvergenceChecker();
        multiDirectional3.setMaxEvaluations((int) (byte) 100);
        multiDirectional3.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker22);
        double[] doubleArray26 = new double[] { 1.0d, 2147483647 };
        multiDirectional18.setStartConfiguration(doubleArray26);
        int int28 = multiDirectional18.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxIterations();
        double[] doubleArray31 = new double[] {};
        multiDirectional29.setStartConfiguration(doubleArray31);
        multiDirectional18.setStartConfiguration(doubleArray31);
        multiDirectional3.setStartConfiguration(doubleArray31);
        multiDirectional2.setStartConfiguration(doubleArray31);
        multiDirectional2.setMaxEvaluations((int) (short) 0);
        multiDirectional2.setMaxIterations(35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        int int44 = multiDirectional42.getIterations();
        int int45 = multiDirectional42.getMaxEvaluations();
        int int46 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxIterations((-1));
        int int49 = multiDirectional42.getMaxIterations();
        multiDirectional42.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = multiDirectional54.getConvergenceChecker();
        multiDirectional42.setConvergenceChecker(realConvergenceChecker55);
        multiDirectional40.setConvergenceChecker(realConvergenceChecker55);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker58 = multiDirectional40.getConvergenceChecker();
        int int59 = multiDirectional40.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int61 = multiDirectional60.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = null;
        multiDirectional60.setConvergenceChecker(realConvergenceChecker62);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int65 = multiDirectional64.getMaxEvaluations();
        multiDirectional64.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker68 = null;
        multiDirectional64.setConvergenceChecker(realConvergenceChecker68);
        double[] doubleArray72 = new double[] { 1.0d, 2147483647 };
        multiDirectional64.setStartConfiguration(doubleArray72);
        int int74 = multiDirectional64.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxIterations();
        double[] doubleArray77 = new double[] {};
        multiDirectional75.setStartConfiguration(doubleArray77);
        multiDirectional64.setStartConfiguration(doubleArray77);
        multiDirectional60.setStartConfiguration(doubleArray77);
        multiDirectional40.setStartConfiguration(doubleArray77);
        multiDirectional2.setStartConfiguration(doubleArray77);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker55);
        org.junit.Assert.assertNotNull(realConvergenceChecker58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int6 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = null;
        multiDirectional11.setConvergenceChecker(realConvergenceChecker13);
        multiDirectional11.setMaxEvaluations((int) ' ');
        int int17 = multiDirectional11.getEvaluations();
        multiDirectional11.setMaxEvaluations(1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        int int27 = multiDirectional25.getIterations();
        int int28 = multiDirectional25.getMaxEvaluations();
        int int29 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxIterations((-1));
        int int32 = multiDirectional25.getMaxIterations();
        multiDirectional25.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional37.getConvergenceChecker();
        multiDirectional25.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional23.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional22.setConvergenceChecker(realConvergenceChecker38);
        int int42 = multiDirectional22.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int46 = multiDirectional45.getEvaluations();
        int int47 = multiDirectional45.getMaxEvaluations();
        multiDirectional45.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = multiDirectional45.getConvergenceChecker();
        multiDirectional22.setConvergenceChecker(realConvergenceChecker50);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker50);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = multiDirectional11.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker53);
        java.lang.Class<?> wildcardClass55 = realConvergenceChecker53.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker7);
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker50);
        org.junit.Assert.assertNotNull(realConvergenceChecker53);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        int int3 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray11 = new double[] { 100.0d };
        multiDirectional4.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxIterations();
        double[] doubleArray15 = new double[] {};
        multiDirectional13.setStartConfiguration(doubleArray15);
        int int17 = multiDirectional13.getMaxEvaluations();
        int int18 = multiDirectional13.getIterations();
        double[] doubleArray24 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional13.setStartConfiguration(doubleArray24);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        int int28 = multiDirectional26.getIterations();
        int int29 = multiDirectional26.getMaxEvaluations();
        int int30 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxIterations((-1));
        int int33 = multiDirectional26.getIterations();
        int int34 = multiDirectional26.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional26.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        int int38 = multiDirectional36.getIterations();
        int int39 = multiDirectional36.getMaxEvaluations();
        int int40 = multiDirectional36.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxIterations();
        double[] doubleArray43 = new double[] {};
        multiDirectional41.setStartConfiguration(doubleArray43);
        multiDirectional36.setStartConfiguration(doubleArray43);
        multiDirectional26.setStartConfiguration(doubleArray43);
        multiDirectional13.setStartConfiguration(doubleArray43);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxEvaluations();
        multiDirectional48.setMaxIterations((int) (byte) 0);
        int int52 = multiDirectional48.getMaxIterations();
        int int53 = multiDirectional48.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = multiDirectional48.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker54);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker54);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int58 = multiDirectional57.getMaxEvaluations();
        int int59 = multiDirectional57.getIterations();
        int int60 = multiDirectional57.getMaxEvaluations();
        int int61 = multiDirectional57.getMaxEvaluations();
        multiDirectional57.setMaxIterations((-1));
        int int64 = multiDirectional57.getIterations();
        int int65 = multiDirectional57.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int67 = multiDirectional66.getMaxEvaluations();
        int int68 = multiDirectional66.getIterations();
        int int69 = multiDirectional66.getMaxEvaluations();
        int int70 = multiDirectional66.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int72 = multiDirectional71.getMaxIterations();
        double[] doubleArray73 = new double[] {};
        multiDirectional71.setStartConfiguration(doubleArray73);
        multiDirectional66.setStartConfiguration(doubleArray73);
        multiDirectional57.setStartConfiguration(doubleArray73);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker77 = multiDirectional57.getConvergenceChecker();
        multiDirectional4.setConvergenceChecker(realConvergenceChecker77);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker77);
        java.lang.Class<?> wildcardClass80 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker77);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        int int4 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) ' ');
        int int7 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((-1));
        int int11 = multiDirectional4.getIterations();
        multiDirectional4.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker14);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        multiDirectional4.setStartConfiguration(doubleArray24);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        double[] doubleArray34 = new double[] {};
        multiDirectional32.setStartConfiguration(doubleArray34);
        multiDirectional27.setStartConfiguration(doubleArray34);
        multiDirectional4.setStartConfiguration(doubleArray34);
        multiDirectional2.setStartConfiguration(doubleArray34);
        int int39 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = multiDirectional2.getConvergenceChecker();
        int int41 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations((int) (byte) -1);
        multiDirectional2.setMaxEvaluations(32);
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getEvaluations();
        java.lang.Class<?> wildcardClass10 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray18 = new double[] { 1.0d, 2147483647 };
        multiDirectional10.setStartConfiguration(doubleArray18);
        int int20 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxIterations();
        double[] doubleArray23 = new double[] {};
        multiDirectional21.setStartConfiguration(doubleArray23);
        multiDirectional10.setStartConfiguration(doubleArray23);
        multiDirectional0.setStartConfiguration(doubleArray23);
        multiDirectional0.setMaxIterations(0);
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) ' ', (double) 10.0f);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker7);
        double[] doubleArray11 = new double[] { 1.0d, 2147483647 };
        multiDirectional3.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional3.getConvergenceChecker();
        multiDirectional3.setMaxEvaluations((int) (byte) 100);
        multiDirectional3.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker22);
        double[] doubleArray26 = new double[] { 1.0d, 2147483647 };
        multiDirectional18.setStartConfiguration(doubleArray26);
        int int28 = multiDirectional18.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxIterations();
        double[] doubleArray31 = new double[] {};
        multiDirectional29.setStartConfiguration(doubleArray31);
        multiDirectional18.setStartConfiguration(doubleArray31);
        multiDirectional3.setStartConfiguration(doubleArray31);
        multiDirectional2.setStartConfiguration(doubleArray31);
        int int36 = multiDirectional2.getIterations();
        int int37 = multiDirectional2.getIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction38 = null;
        org.apache.commons.math.optimization.GoalType goalType39 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        multiDirectional40.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = null;
        multiDirectional40.setConvergenceChecker(realConvergenceChecker44);
        double[] doubleArray48 = new double[] { 1.0d, 2147483647 };
        multiDirectional40.setStartConfiguration(doubleArray48);
        int int50 = multiDirectional40.getMaxIterations();
        int int51 = multiDirectional40.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = null;
        multiDirectional40.setConvergenceChecker(realConvergenceChecker52);
        int int54 = multiDirectional40.getMaxEvaluations();
        int int55 = multiDirectional40.getMaxIterations();
        int int56 = multiDirectional40.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int58 = multiDirectional57.getMaxEvaluations();
        int int59 = multiDirectional57.getIterations();
        int int60 = multiDirectional57.getMaxEvaluations();
        int int61 = multiDirectional57.getMaxEvaluations();
        multiDirectional57.setMaxIterations((-1));
        int int64 = multiDirectional57.getIterations();
        int int65 = multiDirectional57.getEvaluations();
        int int66 = multiDirectional57.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxEvaluations();
        multiDirectional67.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = null;
        multiDirectional67.setConvergenceChecker(realConvergenceChecker71);
        double[] doubleArray75 = new double[] { 1.0d, 2147483647 };
        multiDirectional67.setStartConfiguration(doubleArray75);
        int int77 = multiDirectional67.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional78 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int79 = multiDirectional78.getMaxIterations();
        double[] doubleArray80 = new double[] {};
        multiDirectional78.setStartConfiguration(doubleArray80);
        multiDirectional67.setStartConfiguration(doubleArray80);
        multiDirectional57.setStartConfiguration(doubleArray80);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional84 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int85 = multiDirectional84.getMaxEvaluations();
        int int86 = multiDirectional84.getIterations();
        int int87 = multiDirectional84.getMaxEvaluations();
        int int88 = multiDirectional84.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional89 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int90 = multiDirectional89.getMaxIterations();
        double[] doubleArray91 = new double[] {};
        multiDirectional89.setStartConfiguration(doubleArray91);
        multiDirectional84.setStartConfiguration(doubleArray91);
        multiDirectional57.setStartConfiguration(doubleArray91);
        multiDirectional40.setStartConfiguration(doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair96 = multiDirectional2.optimize(multivariateRealFunction38, goalType39, doubleArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2147483647 + "'", int79 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2147483647 + "'", int88 == 2147483647);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2147483647 + "'", int90 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int6 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations(1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        int int16 = multiDirectional14.getIterations();
        int int17 = multiDirectional14.getMaxEvaluations();
        int int18 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxIterations((-1));
        int int21 = multiDirectional14.getMaxIterations();
        multiDirectional14.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional26.getConvergenceChecker();
        multiDirectional14.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional12.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker27);
        int int31 = multiDirectional11.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int35 = multiDirectional34.getEvaluations();
        int int36 = multiDirectional34.getMaxEvaluations();
        multiDirectional34.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional34.getConvergenceChecker();
        multiDirectional11.setConvergenceChecker(realConvergenceChecker39);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker39);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = multiDirectional0.getConvergenceChecker();
        int int43 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
        org.junit.Assert.assertNotNull(realConvergenceChecker42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxIterations((int) ' ');
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray18 = new double[] { 1.0d, 2147483647 };
        multiDirectional10.setStartConfiguration(doubleArray18);
        int int20 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxIterations();
        double[] doubleArray23 = new double[] {};
        multiDirectional21.setStartConfiguration(doubleArray23);
        multiDirectional10.setStartConfiguration(doubleArray23);
        multiDirectional0.setStartConfiguration(doubleArray23);
        int int27 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction29 = null;
        org.apache.commons.math.optimization.GoalType goalType30 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, (double) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        multiDirectional40.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = null;
        multiDirectional40.setConvergenceChecker(realConvergenceChecker44);
        double[] doubleArray48 = new double[] { 1.0d, 2147483647 };
        multiDirectional40.setStartConfiguration(doubleArray48);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = multiDirectional40.getConvergenceChecker();
        multiDirectional40.setMaxEvaluations((int) (byte) 100);
        multiDirectional40.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxEvaluations();
        multiDirectional55.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker59 = null;
        multiDirectional55.setConvergenceChecker(realConvergenceChecker59);
        double[] doubleArray63 = new double[] { 1.0d, 2147483647 };
        multiDirectional55.setStartConfiguration(doubleArray63);
        int int65 = multiDirectional55.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int67 = multiDirectional66.getMaxIterations();
        double[] doubleArray68 = new double[] {};
        multiDirectional66.setStartConfiguration(doubleArray68);
        multiDirectional55.setStartConfiguration(doubleArray68);
        multiDirectional40.setStartConfiguration(doubleArray68);
        multiDirectional39.setStartConfiguration(doubleArray68);
        int int73 = multiDirectional39.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional74 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int75 = multiDirectional74.getMaxIterations();
        double[] doubleArray76 = new double[] {};
        multiDirectional74.setStartConfiguration(doubleArray76);
        int int78 = multiDirectional74.getMaxEvaluations();
        int int79 = multiDirectional74.getIterations();
        double[] doubleArray85 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional74.setStartConfiguration(doubleArray85);
        multiDirectional39.setStartConfiguration(doubleArray85);
        multiDirectional36.setStartConfiguration(doubleArray85);
        multiDirectional33.setStartConfiguration(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair90 = multiDirectional0.optimize(multivariateRealFunction29, goalType30, doubleArray85);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker28);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker50);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        int int6 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        int int9 = multiDirectional7.getIterations();
        int int10 = multiDirectional7.getMaxEvaluations();
        int int11 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxIterations((-1));
        int int14 = multiDirectional7.getMaxIterations();
        multiDirectional7.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional19.getConvergenceChecker();
        multiDirectional7.setConvergenceChecker(realConvergenceChecker20);
        int int22 = multiDirectional7.getMaxIterations();
        int int23 = multiDirectional7.getEvaluations();
        int int24 = multiDirectional7.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional7.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        int int27 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(52);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getEvaluations();
        double[] doubleArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiDirectional0.setStartConfiguration(doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxEvaluations((int) (short) 100);
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker14);
        org.junit.Assert.assertNull(realConvergenceChecker15);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getMaxEvaluations();
        double[][] doubleArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiDirectional0.setStartConfiguration(doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        int int5 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction6 = null;
        org.apache.commons.math.optimization.GoalType goalType7 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker12);
        double[] doubleArray16 = new double[] { 1.0d, 2147483647 };
        multiDirectional8.setStartConfiguration(doubleArray16);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional8.getConvergenceChecker();
        multiDirectional8.setMaxEvaluations((int) (byte) 100);
        int int21 = multiDirectional8.getMaxIterations();
        multiDirectional8.setMaxEvaluations((int) (byte) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int27 = multiDirectional26.getEvaluations();
        int int28 = multiDirectional26.getMaxEvaluations();
        int int29 = multiDirectional26.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        int int32 = multiDirectional30.getIterations();
        int int33 = multiDirectional30.getMaxEvaluations();
        int int34 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxIterations((-1));
        int int37 = multiDirectional30.getIterations();
        int int38 = multiDirectional30.getEvaluations();
        int int39 = multiDirectional30.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        multiDirectional40.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = null;
        multiDirectional40.setConvergenceChecker(realConvergenceChecker44);
        double[] doubleArray48 = new double[] { 1.0d, 2147483647 };
        multiDirectional40.setStartConfiguration(doubleArray48);
        int int50 = multiDirectional40.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxIterations();
        double[] doubleArray53 = new double[] {};
        multiDirectional51.setStartConfiguration(doubleArray53);
        multiDirectional40.setStartConfiguration(doubleArray53);
        multiDirectional30.setStartConfiguration(doubleArray53);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int58 = multiDirectional57.getMaxEvaluations();
        int int59 = multiDirectional57.getIterations();
        int int60 = multiDirectional57.getMaxEvaluations();
        int int61 = multiDirectional57.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional62 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int63 = multiDirectional62.getMaxIterations();
        double[] doubleArray64 = new double[] {};
        multiDirectional62.setStartConfiguration(doubleArray64);
        multiDirectional57.setStartConfiguration(doubleArray64);
        multiDirectional30.setStartConfiguration(doubleArray64);
        multiDirectional26.setStartConfiguration(doubleArray64);
        multiDirectional8.setStartConfiguration(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair70 = multiDirectional2.optimize(multivariateRealFunction6, goalType7, doubleArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, 10.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        int int8 = multiDirectional6.getIterations();
        int int9 = multiDirectional6.getMaxEvaluations();
        int int10 = multiDirectional6.getMaxEvaluations();
        multiDirectional6.setMaxIterations((-1));
        int int13 = multiDirectional6.getMaxIterations();
        multiDirectional6.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional18.getConvergenceChecker();
        multiDirectional6.setConvergenceChecker(realConvergenceChecker19);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = null;
        multiDirectional21.setConvergenceChecker(realConvergenceChecker23);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker29);
        double[] doubleArray33 = new double[] { 1.0d, 2147483647 };
        multiDirectional25.setStartConfiguration(doubleArray33);
        int int35 = multiDirectional25.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxIterations();
        double[] doubleArray38 = new double[] {};
        multiDirectional36.setStartConfiguration(doubleArray38);
        multiDirectional25.setStartConfiguration(doubleArray38);
        multiDirectional21.setStartConfiguration(doubleArray38);
        multiDirectional6.setStartConfiguration(doubleArray38);
        multiDirectional5.setStartConfiguration(doubleArray38);
        multiDirectional2.setStartConfiguration(doubleArray38);
        int int45 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        int int3 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        int int7 = multiDirectional6.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = null;
        multiDirectional11.setConvergenceChecker(realConvergenceChecker15);
        double[] doubleArray19 = new double[] { 1.0d, 2147483647 };
        multiDirectional11.setStartConfiguration(doubleArray19);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional11.getConvergenceChecker();
        multiDirectional11.setMaxEvaluations((int) (byte) 100);
        int int24 = multiDirectional11.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker29);
        double[] doubleArray33 = new double[] { 1.0d, 2147483647 };
        multiDirectional25.setStartConfiguration(doubleArray33);
        multiDirectional11.setStartConfiguration(doubleArray33);
        multiDirectional10.setStartConfiguration(doubleArray33);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = null;
        multiDirectional37.setConvergenceChecker(realConvergenceChecker39);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxEvaluations();
        multiDirectional41.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = null;
        multiDirectional41.setConvergenceChecker(realConvergenceChecker45);
        double[] doubleArray49 = new double[] { 1.0d, 2147483647 };
        multiDirectional41.setStartConfiguration(doubleArray49);
        int int51 = multiDirectional41.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxIterations();
        double[] doubleArray54 = new double[] {};
        multiDirectional52.setStartConfiguration(doubleArray54);
        multiDirectional41.setStartConfiguration(doubleArray54);
        multiDirectional37.setStartConfiguration(doubleArray54);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int59 = multiDirectional58.getMaxEvaluations();
        int int60 = multiDirectional58.getIterations();
        int int61 = multiDirectional58.getMaxEvaluations();
        int int62 = multiDirectional58.getMaxEvaluations();
        multiDirectional58.setMaxIterations((-1));
        int int65 = multiDirectional58.getMaxIterations();
        multiDirectional58.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = multiDirectional70.getConvergenceChecker();
        multiDirectional58.setConvergenceChecker(realConvergenceChecker71);
        multiDirectional37.setConvergenceChecker(realConvergenceChecker71);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker71);
        multiDirectional6.setConvergenceChecker(realConvergenceChecker71);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker76 = multiDirectional6.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker76);
        int int78 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional79 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int80 = multiDirectional79.getMaxEvaluations();
        int int81 = multiDirectional79.getIterations();
        int int82 = multiDirectional79.getMaxEvaluations();
        int int83 = multiDirectional79.getMaxEvaluations();
        multiDirectional79.setMaxIterations((-1));
        int int86 = multiDirectional79.getIterations();
        int int87 = multiDirectional79.getMaxIterations();
        multiDirectional79.setMaxEvaluations((int) (byte) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker90 = multiDirectional79.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker90);
        int int92 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker71);
        org.junit.Assert.assertNotNull(realConvergenceChecker76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2147483647 + "'", int92 == 2147483647);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        double[] doubleArray17 = new double[] {};
        multiDirectional15.setStartConfiguration(doubleArray17);
        multiDirectional4.setStartConfiguration(doubleArray17);
        multiDirectional0.setStartConfiguration(doubleArray17);
        int int21 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional22.getConvergenceChecker();
        multiDirectional22.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional37.getConvergenceChecker();
        multiDirectional22.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker38);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxEvaluations();
        int int45 = multiDirectional43.getIterations();
        int int46 = multiDirectional43.getMaxEvaluations();
        int int47 = multiDirectional43.getMaxEvaluations();
        multiDirectional43.setMaxIterations((-1));
        int int50 = multiDirectional43.getMaxIterations();
        multiDirectional43.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = multiDirectional55.getConvergenceChecker();
        multiDirectional43.setConvergenceChecker(realConvergenceChecker56);
        multiDirectional41.setConvergenceChecker(realConvergenceChecker56);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker59 = multiDirectional41.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = multiDirectional41.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int62 = multiDirectional61.getMaxEvaluations();
        int int63 = multiDirectional61.getIterations();
        int int64 = multiDirectional61.getMaxEvaluations();
        int int65 = multiDirectional61.getMaxEvaluations();
        multiDirectional61.setMaxIterations((-1));
        int int68 = multiDirectional61.getMaxIterations();
        multiDirectional61.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional73 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker74 = multiDirectional73.getConvergenceChecker();
        multiDirectional61.setConvergenceChecker(realConvergenceChecker74);
        int int76 = multiDirectional61.getMaxIterations();
        int int77 = multiDirectional61.getEvaluations();
        int int78 = multiDirectional61.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker79 = multiDirectional61.getConvergenceChecker();
        multiDirectional41.setConvergenceChecker(realConvergenceChecker79);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker79);
        multiDirectional0.setMaxEvaluations((int) 'a');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker32);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker56);
        org.junit.Assert.assertNotNull(realConvergenceChecker59);
        org.junit.Assert.assertNotNull(realConvergenceChecker60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker79);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int6 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations((int) (byte) 1);
        int int10 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxIterations(35);
        multiDirectional0.setMaxIterations(100);
        int int17 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(1.0d, (double) 2147483647);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        multiDirectional4.setMaxIterations((int) (byte) 100);
        int int16 = multiDirectional4.getMaxEvaluations();
        int int17 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker20);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        int int32 = multiDirectional22.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxIterations();
        double[] doubleArray35 = new double[] {};
        multiDirectional33.setStartConfiguration(doubleArray35);
        multiDirectional22.setStartConfiguration(doubleArray35);
        multiDirectional18.setStartConfiguration(doubleArray35);
        multiDirectional4.setStartConfiguration(doubleArray35);
        multiDirectional2.setStartConfiguration(doubleArray35);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 100, (double) '4');
        multiDirectional2.setMaxEvaluations(35);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, 0.0d);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction3 = null;
        org.apache.commons.math.optimization.GoalType goalType4 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getIterations();
        int int13 = multiDirectional5.getEvaluations();
        int int14 = multiDirectional5.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxEvaluations();
        multiDirectional15.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = null;
        multiDirectional15.setConvergenceChecker(realConvergenceChecker19);
        double[] doubleArray23 = new double[] { 1.0d, 2147483647 };
        multiDirectional15.setStartConfiguration(doubleArray23);
        int int25 = multiDirectional15.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxIterations();
        double[] doubleArray28 = new double[] {};
        multiDirectional26.setStartConfiguration(doubleArray28);
        multiDirectional15.setStartConfiguration(doubleArray28);
        multiDirectional5.setStartConfiguration(doubleArray28);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional5.getConvergenceChecker();
        int int33 = multiDirectional5.getEvaluations();
        int int34 = multiDirectional5.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxEvaluations();
        int int37 = multiDirectional35.getIterations();
        int int38 = multiDirectional35.getMaxEvaluations();
        int int39 = multiDirectional35.getMaxEvaluations();
        multiDirectional35.setMaxIterations((-1));
        int int42 = multiDirectional35.getMaxIterations();
        multiDirectional35.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = multiDirectional47.getConvergenceChecker();
        multiDirectional35.setConvergenceChecker(realConvergenceChecker48);
        int int50 = multiDirectional35.getMaxIterations();
        int int51 = multiDirectional35.getEvaluations();
        int int52 = multiDirectional35.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = multiDirectional35.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int57 = multiDirectional56.getEvaluations();
        int int58 = multiDirectional56.getMaxEvaluations();
        multiDirectional56.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker61 = multiDirectional56.getConvergenceChecker();
        multiDirectional35.setConvergenceChecker(realConvergenceChecker61);
        multiDirectional35.setMaxEvaluations((int) (byte) 100);
        int int65 = multiDirectional35.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int67 = multiDirectional66.getMaxIterations();
        double[] doubleArray68 = new double[] {};
        multiDirectional66.setStartConfiguration(doubleArray68);
        int int70 = multiDirectional66.getMaxEvaluations();
        int int71 = multiDirectional66.getIterations();
        int int72 = multiDirectional66.getMaxEvaluations();
        int int73 = multiDirectional66.getMaxEvaluations();
        multiDirectional66.setMaxEvaluations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int77 = multiDirectional76.getMaxEvaluations();
        multiDirectional76.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker80 = null;
        multiDirectional76.setConvergenceChecker(realConvergenceChecker80);
        double[] doubleArray83 = new double[] { 100.0d };
        multiDirectional76.setStartConfiguration(doubleArray83);
        multiDirectional66.setStartConfiguration(doubleArray83);
        multiDirectional35.setStartConfiguration(doubleArray83);
        multiDirectional5.setStartConfiguration(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair88 = multiDirectional2.optimize(multivariateRealFunction3, goalType4, doubleArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0]");
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker18);
        int int22 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations(2147483647);
        int int25 = multiDirectional2.getIterations();
        int int26 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxIterations((-1));
        int int16 = multiDirectional9.getMaxIterations();
        multiDirectional9.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional6.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        multiDirectional27.setMaxIterations((-1));
        int int34 = multiDirectional27.getMaxIterations();
        int int35 = multiDirectional27.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = null;
        multiDirectional36.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional36.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = multiDirectional44.getConvergenceChecker();
        multiDirectional36.setConvergenceChecker(realConvergenceChecker45);
        multiDirectional27.setConvergenceChecker(realConvergenceChecker45);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxIterations();
        double[] doubleArray53 = new double[] {};
        multiDirectional51.setStartConfiguration(doubleArray53);
        int int55 = multiDirectional51.getMaxEvaluations();
        int int56 = multiDirectional51.getIterations();
        int int57 = multiDirectional51.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker58 = multiDirectional51.getConvergenceChecker();
        multiDirectional50.setConvergenceChecker(realConvergenceChecker58);
        double[] doubleArray60 = new double[] {};
        double[][] doubleArray61 = new double[][] { doubleArray60 };
        multiDirectional50.setStartConfiguration(doubleArray61);
        multiDirectional27.setStartConfiguration(doubleArray61);
        multiDirectional0.setStartConfiguration(doubleArray61);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker45);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getMaxEvaluations();
        int int15 = multiDirectional0.getMaxEvaluations();
        int int16 = multiDirectional0.getIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction17 = null;
        org.apache.commons.math.optimization.GoalType goalType18 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        int int22 = multiDirectional21.getMaxEvaluations();
        int int23 = multiDirectional21.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        multiDirectional27.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = null;
        multiDirectional27.setConvergenceChecker(realConvergenceChecker31);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional33.setConvergenceChecker(realConvergenceChecker37);
        double[] doubleArray41 = new double[] { 1.0d, 2147483647 };
        multiDirectional33.setStartConfiguration(doubleArray41);
        multiDirectional27.setStartConfiguration(doubleArray41);
        multiDirectional26.setStartConfiguration(doubleArray41);
        multiDirectional21.setStartConfiguration(doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair46 = multiDirectional0.optimize(multivariateRealFunction17, goalType18, doubleArray41);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.FunctionEvaluationException; message: org.apache.commons.math.MaxEvaluationsExceededException: Maximal number of evaluations (0) exceeded");
        } catch (org.apache.commons.math.FunctionEvaluationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) 32);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker18);
        int int22 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int26 = multiDirectional25.getEvaluations();
        int int27 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = multiDirectional25.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker30);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional2.getConvergenceChecker();
        multiDirectional2.setMaxEvaluations(35);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker30);
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100L);
        multiDirectional2.setMaxIterations(32);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction5 = null;
        org.apache.commons.math.optimization.GoalType goalType6 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional13.setConvergenceChecker(realConvergenceChecker17);
        double[] doubleArray21 = new double[] { 1.0d, 2147483647 };
        multiDirectional13.setStartConfiguration(doubleArray21);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional13.getConvergenceChecker();
        multiDirectional13.setMaxEvaluations((int) (byte) 100);
        multiDirectional13.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxEvaluations();
        multiDirectional28.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = null;
        multiDirectional28.setConvergenceChecker(realConvergenceChecker32);
        double[] doubleArray36 = new double[] { 1.0d, 2147483647 };
        multiDirectional28.setStartConfiguration(doubleArray36);
        int int38 = multiDirectional28.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxIterations();
        double[] doubleArray41 = new double[] {};
        multiDirectional39.setStartConfiguration(doubleArray41);
        multiDirectional28.setStartConfiguration(doubleArray41);
        multiDirectional13.setStartConfiguration(doubleArray41);
        multiDirectional12.setStartConfiguration(doubleArray41);
        int int46 = multiDirectional12.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxIterations();
        double[] doubleArray49 = new double[] {};
        multiDirectional47.setStartConfiguration(doubleArray49);
        int int51 = multiDirectional47.getMaxEvaluations();
        int int52 = multiDirectional47.getIterations();
        double[] doubleArray58 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional47.setStartConfiguration(doubleArray58);
        multiDirectional12.setStartConfiguration(doubleArray58);
        multiDirectional9.setStartConfiguration(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair62 = multiDirectional2.optimize(multivariateRealFunction5, goalType6, doubleArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker7);
        double[] doubleArray11 = new double[] { 1.0d, 2147483647 };
        multiDirectional3.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional3.getConvergenceChecker();
        multiDirectional3.setMaxEvaluations((int) (byte) 100);
        multiDirectional3.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional3.getConvergenceChecker();
        int int19 = multiDirectional3.getEvaluations();
        int int20 = multiDirectional3.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        int int23 = multiDirectional21.getIterations();
        int int24 = multiDirectional21.getMaxEvaluations();
        int int25 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxIterations((-1));
        int int28 = multiDirectional21.getMaxIterations();
        int int29 = multiDirectional21.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = null;
        multiDirectional30.setConvergenceChecker(realConvergenceChecker32);
        multiDirectional30.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional38.getConvergenceChecker();
        multiDirectional30.setConvergenceChecker(realConvergenceChecker39);
        multiDirectional21.setConvergenceChecker(realConvergenceChecker39);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxIterations();
        double[] doubleArray47 = new double[] {};
        multiDirectional45.setStartConfiguration(doubleArray47);
        int int49 = multiDirectional45.getMaxEvaluations();
        int int50 = multiDirectional45.getIterations();
        int int51 = multiDirectional45.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = multiDirectional45.getConvergenceChecker();
        multiDirectional44.setConvergenceChecker(realConvergenceChecker52);
        double[] doubleArray54 = new double[] {};
        double[][] doubleArray55 = new double[][] { doubleArray54 };
        multiDirectional44.setStartConfiguration(doubleArray55);
        multiDirectional21.setStartConfiguration(doubleArray55);
        multiDirectional3.setStartConfiguration(doubleArray55);
        multiDirectional0.setStartConfiguration(doubleArray55);
        int int60 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2147483647 + "'", int2 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker13);
        org.junit.Assert.assertNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) '4');
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        double[] doubleArray16 = new double[] {};
        multiDirectional14.setStartConfiguration(doubleArray16);
        multiDirectional9.setStartConfiguration(doubleArray16);
        multiDirectional0.setStartConfiguration(doubleArray16);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional0.getConvergenceChecker();
        int int21 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10.0f, 100.0d);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional2.getConvergenceChecker();
        multiDirectional2.setMaxIterations((int) ' ');
        int int8 = multiDirectional2.getMaxIterations();
        int int9 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) 0);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker7);
        double[] doubleArray11 = new double[] { 1.0d, 2147483647 };
        multiDirectional3.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional3.getConvergenceChecker();
        multiDirectional3.setMaxEvaluations((int) (byte) 100);
        multiDirectional3.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker22);
        double[] doubleArray26 = new double[] { 1.0d, 2147483647 };
        multiDirectional18.setStartConfiguration(doubleArray26);
        int int28 = multiDirectional18.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxIterations();
        double[] doubleArray31 = new double[] {};
        multiDirectional29.setStartConfiguration(doubleArray31);
        multiDirectional18.setStartConfiguration(doubleArray31);
        multiDirectional3.setStartConfiguration(doubleArray31);
        multiDirectional2.setStartConfiguration(doubleArray31);
        int int36 = multiDirectional2.getIterations();
        multiDirectional2.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = null;
        multiDirectional39.setConvergenceChecker(realConvergenceChecker43);
        double[] doubleArray47 = new double[] { 1.0d, 2147483647 };
        multiDirectional39.setStartConfiguration(doubleArray47);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = multiDirectional39.getConvergenceChecker();
        multiDirectional39.setMaxEvaluations((int) (byte) 100);
        multiDirectional39.setMaxIterations(35);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = multiDirectional39.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker58 = multiDirectional57.getConvergenceChecker();
        multiDirectional39.setConvergenceChecker(realConvergenceChecker58);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker58);
        java.lang.Class<?> wildcardClass61 = realConvergenceChecker58.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker49);
        org.junit.Assert.assertNull(realConvergenceChecker54);
        org.junit.Assert.assertNotNull(realConvergenceChecker58);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional15.setConvergenceChecker(realConvergenceChecker17);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = null;
        multiDirectional19.setConvergenceChecker(realConvergenceChecker23);
        double[] doubleArray27 = new double[] { 1.0d, 2147483647 };
        multiDirectional19.setStartConfiguration(doubleArray27);
        int int29 = multiDirectional19.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxIterations();
        double[] doubleArray32 = new double[] {};
        multiDirectional30.setStartConfiguration(doubleArray32);
        multiDirectional19.setStartConfiguration(doubleArray32);
        multiDirectional15.setStartConfiguration(doubleArray32);
        multiDirectional0.setStartConfiguration(doubleArray32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxIterations();
        double[] doubleArray39 = new double[] {};
        multiDirectional37.setStartConfiguration(doubleArray39);
        int int41 = multiDirectional37.getMaxEvaluations();
        int int42 = multiDirectional37.getIterations();
        int int43 = multiDirectional37.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = multiDirectional37.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker44);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction46 = null;
        org.apache.commons.math.optimization.GoalType goalType47 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 'a', (double) 2147483647);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxEvaluations();
        multiDirectional51.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = null;
        multiDirectional51.setConvergenceChecker(realConvergenceChecker55);
        double[] doubleArray59 = new double[] { 1.0d, 2147483647 };
        multiDirectional51.setStartConfiguration(doubleArray59);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker61 = multiDirectional51.getConvergenceChecker();
        multiDirectional51.setMaxEvaluations((int) (byte) 100);
        multiDirectional51.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker66 = multiDirectional51.getConvergenceChecker();
        int int67 = multiDirectional51.getEvaluations();
        int int68 = multiDirectional51.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int70 = multiDirectional69.getMaxEvaluations();
        int int71 = multiDirectional69.getIterations();
        int int72 = multiDirectional69.getMaxEvaluations();
        int int73 = multiDirectional69.getMaxEvaluations();
        multiDirectional69.setMaxIterations((-1));
        int int76 = multiDirectional69.getIterations();
        int int77 = multiDirectional69.getEvaluations();
        int int78 = multiDirectional69.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional79 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int80 = multiDirectional79.getMaxEvaluations();
        multiDirectional79.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker83 = null;
        multiDirectional79.setConvergenceChecker(realConvergenceChecker83);
        double[] doubleArray87 = new double[] { 1.0d, 2147483647 };
        multiDirectional79.setStartConfiguration(doubleArray87);
        int int89 = multiDirectional79.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional90 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int91 = multiDirectional90.getMaxIterations();
        double[] doubleArray92 = new double[] {};
        multiDirectional90.setStartConfiguration(doubleArray92);
        multiDirectional79.setStartConfiguration(doubleArray92);
        multiDirectional69.setStartConfiguration(doubleArray92);
        multiDirectional51.setStartConfiguration(doubleArray92);
        multiDirectional50.setStartConfiguration(doubleArray92);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair98 = multiDirectional0.optimize(multivariateRealFunction46, goalType47, doubleArray92);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.FunctionEvaluationException; message: org.apache.commons.math.MaxEvaluationsExceededException: Maximal number of evaluations (0) exceeded");
        } catch (org.apache.commons.math.FunctionEvaluationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker44);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker61);
        org.junit.Assert.assertNull(realConvergenceChecker66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2147483647 + "'", int89 == 2147483647);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2147483647 + "'", int91 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[]");
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        multiDirectional2.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        int int9 = multiDirectional7.getIterations();
        int int10 = multiDirectional7.getMaxEvaluations();
        int int11 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxIterations((-1));
        int int14 = multiDirectional7.getIterations();
        int int15 = multiDirectional7.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional7.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker16);
        int int18 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        int int21 = multiDirectional19.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        int int26 = multiDirectional24.getIterations();
        int int27 = multiDirectional24.getMaxEvaluations();
        int int28 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxIterations((-1));
        int int31 = multiDirectional24.getMaxIterations();
        multiDirectional24.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional36.getConvergenceChecker();
        multiDirectional24.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional22.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional19.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional19.setMaxIterations((int) (byte) 100);
        multiDirectional19.setMaxIterations((-1));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker47 = null;
        multiDirectional45.setConvergenceChecker(realConvergenceChecker47);
        multiDirectional45.setMaxEvaluations((int) ' ');
        int int51 = multiDirectional45.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = multiDirectional45.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxEvaluations();
        int int55 = multiDirectional53.getIterations();
        int int56 = multiDirectional53.getMaxEvaluations();
        int int57 = multiDirectional53.getMaxEvaluations();
        multiDirectional53.setMaxIterations((-1));
        int int60 = multiDirectional53.getIterations();
        multiDirectional53.setMaxIterations((int) '#');
        multiDirectional53.setMaxEvaluations(0);
        multiDirectional53.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker70 = multiDirectional69.getConvergenceChecker();
        multiDirectional53.setConvergenceChecker(realConvergenceChecker70);
        multiDirectional45.setConvergenceChecker(realConvergenceChecker70);
        multiDirectional19.setConvergenceChecker(realConvergenceChecker70);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker70);
        java.lang.Class<?> wildcardClass75 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker37);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker70);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        multiDirectional0.setMaxEvaluations(10);
        java.lang.Class<?> wildcardClass8 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, (-1.0d));
        java.lang.Class<?> wildcardClass3 = multiDirectional2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        double[] doubleArray16 = new double[] {};
        multiDirectional14.setStartConfiguration(doubleArray16);
        multiDirectional9.setStartConfiguration(doubleArray16);
        multiDirectional0.setStartConfiguration(doubleArray16);
        double[] doubleArray21 = new double[] { 35 };
        multiDirectional0.setStartConfiguration(doubleArray21);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) (byte) 1);
        multiDirectional25.setMaxEvaluations(1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = multiDirectional25.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker28);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0]");
        org.junit.Assert.assertNotNull(realConvergenceChecker28);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) 0L);
        int int3 = multiDirectional2.getMaxIterations();
        int int4 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional5.setConvergenceChecker(realConvergenceChecker9);
        double[] doubleArray12 = new double[] { 100.0d };
        multiDirectional5.setStartConfiguration(doubleArray12);
        multiDirectional2.setStartConfiguration(doubleArray12);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional2.getConvergenceChecker();
        int int16 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]");
        org.junit.Assert.assertNotNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        int int7 = multiDirectional0.getMaxIterations();
        int int8 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        double[] doubleArray16 = new double[] {};
        multiDirectional14.setStartConfiguration(doubleArray16);
        multiDirectional9.setStartConfiguration(doubleArray16);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxIterations();
        double[] doubleArray21 = new double[] {};
        multiDirectional19.setStartConfiguration(doubleArray21);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        int int27 = multiDirectional25.getIterations();
        int int28 = multiDirectional25.getMaxEvaluations();
        int int29 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxIterations((-1));
        int int32 = multiDirectional25.getMaxIterations();
        multiDirectional25.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional37.getConvergenceChecker();
        multiDirectional25.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional23.setConvergenceChecker(realConvergenceChecker38);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = multiDirectional23.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = multiDirectional23.getConvergenceChecker();
        multiDirectional19.setConvergenceChecker(realConvergenceChecker42);
        multiDirectional9.setConvergenceChecker(realConvergenceChecker42);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker42);
        multiDirectional0.setMaxEvaluations((int) (short) 10);
        multiDirectional0.setMaxEvaluations(10);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertNotNull(realConvergenceChecker41);
        org.junit.Assert.assertNotNull(realConvergenceChecker42);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(0);
        int int4 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxIterations();
        double[] doubleArray7 = new double[] {};
        multiDirectional5.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional5.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        int int12 = multiDirectional10.getIterations();
        int int13 = multiDirectional10.getMaxEvaluations();
        int int14 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxIterations((-1));
        int int17 = multiDirectional10.getIterations();
        multiDirectional10.setMaxIterations((int) '#');
        multiDirectional10.setMaxEvaluations(0);
        multiDirectional10.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional26.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional5.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional0.setMaxIterations((int) (byte) -1);
        int int33 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional2.getConvergenceChecker();
        java.lang.Class<?> wildcardClass6 = realConvergenceChecker5.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int6 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) (short) 10);
        int int12 = multiDirectional11.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1, (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        int int18 = multiDirectional16.getIterations();
        int int19 = multiDirectional16.getMaxEvaluations();
        int int20 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxIterations((-1));
        int int23 = multiDirectional16.getMaxIterations();
        int int24 = multiDirectional16.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional25.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional33.getConvergenceChecker();
        multiDirectional25.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional16.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional15.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker34);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional11.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker39);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker7);
        org.junit.Assert.assertNull(realConvergenceChecker8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int6 = multiDirectional0.getEvaluations();
        int int7 = multiDirectional0.getEvaluations();
        int int8 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) ' ');
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction11 = null;
        org.apache.commons.math.optimization.GoalType goalType12 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getMaxIterations();
        multiDirectional13.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional25.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker26);
        int int28 = multiDirectional13.getMaxIterations();
        int int29 = multiDirectional13.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int33 = multiDirectional32.getEvaluations();
        int int34 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxEvaluations();
        int int39 = multiDirectional37.getIterations();
        int int40 = multiDirectional37.getMaxEvaluations();
        int int41 = multiDirectional37.getMaxEvaluations();
        multiDirectional37.setMaxIterations((-1));
        int int44 = multiDirectional37.getMaxIterations();
        int int45 = multiDirectional37.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = null;
        multiDirectional46.setConvergenceChecker(realConvergenceChecker48);
        multiDirectional46.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = multiDirectional54.getConvergenceChecker();
        multiDirectional46.setConvergenceChecker(realConvergenceChecker55);
        multiDirectional37.setConvergenceChecker(realConvergenceChecker55);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int62 = multiDirectional61.getMaxIterations();
        double[] doubleArray63 = new double[] {};
        multiDirectional61.setStartConfiguration(doubleArray63);
        int int65 = multiDirectional61.getMaxEvaluations();
        int int66 = multiDirectional61.getIterations();
        int int67 = multiDirectional61.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker68 = multiDirectional61.getConvergenceChecker();
        multiDirectional60.setConvergenceChecker(realConvergenceChecker68);
        double[] doubleArray70 = new double[] {};
        double[][] doubleArray71 = new double[][] { doubleArray70 };
        multiDirectional60.setStartConfiguration(doubleArray71);
        multiDirectional37.setStartConfiguration(doubleArray71);
        multiDirectional32.setStartConfiguration(doubleArray71);
        multiDirectional13.setStartConfiguration(doubleArray71);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int77 = multiDirectional76.getMaxEvaluations();
        multiDirectional76.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker80 = null;
        multiDirectional76.setConvergenceChecker(realConvergenceChecker80);
        double[] doubleArray83 = new double[] { 100.0d };
        multiDirectional76.setStartConfiguration(doubleArray83);
        multiDirectional13.setStartConfiguration(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair86 = multiDirectional0.optimize(multivariateRealFunction11, goalType12, doubleArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker55);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0]");
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1), (double) (-1L));
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        int int13 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker14);
        org.junit.Assert.assertNull(realConvergenceChecker15);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations(0);
        multiDirectional0.setMaxEvaluations(97);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = multiDirectional13.getConvergenceChecker();
        int int15 = multiDirectional13.getEvaluations();
        multiDirectional13.setMaxIterations((int) (short) 1);
        int int18 = multiDirectional13.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int22 = multiDirectional21.getEvaluations();
        int int23 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = null;
        multiDirectional26.setConvergenceChecker(realConvergenceChecker30);
        double[] doubleArray34 = new double[] { 1.0d, 2147483647 };
        multiDirectional26.setStartConfiguration(doubleArray34);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional26.getConvergenceChecker();
        multiDirectional26.setMaxEvaluations((int) (byte) 100);
        multiDirectional26.setMaxIterations(35);
        double[] doubleArray42 = new double[] { 100.0d };
        multiDirectional26.setStartConfiguration(doubleArray42);
        multiDirectional21.setStartConfiguration(doubleArray42);
        multiDirectional13.setStartConfiguration(doubleArray42);
        multiDirectional0.setStartConfiguration(doubleArray42);
        multiDirectional0.setMaxIterations((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertNotNull(realConvergenceChecker14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker36);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]");
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int15 = multiDirectional14.getEvaluations();
        int int16 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        int int21 = multiDirectional19.getIterations();
        int int22 = multiDirectional19.getMaxEvaluations();
        int int23 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxIterations((-1));
        int int26 = multiDirectional19.getMaxIterations();
        int int27 = multiDirectional19.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = null;
        multiDirectional28.setConvergenceChecker(realConvergenceChecker30);
        multiDirectional28.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional36.getConvergenceChecker();
        multiDirectional28.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional19.setConvergenceChecker(realConvergenceChecker37);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxIterations();
        double[] doubleArray45 = new double[] {};
        multiDirectional43.setStartConfiguration(doubleArray45);
        int int47 = multiDirectional43.getMaxEvaluations();
        int int48 = multiDirectional43.getIterations();
        int int49 = multiDirectional43.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = multiDirectional43.getConvergenceChecker();
        multiDirectional42.setConvergenceChecker(realConvergenceChecker50);
        double[] doubleArray52 = new double[] {};
        double[][] doubleArray53 = new double[][] { doubleArray52 };
        multiDirectional42.setStartConfiguration(doubleArray53);
        multiDirectional19.setStartConfiguration(doubleArray53);
        multiDirectional14.setStartConfiguration(doubleArray53);
        multiDirectional0.setStartConfiguration(doubleArray53);
        multiDirectional0.setMaxIterations(0);
        int int60 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = multiDirectional0.getConvergenceChecker();
        int int15 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        int int26 = multiDirectional16.getMaxIterations();
        int int27 = multiDirectional16.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker28);
        multiDirectional16.setMaxIterations((-1));
        multiDirectional16.setMaxEvaluations((int) (short) 10);
        int int34 = multiDirectional16.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxEvaluations();
        int int37 = multiDirectional35.getIterations();
        int int38 = multiDirectional35.getMaxEvaluations();
        int int39 = multiDirectional35.getMaxIterations();
        int int40 = multiDirectional35.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = multiDirectional35.getConvergenceChecker();
        multiDirectional16.setConvergenceChecker(realConvergenceChecker41);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker41);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker41);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0L, (double) 0);
        multiDirectional2.setMaxIterations((int) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        int int12 = multiDirectional0.getIterations();
        int int13 = multiDirectional0.getEvaluations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction14 = null;
        org.apache.commons.math.optimization.GoalType goalType15 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        int int18 = multiDirectional16.getIterations();
        int int19 = multiDirectional16.getMaxEvaluations();
        int int20 = multiDirectional16.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional16.getConvergenceChecker();
        int int22 = multiDirectional16.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, 10.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        int int28 = multiDirectional26.getIterations();
        int int29 = multiDirectional26.getMaxEvaluations();
        int int30 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxIterations((-1));
        int int33 = multiDirectional26.getMaxIterations();
        multiDirectional26.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional38.getConvergenceChecker();
        multiDirectional26.setConvergenceChecker(realConvergenceChecker39);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = null;
        multiDirectional41.setConvergenceChecker(realConvergenceChecker43);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxEvaluations();
        multiDirectional45.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = null;
        multiDirectional45.setConvergenceChecker(realConvergenceChecker49);
        double[] doubleArray53 = new double[] { 1.0d, 2147483647 };
        multiDirectional45.setStartConfiguration(doubleArray53);
        int int55 = multiDirectional45.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxIterations();
        double[] doubleArray58 = new double[] {};
        multiDirectional56.setStartConfiguration(doubleArray58);
        multiDirectional45.setStartConfiguration(doubleArray58);
        multiDirectional41.setStartConfiguration(doubleArray58);
        multiDirectional26.setStartConfiguration(doubleArray58);
        multiDirectional25.setStartConfiguration(doubleArray58);
        multiDirectional16.setStartConfiguration(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair65 = multiDirectional0.optimize(multivariateRealFunction14, goalType15, doubleArray58);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction7 = null;
        org.apache.commons.math.optimization.GoalType goalType8 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker16);
        double[] doubleArray20 = new double[] { 1.0d, 2147483647 };
        multiDirectional12.setStartConfiguration(doubleArray20);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional12.getConvergenceChecker();
        multiDirectional12.setMaxEvaluations((int) (byte) 100);
        int int25 = multiDirectional12.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = null;
        multiDirectional26.setConvergenceChecker(realConvergenceChecker30);
        double[] doubleArray34 = new double[] { 1.0d, 2147483647 };
        multiDirectional26.setStartConfiguration(doubleArray34);
        multiDirectional12.setStartConfiguration(doubleArray34);
        multiDirectional11.setStartConfiguration(doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair38 = multiDirectional0.optimize(multivariateRealFunction7, goalType8, doubleArray34);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        int int13 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker18);
        double[] doubleArray22 = new double[] { 1.0d, 2147483647 };
        multiDirectional14.setStartConfiguration(doubleArray22);
        multiDirectional0.setStartConfiguration(doubleArray22);
        int int25 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations((int) (short) 100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) 0L);
        int int3 = multiDirectional2.getMaxIterations();
        int int4 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional5.setConvergenceChecker(realConvergenceChecker9);
        double[] doubleArray12 = new double[] { 100.0d };
        multiDirectional5.setStartConfiguration(doubleArray12);
        multiDirectional2.setStartConfiguration(doubleArray12);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional15.setConvergenceChecker(realConvergenceChecker17);
        multiDirectional15.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional15.getConvergenceChecker();
        multiDirectional15.setMaxIterations((int) (byte) -1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        int int28 = multiDirectional26.getIterations();
        int int29 = multiDirectional26.getMaxEvaluations();
        int int30 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxIterations((-1));
        int int33 = multiDirectional26.getMaxIterations();
        multiDirectional26.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional38.getConvergenceChecker();
        multiDirectional26.setConvergenceChecker(realConvergenceChecker39);
        multiDirectional24.setConvergenceChecker(realConvergenceChecker39);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = multiDirectional24.getConvergenceChecker();
        int int43 = multiDirectional24.getMaxIterations();
        multiDirectional24.setMaxEvaluations(10);
        multiDirectional24.setMaxEvaluations(100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxEvaluations();
        multiDirectional48.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = null;
        multiDirectional48.setConvergenceChecker(realConvergenceChecker52);
        double[] doubleArray55 = new double[] { 100.0d };
        multiDirectional48.setStartConfiguration(doubleArray55);
        multiDirectional48.setMaxEvaluations(2147483647);
        int int59 = multiDirectional48.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int61 = multiDirectional60.getMaxIterations();
        double[] doubleArray62 = new double[] {};
        multiDirectional60.setStartConfiguration(doubleArray62);
        int int64 = multiDirectional60.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int66 = multiDirectional65.getMaxEvaluations();
        int int67 = multiDirectional65.getIterations();
        int int68 = multiDirectional65.getMaxEvaluations();
        int int69 = multiDirectional65.getMaxEvaluations();
        multiDirectional65.setMaxIterations((-1));
        int int72 = multiDirectional65.getIterations();
        multiDirectional65.setMaxIterations((int) '#');
        multiDirectional65.setMaxEvaluations(0);
        multiDirectional65.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional81 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker82 = multiDirectional81.getConvergenceChecker();
        multiDirectional65.setConvergenceChecker(realConvergenceChecker82);
        multiDirectional60.setConvergenceChecker(realConvergenceChecker82);
        multiDirectional48.setConvergenceChecker(realConvergenceChecker82);
        multiDirectional24.setConvergenceChecker(realConvergenceChecker82);
        multiDirectional15.setConvergenceChecker(realConvergenceChecker82);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker82);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional89 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int90 = multiDirectional89.getMaxEvaluations();
        multiDirectional89.setMaxIterations((int) (byte) 0);
        multiDirectional89.setMaxIterations((int) '#');
        multiDirectional89.setMaxEvaluations((int) ' ');
        int int97 = multiDirectional89.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker98 = multiDirectional89.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker98);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
        org.junit.Assert.assertNotNull(realConvergenceChecker42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2147483647 + "'", int66 == 2147483647);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker82);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2147483647 + "'", int90 == 2147483647);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 35 + "'", int97 == 35);
        org.junit.Assert.assertNotNull(realConvergenceChecker98);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 97, 1.0d);
        multiDirectional2.setMaxIterations((int) (byte) -1);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, (double) 0L);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations(1);
        int int7 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        int int10 = multiDirectional8.getIterations();
        int int11 = multiDirectional8.getMaxEvaluations();
        int int12 = multiDirectional8.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxIterations();
        double[] doubleArray15 = new double[] {};
        multiDirectional13.setStartConfiguration(doubleArray15);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        int int21 = multiDirectional19.getIterations();
        int int22 = multiDirectional19.getMaxEvaluations();
        int int23 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxIterations((-1));
        int int26 = multiDirectional19.getMaxIterations();
        multiDirectional19.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional31.getConvergenceChecker();
        multiDirectional19.setConvergenceChecker(realConvergenceChecker32);
        multiDirectional17.setConvergenceChecker(realConvergenceChecker32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional17.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional17.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional8.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker36);
        int int40 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertNotNull(realConvergenceChecker35);
        org.junit.Assert.assertNotNull(realConvergenceChecker36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        int int9 = multiDirectional0.getMaxEvaluations();
        int int10 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker18);
        double[] doubleArray22 = new double[] { 1.0d, 2147483647 };
        multiDirectional14.setStartConfiguration(doubleArray22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional14.getConvergenceChecker();
        multiDirectional14.setMaxEvaluations((int) (byte) 100);
        int int27 = multiDirectional14.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxEvaluations();
        multiDirectional28.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = null;
        multiDirectional28.setConvergenceChecker(realConvergenceChecker32);
        double[] doubleArray36 = new double[] { 1.0d, 2147483647 };
        multiDirectional28.setStartConfiguration(doubleArray36);
        multiDirectional14.setStartConfiguration(doubleArray36);
        multiDirectional13.setStartConfiguration(doubleArray36);
        multiDirectional0.setStartConfiguration(doubleArray36);
        multiDirectional0.setMaxIterations((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxIterations();
        double[] doubleArray20 = new double[] {};
        multiDirectional18.setStartConfiguration(doubleArray20);
        multiDirectional0.setStartConfiguration(doubleArray20);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getIterations();
        int int31 = multiDirectional23.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional23.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        int int35 = multiDirectional33.getIterations();
        int int36 = multiDirectional33.getMaxEvaluations();
        int int37 = multiDirectional33.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxIterations();
        double[] doubleArray40 = new double[] {};
        multiDirectional38.setStartConfiguration(doubleArray40);
        multiDirectional33.setStartConfiguration(doubleArray40);
        multiDirectional23.setStartConfiguration(doubleArray40);
        multiDirectional0.setStartConfiguration(doubleArray40);
        int int45 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getIterations();
        int int11 = multiDirectional3.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = multiDirectional3.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxIterations();
        double[] doubleArray13 = new double[] {};
        multiDirectional11.setStartConfiguration(doubleArray13);
        multiDirectional0.setStartConfiguration(doubleArray13);
        multiDirectional0.setMaxEvaluations((int) 'a');
        multiDirectional0.setMaxIterations((-1));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxIterations();
        double[] doubleArray8 = new double[] {};
        multiDirectional6.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional6.getMaxEvaluations();
        int int11 = multiDirectional6.getIterations();
        int int12 = multiDirectional6.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional6.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker13);
        double[] doubleArray15 = new double[] {};
        double[][] doubleArray16 = new double[][] { doubleArray15 };
        multiDirectional5.setStartConfiguration(doubleArray16);
        multiDirectional2.setStartConfiguration(doubleArray16);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10.0f, 100.0d);
        int int22 = multiDirectional21.getMaxEvaluations();
        int int23 = multiDirectional21.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional21.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker24);
        int int26 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations((int) (byte) -1);
        multiDirectional0.setMaxEvaluations((int) (short) -1);
        int int11 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations((int) (short) 10);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray18 = new double[] { 1.0d, 2147483647 };
        multiDirectional10.setStartConfiguration(doubleArray18);
        int int20 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxIterations();
        double[] doubleArray23 = new double[] {};
        multiDirectional21.setStartConfiguration(doubleArray23);
        multiDirectional10.setStartConfiguration(doubleArray23);
        multiDirectional0.setStartConfiguration(doubleArray23);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        int int31 = multiDirectional29.getIterations();
        int int32 = multiDirectional29.getMaxEvaluations();
        int int33 = multiDirectional29.getMaxEvaluations();
        multiDirectional29.setMaxIterations((-1));
        int int36 = multiDirectional29.getMaxIterations();
        multiDirectional29.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = multiDirectional41.getConvergenceChecker();
        multiDirectional29.setConvergenceChecker(realConvergenceChecker42);
        multiDirectional27.setConvergenceChecker(realConvergenceChecker42);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = multiDirectional27.getConvergenceChecker();
        int int46 = multiDirectional27.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker47 = multiDirectional27.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker47);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker42);
        org.junit.Assert.assertNotNull(realConvergenceChecker45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker47);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional0.getConvergenceChecker();
        int int6 = multiDirectional0.getIterations();
        int int7 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, (double) 10.0f);
        int int3 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations((int) ' ');
        multiDirectional2.setMaxIterations((int) (short) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        int int13 = multiDirectional11.getIterations();
        int int14 = multiDirectional11.getMaxEvaluations();
        int int15 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxIterations((-1));
        int int18 = multiDirectional11.getIterations();
        multiDirectional11.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = null;
        multiDirectional11.setConvergenceChecker(realConvergenceChecker21);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = null;
        multiDirectional23.setConvergenceChecker(realConvergenceChecker27);
        double[] doubleArray31 = new double[] { 1.0d, 2147483647 };
        multiDirectional23.setStartConfiguration(doubleArray31);
        multiDirectional11.setStartConfiguration(doubleArray31);
        multiDirectional10.setStartConfiguration(doubleArray31);
        multiDirectional2.setStartConfiguration(doubleArray31);
        int int36 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 32 + "'", int36 == 32);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 52, (double) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getIterations();
        int int11 = multiDirectional3.getEvaluations();
        int int12 = multiDirectional3.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional13.setConvergenceChecker(realConvergenceChecker17);
        double[] doubleArray21 = new double[] { 1.0d, 2147483647 };
        multiDirectional13.setStartConfiguration(doubleArray21);
        int int23 = multiDirectional13.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxIterations();
        double[] doubleArray26 = new double[] {};
        multiDirectional24.setStartConfiguration(doubleArray26);
        multiDirectional13.setStartConfiguration(doubleArray26);
        multiDirectional3.setStartConfiguration(doubleArray26);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = multiDirectional3.getConvergenceChecker();
        int int31 = multiDirectional3.getEvaluations();
        int int32 = multiDirectional3.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        int int35 = multiDirectional33.getIterations();
        int int36 = multiDirectional33.getMaxEvaluations();
        int int37 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxIterations((-1));
        int int40 = multiDirectional33.getMaxIterations();
        multiDirectional33.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional45.getConvergenceChecker();
        multiDirectional33.setConvergenceChecker(realConvergenceChecker46);
        int int48 = multiDirectional33.getMaxIterations();
        int int49 = multiDirectional33.getEvaluations();
        int int50 = multiDirectional33.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker51 = multiDirectional33.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int55 = multiDirectional54.getEvaluations();
        int int56 = multiDirectional54.getMaxEvaluations();
        multiDirectional54.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker59 = multiDirectional54.getConvergenceChecker();
        multiDirectional33.setConvergenceChecker(realConvergenceChecker59);
        multiDirectional33.setMaxEvaluations((int) (byte) 100);
        int int63 = multiDirectional33.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int65 = multiDirectional64.getMaxIterations();
        double[] doubleArray66 = new double[] {};
        multiDirectional64.setStartConfiguration(doubleArray66);
        int int68 = multiDirectional64.getMaxEvaluations();
        int int69 = multiDirectional64.getIterations();
        int int70 = multiDirectional64.getMaxEvaluations();
        int int71 = multiDirectional64.getMaxEvaluations();
        multiDirectional64.setMaxEvaluations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional74 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int75 = multiDirectional74.getMaxEvaluations();
        multiDirectional74.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker78 = null;
        multiDirectional74.setConvergenceChecker(realConvergenceChecker78);
        double[] doubleArray81 = new double[] { 100.0d };
        multiDirectional74.setStartConfiguration(doubleArray81);
        multiDirectional64.setStartConfiguration(doubleArray81);
        multiDirectional33.setStartConfiguration(doubleArray81);
        multiDirectional3.setStartConfiguration(doubleArray81);
        multiDirectional2.setStartConfiguration(doubleArray81);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0]");
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxIterations((-1));
        int int16 = multiDirectional9.getMaxIterations();
        multiDirectional9.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional6.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional33.setConvergenceChecker(realConvergenceChecker37);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = null;
        multiDirectional39.setConvergenceChecker(realConvergenceChecker43);
        double[] doubleArray47 = new double[] { 1.0d, 2147483647 };
        multiDirectional39.setStartConfiguration(doubleArray47);
        multiDirectional33.setStartConfiguration(doubleArray47);
        multiDirectional32.setStartConfiguration(doubleArray47);
        multiDirectional29.setStartConfiguration(doubleArray47);
        multiDirectional0.setStartConfiguration(doubleArray47);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNotNull(realConvergenceChecker53);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional2.setMaxEvaluations((int) (byte) 0);
        int int5 = multiDirectional2.getMaxEvaluations();
        int int6 = multiDirectional2.getEvaluations();
        multiDirectional2.setMaxEvaluations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxIterations();
        multiDirectional9.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional9.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 0, (double) 0L);
        multiDirectional2.setMaxIterations(0);
        int int5 = multiDirectional2.getIterations();
        int int6 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        multiDirectional2.setMaxIterations((int) '4');
        int int7 = multiDirectional2.getEvaluations();
        multiDirectional2.setMaxEvaluations((int) (short) -1);
        int int10 = multiDirectional2.getMaxIterations();
        int int11 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxIterations((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxIterations();
        double[] doubleArray20 = new double[] {};
        multiDirectional18.setStartConfiguration(doubleArray20);
        multiDirectional0.setStartConfiguration(doubleArray20);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getIterations();
        int int31 = multiDirectional23.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional23.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        int int35 = multiDirectional33.getIterations();
        int int36 = multiDirectional33.getMaxEvaluations();
        int int37 = multiDirectional33.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxIterations();
        double[] doubleArray40 = new double[] {};
        multiDirectional38.setStartConfiguration(doubleArray40);
        multiDirectional33.setStartConfiguration(doubleArray40);
        multiDirectional23.setStartConfiguration(doubleArray40);
        multiDirectional0.setStartConfiguration(doubleArray40);
        int int45 = multiDirectional0.getMaxEvaluations();
        int int46 = multiDirectional0.getIterations();
        int int47 = multiDirectional0.getIterations();
        multiDirectional0.setMaxEvaluations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxEvaluations();
        multiDirectional50.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = null;
        multiDirectional50.setConvergenceChecker(realConvergenceChecker54);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxEvaluations();
        multiDirectional56.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = null;
        multiDirectional56.setConvergenceChecker(realConvergenceChecker60);
        double[] doubleArray64 = new double[] { 1.0d, 2147483647 };
        multiDirectional56.setStartConfiguration(doubleArray64);
        multiDirectional50.setStartConfiguration(doubleArray64);
        multiDirectional0.setStartConfiguration(doubleArray64);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        int int18 = multiDirectional0.getIterations();
        java.lang.Class<?> wildcardClass19 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        int int6 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        int int11 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = null;
        multiDirectional27.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = null;
        multiDirectional31.setConvergenceChecker(realConvergenceChecker35);
        double[] doubleArray39 = new double[] { 1.0d, 2147483647 };
        multiDirectional31.setStartConfiguration(doubleArray39);
        int int41 = multiDirectional31.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxIterations();
        double[] doubleArray44 = new double[] {};
        multiDirectional42.setStartConfiguration(doubleArray44);
        multiDirectional31.setStartConfiguration(doubleArray44);
        multiDirectional27.setStartConfiguration(doubleArray44);
        multiDirectional12.setStartConfiguration(doubleArray44);
        multiDirectional0.setStartConfiguration(doubleArray44);
        int int50 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
        org.junit.Assert.assertNotNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray18 = new double[] { 1.0d, 2147483647 };
        multiDirectional10.setStartConfiguration(doubleArray18);
        int int20 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxIterations();
        double[] doubleArray23 = new double[] {};
        multiDirectional21.setStartConfiguration(doubleArray23);
        multiDirectional10.setStartConfiguration(doubleArray23);
        multiDirectional0.setStartConfiguration(doubleArray23);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional0.getConvergenceChecker();
        int int28 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        int int31 = multiDirectional29.getIterations();
        int int32 = multiDirectional29.getMaxEvaluations();
        int int33 = multiDirectional29.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional29.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxEvaluations();
        int int37 = multiDirectional35.getIterations();
        int int38 = multiDirectional35.getMaxEvaluations();
        int int39 = multiDirectional35.getMaxEvaluations();
        multiDirectional35.setMaxIterations((-1));
        int int42 = multiDirectional35.getIterations();
        multiDirectional35.setMaxIterations((int) '#');
        multiDirectional35.setMaxEvaluations(0);
        multiDirectional35.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = multiDirectional51.getConvergenceChecker();
        multiDirectional35.setConvergenceChecker(realConvergenceChecker52);
        int int54 = multiDirectional35.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = multiDirectional35.getConvergenceChecker();
        multiDirectional29.setConvergenceChecker(realConvergenceChecker55);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker55);
        int int58 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getIterations();
        multiDirectional5.setMaxIterations((int) '#');
        multiDirectional5.setMaxEvaluations(0);
        multiDirectional5.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional25.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = multiDirectional25.getConvergenceChecker();
        int int32 = multiDirectional25.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = null;
        multiDirectional33.setConvergenceChecker(realConvergenceChecker35);
        multiDirectional33.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxIterations();
        double[] doubleArray41 = new double[] {};
        multiDirectional39.setStartConfiguration(doubleArray41);
        int int43 = multiDirectional39.getMaxEvaluations();
        int int44 = multiDirectional39.getMaxIterations();
        int int45 = multiDirectional39.getMaxIterations();
        multiDirectional39.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxEvaluations();
        int int50 = multiDirectional48.getIterations();
        int int51 = multiDirectional48.getMaxEvaluations();
        int int52 = multiDirectional48.getMaxEvaluations();
        multiDirectional48.setMaxIterations((-1));
        int int55 = multiDirectional48.getMaxIterations();
        int int56 = multiDirectional48.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int58 = multiDirectional57.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker59 = null;
        multiDirectional57.setConvergenceChecker(realConvergenceChecker59);
        multiDirectional57.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker66 = multiDirectional65.getConvergenceChecker();
        multiDirectional57.setConvergenceChecker(realConvergenceChecker66);
        multiDirectional48.setConvergenceChecker(realConvergenceChecker66);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional72 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int73 = multiDirectional72.getMaxIterations();
        double[] doubleArray74 = new double[] {};
        multiDirectional72.setStartConfiguration(doubleArray74);
        int int76 = multiDirectional72.getMaxEvaluations();
        int int77 = multiDirectional72.getIterations();
        int int78 = multiDirectional72.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker79 = multiDirectional72.getConvergenceChecker();
        multiDirectional71.setConvergenceChecker(realConvergenceChecker79);
        double[] doubleArray81 = new double[] {};
        double[][] doubleArray82 = new double[][] { doubleArray81 };
        multiDirectional71.setStartConfiguration(doubleArray82);
        multiDirectional48.setStartConfiguration(doubleArray82);
        multiDirectional39.setStartConfiguration(doubleArray82);
        multiDirectional33.setStartConfiguration(doubleArray82);
        multiDirectional25.setStartConfiguration(doubleArray82);
        multiDirectional0.setStartConfiguration(doubleArray82);
        multiDirectional0.setMaxEvaluations((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker66);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional10.setMaxEvaluations((int) (byte) 1);
        multiDirectional10.setMaxIterations((int) '4');
        int int15 = multiDirectional10.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        int int18 = multiDirectional16.getIterations();
        int int19 = multiDirectional16.getMaxEvaluations();
        int int20 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxIterations((-1));
        int int23 = multiDirectional16.getIterations();
        int int24 = multiDirectional16.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional16.setMaxIterations((int) (byte) -1);
        multiDirectional16.setMaxEvaluations(100);
        int int31 = multiDirectional16.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int35 = multiDirectional34.getEvaluations();
        int int36 = multiDirectional34.getMaxEvaluations();
        multiDirectional34.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        int int41 = multiDirectional39.getIterations();
        int int42 = multiDirectional39.getMaxEvaluations();
        int int43 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxIterations((-1));
        int int46 = multiDirectional39.getMaxIterations();
        int int47 = multiDirectional39.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = null;
        multiDirectional48.setConvergenceChecker(realConvergenceChecker50);
        multiDirectional48.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = multiDirectional56.getConvergenceChecker();
        multiDirectional48.setConvergenceChecker(realConvergenceChecker57);
        multiDirectional39.setConvergenceChecker(realConvergenceChecker57);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional62 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int64 = multiDirectional63.getMaxIterations();
        double[] doubleArray65 = new double[] {};
        multiDirectional63.setStartConfiguration(doubleArray65);
        int int67 = multiDirectional63.getMaxEvaluations();
        int int68 = multiDirectional63.getIterations();
        int int69 = multiDirectional63.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker70 = multiDirectional63.getConvergenceChecker();
        multiDirectional62.setConvergenceChecker(realConvergenceChecker70);
        double[] doubleArray72 = new double[] {};
        double[][] doubleArray73 = new double[][] { doubleArray72 };
        multiDirectional62.setStartConfiguration(doubleArray73);
        multiDirectional39.setStartConfiguration(doubleArray73);
        multiDirectional34.setStartConfiguration(doubleArray73);
        multiDirectional16.setStartConfiguration(doubleArray73);
        multiDirectional10.setStartConfiguration(doubleArray73);
        multiDirectional0.setStartConfiguration(doubleArray73);
        int int80 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker57);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((-1));
        int int11 = multiDirectional4.getMaxIterations();
        int int12 = multiDirectional4.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = null;
        multiDirectional13.setConvergenceChecker(realConvergenceChecker15);
        multiDirectional13.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        int int32 = multiDirectional28.getMaxEvaluations();
        int int33 = multiDirectional28.getIterations();
        int int34 = multiDirectional28.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional28.getConvergenceChecker();
        multiDirectional27.setConvergenceChecker(realConvergenceChecker35);
        double[] doubleArray37 = new double[] {};
        double[][] doubleArray38 = new double[][] { doubleArray37 };
        multiDirectional27.setStartConfiguration(doubleArray38);
        multiDirectional4.setStartConfiguration(doubleArray38);
        multiDirectional2.setStartConfiguration(doubleArray38);
        int int42 = multiDirectional2.getIterations();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker12);
        multiDirectional10.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional18.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker19);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker19);
        int int22 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations(10);
        multiDirectional0.setMaxEvaluations((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100L, (double) 35);
        int int3 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        multiDirectional0.setMaxIterations(0);
        int int6 = multiDirectional0.getEvaluations();
        int int7 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        int int10 = multiDirectional8.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getMaxIterations();
        multiDirectional13.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional25.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional8.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional8.setMaxIterations((int) (short) -1);
        int int32 = multiDirectional8.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = multiDirectional8.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker33);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker33);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 2147483647, (double) 100);
        java.lang.Class<?> wildcardClass3 = multiDirectional2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 97, 100.0d);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        int int4 = multiDirectional2.getIterations();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((-1));
        int int11 = multiDirectional4.getIterations();
        multiDirectional4.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker14);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        multiDirectional4.setStartConfiguration(doubleArray24);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        double[] doubleArray34 = new double[] {};
        multiDirectional32.setStartConfiguration(doubleArray34);
        multiDirectional27.setStartConfiguration(doubleArray34);
        multiDirectional4.setStartConfiguration(doubleArray34);
        multiDirectional2.setStartConfiguration(doubleArray34);
        int int39 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = multiDirectional2.getConvergenceChecker();
        int int41 = multiDirectional2.getMaxEvaluations();
        int int42 = multiDirectional2.getIterations();
        int int43 = multiDirectional2.getIterations();
        int int44 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional0.getConvergenceChecker();
        int int30 = multiDirectional0.getEvaluations();
        int int31 = multiDirectional0.getIterations();
        int int32 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int36 = multiDirectional35.getEvaluations();
        int int37 = multiDirectional35.getMaxEvaluations();
        int int38 = multiDirectional35.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        int int41 = multiDirectional39.getIterations();
        int int42 = multiDirectional39.getMaxEvaluations();
        int int43 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxIterations((-1));
        int int46 = multiDirectional39.getIterations();
        int int47 = multiDirectional39.getEvaluations();
        int int48 = multiDirectional39.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxEvaluations();
        multiDirectional49.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = null;
        multiDirectional49.setConvergenceChecker(realConvergenceChecker53);
        double[] doubleArray57 = new double[] { 1.0d, 2147483647 };
        multiDirectional49.setStartConfiguration(doubleArray57);
        int int59 = multiDirectional49.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int61 = multiDirectional60.getMaxIterations();
        double[] doubleArray62 = new double[] {};
        multiDirectional60.setStartConfiguration(doubleArray62);
        multiDirectional49.setStartConfiguration(doubleArray62);
        multiDirectional39.setStartConfiguration(doubleArray62);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int67 = multiDirectional66.getMaxEvaluations();
        int int68 = multiDirectional66.getIterations();
        int int69 = multiDirectional66.getMaxEvaluations();
        int int70 = multiDirectional66.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int72 = multiDirectional71.getMaxIterations();
        double[] doubleArray73 = new double[] {};
        multiDirectional71.setStartConfiguration(doubleArray73);
        multiDirectional66.setStartConfiguration(doubleArray73);
        multiDirectional39.setStartConfiguration(doubleArray73);
        multiDirectional35.setStartConfiguration(doubleArray73);
        multiDirectional0.setStartConfiguration(doubleArray73);
        multiDirectional0.setMaxIterations(32);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker10);
        int int12 = multiDirectional0.getEvaluations();
        int int13 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (byte) 0);
        multiDirectional2.setMaxEvaluations((-1));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        int int8 = multiDirectional7.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker16);
        double[] doubleArray20 = new double[] { 1.0d, 2147483647 };
        multiDirectional12.setStartConfiguration(doubleArray20);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional12.getConvergenceChecker();
        multiDirectional12.setMaxEvaluations((int) (byte) 100);
        int int25 = multiDirectional12.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = null;
        multiDirectional26.setConvergenceChecker(realConvergenceChecker30);
        double[] doubleArray34 = new double[] { 1.0d, 2147483647 };
        multiDirectional26.setStartConfiguration(doubleArray34);
        multiDirectional12.setStartConfiguration(doubleArray34);
        multiDirectional11.setStartConfiguration(doubleArray34);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = null;
        multiDirectional38.setConvergenceChecker(realConvergenceChecker40);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional42.setConvergenceChecker(realConvergenceChecker46);
        double[] doubleArray50 = new double[] { 1.0d, 2147483647 };
        multiDirectional42.setStartConfiguration(doubleArray50);
        int int52 = multiDirectional42.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxIterations();
        double[] doubleArray55 = new double[] {};
        multiDirectional53.setStartConfiguration(doubleArray55);
        multiDirectional42.setStartConfiguration(doubleArray55);
        multiDirectional38.setStartConfiguration(doubleArray55);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxEvaluations();
        int int61 = multiDirectional59.getIterations();
        int int62 = multiDirectional59.getMaxEvaluations();
        int int63 = multiDirectional59.getMaxEvaluations();
        multiDirectional59.setMaxIterations((-1));
        int int66 = multiDirectional59.getMaxIterations();
        multiDirectional59.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker72 = multiDirectional71.getConvergenceChecker();
        multiDirectional59.setConvergenceChecker(realConvergenceChecker72);
        multiDirectional38.setConvergenceChecker(realConvergenceChecker72);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker72);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker72);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker72);
        multiDirectional2.setMaxIterations((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker72);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxIterations((-1));
        int int16 = multiDirectional9.getMaxIterations();
        multiDirectional9.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional2.getConvergenceChecker();
        int int28 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction29 = null;
        org.apache.commons.math.optimization.GoalType goalType30 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int34 = multiDirectional33.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = null;
        multiDirectional33.setConvergenceChecker(realConvergenceChecker35);
        int int37 = multiDirectional33.getMaxEvaluations();
        int int38 = multiDirectional33.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional42.setConvergenceChecker(realConvergenceChecker46);
        double[] doubleArray50 = new double[] { 1.0d, 2147483647 };
        multiDirectional42.setStartConfiguration(doubleArray50);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = multiDirectional42.getConvergenceChecker();
        multiDirectional42.setMaxEvaluations((int) (byte) 100);
        multiDirectional42.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int58 = multiDirectional57.getMaxEvaluations();
        multiDirectional57.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker61 = null;
        multiDirectional57.setConvergenceChecker(realConvergenceChecker61);
        double[] doubleArray65 = new double[] { 1.0d, 2147483647 };
        multiDirectional57.setStartConfiguration(doubleArray65);
        int int67 = multiDirectional57.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional68 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int69 = multiDirectional68.getMaxIterations();
        double[] doubleArray70 = new double[] {};
        multiDirectional68.setStartConfiguration(doubleArray70);
        multiDirectional57.setStartConfiguration(doubleArray70);
        multiDirectional42.setStartConfiguration(doubleArray70);
        multiDirectional41.setStartConfiguration(doubleArray70);
        int int75 = multiDirectional41.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional78 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional79 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int80 = multiDirectional79.getMaxEvaluations();
        multiDirectional79.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker83 = null;
        multiDirectional79.setConvergenceChecker(realConvergenceChecker83);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional85 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int86 = multiDirectional85.getMaxEvaluations();
        multiDirectional85.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker89 = null;
        multiDirectional85.setConvergenceChecker(realConvergenceChecker89);
        double[] doubleArray93 = new double[] { 1.0d, 2147483647 };
        multiDirectional85.setStartConfiguration(doubleArray93);
        multiDirectional79.setStartConfiguration(doubleArray93);
        multiDirectional78.setStartConfiguration(doubleArray93);
        multiDirectional41.setStartConfiguration(doubleArray93);
        multiDirectional33.setStartConfiguration(doubleArray93);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair99 = multiDirectional2.optimize(multivariateRealFunction29, goalType30, doubleArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker52);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2147483647 + "'", int86 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (short) 0);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int6 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations(1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = null;
        multiDirectional9.setConvergenceChecker(realConvergenceChecker11);
        multiDirectional9.setMaxEvaluations((int) ' ');
        int int15 = multiDirectional9.getEvaluations();
        multiDirectional9.setMaxEvaluations(1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getMaxIterations();
        multiDirectional23.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional35.getConvergenceChecker();
        multiDirectional23.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional21.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional20.setConvergenceChecker(realConvergenceChecker36);
        int int40 = multiDirectional20.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int44 = multiDirectional43.getEvaluations();
        int int45 = multiDirectional43.getMaxEvaluations();
        multiDirectional43.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = multiDirectional43.getConvergenceChecker();
        multiDirectional20.setConvergenceChecker(realConvergenceChecker48);
        multiDirectional9.setConvergenceChecker(realConvergenceChecker48);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker48);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker48);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        double[] doubleArray17 = new double[] {};
        multiDirectional15.setStartConfiguration(doubleArray17);
        multiDirectional4.setStartConfiguration(doubleArray17);
        multiDirectional0.setStartConfiguration(doubleArray17);
        int int21 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional22.getConvergenceChecker();
        multiDirectional22.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional37.getConvergenceChecker();
        multiDirectional22.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker38);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxEvaluations();
        multiDirectional41.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxEvaluations();
        multiDirectional45.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int55 = multiDirectional54.getMaxEvaluations();
        int int56 = multiDirectional54.getIterations();
        int int57 = multiDirectional54.getMaxEvaluations();
        int int58 = multiDirectional54.getMaxEvaluations();
        multiDirectional54.setMaxIterations((-1));
        int int61 = multiDirectional54.getMaxIterations();
        multiDirectional54.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker67 = multiDirectional66.getConvergenceChecker();
        multiDirectional54.setConvergenceChecker(realConvergenceChecker67);
        multiDirectional52.setConvergenceChecker(realConvergenceChecker67);
        multiDirectional51.setConvergenceChecker(realConvergenceChecker67);
        multiDirectional45.setConvergenceChecker(realConvergenceChecker67);
        multiDirectional41.setConvergenceChecker(realConvergenceChecker67);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker67);
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        int int76 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker32);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker67);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxEvaluations();
        multiDirectional15.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = null;
        multiDirectional15.setConvergenceChecker(realConvergenceChecker19);
        double[] doubleArray23 = new double[] { 1.0d, 2147483647 };
        multiDirectional15.setStartConfiguration(doubleArray23);
        int int25 = multiDirectional15.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxIterations();
        double[] doubleArray28 = new double[] {};
        multiDirectional26.setStartConfiguration(doubleArray28);
        multiDirectional15.setStartConfiguration(doubleArray28);
        multiDirectional0.setStartConfiguration(doubleArray28);
        int int32 = multiDirectional0.getMaxEvaluations();
        int int33 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        multiDirectional0.setMaxEvaluations(10);
        int int8 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional7.setConvergenceChecker(realConvergenceChecker9);
        multiDirectional7.setMaxEvaluations((int) ' ');
        int int13 = multiDirectional7.getEvaluations();
        multiDirectional7.setMaxEvaluations(1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        int int23 = multiDirectional21.getIterations();
        int int24 = multiDirectional21.getMaxEvaluations();
        int int25 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxIterations((-1));
        int int28 = multiDirectional21.getMaxIterations();
        multiDirectional21.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional33.getConvergenceChecker();
        multiDirectional21.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional19.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional18.setConvergenceChecker(realConvergenceChecker34);
        int int38 = multiDirectional18.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int42 = multiDirectional41.getEvaluations();
        int int43 = multiDirectional41.getMaxEvaluations();
        multiDirectional41.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional41.getConvergenceChecker();
        multiDirectional18.setConvergenceChecker(realConvergenceChecker46);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker46);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker46);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker46);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        int int18 = multiDirectional16.getIterations();
        int int19 = multiDirectional16.getMaxEvaluations();
        int int20 = multiDirectional16.getMaxIterations();
        int int21 = multiDirectional16.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxIterations((int) (byte) 0);
        int int26 = multiDirectional22.getMaxIterations();
        int int27 = multiDirectional22.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = multiDirectional22.getConvergenceChecker();
        multiDirectional16.setConvergenceChecker(realConvergenceChecker28);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int33 = multiDirectional32.getEvaluations();
        int int34 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxEvaluations();
        multiDirectional37.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = null;
        multiDirectional37.setConvergenceChecker(realConvergenceChecker41);
        double[] doubleArray45 = new double[] { 1.0d, 2147483647 };
        multiDirectional37.setStartConfiguration(doubleArray45);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker47 = multiDirectional37.getConvergenceChecker();
        multiDirectional37.setMaxEvaluations((int) (byte) 100);
        multiDirectional37.setMaxIterations(35);
        double[] doubleArray53 = new double[] { 100.0d };
        multiDirectional37.setStartConfiguration(doubleArray53);
        multiDirectional32.setStartConfiguration(doubleArray53);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional61.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int71 = multiDirectional70.getMaxIterations();
        double[] doubleArray72 = new double[] {};
        multiDirectional70.setStartConfiguration(doubleArray72);
        int int74 = multiDirectional70.getMaxEvaluations();
        int int75 = multiDirectional70.getIterations();
        int int76 = multiDirectional70.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker77 = multiDirectional70.getConvergenceChecker();
        multiDirectional69.setConvergenceChecker(realConvergenceChecker77);
        double[] doubleArray79 = new double[] {};
        double[][] doubleArray80 = new double[][] { doubleArray79 };
        multiDirectional69.setStartConfiguration(doubleArray80);
        multiDirectional66.setStartConfiguration(doubleArray80);
        multiDirectional61.setStartConfiguration(doubleArray80);
        multiDirectional58.setStartConfiguration(doubleArray80);
        multiDirectional32.setStartConfiguration(doubleArray80);
        multiDirectional16.setStartConfiguration(doubleArray80);
        multiDirectional0.setStartConfiguration(doubleArray80);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker47);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional0.getConvergenceChecker();
        int int6 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, 10.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        int int12 = multiDirectional10.getIterations();
        int int13 = multiDirectional10.getMaxEvaluations();
        int int14 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxIterations((-1));
        int int17 = multiDirectional10.getMaxIterations();
        multiDirectional10.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional22.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker23);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker27);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        multiDirectional29.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = null;
        multiDirectional29.setConvergenceChecker(realConvergenceChecker33);
        double[] doubleArray37 = new double[] { 1.0d, 2147483647 };
        multiDirectional29.setStartConfiguration(doubleArray37);
        int int39 = multiDirectional29.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxIterations();
        double[] doubleArray42 = new double[] {};
        multiDirectional40.setStartConfiguration(doubleArray42);
        multiDirectional29.setStartConfiguration(doubleArray42);
        multiDirectional25.setStartConfiguration(doubleArray42);
        multiDirectional10.setStartConfiguration(doubleArray42);
        multiDirectional9.setStartConfiguration(doubleArray42);
        multiDirectional0.setStartConfiguration(doubleArray42);
        int int49 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional16.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker17);
        int int19 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (short) -1);
        int int23 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction24 = null;
        org.apache.commons.math.optimization.GoalType goalType25 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxIterations((int) (byte) 0);
        int int30 = multiDirectional26.getMaxIterations();
        int int31 = multiDirectional26.getMaxIterations();
        int int32 = multiDirectional26.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        int int35 = multiDirectional33.getIterations();
        int int36 = multiDirectional33.getMaxEvaluations();
        int int37 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxIterations((-1));
        int int40 = multiDirectional33.getMaxIterations();
        multiDirectional33.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional45.getConvergenceChecker();
        multiDirectional33.setConvergenceChecker(realConvergenceChecker46);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = null;
        multiDirectional48.setConvergenceChecker(realConvergenceChecker50);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxEvaluations();
        multiDirectional52.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = null;
        multiDirectional52.setConvergenceChecker(realConvergenceChecker56);
        double[] doubleArray60 = new double[] { 1.0d, 2147483647 };
        multiDirectional52.setStartConfiguration(doubleArray60);
        int int62 = multiDirectional52.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int64 = multiDirectional63.getMaxIterations();
        double[] doubleArray65 = new double[] {};
        multiDirectional63.setStartConfiguration(doubleArray65);
        multiDirectional52.setStartConfiguration(doubleArray65);
        multiDirectional48.setStartConfiguration(doubleArray65);
        multiDirectional33.setStartConfiguration(doubleArray65);
        multiDirectional26.setStartConfiguration(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair71 = multiDirectional0.optimize(multivariateRealFunction24, goalType25, doubleArray65);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.FunctionEvaluationException; message: org.apache.commons.math.MaxEvaluationsExceededException: Maximal number of evaluations (-1) exceeded");
        } catch (org.apache.commons.math.FunctionEvaluationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) (short) 10);
        int int3 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = multiDirectional2.getConvergenceChecker();
        int int5 = multiDirectional2.getIterations();
        int int6 = multiDirectional2.getMaxIterations();
        int int7 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional5.setConvergenceChecker(realConvergenceChecker9);
        double[] doubleArray13 = new double[] { 1.0d, 2147483647 };
        multiDirectional5.setStartConfiguration(doubleArray13);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional5.getConvergenceChecker();
        multiDirectional5.setMaxEvaluations((int) (byte) 100);
        multiDirectional5.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional5.getConvergenceChecker();
        int int21 = multiDirectional5.getEvaluations();
        int int22 = multiDirectional5.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getIterations();
        int int31 = multiDirectional23.getEvaluations();
        int int32 = multiDirectional23.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional33.setConvergenceChecker(realConvergenceChecker37);
        double[] doubleArray41 = new double[] { 1.0d, 2147483647 };
        multiDirectional33.setStartConfiguration(doubleArray41);
        int int43 = multiDirectional33.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxIterations();
        double[] doubleArray46 = new double[] {};
        multiDirectional44.setStartConfiguration(doubleArray46);
        multiDirectional33.setStartConfiguration(doubleArray46);
        multiDirectional23.setStartConfiguration(doubleArray46);
        multiDirectional5.setStartConfiguration(doubleArray46);
        multiDirectional2.setStartConfiguration(doubleArray46);
        int int52 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxEvaluations();
        int int55 = multiDirectional53.getIterations();
        int int56 = multiDirectional53.getMaxEvaluations();
        int int57 = multiDirectional53.getMaxEvaluations();
        multiDirectional53.setMaxIterations(1);
        int int60 = multiDirectional53.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int62 = multiDirectional61.getMaxEvaluations();
        int int63 = multiDirectional61.getIterations();
        int int64 = multiDirectional61.getMaxEvaluations();
        int int65 = multiDirectional61.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int67 = multiDirectional66.getMaxIterations();
        double[] doubleArray68 = new double[] {};
        multiDirectional66.setStartConfiguration(doubleArray68);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int71 = multiDirectional70.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional72 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int73 = multiDirectional72.getMaxEvaluations();
        int int74 = multiDirectional72.getIterations();
        int int75 = multiDirectional72.getMaxEvaluations();
        int int76 = multiDirectional72.getMaxEvaluations();
        multiDirectional72.setMaxIterations((-1));
        int int79 = multiDirectional72.getMaxIterations();
        multiDirectional72.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional84 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker85 = multiDirectional84.getConvergenceChecker();
        multiDirectional72.setConvergenceChecker(realConvergenceChecker85);
        multiDirectional70.setConvergenceChecker(realConvergenceChecker85);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker88 = multiDirectional70.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker89 = multiDirectional70.getConvergenceChecker();
        multiDirectional66.setConvergenceChecker(realConvergenceChecker89);
        multiDirectional61.setConvergenceChecker(realConvergenceChecker89);
        multiDirectional53.setConvergenceChecker(realConvergenceChecker89);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker89);
        java.lang.Class<?> wildcardClass94 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertNull(realConvergenceChecker20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker85);
        org.junit.Assert.assertNotNull(realConvergenceChecker88);
        org.junit.Assert.assertNotNull(realConvergenceChecker89);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        int int8 = multiDirectional0.getMaxIterations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction10 = null;
        org.apache.commons.math.optimization.GoalType goalType11 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getIterations();
        int int20 = multiDirectional12.getEvaluations();
        int int21 = multiDirectional12.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        int int32 = multiDirectional22.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxIterations();
        double[] doubleArray35 = new double[] {};
        multiDirectional33.setStartConfiguration(doubleArray35);
        multiDirectional22.setStartConfiguration(doubleArray35);
        multiDirectional12.setStartConfiguration(doubleArray35);
        int int39 = multiDirectional12.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        multiDirectional40.setMaxIterations((int) (byte) 0);
        multiDirectional40.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional40.getConvergenceChecker();
        multiDirectional40.setMaxIterations((int) (byte) -1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxEvaluations();
        multiDirectional49.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = null;
        multiDirectional49.setConvergenceChecker(realConvergenceChecker53);
        double[] doubleArray57 = new double[] { 1.0d, 2147483647 };
        multiDirectional49.setStartConfiguration(doubleArray57);
        multiDirectional49.setMaxIterations((int) (byte) 100);
        int int61 = multiDirectional49.getMaxEvaluations();
        int int62 = multiDirectional49.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int64 = multiDirectional63.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker65 = null;
        multiDirectional63.setConvergenceChecker(realConvergenceChecker65);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxEvaluations();
        multiDirectional67.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = null;
        multiDirectional67.setConvergenceChecker(realConvergenceChecker71);
        double[] doubleArray75 = new double[] { 1.0d, 2147483647 };
        multiDirectional67.setStartConfiguration(doubleArray75);
        int int77 = multiDirectional67.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional78 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int79 = multiDirectional78.getMaxIterations();
        double[] doubleArray80 = new double[] {};
        multiDirectional78.setStartConfiguration(doubleArray80);
        multiDirectional67.setStartConfiguration(doubleArray80);
        multiDirectional63.setStartConfiguration(doubleArray80);
        multiDirectional49.setStartConfiguration(doubleArray80);
        multiDirectional40.setStartConfiguration(doubleArray80);
        multiDirectional12.setStartConfiguration(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair87 = multiDirectional0.optimize(multivariateRealFunction10, goalType11, doubleArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2147483647 + "'", int79 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        int int20 = multiDirectional18.getIterations();
        int int21 = multiDirectional18.getMaxEvaluations();
        int int22 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxIterations((-1));
        int int25 = multiDirectional18.getIterations();
        multiDirectional18.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker28);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = null;
        multiDirectional30.setConvergenceChecker(realConvergenceChecker34);
        double[] doubleArray38 = new double[] { 1.0d, 2147483647 };
        multiDirectional30.setStartConfiguration(doubleArray38);
        multiDirectional18.setStartConfiguration(doubleArray38);
        multiDirectional17.setStartConfiguration(doubleArray38);
        multiDirectional0.setStartConfiguration(doubleArray38);
        multiDirectional0.setMaxIterations(97);
        int int45 = multiDirectional0.getMaxEvaluations();
        int int46 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional15.setConvergenceChecker(realConvergenceChecker17);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = null;
        multiDirectional19.setConvergenceChecker(realConvergenceChecker23);
        double[] doubleArray27 = new double[] { 1.0d, 2147483647 };
        multiDirectional19.setStartConfiguration(doubleArray27);
        int int29 = multiDirectional19.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxIterations();
        double[] doubleArray32 = new double[] {};
        multiDirectional30.setStartConfiguration(doubleArray32);
        multiDirectional19.setStartConfiguration(doubleArray32);
        multiDirectional15.setStartConfiguration(doubleArray32);
        multiDirectional0.setStartConfiguration(doubleArray32);
        int int37 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 100);
        multiDirectional0.setMaxEvaluations(100);
        multiDirectional0.setMaxIterations(2147483647);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 100, (double) 52);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 10, 1.0d);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getMaxEvaluations();
        int int15 = multiDirectional0.getMaxEvaluations();
        int int16 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional19.setMaxIterations(2147483647);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional19.getConvergenceChecker();
        multiDirectional19.setMaxIterations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        multiDirectional27.setMaxEvaluations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        int int32 = multiDirectional30.getIterations();
        int int33 = multiDirectional30.getMaxEvaluations();
        int int34 = multiDirectional30.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional30.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        int int38 = multiDirectional36.getIterations();
        int int39 = multiDirectional36.getMaxEvaluations();
        int int40 = multiDirectional36.getMaxEvaluations();
        multiDirectional36.setMaxIterations((-1));
        int int43 = multiDirectional36.getIterations();
        multiDirectional36.setMaxIterations((int) '#');
        multiDirectional36.setMaxEvaluations(0);
        multiDirectional36.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = multiDirectional52.getConvergenceChecker();
        multiDirectional36.setConvergenceChecker(realConvergenceChecker53);
        int int55 = multiDirectional36.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = multiDirectional36.getConvergenceChecker();
        multiDirectional30.setConvergenceChecker(realConvergenceChecker56);
        multiDirectional27.setConvergenceChecker(realConvergenceChecker56);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker59 = multiDirectional27.getConvergenceChecker();
        multiDirectional19.setConvergenceChecker(realConvergenceChecker59);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker59);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker56);
        org.junit.Assert.assertNotNull(realConvergenceChecker59);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 1, (double) 1);
        multiDirectional2.setMaxIterations(1);
        int int5 = multiDirectional2.getEvaluations();
        multiDirectional2.setMaxIterations(0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getIterations();
        multiDirectional3.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker13);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxEvaluations();
        multiDirectional15.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = null;
        multiDirectional15.setConvergenceChecker(realConvergenceChecker19);
        double[] doubleArray23 = new double[] { 1.0d, 2147483647 };
        multiDirectional15.setStartConfiguration(doubleArray23);
        multiDirectional3.setStartConfiguration(doubleArray23);
        multiDirectional2.setStartConfiguration(doubleArray23);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        multiDirectional27.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = null;
        multiDirectional27.setConvergenceChecker(realConvergenceChecker31);
        double[] doubleArray35 = new double[] { 1.0d, 2147483647 };
        multiDirectional27.setStartConfiguration(doubleArray35);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional27.getConvergenceChecker();
        multiDirectional27.setMaxEvaluations((int) (byte) 100);
        multiDirectional27.setMaxIterations(35);
        multiDirectional27.setMaxIterations(100);
        multiDirectional27.setMaxIterations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxEvaluations();
        int int48 = multiDirectional46.getIterations();
        int int49 = multiDirectional46.getMaxEvaluations();
        int int50 = multiDirectional46.getMaxEvaluations();
        multiDirectional46.setMaxIterations((-1));
        int int53 = multiDirectional46.getMaxIterations();
        int int54 = multiDirectional46.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = null;
        multiDirectional55.setConvergenceChecker(realConvergenceChecker57);
        multiDirectional55.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = multiDirectional63.getConvergenceChecker();
        multiDirectional55.setConvergenceChecker(realConvergenceChecker64);
        multiDirectional46.setConvergenceChecker(realConvergenceChecker64);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int71 = multiDirectional70.getMaxIterations();
        double[] doubleArray72 = new double[] {};
        multiDirectional70.setStartConfiguration(doubleArray72);
        int int74 = multiDirectional70.getMaxEvaluations();
        int int75 = multiDirectional70.getIterations();
        int int76 = multiDirectional70.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker77 = multiDirectional70.getConvergenceChecker();
        multiDirectional69.setConvergenceChecker(realConvergenceChecker77);
        double[] doubleArray79 = new double[] {};
        double[][] doubleArray80 = new double[][] { doubleArray79 };
        multiDirectional69.setStartConfiguration(doubleArray80);
        multiDirectional46.setStartConfiguration(doubleArray80);
        multiDirectional27.setStartConfiguration(doubleArray80);
        multiDirectional2.setStartConfiguration(doubleArray80);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker85 = multiDirectional2.getConvergenceChecker();
        int int86 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker37);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(realConvergenceChecker85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        int int8 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations(1);
        int int11 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10.0f, (double) (short) 1);
        multiDirectional2.setMaxIterations((int) (byte) 100);
        int int5 = multiDirectional2.getEvaluations();
        int int6 = multiDirectional2.getMaxEvaluations();
        java.lang.Class<?> wildcardClass7 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10.0f, (double) (short) 1);
        multiDirectional2.setMaxIterations((int) (byte) 100);
        int int5 = multiDirectional2.getEvaluations();
        int int6 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction7 = null;
        org.apache.commons.math.optimization.GoalType goalType8 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxIterations((-1));
        int int16 = multiDirectional9.getIterations();
        int int17 = multiDirectional9.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        int int20 = multiDirectional18.getIterations();
        int int21 = multiDirectional18.getMaxEvaluations();
        int int22 = multiDirectional18.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxIterations();
        double[] doubleArray25 = new double[] {};
        multiDirectional23.setStartConfiguration(doubleArray25);
        multiDirectional18.setStartConfiguration(doubleArray25);
        multiDirectional9.setStartConfiguration(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair29 = multiDirectional2.optimize(multivariateRealFunction7, goalType8, doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        int int9 = multiDirectional0.getMaxIterations();
        int int10 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        double[] doubleArray16 = new double[] {};
        multiDirectional14.setStartConfiguration(doubleArray16);
        int int18 = multiDirectional14.getMaxEvaluations();
        int int19 = multiDirectional14.getIterations();
        int int20 = multiDirectional14.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional14.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker21);
        double[] doubleArray23 = new double[] {};
        double[][] doubleArray24 = new double[][] { doubleArray23 };
        multiDirectional13.setStartConfiguration(doubleArray24);
        multiDirectional0.setStartConfiguration(doubleArray24);
        double[][] doubleArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiDirectional0.setStartConfiguration(doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100.0f, (double) 2147483647);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker16);
        int int18 = multiDirectional3.getMaxIterations();
        int int19 = multiDirectional3.getEvaluations();
        int int20 = multiDirectional3.getMaxEvaluations();
        int int21 = multiDirectional3.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional3.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional3.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker23);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker29);
        double[] doubleArray33 = new double[] { 1.0d, 2147483647 };
        multiDirectional25.setStartConfiguration(doubleArray33);
        int int35 = multiDirectional25.getMaxIterations();
        int int36 = multiDirectional25.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional25.setMaxIterations((int) (byte) -1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = multiDirectional43.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxEvaluations();
        multiDirectional45.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = null;
        multiDirectional45.setConvergenceChecker(realConvergenceChecker49);
        double[] doubleArray53 = new double[] { 1.0d, 2147483647 };
        multiDirectional45.setStartConfiguration(doubleArray53);
        multiDirectional45.setMaxIterations((int) (byte) 100);
        int int57 = multiDirectional45.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional60.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional68 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int70 = multiDirectional69.getMaxIterations();
        double[] doubleArray71 = new double[] {};
        multiDirectional69.setStartConfiguration(doubleArray71);
        int int73 = multiDirectional69.getMaxEvaluations();
        int int74 = multiDirectional69.getIterations();
        int int75 = multiDirectional69.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker76 = multiDirectional69.getConvergenceChecker();
        multiDirectional68.setConvergenceChecker(realConvergenceChecker76);
        double[] doubleArray78 = new double[] {};
        double[][] doubleArray79 = new double[][] { doubleArray78 };
        multiDirectional68.setStartConfiguration(doubleArray79);
        multiDirectional65.setStartConfiguration(doubleArray79);
        multiDirectional60.setStartConfiguration(doubleArray79);
        multiDirectional45.setStartConfiguration(doubleArray79);
        multiDirectional43.setStartConfiguration(doubleArray79);
        multiDirectional25.setStartConfiguration(doubleArray79);
        multiDirectional2.setStartConfiguration(doubleArray79);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker87 = multiDirectional2.getConvergenceChecker();
        int int88 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(realConvergenceChecker87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2147483647 + "'", int88 == 2147483647);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker12);
        multiDirectional10.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional18.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker19);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker19);
        int int22 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getIterations();
        int int31 = multiDirectional23.getEvaluations();
        int int32 = multiDirectional23.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional33.setConvergenceChecker(realConvergenceChecker37);
        double[] doubleArray41 = new double[] { 1.0d, 2147483647 };
        multiDirectional33.setStartConfiguration(doubleArray41);
        int int43 = multiDirectional33.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxIterations();
        double[] doubleArray46 = new double[] {};
        multiDirectional44.setStartConfiguration(doubleArray46);
        multiDirectional33.setStartConfiguration(doubleArray46);
        multiDirectional23.setStartConfiguration(doubleArray46);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = multiDirectional23.getConvergenceChecker();
        int int51 = multiDirectional23.getEvaluations();
        int int52 = multiDirectional23.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = multiDirectional23.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker53);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker53);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        multiDirectional0.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int19 = multiDirectional18.getEvaluations();
        int int20 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getMaxIterations();
        int int31 = multiDirectional23.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = null;
        multiDirectional32.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional32.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = multiDirectional40.getConvergenceChecker();
        multiDirectional32.setConvergenceChecker(realConvergenceChecker41);
        multiDirectional23.setConvergenceChecker(realConvergenceChecker41);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxIterations();
        double[] doubleArray49 = new double[] {};
        multiDirectional47.setStartConfiguration(doubleArray49);
        int int51 = multiDirectional47.getMaxEvaluations();
        int int52 = multiDirectional47.getIterations();
        int int53 = multiDirectional47.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = multiDirectional47.getConvergenceChecker();
        multiDirectional46.setConvergenceChecker(realConvergenceChecker54);
        double[] doubleArray56 = new double[] {};
        double[][] doubleArray57 = new double[][] { doubleArray56 };
        multiDirectional46.setStartConfiguration(doubleArray57);
        multiDirectional23.setStartConfiguration(doubleArray57);
        multiDirectional18.setStartConfiguration(doubleArray57);
        multiDirectional0.setStartConfiguration(doubleArray57);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1L, 1.0d);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        int int31 = multiDirectional29.getIterations();
        int int32 = multiDirectional29.getMaxEvaluations();
        int int33 = multiDirectional29.getMaxEvaluations();
        multiDirectional29.setMaxIterations((-1));
        int int36 = multiDirectional29.getIterations();
        multiDirectional29.setMaxIterations((int) '#');
        multiDirectional29.setMaxEvaluations(0);
        multiDirectional29.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional45.getConvergenceChecker();
        multiDirectional29.setConvergenceChecker(realConvergenceChecker46);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker46);
        int int49 = multiDirectional0.getMaxIterations();
        int int50 = multiDirectional0.getMaxEvaluations();
        int int51 = multiDirectional0.getEvaluations();
        int int52 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional0.getConvergenceChecker();
        int int30 = multiDirectional0.getEvaluations();
        int int31 = multiDirectional0.getIterations();
        int int32 = multiDirectional0.getIterations();
        java.lang.Class<?> wildcardClass33 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) ' ');
        int int10 = multiDirectional0.getMaxEvaluations();
        int int11 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int15 = multiDirectional14.getMaxEvaluations();
        int int16 = multiDirectional14.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxEvaluations();
        multiDirectional17.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = null;
        multiDirectional17.setConvergenceChecker(realConvergenceChecker21);
        double[] doubleArray24 = new double[] { 100.0d };
        multiDirectional17.setStartConfiguration(doubleArray24);
        multiDirectional14.setStartConfiguration(doubleArray24);
        multiDirectional0.setStartConfiguration(doubleArray24);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0]");
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        int int4 = multiDirectional0.getMaxIterations();
        int int5 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        int int7 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations((int) (short) -1);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, (double) 100.0f);
        multiDirectional2.setMaxEvaluations(52);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations(1);
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxIterations();
        double[] doubleArray7 = new double[] {};
        multiDirectional5.setStartConfiguration(doubleArray7);
        multiDirectional0.setStartConfiguration(doubleArray7);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxIterations();
        double[] doubleArray12 = new double[] {};
        multiDirectional10.setStartConfiguration(doubleArray12);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        int int18 = multiDirectional16.getIterations();
        int int19 = multiDirectional16.getMaxEvaluations();
        int int20 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxIterations((-1));
        int int23 = multiDirectional16.getMaxIterations();
        multiDirectional16.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional28.getConvergenceChecker();
        multiDirectional16.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional14.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional14.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = multiDirectional14.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker33);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker33);
        int int36 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(0);
        int int39 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertNotNull(realConvergenceChecker33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker7);
        double[] doubleArray11 = new double[] { 1.0d, 2147483647 };
        multiDirectional3.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional3.getConvergenceChecker();
        multiDirectional3.setMaxEvaluations((int) (byte) 100);
        multiDirectional3.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker22);
        double[] doubleArray26 = new double[] { 1.0d, 2147483647 };
        multiDirectional18.setStartConfiguration(doubleArray26);
        int int28 = multiDirectional18.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxIterations();
        double[] doubleArray31 = new double[] {};
        multiDirectional29.setStartConfiguration(doubleArray31);
        multiDirectional18.setStartConfiguration(doubleArray31);
        multiDirectional3.setStartConfiguration(doubleArray31);
        multiDirectional2.setStartConfiguration(doubleArray31);
        int int36 = multiDirectional2.getMaxEvaluations();
        int int37 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker16);
        int int18 = multiDirectional3.getMaxIterations();
        int int19 = multiDirectional3.getEvaluations();
        int int20 = multiDirectional3.getMaxEvaluations();
        int int21 = multiDirectional3.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional3.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional3.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker23);
        int int25 = multiDirectional2.getMaxEvaluations();
        int int26 = multiDirectional2.getMaxEvaluations();
        int int27 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) ' ');
        int int3 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = multiDirectional2.getConvergenceChecker();
        int int5 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int6 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations(1);
        int int9 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction10 = null;
        org.apache.commons.math.optimization.GoalType goalType11 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxIterations();
        double[] doubleArray20 = new double[] {};
        multiDirectional18.setStartConfiguration(doubleArray20);
        int int22 = multiDirectional18.getMaxEvaluations();
        int int23 = multiDirectional18.getIterations();
        int int24 = multiDirectional18.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional18.getConvergenceChecker();
        multiDirectional17.setConvergenceChecker(realConvergenceChecker25);
        double[] doubleArray27 = new double[] {};
        double[][] doubleArray28 = new double[][] { doubleArray27 };
        multiDirectional17.setStartConfiguration(doubleArray28);
        multiDirectional14.setStartConfiguration(doubleArray28);
        double[] doubleArray35 = new double[] { 100L, (-1), 1.0f, 10 };
        multiDirectional14.setStartConfiguration(doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair37 = multiDirectional0.optimize(multivariateRealFunction10, goalType11, doubleArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, -1.0, 1.0, 10.0]");
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        multiDirectional0.setMaxEvaluations(2147483647);
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxIterations();
        double[] doubleArray14 = new double[] {};
        multiDirectional12.setStartConfiguration(doubleArray14);
        int int16 = multiDirectional12.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxEvaluations();
        int int19 = multiDirectional17.getIterations();
        int int20 = multiDirectional17.getMaxEvaluations();
        int int21 = multiDirectional17.getMaxEvaluations();
        multiDirectional17.setMaxIterations((-1));
        int int24 = multiDirectional17.getIterations();
        multiDirectional17.setMaxIterations((int) '#');
        multiDirectional17.setMaxEvaluations(0);
        multiDirectional17.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional33.getConvergenceChecker();
        multiDirectional17.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional12.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional0.setMaxEvaluations((int) (byte) 0);
        int int40 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(100.0d, (double) (-1.0f));
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getIterations();
        int int15 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        int int21 = multiDirectional19.getIterations();
        int int22 = multiDirectional19.getMaxEvaluations();
        int int23 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxIterations((-1));
        int int26 = multiDirectional19.getMaxIterations();
        multiDirectional19.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional31.getConvergenceChecker();
        multiDirectional19.setConvergenceChecker(realConvergenceChecker32);
        int int34 = multiDirectional19.getMaxIterations();
        int int35 = multiDirectional19.getEvaluations();
        int int36 = multiDirectional19.getMaxEvaluations();
        int int37 = multiDirectional19.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional19.getConvergenceChecker();
        multiDirectional18.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker38);
        int int41 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker42);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getMaxEvaluations();
        int int3 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) (byte) 1);
        multiDirectional6.setMaxEvaluations(1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional6.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker9);
        int int11 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2147483647 + "'", int2 == 2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0L, (double) 1);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getIterations();
        double[] doubleArray11 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional0.setStartConfiguration(doubleArray11);
        int int13 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        int int12 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction14 = null;
        org.apache.commons.math.optimization.GoalType goalType15 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        int int26 = multiDirectional16.getMaxIterations();
        int int27 = multiDirectional16.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker28);
        multiDirectional16.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional34.setMaxEvaluations((int) (byte) 0);
        double[] doubleArray39 = new double[] { (-1.0f), ' ' };
        multiDirectional34.setStartConfiguration(doubleArray39);
        multiDirectional16.setStartConfiguration(doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair42 = multiDirectional0.optimize(multivariateRealFunction14, goalType15, doubleArray39);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.FunctionEvaluationException; message: org.apache.commons.math.MaxEvaluationsExceededException: Maximal number of evaluations (0) exceeded");
        } catch (org.apache.commons.math.FunctionEvaluationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 32.0]");
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        int int9 = multiDirectional0.getMaxIterations();
        int int10 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        double[] doubleArray16 = new double[] {};
        multiDirectional14.setStartConfiguration(doubleArray16);
        int int18 = multiDirectional14.getMaxEvaluations();
        int int19 = multiDirectional14.getIterations();
        int int20 = multiDirectional14.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional14.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker21);
        double[] doubleArray23 = new double[] {};
        double[][] doubleArray24 = new double[][] { doubleArray23 };
        multiDirectional13.setStartConfiguration(doubleArray24);
        multiDirectional0.setStartConfiguration(doubleArray24);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction27 = null;
        org.apache.commons.math.optimization.GoalType goalType28 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        multiDirectional31.setMaxEvaluations(2147483647);
        multiDirectional31.setMaxEvaluations((int) '#');
        int int36 = multiDirectional31.getIterations();
        int int37 = multiDirectional31.getEvaluations();
        multiDirectional31.setMaxEvaluations((int) '#');
        int int40 = multiDirectional31.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        int int44 = multiDirectional43.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxEvaluations();
        int int47 = multiDirectional45.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxEvaluations();
        int int52 = multiDirectional50.getIterations();
        int int53 = multiDirectional50.getMaxEvaluations();
        int int54 = multiDirectional50.getMaxEvaluations();
        multiDirectional50.setMaxIterations((-1));
        int int57 = multiDirectional50.getMaxIterations();
        multiDirectional50.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional62 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker63 = multiDirectional62.getConvergenceChecker();
        multiDirectional50.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional48.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional45.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional43.setConvergenceChecker(realConvergenceChecker63);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker68 = multiDirectional43.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (short) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional74 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int75 = multiDirectional74.getMaxEvaluations();
        int int76 = multiDirectional74.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional77 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int78 = multiDirectional77.getMaxEvaluations();
        multiDirectional77.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker81 = null;
        multiDirectional77.setConvergenceChecker(realConvergenceChecker81);
        double[] doubleArray84 = new double[] { 100.0d };
        multiDirectional77.setStartConfiguration(doubleArray84);
        multiDirectional74.setStartConfiguration(doubleArray84);
        multiDirectional71.setStartConfiguration(doubleArray84);
        multiDirectional43.setStartConfiguration(doubleArray84);
        multiDirectional31.setStartConfiguration(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair90 = multiDirectional0.optimize(multivariateRealFunction27, goalType28, doubleArray84);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker63);
        org.junit.Assert.assertNotNull(realConvergenceChecker68);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0]");
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 1, (double) 32);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getMaxIterations();
        multiDirectional13.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional25.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker26);
        int int32 = multiDirectional0.getMaxIterations();
        int int33 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations((int) '#');
        int int36 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 1);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxIterations(35);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker15);
        multiDirectional0.setMaxIterations((int) ' ');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional5.setConvergenceChecker(realConvergenceChecker9);
        double[] doubleArray13 = new double[] { 1.0d, 2147483647 };
        multiDirectional5.setStartConfiguration(doubleArray13);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional5.getConvergenceChecker();
        multiDirectional5.setMaxEvaluations((int) (byte) 100);
        multiDirectional5.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional5.getConvergenceChecker();
        int int21 = multiDirectional5.getEvaluations();
        int int22 = multiDirectional5.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getIterations();
        int int31 = multiDirectional23.getEvaluations();
        int int32 = multiDirectional23.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional33.setConvergenceChecker(realConvergenceChecker37);
        double[] doubleArray41 = new double[] { 1.0d, 2147483647 };
        multiDirectional33.setStartConfiguration(doubleArray41);
        int int43 = multiDirectional33.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxIterations();
        double[] doubleArray46 = new double[] {};
        multiDirectional44.setStartConfiguration(doubleArray46);
        multiDirectional33.setStartConfiguration(doubleArray46);
        multiDirectional23.setStartConfiguration(doubleArray46);
        multiDirectional5.setStartConfiguration(doubleArray46);
        multiDirectional2.setStartConfiguration(doubleArray46);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxIterations();
        double[] doubleArray54 = new double[] {};
        multiDirectional52.setStartConfiguration(doubleArray54);
        int int56 = multiDirectional52.getMaxEvaluations();
        int int57 = multiDirectional52.getMaxIterations();
        int int58 = multiDirectional52.getMaxIterations();
        multiDirectional52.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker61 = multiDirectional52.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker61);
        java.lang.Class<?> wildcardClass63 = realConvergenceChecker61.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertNull(realConvergenceChecker20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker61);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional5.setConvergenceChecker(realConvergenceChecker9);
        double[] doubleArray12 = new double[] { 100.0d };
        multiDirectional5.setStartConfiguration(doubleArray12);
        multiDirectional2.setStartConfiguration(doubleArray12);
        int int15 = multiDirectional2.getMaxIterations();
        int int16 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getMaxIterations();
        multiDirectional13.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional25.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker26);
        int int32 = multiDirectional0.getMaxIterations();
        int int33 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int35 = multiDirectional34.getMaxEvaluations();
        int int36 = multiDirectional34.getIterations();
        int int37 = multiDirectional34.getMaxEvaluations();
        int int38 = multiDirectional34.getMaxEvaluations();
        multiDirectional34.setMaxIterations((-1));
        int int41 = multiDirectional34.getMaxIterations();
        multiDirectional34.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker47 = multiDirectional46.getConvergenceChecker();
        multiDirectional34.setConvergenceChecker(realConvergenceChecker47);
        int int49 = multiDirectional34.getMaxIterations();
        int int50 = multiDirectional34.getEvaluations();
        int int51 = multiDirectional34.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = multiDirectional34.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int56 = multiDirectional55.getEvaluations();
        int int57 = multiDirectional55.getMaxEvaluations();
        multiDirectional55.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = multiDirectional55.getConvergenceChecker();
        multiDirectional34.setConvergenceChecker(realConvergenceChecker60);
        multiDirectional34.setMaxEvaluations((int) (byte) 100);
        int int64 = multiDirectional34.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int66 = multiDirectional65.getMaxIterations();
        double[] doubleArray67 = new double[] {};
        multiDirectional65.setStartConfiguration(doubleArray67);
        int int69 = multiDirectional65.getMaxEvaluations();
        int int70 = multiDirectional65.getIterations();
        int int71 = multiDirectional65.getMaxEvaluations();
        int int72 = multiDirectional65.getMaxEvaluations();
        multiDirectional65.setMaxEvaluations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxEvaluations();
        multiDirectional75.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker79 = null;
        multiDirectional75.setConvergenceChecker(realConvergenceChecker79);
        double[] doubleArray82 = new double[] { 100.0d };
        multiDirectional75.setStartConfiguration(doubleArray82);
        multiDirectional65.setStartConfiguration(doubleArray82);
        multiDirectional34.setStartConfiguration(doubleArray82);
        multiDirectional0.setStartConfiguration(doubleArray82);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2147483647 + "'", int66 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0]");
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setMaxIterations(100);
        multiDirectional0.setMaxEvaluations((int) (short) 100);
        int int33 = multiDirectional0.getMaxEvaluations();
        int int34 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1), (double) (-1));
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional8.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker9);
        multiDirectional0.setMaxEvaluations(32);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) (byte) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxEvaluations(0);
        int int7 = multiDirectional3.getIterations();
        multiDirectional3.setMaxIterations((int) (byte) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker16);
        double[] doubleArray19 = new double[] { 100.0d };
        multiDirectional12.setStartConfiguration(doubleArray19);
        int int21 = multiDirectional12.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        int int26 = multiDirectional24.getIterations();
        int int27 = multiDirectional24.getMaxEvaluations();
        int int28 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxIterations((-1));
        int int31 = multiDirectional24.getMaxIterations();
        multiDirectional24.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional36.getConvergenceChecker();
        multiDirectional24.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional22.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional12.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional12.setMaxIterations(100);
        multiDirectional12.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional47.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxIterations();
        double[] doubleArray58 = new double[] {};
        multiDirectional56.setStartConfiguration(doubleArray58);
        int int60 = multiDirectional56.getMaxEvaluations();
        int int61 = multiDirectional56.getIterations();
        int int62 = multiDirectional56.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker63 = multiDirectional56.getConvergenceChecker();
        multiDirectional55.setConvergenceChecker(realConvergenceChecker63);
        double[] doubleArray65 = new double[] {};
        double[][] doubleArray66 = new double[][] { doubleArray65 };
        multiDirectional55.setStartConfiguration(doubleArray66);
        multiDirectional52.setStartConfiguration(doubleArray66);
        multiDirectional47.setStartConfiguration(doubleArray66);
        multiDirectional12.setStartConfiguration(doubleArray66);
        multiDirectional3.setStartConfiguration(doubleArray66);
        multiDirectional2.setStartConfiguration(doubleArray66);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker37);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10.0f, (-1.0d));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker16);
        int int18 = multiDirectional3.getMaxIterations();
        int int19 = multiDirectional3.getEvaluations();
        int int20 = multiDirectional3.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional3.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int25 = multiDirectional24.getEvaluations();
        int int26 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional24.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = null;
        multiDirectional31.setConvergenceChecker(realConvergenceChecker33);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxEvaluations();
        multiDirectional35.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = null;
        multiDirectional35.setConvergenceChecker(realConvergenceChecker39);
        double[] doubleArray43 = new double[] { 1.0d, 2147483647 };
        multiDirectional35.setStartConfiguration(doubleArray43);
        int int45 = multiDirectional35.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxIterations();
        double[] doubleArray48 = new double[] {};
        multiDirectional46.setStartConfiguration(doubleArray48);
        multiDirectional35.setStartConfiguration(doubleArray48);
        multiDirectional31.setStartConfiguration(doubleArray48);
        multiDirectional3.setStartConfiguration(doubleArray48);
        multiDirectional2.setStartConfiguration(doubleArray48);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        double[] doubleArray17 = new double[] {};
        multiDirectional15.setStartConfiguration(doubleArray17);
        multiDirectional4.setStartConfiguration(doubleArray17);
        multiDirectional0.setStartConfiguration(doubleArray17);
        int int21 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional22.getConvergenceChecker();
        multiDirectional22.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional37.getConvergenceChecker();
        multiDirectional22.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker38);
        int int41 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) -1);
        int int44 = multiDirectional0.getEvaluations();
        java.lang.Class<?> wildcardClass45 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker32);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        int int4 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional5.setConvergenceChecker(realConvergenceChecker9);
        double[] doubleArray13 = new double[] { 1.0d, 2147483647 };
        multiDirectional5.setStartConfiguration(doubleArray13);
        int int15 = multiDirectional5.getMaxIterations();
        int int16 = multiDirectional5.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional5.setConvergenceChecker(realConvergenceChecker17);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional5.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = null;
        multiDirectional23.setConvergenceChecker(realConvergenceChecker27);
        double[] doubleArray30 = new double[] { 100.0d };
        multiDirectional23.setStartConfiguration(doubleArray30);
        int int32 = multiDirectional23.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxEvaluations();
        int int37 = multiDirectional35.getIterations();
        int int38 = multiDirectional35.getMaxEvaluations();
        int int39 = multiDirectional35.getMaxEvaluations();
        multiDirectional35.setMaxIterations((-1));
        int int42 = multiDirectional35.getMaxIterations();
        multiDirectional35.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = multiDirectional47.getConvergenceChecker();
        multiDirectional35.setConvergenceChecker(realConvergenceChecker48);
        multiDirectional33.setConvergenceChecker(realConvergenceChecker48);
        multiDirectional23.setConvergenceChecker(realConvergenceChecker48);
        multiDirectional23.setMaxIterations(100);
        multiDirectional23.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional58.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxIterations();
        double[] doubleArray69 = new double[] {};
        multiDirectional67.setStartConfiguration(doubleArray69);
        int int71 = multiDirectional67.getMaxEvaluations();
        int int72 = multiDirectional67.getIterations();
        int int73 = multiDirectional67.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker74 = multiDirectional67.getConvergenceChecker();
        multiDirectional66.setConvergenceChecker(realConvergenceChecker74);
        double[] doubleArray76 = new double[] {};
        double[][] doubleArray77 = new double[][] { doubleArray76 };
        multiDirectional66.setStartConfiguration(doubleArray77);
        multiDirectional63.setStartConfiguration(doubleArray77);
        multiDirectional58.setStartConfiguration(doubleArray77);
        multiDirectional23.setStartConfiguration(doubleArray77);
        multiDirectional22.setStartConfiguration(doubleArray77);
        multiDirectional5.setStartConfiguration(doubleArray77);
        multiDirectional0.setStartConfiguration(doubleArray77);
        int int85 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker48);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) 0.0f);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        multiDirectional0.setMaxEvaluations(2147483647);
        int int11 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations((int) '#');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        int int31 = multiDirectional29.getIterations();
        int int32 = multiDirectional29.getMaxEvaluations();
        int int33 = multiDirectional29.getMaxEvaluations();
        multiDirectional29.setMaxIterations((-1));
        int int36 = multiDirectional29.getIterations();
        multiDirectional29.setMaxIterations((int) '#');
        multiDirectional29.setMaxEvaluations(0);
        multiDirectional29.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional45.getConvergenceChecker();
        multiDirectional29.setConvergenceChecker(realConvergenceChecker46);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker46);
        int int49 = multiDirectional0.getMaxIterations();
        int int50 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int55 = multiDirectional54.getMaxEvaluations();
        int int56 = multiDirectional54.getIterations();
        int int57 = multiDirectional54.getMaxEvaluations();
        int int58 = multiDirectional54.getMaxEvaluations();
        multiDirectional54.setMaxIterations((-1));
        int int61 = multiDirectional54.getIterations();
        multiDirectional54.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = null;
        multiDirectional54.setConvergenceChecker(realConvergenceChecker64);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int67 = multiDirectional66.getMaxEvaluations();
        multiDirectional66.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker70 = null;
        multiDirectional66.setConvergenceChecker(realConvergenceChecker70);
        double[] doubleArray74 = new double[] { 1.0d, 2147483647 };
        multiDirectional66.setStartConfiguration(doubleArray74);
        multiDirectional54.setStartConfiguration(doubleArray74);
        multiDirectional53.setStartConfiguration(doubleArray74);
        multiDirectional0.setStartConfiguration(doubleArray74);
        int int79 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = null;
        multiDirectional11.setConvergenceChecker(realConvergenceChecker13);
        multiDirectional11.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxIterations();
        double[] doubleArray19 = new double[] {};
        multiDirectional17.setStartConfiguration(doubleArray19);
        int int21 = multiDirectional17.getMaxEvaluations();
        int int22 = multiDirectional17.getMaxIterations();
        int int23 = multiDirectional17.getMaxIterations();
        multiDirectional17.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        int int28 = multiDirectional26.getIterations();
        int int29 = multiDirectional26.getMaxEvaluations();
        int int30 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxIterations((-1));
        int int33 = multiDirectional26.getMaxIterations();
        int int34 = multiDirectional26.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional35.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional35.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = multiDirectional43.getConvergenceChecker();
        multiDirectional35.setConvergenceChecker(realConvergenceChecker44);
        multiDirectional26.setConvergenceChecker(realConvergenceChecker44);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxIterations();
        double[] doubleArray52 = new double[] {};
        multiDirectional50.setStartConfiguration(doubleArray52);
        int int54 = multiDirectional50.getMaxEvaluations();
        int int55 = multiDirectional50.getIterations();
        int int56 = multiDirectional50.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = multiDirectional50.getConvergenceChecker();
        multiDirectional49.setConvergenceChecker(realConvergenceChecker57);
        double[] doubleArray59 = new double[] {};
        double[][] doubleArray60 = new double[][] { doubleArray59 };
        multiDirectional49.setStartConfiguration(doubleArray60);
        multiDirectional26.setStartConfiguration(doubleArray60);
        multiDirectional17.setStartConfiguration(doubleArray60);
        multiDirectional11.setStartConfiguration(doubleArray60);
        multiDirectional0.setStartConfiguration(doubleArray60);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker66 = multiDirectional0.getConvergenceChecker();
        int int67 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker44);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNull(realConvergenceChecker66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker9);
        multiDirectional0.setMaxIterations((int) (byte) -1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxIterations();
        double[] doubleArray15 = new double[] {};
        multiDirectional13.setStartConfiguration(doubleArray15);
        int int17 = multiDirectional13.getMaxEvaluations();
        int int18 = multiDirectional13.getIterations();
        double[] doubleArray24 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional13.setStartConfiguration(doubleArray24);
        multiDirectional0.setStartConfiguration(doubleArray24);
        java.lang.Class<?> wildcardClass27 = doubleArray24.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        multiDirectional2.setMaxEvaluations(35);
        int int5 = multiDirectional2.getEvaluations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction6 = null;
        org.apache.commons.math.optimization.GoalType goalType7 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        int int10 = multiDirectional8.getIterations();
        int int11 = multiDirectional8.getMaxEvaluations();
        int int12 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxIterations((-1));
        int int15 = multiDirectional8.getMaxIterations();
        multiDirectional8.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional20.getConvergenceChecker();
        multiDirectional8.setConvergenceChecker(realConvergenceChecker21);
        int int23 = multiDirectional8.getMaxIterations();
        int int24 = multiDirectional8.getEvaluations();
        int int25 = multiDirectional8.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional8.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int30 = multiDirectional29.getEvaluations();
        int int31 = multiDirectional29.getMaxEvaluations();
        multiDirectional29.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional29.getConvergenceChecker();
        multiDirectional8.setConvergenceChecker(realConvergenceChecker34);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        int int41 = multiDirectional39.getIterations();
        int int42 = multiDirectional39.getMaxEvaluations();
        int int43 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxIterations((-1));
        int int46 = multiDirectional39.getIterations();
        multiDirectional39.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = null;
        multiDirectional39.setConvergenceChecker(realConvergenceChecker49);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxEvaluations();
        multiDirectional51.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = null;
        multiDirectional51.setConvergenceChecker(realConvergenceChecker55);
        double[] doubleArray59 = new double[] { 1.0d, 2147483647 };
        multiDirectional51.setStartConfiguration(doubleArray59);
        multiDirectional39.setStartConfiguration(doubleArray59);
        multiDirectional38.setStartConfiguration(doubleArray59);
        multiDirectional8.setStartConfiguration(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair64 = multiDirectional2.optimize(multivariateRealFunction6, goalType7, doubleArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 1.0f);
        int int3 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0L, (double) 1);
        java.lang.Class<?> wildcardClass3 = multiDirectional2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxIterations();
        double[] doubleArray13 = new double[] {};
        multiDirectional11.setStartConfiguration(doubleArray13);
        multiDirectional0.setStartConfiguration(doubleArray13);
        multiDirectional0.setMaxEvaluations((int) 'a');
        multiDirectional0.setMaxEvaluations(0);
        int int20 = multiDirectional0.getMaxIterations();
        int int21 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        int int24 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = null;
        multiDirectional31.setConvergenceChecker(realConvergenceChecker35);
        double[] doubleArray39 = new double[] { 1.0d, 2147483647 };
        multiDirectional31.setStartConfiguration(doubleArray39);
        multiDirectional25.setStartConfiguration(doubleArray39);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = multiDirectional44.getConvergenceChecker();
        multiDirectional25.setConvergenceChecker(realConvergenceChecker45);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker45);
        int int48 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNotNull(realConvergenceChecker45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        multiDirectional0.setMaxIterations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        multiDirectional6.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional6.setConvergenceChecker(realConvergenceChecker10);
        double[] doubleArray14 = new double[] { 1.0d, 2147483647 };
        multiDirectional6.setStartConfiguration(doubleArray14);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional6.getConvergenceChecker();
        multiDirectional6.setMaxEvaluations((int) (byte) 100);
        multiDirectional6.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional6.getConvergenceChecker();
        int int22 = multiDirectional6.getEvaluations();
        int int23 = multiDirectional6.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        int int26 = multiDirectional24.getIterations();
        int int27 = multiDirectional24.getMaxEvaluations();
        int int28 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxIterations((-1));
        int int31 = multiDirectional24.getIterations();
        int int32 = multiDirectional24.getEvaluations();
        int int33 = multiDirectional24.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int35 = multiDirectional34.getMaxEvaluations();
        multiDirectional34.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = null;
        multiDirectional34.setConvergenceChecker(realConvergenceChecker38);
        double[] doubleArray42 = new double[] { 1.0d, 2147483647 };
        multiDirectional34.setStartConfiguration(doubleArray42);
        int int44 = multiDirectional34.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxIterations();
        double[] doubleArray47 = new double[] {};
        multiDirectional45.setStartConfiguration(doubleArray47);
        multiDirectional34.setStartConfiguration(doubleArray47);
        multiDirectional24.setStartConfiguration(doubleArray47);
        multiDirectional6.setStartConfiguration(doubleArray47);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxEvaluations();
        int int54 = multiDirectional52.getIterations();
        int int55 = multiDirectional52.getMaxEvaluations();
        int int56 = multiDirectional52.getMaxEvaluations();
        multiDirectional52.setMaxIterations((-1));
        int int59 = multiDirectional52.getMaxIterations();
        multiDirectional52.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional64 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker65 = multiDirectional64.getConvergenceChecker();
        multiDirectional52.setConvergenceChecker(realConvergenceChecker65);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker69 = null;
        multiDirectional67.setConvergenceChecker(realConvergenceChecker69);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int72 = multiDirectional71.getMaxEvaluations();
        multiDirectional71.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker75 = null;
        multiDirectional71.setConvergenceChecker(realConvergenceChecker75);
        double[] doubleArray79 = new double[] { 1.0d, 2147483647 };
        multiDirectional71.setStartConfiguration(doubleArray79);
        int int81 = multiDirectional71.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional82 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int83 = multiDirectional82.getMaxIterations();
        double[] doubleArray84 = new double[] {};
        multiDirectional82.setStartConfiguration(doubleArray84);
        multiDirectional71.setStartConfiguration(doubleArray84);
        multiDirectional67.setStartConfiguration(doubleArray84);
        multiDirectional52.setStartConfiguration(doubleArray84);
        multiDirectional6.setStartConfiguration(doubleArray84);
        multiDirectional0.setStartConfiguration(doubleArray84);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker91 = multiDirectional0.getConvergenceChecker();
        java.lang.Class<?> wildcardClass92 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker16);
        org.junit.Assert.assertNull(realConvergenceChecker21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) 0);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        multiDirectional2.setMaxEvaluations(2147483647);
        multiDirectional2.setMaxEvaluations((int) '#');
        int int7 = multiDirectional2.getIterations();
        int int8 = multiDirectional2.getEvaluations();
        multiDirectional2.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        int int14 = multiDirectional13.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        int int18 = multiDirectional17.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional22.getConvergenceChecker();
        multiDirectional22.setMaxEvaluations((int) (byte) 100);
        int int35 = multiDirectional22.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        multiDirectional36.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = null;
        multiDirectional36.setConvergenceChecker(realConvergenceChecker40);
        double[] doubleArray44 = new double[] { 1.0d, 2147483647 };
        multiDirectional36.setStartConfiguration(doubleArray44);
        multiDirectional22.setStartConfiguration(doubleArray44);
        multiDirectional21.setStartConfiguration(doubleArray44);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = null;
        multiDirectional48.setConvergenceChecker(realConvergenceChecker50);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxEvaluations();
        multiDirectional52.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = null;
        multiDirectional52.setConvergenceChecker(realConvergenceChecker56);
        double[] doubleArray60 = new double[] { 1.0d, 2147483647 };
        multiDirectional52.setStartConfiguration(doubleArray60);
        int int62 = multiDirectional52.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int64 = multiDirectional63.getMaxIterations();
        double[] doubleArray65 = new double[] {};
        multiDirectional63.setStartConfiguration(doubleArray65);
        multiDirectional52.setStartConfiguration(doubleArray65);
        multiDirectional48.setStartConfiguration(doubleArray65);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int70 = multiDirectional69.getMaxEvaluations();
        int int71 = multiDirectional69.getIterations();
        int int72 = multiDirectional69.getMaxEvaluations();
        int int73 = multiDirectional69.getMaxEvaluations();
        multiDirectional69.setMaxIterations((-1));
        int int76 = multiDirectional69.getMaxIterations();
        multiDirectional69.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional81 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker82 = multiDirectional81.getConvergenceChecker();
        multiDirectional69.setConvergenceChecker(realConvergenceChecker82);
        multiDirectional48.setConvergenceChecker(realConvergenceChecker82);
        multiDirectional21.setConvergenceChecker(realConvergenceChecker82);
        multiDirectional17.setConvergenceChecker(realConvergenceChecker82);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker87 = multiDirectional17.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker87);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker87);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker82);
        org.junit.Assert.assertNotNull(realConvergenceChecker87);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((-1));
        int int11 = multiDirectional4.getIterations();
        multiDirectional4.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker14);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        multiDirectional4.setStartConfiguration(doubleArray24);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        double[] doubleArray34 = new double[] {};
        multiDirectional32.setStartConfiguration(doubleArray34);
        multiDirectional27.setStartConfiguration(doubleArray34);
        multiDirectional4.setStartConfiguration(doubleArray34);
        multiDirectional2.setStartConfiguration(doubleArray34);
        int int39 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = multiDirectional2.getConvergenceChecker();
        multiDirectional2.setMaxIterations((int) ' ');
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker40);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxEvaluations((int) (byte) 0);
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction18 = null;
        org.apache.commons.math.optimization.GoalType goalType19 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxEvaluations();
        multiDirectional20.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = null;
        multiDirectional20.setConvergenceChecker(realConvergenceChecker24);
        double[] doubleArray28 = new double[] { 1.0d, 2147483647 };
        multiDirectional20.setStartConfiguration(doubleArray28);
        multiDirectional20.setMaxIterations((int) (byte) 100);
        int int32 = multiDirectional20.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int36 = multiDirectional35.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional35.setConvergenceChecker(realConvergenceChecker37);
        int int39 = multiDirectional35.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        multiDirectional40.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxEvaluations();
        int int51 = multiDirectional49.getIterations();
        int int52 = multiDirectional49.getMaxEvaluations();
        int int53 = multiDirectional49.getMaxEvaluations();
        multiDirectional49.setMaxIterations((-1));
        int int56 = multiDirectional49.getMaxIterations();
        multiDirectional49.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = multiDirectional61.getConvergenceChecker();
        multiDirectional49.setConvergenceChecker(realConvergenceChecker62);
        multiDirectional47.setConvergenceChecker(realConvergenceChecker62);
        multiDirectional46.setConvergenceChecker(realConvergenceChecker62);
        multiDirectional40.setConvergenceChecker(realConvergenceChecker62);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional72 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional73 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int74 = multiDirectional73.getMaxEvaluations();
        multiDirectional73.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker77 = null;
        multiDirectional73.setConvergenceChecker(realConvergenceChecker77);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional79 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int80 = multiDirectional79.getMaxEvaluations();
        multiDirectional79.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker83 = null;
        multiDirectional79.setConvergenceChecker(realConvergenceChecker83);
        double[] doubleArray87 = new double[] { 1.0d, 2147483647 };
        multiDirectional79.setStartConfiguration(doubleArray87);
        multiDirectional73.setStartConfiguration(doubleArray87);
        multiDirectional72.setStartConfiguration(doubleArray87);
        multiDirectional69.setStartConfiguration(doubleArray87);
        multiDirectional40.setStartConfiguration(doubleArray87);
        multiDirectional35.setStartConfiguration(doubleArray87);
        multiDirectional20.setStartConfiguration(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair95 = multiDirectional0.optimize(multivariateRealFunction18, goalType19, doubleArray87);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.FunctionEvaluationException; message: org.apache.commons.math.MaxEvaluationsExceededException: Maximal number of evaluations (0) exceeded");
        } catch (org.apache.commons.math.FunctionEvaluationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker62);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getMaxIterations();
        multiDirectional13.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional25.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker26);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional34.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        int int38 = multiDirectional36.getIterations();
        int int39 = multiDirectional36.getMaxEvaluations();
        int int40 = multiDirectional36.getMaxEvaluations();
        multiDirectional36.setMaxIterations((-1));
        int int43 = multiDirectional36.getMaxIterations();
        int int44 = multiDirectional36.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker47 = null;
        multiDirectional45.setConvergenceChecker(realConvergenceChecker47);
        multiDirectional45.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = multiDirectional53.getConvergenceChecker();
        multiDirectional45.setConvergenceChecker(realConvergenceChecker54);
        multiDirectional36.setConvergenceChecker(realConvergenceChecker54);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int61 = multiDirectional60.getMaxIterations();
        double[] doubleArray62 = new double[] {};
        multiDirectional60.setStartConfiguration(doubleArray62);
        int int64 = multiDirectional60.getMaxEvaluations();
        int int65 = multiDirectional60.getIterations();
        int int66 = multiDirectional60.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker67 = multiDirectional60.getConvergenceChecker();
        multiDirectional59.setConvergenceChecker(realConvergenceChecker67);
        double[] doubleArray69 = new double[] {};
        double[][] doubleArray70 = new double[][] { doubleArray69 };
        multiDirectional59.setStartConfiguration(doubleArray70);
        multiDirectional36.setStartConfiguration(doubleArray70);
        multiDirectional34.setStartConfiguration(doubleArray70);
        multiDirectional0.setStartConfiguration(doubleArray70);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        java.lang.Class<?> wildcardClass77 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertNotNull(realConvergenceChecker35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker54);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2147483647 + "'", int66 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 1, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional9.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        multiDirectional36.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = null;
        multiDirectional36.setConvergenceChecker(realConvergenceChecker40);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional42.setConvergenceChecker(realConvergenceChecker46);
        double[] doubleArray50 = new double[] { 1.0d, 2147483647 };
        multiDirectional42.setStartConfiguration(doubleArray50);
        multiDirectional36.setStartConfiguration(doubleArray50);
        multiDirectional35.setStartConfiguration(doubleArray50);
        multiDirectional32.setStartConfiguration(doubleArray50);
        multiDirectional3.setStartConfiguration(doubleArray50);
        multiDirectional2.setStartConfiguration(doubleArray50);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(100);
        multiDirectional0.setMaxIterations((int) (short) 10);
        int int13 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        int int16 = multiDirectional14.getIterations();
        int int17 = multiDirectional14.getMaxEvaluations();
        int int18 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxIterations((-1));
        int int21 = multiDirectional14.getIterations();
        int int22 = multiDirectional14.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        multiDirectional23.setStartConfiguration(doubleArray30);
        multiDirectional14.setStartConfiguration(doubleArray30);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional14.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int38 = multiDirectional37.getEvaluations();
        int int39 = multiDirectional37.getMaxEvaluations();
        multiDirectional37.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional42.setConvergenceChecker(realConvergenceChecker46);
        double[] doubleArray50 = new double[] { 1.0d, 2147483647 };
        multiDirectional42.setStartConfiguration(doubleArray50);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = multiDirectional42.getConvergenceChecker();
        multiDirectional42.setMaxEvaluations((int) (byte) 100);
        multiDirectional42.setMaxIterations(35);
        double[] doubleArray58 = new double[] { 100.0d };
        multiDirectional42.setStartConfiguration(doubleArray58);
        multiDirectional37.setStartConfiguration(doubleArray58);
        multiDirectional14.setStartConfiguration(doubleArray58);
        multiDirectional0.setStartConfiguration(doubleArray58);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker52);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0]");
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        multiDirectional2.setMaxEvaluations(35);
        int int5 = multiDirectional2.getEvaluations();
        java.lang.Class<?> wildcardClass6 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getMaxIterations();
        multiDirectional13.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional25.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker26);
        int int32 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = multiDirectional0.getConvergenceChecker();
        int int34 = multiDirectional0.getMaxEvaluations();
        int int35 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 'a');
        int int3 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker6);
        multiDirectional4.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional4.getConvergenceChecker();
        multiDirectional4.setMaxIterations(0);
        multiDirectional4.setMaxEvaluations(97);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        int int19 = multiDirectional17.getEvaluations();
        multiDirectional17.setMaxIterations((int) (short) 1);
        int int22 = multiDirectional17.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int26 = multiDirectional25.getEvaluations();
        int int27 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = null;
        multiDirectional30.setConvergenceChecker(realConvergenceChecker34);
        double[] doubleArray38 = new double[] { 1.0d, 2147483647 };
        multiDirectional30.setStartConfiguration(doubleArray38);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = multiDirectional30.getConvergenceChecker();
        multiDirectional30.setMaxEvaluations((int) (byte) 100);
        multiDirectional30.setMaxIterations(35);
        double[] doubleArray46 = new double[] { 100.0d };
        multiDirectional30.setStartConfiguration(doubleArray46);
        multiDirectional25.setStartConfiguration(doubleArray46);
        multiDirectional17.setStartConfiguration(doubleArray46);
        multiDirectional4.setStartConfiguration(doubleArray46);
        multiDirectional2.setStartConfiguration(doubleArray46);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker40);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0]");
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '4');
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction12 = null;
        org.apache.commons.math.optimization.GoalType goalType13 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        int int16 = multiDirectional14.getIterations();
        int int17 = multiDirectional14.getMaxEvaluations();
        int int18 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxIterations((-1));
        int int21 = multiDirectional14.getIterations();
        multiDirectional14.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker24);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = null;
        multiDirectional26.setConvergenceChecker(realConvergenceChecker30);
        double[] doubleArray34 = new double[] { 1.0d, 2147483647 };
        multiDirectional26.setStartConfiguration(doubleArray34);
        multiDirectional14.setStartConfiguration(doubleArray34);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxEvaluations();
        int int39 = multiDirectional37.getIterations();
        int int40 = multiDirectional37.getMaxEvaluations();
        int int41 = multiDirectional37.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxIterations();
        double[] doubleArray44 = new double[] {};
        multiDirectional42.setStartConfiguration(doubleArray44);
        multiDirectional37.setStartConfiguration(doubleArray44);
        multiDirectional14.setStartConfiguration(doubleArray44);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = multiDirectional14.getConvergenceChecker();
        int int49 = multiDirectional14.getMaxIterations();
        int int50 = multiDirectional14.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int54 = multiDirectional53.getEvaluations();
        int int55 = multiDirectional53.getMaxEvaluations();
        multiDirectional53.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int59 = multiDirectional58.getMaxEvaluations();
        multiDirectional58.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = null;
        multiDirectional58.setConvergenceChecker(realConvergenceChecker62);
        double[] doubleArray66 = new double[] { 1.0d, 2147483647 };
        multiDirectional58.setStartConfiguration(doubleArray66);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker68 = multiDirectional58.getConvergenceChecker();
        multiDirectional58.setMaxEvaluations((int) (byte) 100);
        multiDirectional58.setMaxIterations(35);
        double[] doubleArray74 = new double[] { 100.0d };
        multiDirectional58.setStartConfiguration(doubleArray74);
        multiDirectional53.setStartConfiguration(doubleArray74);
        multiDirectional14.setStartConfiguration(doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair78 = multiDirectional0.optimize(multivariateRealFunction12, goalType13, doubleArray74);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.FunctionEvaluationException; message: org.apache.commons.math.MaxEvaluationsExceededException: Maximal number of evaluations (0) exceeded");
        } catch (org.apache.commons.math.FunctionEvaluationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNull(realConvergenceChecker48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker68);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0]");
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxIterations();
        int int9 = multiDirectional4.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxIterations((int) (byte) 0);
        int int14 = multiDirectional10.getMaxIterations();
        int int15 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional10.getConvergenceChecker();
        multiDirectional4.setConvergenceChecker(realConvergenceChecker16);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int21 = multiDirectional20.getEvaluations();
        int int22 = multiDirectional20.getMaxEvaluations();
        multiDirectional20.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker29);
        double[] doubleArray33 = new double[] { 1.0d, 2147483647 };
        multiDirectional25.setStartConfiguration(doubleArray33);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional25.getConvergenceChecker();
        multiDirectional25.setMaxEvaluations((int) (byte) 100);
        multiDirectional25.setMaxIterations(35);
        double[] doubleArray41 = new double[] { 100.0d };
        multiDirectional25.setStartConfiguration(doubleArray41);
        multiDirectional20.setStartConfiguration(doubleArray41);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional49.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int59 = multiDirectional58.getMaxIterations();
        double[] doubleArray60 = new double[] {};
        multiDirectional58.setStartConfiguration(doubleArray60);
        int int62 = multiDirectional58.getMaxEvaluations();
        int int63 = multiDirectional58.getIterations();
        int int64 = multiDirectional58.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker65 = multiDirectional58.getConvergenceChecker();
        multiDirectional57.setConvergenceChecker(realConvergenceChecker65);
        double[] doubleArray67 = new double[] {};
        double[][] doubleArray68 = new double[][] { doubleArray67 };
        multiDirectional57.setStartConfiguration(doubleArray68);
        multiDirectional54.setStartConfiguration(doubleArray68);
        multiDirectional49.setStartConfiguration(doubleArray68);
        multiDirectional46.setStartConfiguration(doubleArray68);
        multiDirectional20.setStartConfiguration(doubleArray68);
        multiDirectional4.setStartConfiguration(doubleArray68);
        multiDirectional0.setStartConfiguration(doubleArray68);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxEvaluations((int) (short) 100);
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = multiDirectional0.getConvergenceChecker();
        int int15 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxIterations();
        double[] doubleArray5 = new double[] {};
        multiDirectional3.setStartConfiguration(doubleArray5);
        int int7 = multiDirectional3.getMaxEvaluations();
        int int8 = multiDirectional3.getIterations();
        int int9 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional3.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker10);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction12 = null;
        org.apache.commons.math.optimization.GoalType goalType13 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional16.getConvergenceChecker();
        int int18 = multiDirectional16.getEvaluations();
        multiDirectional16.setMaxIterations((int) (short) 1);
        int int21 = multiDirectional16.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int25 = multiDirectional24.getEvaluations();
        int int26 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        multiDirectional29.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = null;
        multiDirectional29.setConvergenceChecker(realConvergenceChecker33);
        double[] doubleArray37 = new double[] { 1.0d, 2147483647 };
        multiDirectional29.setStartConfiguration(doubleArray37);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional29.getConvergenceChecker();
        multiDirectional29.setMaxEvaluations((int) (byte) 100);
        multiDirectional29.setMaxIterations(35);
        double[] doubleArray45 = new double[] { 100.0d };
        multiDirectional29.setStartConfiguration(doubleArray45);
        multiDirectional24.setStartConfiguration(doubleArray45);
        multiDirectional16.setStartConfiguration(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair49 = multiDirectional2.optimize(multivariateRealFunction12, goalType13, doubleArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker10);
        org.junit.Assert.assertNotNull(realConvergenceChecker17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker39);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxIterations();
        double[] doubleArray8 = new double[] {};
        multiDirectional6.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional6.getMaxEvaluations();
        int int11 = multiDirectional6.getMaxIterations();
        int int12 = multiDirectional6.getMaxIterations();
        multiDirectional6.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxEvaluations();
        int int17 = multiDirectional15.getIterations();
        int int18 = multiDirectional15.getMaxEvaluations();
        int int19 = multiDirectional15.getMaxEvaluations();
        multiDirectional15.setMaxIterations((-1));
        int int22 = multiDirectional15.getMaxIterations();
        int int23 = multiDirectional15.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional24.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = multiDirectional32.getConvergenceChecker();
        multiDirectional24.setConvergenceChecker(realConvergenceChecker33);
        multiDirectional15.setConvergenceChecker(realConvergenceChecker33);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxIterations();
        double[] doubleArray41 = new double[] {};
        multiDirectional39.setStartConfiguration(doubleArray41);
        int int43 = multiDirectional39.getMaxEvaluations();
        int int44 = multiDirectional39.getIterations();
        int int45 = multiDirectional39.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional39.getConvergenceChecker();
        multiDirectional38.setConvergenceChecker(realConvergenceChecker46);
        double[] doubleArray48 = new double[] {};
        double[][] doubleArray49 = new double[][] { doubleArray48 };
        multiDirectional38.setStartConfiguration(doubleArray49);
        multiDirectional15.setStartConfiguration(doubleArray49);
        multiDirectional6.setStartConfiguration(doubleArray49);
        multiDirectional0.setStartConfiguration(doubleArray49);
        int int54 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker33);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxIterations();
        double[] doubleArray7 = new double[] {};
        multiDirectional5.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional5.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        int int12 = multiDirectional10.getIterations();
        int int13 = multiDirectional10.getMaxEvaluations();
        int int14 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxIterations((-1));
        int int17 = multiDirectional10.getIterations();
        multiDirectional10.setMaxIterations((int) '#');
        multiDirectional10.setMaxEvaluations(0);
        multiDirectional10.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional26.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional5.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional0.setMaxEvaluations((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        multiDirectional0.setMaxIterations((-1));
        int int16 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional2.setConvergenceChecker(realConvergenceChecker4);
        int int6 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        int int18 = multiDirectional16.getIterations();
        int int19 = multiDirectional16.getMaxEvaluations();
        int int20 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxIterations((-1));
        int int23 = multiDirectional16.getMaxIterations();
        multiDirectional16.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional28.getConvergenceChecker();
        multiDirectional16.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional14.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional13.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        multiDirectional40.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = null;
        multiDirectional40.setConvergenceChecker(realConvergenceChecker44);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxEvaluations();
        multiDirectional46.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = null;
        multiDirectional46.setConvergenceChecker(realConvergenceChecker50);
        double[] doubleArray54 = new double[] { 1.0d, 2147483647 };
        multiDirectional46.setStartConfiguration(doubleArray54);
        multiDirectional40.setStartConfiguration(doubleArray54);
        multiDirectional39.setStartConfiguration(doubleArray54);
        multiDirectional36.setStartConfiguration(doubleArray54);
        multiDirectional7.setStartConfiguration(doubleArray54);
        multiDirectional2.setStartConfiguration(doubleArray54);
        java.lang.Class<?> wildcardClass61 = doubleArray54.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 'a');
        multiDirectional2.setMaxEvaluations(2147483647);
        multiDirectional2.setMaxIterations(100);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10.0f, 100.0d);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional2.getConvergenceChecker();
        multiDirectional2.setMaxIterations((int) ' ');
        java.lang.Class<?> wildcardClass8 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(0);
        int int4 = multiDirectional0.getMaxIterations();
        int int5 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxIterations();
        double[] doubleArray11 = new double[] {};
        multiDirectional9.setStartConfiguration(doubleArray11);
        int int13 = multiDirectional9.getMaxEvaluations();
        int int14 = multiDirectional9.getIterations();
        int int15 = multiDirectional9.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional9.getConvergenceChecker();
        multiDirectional8.setConvergenceChecker(realConvergenceChecker16);
        double[] doubleArray18 = new double[] {};
        double[][] doubleArray19 = new double[][] { doubleArray18 };
        multiDirectional8.setStartConfiguration(doubleArray19);
        multiDirectional0.setStartConfiguration(doubleArray19);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker24);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = null;
        multiDirectional26.setConvergenceChecker(realConvergenceChecker30);
        double[] doubleArray34 = new double[] { 1.0d, 2147483647 };
        multiDirectional26.setStartConfiguration(doubleArray34);
        int int36 = multiDirectional26.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxIterations();
        double[] doubleArray39 = new double[] {};
        multiDirectional37.setStartConfiguration(doubleArray39);
        multiDirectional26.setStartConfiguration(doubleArray39);
        multiDirectional22.setStartConfiguration(doubleArray39);
        int int43 = multiDirectional22.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxEvaluations();
        int int48 = multiDirectional46.getIterations();
        int int49 = multiDirectional46.getMaxEvaluations();
        int int50 = multiDirectional46.getMaxEvaluations();
        multiDirectional46.setMaxIterations((-1));
        int int53 = multiDirectional46.getMaxIterations();
        multiDirectional46.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker59 = multiDirectional58.getConvergenceChecker();
        multiDirectional46.setConvergenceChecker(realConvergenceChecker59);
        multiDirectional44.setConvergenceChecker(realConvergenceChecker59);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = multiDirectional44.getConvergenceChecker();
        multiDirectional22.setConvergenceChecker(realConvergenceChecker62);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker62);
        java.lang.Class<?> wildcardClass65 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker59);
        org.junit.Assert.assertNotNull(realConvergenceChecker62);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 35, (double) 1);
        int int3 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10.0f, (double) '4');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        multiDirectional2.setMaxEvaluations((int) '#');
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100L, (double) 35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxIterations();
        double[] doubleArray5 = new double[] {};
        multiDirectional3.setStartConfiguration(doubleArray5);
        int int7 = multiDirectional3.getMaxEvaluations();
        int int8 = multiDirectional3.getMaxIterations();
        int int9 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = multiDirectional3.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional3.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker13);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxEvaluations();
        multiDirectional15.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = null;
        multiDirectional15.setConvergenceChecker(realConvergenceChecker19);
        double[] doubleArray23 = new double[] { 1.0d, 2147483647 };
        multiDirectional15.setStartConfiguration(doubleArray23);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional15.getConvergenceChecker();
        multiDirectional15.setMaxEvaluations((int) (byte) 100);
        multiDirectional15.setMaxIterations(35);
        multiDirectional15.setMaxIterations(100);
        multiDirectional15.setMaxIterations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int35 = multiDirectional34.getMaxEvaluations();
        int int36 = multiDirectional34.getIterations();
        int int37 = multiDirectional34.getMaxEvaluations();
        int int38 = multiDirectional34.getMaxEvaluations();
        multiDirectional34.setMaxIterations((-1));
        int int41 = multiDirectional34.getMaxIterations();
        int int42 = multiDirectional34.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = null;
        multiDirectional43.setConvergenceChecker(realConvergenceChecker45);
        multiDirectional43.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = multiDirectional51.getConvergenceChecker();
        multiDirectional43.setConvergenceChecker(realConvergenceChecker52);
        multiDirectional34.setConvergenceChecker(realConvergenceChecker52);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int59 = multiDirectional58.getMaxIterations();
        double[] doubleArray60 = new double[] {};
        multiDirectional58.setStartConfiguration(doubleArray60);
        int int62 = multiDirectional58.getMaxEvaluations();
        int int63 = multiDirectional58.getIterations();
        int int64 = multiDirectional58.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker65 = multiDirectional58.getConvergenceChecker();
        multiDirectional57.setConvergenceChecker(realConvergenceChecker65);
        double[] doubleArray67 = new double[] {};
        double[][] doubleArray68 = new double[][] { doubleArray67 };
        multiDirectional57.setStartConfiguration(doubleArray68);
        multiDirectional34.setStartConfiguration(doubleArray68);
        multiDirectional15.setStartConfiguration(doubleArray68);
        multiDirectional2.setStartConfiguration(doubleArray68);
        int int73 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker12);
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        multiDirectional0.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional18.setMaxEvaluations((int) (byte) 0);
        double[] doubleArray23 = new double[] { (-1.0f), ' ' };
        multiDirectional18.setStartConfiguration(doubleArray23);
        multiDirectional0.setStartConfiguration(doubleArray23);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction26 = null;
        org.apache.commons.math.optimization.GoalType goalType27 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        int int32 = multiDirectional28.getMaxEvaluations();
        int int33 = multiDirectional28.getIterations();
        int int34 = multiDirectional28.getMaxEvaluations();
        multiDirectional28.setMaxIterations((int) (short) 1);
        int int37 = multiDirectional28.getEvaluations();
        int int38 = multiDirectional28.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 'a', (double) 2147483647);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional42.setConvergenceChecker(realConvergenceChecker46);
        double[] doubleArray50 = new double[] { 1.0d, 2147483647 };
        multiDirectional42.setStartConfiguration(doubleArray50);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = multiDirectional42.getConvergenceChecker();
        multiDirectional42.setMaxEvaluations((int) (byte) 100);
        multiDirectional42.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = multiDirectional42.getConvergenceChecker();
        int int58 = multiDirectional42.getEvaluations();
        int int59 = multiDirectional42.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int61 = multiDirectional60.getMaxEvaluations();
        int int62 = multiDirectional60.getIterations();
        int int63 = multiDirectional60.getMaxEvaluations();
        int int64 = multiDirectional60.getMaxEvaluations();
        multiDirectional60.setMaxIterations((-1));
        int int67 = multiDirectional60.getIterations();
        int int68 = multiDirectional60.getEvaluations();
        int int69 = multiDirectional60.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int71 = multiDirectional70.getMaxEvaluations();
        multiDirectional70.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker74 = null;
        multiDirectional70.setConvergenceChecker(realConvergenceChecker74);
        double[] doubleArray78 = new double[] { 1.0d, 2147483647 };
        multiDirectional70.setStartConfiguration(doubleArray78);
        int int80 = multiDirectional70.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional81 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int82 = multiDirectional81.getMaxIterations();
        double[] doubleArray83 = new double[] {};
        multiDirectional81.setStartConfiguration(doubleArray83);
        multiDirectional70.setStartConfiguration(doubleArray83);
        multiDirectional60.setStartConfiguration(doubleArray83);
        multiDirectional42.setStartConfiguration(doubleArray83);
        multiDirectional41.setStartConfiguration(doubleArray83);
        multiDirectional28.setStartConfiguration(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair90 = multiDirectional0.optimize(multivariateRealFunction26, goalType27, doubleArray83);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 32.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker52);
        org.junit.Assert.assertNull(realConvergenceChecker57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        multiDirectional0.setMaxEvaluations((int) (byte) 1);
        int int16 = multiDirectional0.getIterations();
        int int17 = multiDirectional0.getMaxEvaluations();
        int int18 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        int int8 = multiDirectional6.getIterations();
        int int9 = multiDirectional6.getMaxEvaluations();
        int int10 = multiDirectional6.getMaxEvaluations();
        multiDirectional6.setMaxIterations((-1));
        int int13 = multiDirectional6.getMaxIterations();
        multiDirectional6.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional18.getConvergenceChecker();
        multiDirectional6.setConvergenceChecker(realConvergenceChecker19);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker19);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional4.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional4.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker23);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxEvaluations();
        multiDirectional28.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = null;
        multiDirectional28.setConvergenceChecker(realConvergenceChecker32);
        double[] doubleArray36 = new double[] { 1.0d, 2147483647 };
        multiDirectional28.setStartConfiguration(doubleArray36);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional28.getConvergenceChecker();
        multiDirectional28.setMaxEvaluations((int) (byte) 100);
        multiDirectional28.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxEvaluations();
        multiDirectional43.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker47 = null;
        multiDirectional43.setConvergenceChecker(realConvergenceChecker47);
        double[] doubleArray51 = new double[] { 1.0d, 2147483647 };
        multiDirectional43.setStartConfiguration(doubleArray51);
        int int53 = multiDirectional43.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int55 = multiDirectional54.getMaxIterations();
        double[] doubleArray56 = new double[] {};
        multiDirectional54.setStartConfiguration(doubleArray56);
        multiDirectional43.setStartConfiguration(doubleArray56);
        multiDirectional28.setStartConfiguration(doubleArray56);
        multiDirectional27.setStartConfiguration(doubleArray56);
        multiDirectional0.setStartConfiguration(doubleArray56);
        int int62 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 97, 100.0d);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray18 = new double[] { 1.0d, 2147483647 };
        multiDirectional10.setStartConfiguration(doubleArray18);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional10.getConvergenceChecker();
        multiDirectional10.setMaxEvaluations((int) (byte) 100);
        int int23 = multiDirectional10.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker28);
        double[] doubleArray32 = new double[] { 1.0d, 2147483647 };
        multiDirectional24.setStartConfiguration(doubleArray32);
        multiDirectional10.setStartConfiguration(doubleArray32);
        multiDirectional9.setStartConfiguration(doubleArray32);
        multiDirectional6.setStartConfiguration(doubleArray32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxEvaluations();
        multiDirectional37.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = null;
        multiDirectional37.setConvergenceChecker(realConvergenceChecker41);
        double[] doubleArray44 = new double[] { 100.0d };
        multiDirectional37.setStartConfiguration(doubleArray44);
        int int46 = multiDirectional37.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxEvaluations();
        int int51 = multiDirectional49.getIterations();
        int int52 = multiDirectional49.getMaxEvaluations();
        int int53 = multiDirectional49.getMaxEvaluations();
        multiDirectional49.setMaxIterations((-1));
        int int56 = multiDirectional49.getMaxIterations();
        multiDirectional49.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = multiDirectional61.getConvergenceChecker();
        multiDirectional49.setConvergenceChecker(realConvergenceChecker62);
        multiDirectional47.setConvergenceChecker(realConvergenceChecker62);
        multiDirectional37.setConvergenceChecker(realConvergenceChecker62);
        multiDirectional37.setMaxIterations(100);
        multiDirectional37.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional72 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional72.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional77 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional80 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional81 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int82 = multiDirectional81.getMaxIterations();
        double[] doubleArray83 = new double[] {};
        multiDirectional81.setStartConfiguration(doubleArray83);
        int int85 = multiDirectional81.getMaxEvaluations();
        int int86 = multiDirectional81.getIterations();
        int int87 = multiDirectional81.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker88 = multiDirectional81.getConvergenceChecker();
        multiDirectional80.setConvergenceChecker(realConvergenceChecker88);
        double[] doubleArray90 = new double[] {};
        double[][] doubleArray91 = new double[][] { doubleArray90 };
        multiDirectional80.setStartConfiguration(doubleArray91);
        multiDirectional77.setStartConfiguration(doubleArray91);
        multiDirectional72.setStartConfiguration(doubleArray91);
        multiDirectional37.setStartConfiguration(doubleArray91);
        multiDirectional6.setStartConfiguration(doubleArray91);
        multiDirectional2.setStartConfiguration(doubleArray91);
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker62);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker88);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        multiDirectional2.setMaxIterations(100);
        multiDirectional2.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) 0L);
        multiDirectional10.setMaxIterations((int) (short) 0);
        int int13 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = multiDirectional10.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker14);
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker14);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) 0L);
        multiDirectional2.setMaxIterations((int) (short) 0);
        int int5 = multiDirectional2.getEvaluations();
        int int6 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker7);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setMaxIterations((int) '#');
        int int31 = multiDirectional0.getMaxIterations();
        int int32 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (short) 1);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray18 = new double[] { 1.0d, 2147483647 };
        multiDirectional10.setStartConfiguration(doubleArray18);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional10.getConvergenceChecker();
        multiDirectional10.setMaxEvaluations((int) (byte) 100);
        int int23 = multiDirectional10.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker28);
        double[] doubleArray32 = new double[] { 1.0d, 2147483647 };
        multiDirectional24.setStartConfiguration(doubleArray32);
        multiDirectional10.setStartConfiguration(doubleArray32);
        multiDirectional9.setStartConfiguration(doubleArray32);
        multiDirectional6.setStartConfiguration(doubleArray32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxEvaluations();
        multiDirectional37.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = null;
        multiDirectional37.setConvergenceChecker(realConvergenceChecker41);
        double[] doubleArray44 = new double[] { 100.0d };
        multiDirectional37.setStartConfiguration(doubleArray44);
        int int46 = multiDirectional37.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxEvaluations();
        int int51 = multiDirectional49.getIterations();
        int int52 = multiDirectional49.getMaxEvaluations();
        int int53 = multiDirectional49.getMaxEvaluations();
        multiDirectional49.setMaxIterations((-1));
        int int56 = multiDirectional49.getMaxIterations();
        multiDirectional49.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = multiDirectional61.getConvergenceChecker();
        multiDirectional49.setConvergenceChecker(realConvergenceChecker62);
        multiDirectional47.setConvergenceChecker(realConvergenceChecker62);
        multiDirectional37.setConvergenceChecker(realConvergenceChecker62);
        multiDirectional37.setMaxIterations(100);
        multiDirectional37.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional72 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional72.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional77 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional80 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional81 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int82 = multiDirectional81.getMaxIterations();
        double[] doubleArray83 = new double[] {};
        multiDirectional81.setStartConfiguration(doubleArray83);
        int int85 = multiDirectional81.getMaxEvaluations();
        int int86 = multiDirectional81.getIterations();
        int int87 = multiDirectional81.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker88 = multiDirectional81.getConvergenceChecker();
        multiDirectional80.setConvergenceChecker(realConvergenceChecker88);
        double[] doubleArray90 = new double[] {};
        double[][] doubleArray91 = new double[][] { doubleArray90 };
        multiDirectional80.setStartConfiguration(doubleArray91);
        multiDirectional77.setStartConfiguration(doubleArray91);
        multiDirectional72.setStartConfiguration(doubleArray91);
        multiDirectional37.setStartConfiguration(doubleArray91);
        multiDirectional6.setStartConfiguration(doubleArray91);
        multiDirectional2.setStartConfiguration(doubleArray91);
        multiDirectional2.setMaxEvaluations((int) '4');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker62);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker88);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        multiDirectional2.setMaxIterations((int) (byte) 1);
        multiDirectional2.setMaxIterations((int) (byte) 0);
        int int7 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int11 = multiDirectional10.getEvaluations();
        int int12 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations((int) (byte) 1);
        multiDirectional10.setMaxEvaluations(2147483647);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxEvaluations();
        int int19 = multiDirectional17.getIterations();
        int int20 = multiDirectional17.getMaxEvaluations();
        int int21 = multiDirectional17.getMaxEvaluations();
        multiDirectional17.setMaxIterations((-1));
        int int24 = multiDirectional17.getIterations();
        multiDirectional17.setMaxIterations((int) '#');
        multiDirectional17.setMaxEvaluations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        int int31 = multiDirectional29.getIterations();
        int int32 = multiDirectional29.getMaxEvaluations();
        int int33 = multiDirectional29.getMaxEvaluations();
        multiDirectional29.setMaxIterations((-1));
        int int36 = multiDirectional29.getIterations();
        int int37 = multiDirectional29.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = null;
        multiDirectional29.setConvergenceChecker(realConvergenceChecker38);
        multiDirectional29.setMaxIterations((int) (byte) -1);
        multiDirectional29.setMaxEvaluations(100);
        int int44 = multiDirectional29.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int48 = multiDirectional47.getEvaluations();
        int int49 = multiDirectional47.getMaxEvaluations();
        multiDirectional47.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxEvaluations();
        int int54 = multiDirectional52.getIterations();
        int int55 = multiDirectional52.getMaxEvaluations();
        int int56 = multiDirectional52.getMaxEvaluations();
        multiDirectional52.setMaxIterations((-1));
        int int59 = multiDirectional52.getMaxIterations();
        int int60 = multiDirectional52.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int62 = multiDirectional61.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker63 = null;
        multiDirectional61.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional61.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker70 = multiDirectional69.getConvergenceChecker();
        multiDirectional61.setConvergenceChecker(realConvergenceChecker70);
        multiDirectional52.setConvergenceChecker(realConvergenceChecker70);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int77 = multiDirectional76.getMaxIterations();
        double[] doubleArray78 = new double[] {};
        multiDirectional76.setStartConfiguration(doubleArray78);
        int int80 = multiDirectional76.getMaxEvaluations();
        int int81 = multiDirectional76.getIterations();
        int int82 = multiDirectional76.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker83 = multiDirectional76.getConvergenceChecker();
        multiDirectional75.setConvergenceChecker(realConvergenceChecker83);
        double[] doubleArray85 = new double[] {};
        double[][] doubleArray86 = new double[][] { doubleArray85 };
        multiDirectional75.setStartConfiguration(doubleArray86);
        multiDirectional52.setStartConfiguration(doubleArray86);
        multiDirectional47.setStartConfiguration(doubleArray86);
        multiDirectional29.setStartConfiguration(doubleArray86);
        multiDirectional17.setStartConfiguration(doubleArray86);
        multiDirectional10.setStartConfiguration(doubleArray86);
        multiDirectional2.setStartConfiguration(doubleArray86);
        int int94 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker70);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional2.setConvergenceChecker(realConvergenceChecker4);
        int int6 = multiDirectional2.getMaxEvaluations();
        int int7 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker12);
        double[] doubleArray16 = new double[] { 1.0d, 2147483647 };
        multiDirectional8.setStartConfiguration(doubleArray16);
        multiDirectional8.setMaxIterations((int) (byte) 100);
        int int20 = multiDirectional8.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional23.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        double[] doubleArray34 = new double[] {};
        multiDirectional32.setStartConfiguration(doubleArray34);
        int int36 = multiDirectional32.getMaxEvaluations();
        int int37 = multiDirectional32.getIterations();
        int int38 = multiDirectional32.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional32.getConvergenceChecker();
        multiDirectional31.setConvergenceChecker(realConvergenceChecker39);
        double[] doubleArray41 = new double[] {};
        double[][] doubleArray42 = new double[][] { doubleArray41 };
        multiDirectional31.setStartConfiguration(doubleArray42);
        multiDirectional28.setStartConfiguration(doubleArray42);
        multiDirectional23.setStartConfiguration(doubleArray42);
        multiDirectional8.setStartConfiguration(doubleArray42);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxEvaluations();
        int int49 = multiDirectional47.getIterations();
        int int50 = multiDirectional47.getMaxEvaluations();
        int int51 = multiDirectional47.getMaxEvaluations();
        multiDirectional47.setMaxIterations((-1));
        int int54 = multiDirectional47.getIterations();
        int int55 = multiDirectional47.getMaxIterations();
        multiDirectional47.setMaxEvaluations(100);
        multiDirectional47.setMaxIterations((int) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = multiDirectional47.getConvergenceChecker();
        multiDirectional47.setMaxEvaluations((int) 'a');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional68 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional68.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional73 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional77 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int78 = multiDirectional77.getMaxIterations();
        double[] doubleArray79 = new double[] {};
        multiDirectional77.setStartConfiguration(doubleArray79);
        int int81 = multiDirectional77.getMaxEvaluations();
        int int82 = multiDirectional77.getIterations();
        int int83 = multiDirectional77.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker84 = multiDirectional77.getConvergenceChecker();
        multiDirectional76.setConvergenceChecker(realConvergenceChecker84);
        double[] doubleArray86 = new double[] {};
        double[][] doubleArray87 = new double[][] { doubleArray86 };
        multiDirectional76.setStartConfiguration(doubleArray87);
        multiDirectional73.setStartConfiguration(doubleArray87);
        multiDirectional68.setStartConfiguration(doubleArray87);
        multiDirectional65.setStartConfiguration(doubleArray87);
        multiDirectional47.setStartConfiguration(doubleArray87);
        multiDirectional8.setStartConfiguration(doubleArray87);
        multiDirectional2.setStartConfiguration(doubleArray87);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker60);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker84);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker12);
        multiDirectional10.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional18.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker19);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker19);
        int int22 = multiDirectional0.getIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0L, (double) 100L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int6 = multiDirectional5.getEvaluations();
        int int7 = multiDirectional5.getMaxEvaluations();
        int int8 = multiDirectional5.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxIterations((-1));
        int int16 = multiDirectional9.getIterations();
        int int17 = multiDirectional9.getEvaluations();
        int int18 = multiDirectional9.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = null;
        multiDirectional19.setConvergenceChecker(realConvergenceChecker23);
        double[] doubleArray27 = new double[] { 1.0d, 2147483647 };
        multiDirectional19.setStartConfiguration(doubleArray27);
        int int29 = multiDirectional19.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxIterations();
        double[] doubleArray32 = new double[] {};
        multiDirectional30.setStartConfiguration(doubleArray32);
        multiDirectional19.setStartConfiguration(doubleArray32);
        multiDirectional9.setStartConfiguration(doubleArray32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        int int38 = multiDirectional36.getIterations();
        int int39 = multiDirectional36.getMaxEvaluations();
        int int40 = multiDirectional36.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxIterations();
        double[] doubleArray43 = new double[] {};
        multiDirectional41.setStartConfiguration(doubleArray43);
        multiDirectional36.setStartConfiguration(doubleArray43);
        multiDirectional9.setStartConfiguration(doubleArray43);
        multiDirectional5.setStartConfiguration(doubleArray43);
        multiDirectional2.setStartConfiguration(doubleArray43);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray18 = new double[] { 1.0d, 2147483647 };
        multiDirectional10.setStartConfiguration(doubleArray18);
        int int20 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxIterations();
        double[] doubleArray23 = new double[] {};
        multiDirectional21.setStartConfiguration(doubleArray23);
        multiDirectional10.setStartConfiguration(doubleArray23);
        multiDirectional0.setStartConfiguration(doubleArray23);
        multiDirectional0.setMaxIterations(0);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction29 = null;
        org.apache.commons.math.optimization.GoalType goalType30 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = null;
        multiDirectional31.setConvergenceChecker(realConvergenceChecker35);
        double[] doubleArray39 = new double[] { 1.0d, 2147483647 };
        multiDirectional31.setStartConfiguration(doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair41 = multiDirectional0.optimize(multivariateRealFunction29, goalType30, doubleArray39);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxIterations();
        int int5 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction7 = null;
        org.apache.commons.math.optimization.GoalType goalType8 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        int int13 = multiDirectional11.getIterations();
        int int14 = multiDirectional11.getMaxEvaluations();
        int int15 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxIterations((-1));
        int int18 = multiDirectional11.getMaxIterations();
        multiDirectional11.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional23.getConvergenceChecker();
        multiDirectional11.setConvergenceChecker(realConvergenceChecker24);
        multiDirectional9.setConvergenceChecker(realConvergenceChecker24);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional9.getConvergenceChecker();
        int int28 = multiDirectional9.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = null;
        multiDirectional29.setConvergenceChecker(realConvergenceChecker31);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional33.setConvergenceChecker(realConvergenceChecker37);
        double[] doubleArray41 = new double[] { 1.0d, 2147483647 };
        multiDirectional33.setStartConfiguration(doubleArray41);
        int int43 = multiDirectional33.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxIterations();
        double[] doubleArray46 = new double[] {};
        multiDirectional44.setStartConfiguration(doubleArray46);
        multiDirectional33.setStartConfiguration(doubleArray46);
        multiDirectional29.setStartConfiguration(doubleArray46);
        multiDirectional9.setStartConfiguration(doubleArray46);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair51 = multiDirectional0.optimize(multivariateRealFunction7, goalType8, doubleArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker24);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxIterations();
        double[] doubleArray20 = new double[] {};
        multiDirectional18.setStartConfiguration(doubleArray20);
        multiDirectional0.setStartConfiguration(doubleArray20);
        int int23 = multiDirectional0.getEvaluations();
        int int24 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        int int8 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = null;
        multiDirectional9.setConvergenceChecker(realConvergenceChecker11);
        multiDirectional9.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker18);
        int int21 = multiDirectional0.getEvaluations();
        int int22 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int8 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1, (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getMaxIterations();
        int int21 = multiDirectional13.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker24);
        multiDirectional22.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = multiDirectional30.getConvergenceChecker();
        multiDirectional22.setConvergenceChecker(realConvergenceChecker31);
        multiDirectional13.setConvergenceChecker(realConvergenceChecker31);
        multiDirectional12.setConvergenceChecker(realConvergenceChecker31);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker35);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker31);
        org.junit.Assert.assertNotNull(realConvergenceChecker35);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxIterations((-1));
        int int16 = multiDirectional9.getMaxIterations();
        multiDirectional9.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional2.getConvergenceChecker();
        int int28 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        multiDirectional29.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxEvaluations();
        int int40 = multiDirectional38.getIterations();
        int int41 = multiDirectional38.getMaxEvaluations();
        int int42 = multiDirectional38.getMaxEvaluations();
        multiDirectional38.setMaxIterations((-1));
        int int45 = multiDirectional38.getMaxIterations();
        multiDirectional38.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker51 = multiDirectional50.getConvergenceChecker();
        multiDirectional38.setConvergenceChecker(realConvergenceChecker51);
        multiDirectional36.setConvergenceChecker(realConvergenceChecker51);
        multiDirectional35.setConvergenceChecker(realConvergenceChecker51);
        multiDirectional29.setConvergenceChecker(realConvergenceChecker51);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker51);
        int int57 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker51);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker18);
        int int22 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int26 = multiDirectional25.getEvaluations();
        int int27 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = multiDirectional25.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker30);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction32 = null;
        org.apache.commons.math.optimization.GoalType goalType33 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxEvaluations();
        multiDirectional37.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = null;
        multiDirectional37.setConvergenceChecker(realConvergenceChecker41);
        double[] doubleArray45 = new double[] { 1.0d, 2147483647 };
        multiDirectional37.setStartConfiguration(doubleArray45);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker47 = multiDirectional37.getConvergenceChecker();
        multiDirectional37.setMaxEvaluations((int) (byte) 100);
        int int50 = multiDirectional37.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxEvaluations();
        multiDirectional51.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = null;
        multiDirectional51.setConvergenceChecker(realConvergenceChecker55);
        double[] doubleArray59 = new double[] { 1.0d, 2147483647 };
        multiDirectional51.setStartConfiguration(doubleArray59);
        multiDirectional37.setStartConfiguration(doubleArray59);
        multiDirectional36.setStartConfiguration(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair63 = multiDirectional2.optimize(multivariateRealFunction32, goalType33, doubleArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker30);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        int int23 = multiDirectional21.getIterations();
        int int24 = multiDirectional21.getMaxEvaluations();
        int int25 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxIterations((-1));
        int int28 = multiDirectional21.getMaxIterations();
        multiDirectional21.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional33.getConvergenceChecker();
        multiDirectional21.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional19.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional18.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional12.setConvergenceChecker(realConvergenceChecker34);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker39);
        int int41 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        int int3 = multiDirectional2.getEvaluations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction4 = null;
        org.apache.commons.math.optimization.GoalType goalType5 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        int int8 = multiDirectional6.getIterations();
        int int9 = multiDirectional6.getMaxEvaluations();
        int int10 = multiDirectional6.getMaxEvaluations();
        multiDirectional6.setMaxIterations((-1));
        int int13 = multiDirectional6.getIterations();
        int int14 = multiDirectional6.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional6.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        int int18 = multiDirectional16.getIterations();
        int int19 = multiDirectional16.getMaxEvaluations();
        int int20 = multiDirectional16.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxIterations();
        double[] doubleArray23 = new double[] {};
        multiDirectional21.setStartConfiguration(doubleArray23);
        multiDirectional16.setStartConfiguration(doubleArray23);
        multiDirectional6.setStartConfiguration(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair27 = multiDirectional2.optimize(multivariateRealFunction4, goalType5, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        multiDirectional0.setMaxIterations((-1));
        multiDirectional0.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker18);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        multiDirectional2.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = null;
        multiDirectional7.setConvergenceChecker(realConvergenceChecker11);
        double[] doubleArray15 = new double[] { 1.0d, 2147483647 };
        multiDirectional7.setStartConfiguration(doubleArray15);
        multiDirectional7.setMaxIterations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int22 = multiDirectional21.getEvaluations();
        int int23 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        int int28 = multiDirectional26.getIterations();
        int int29 = multiDirectional26.getMaxEvaluations();
        int int30 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxIterations((-1));
        int int33 = multiDirectional26.getMaxIterations();
        int int34 = multiDirectional26.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional35.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional35.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = multiDirectional43.getConvergenceChecker();
        multiDirectional35.setConvergenceChecker(realConvergenceChecker44);
        multiDirectional26.setConvergenceChecker(realConvergenceChecker44);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxIterations();
        double[] doubleArray52 = new double[] {};
        multiDirectional50.setStartConfiguration(doubleArray52);
        int int54 = multiDirectional50.getMaxEvaluations();
        int int55 = multiDirectional50.getIterations();
        int int56 = multiDirectional50.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = multiDirectional50.getConvergenceChecker();
        multiDirectional49.setConvergenceChecker(realConvergenceChecker57);
        double[] doubleArray59 = new double[] {};
        double[][] doubleArray60 = new double[][] { doubleArray59 };
        multiDirectional49.setStartConfiguration(doubleArray60);
        multiDirectional26.setStartConfiguration(doubleArray60);
        multiDirectional21.setStartConfiguration(doubleArray60);
        multiDirectional7.setStartConfiguration(doubleArray60);
        multiDirectional2.setStartConfiguration(doubleArray60);
        int int66 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker44);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 1, (double) 100);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker7);
        double[] doubleArray11 = new double[] { 1.0d, 2147483647 };
        multiDirectional3.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional3.getConvergenceChecker();
        multiDirectional3.setMaxEvaluations((int) (byte) 100);
        multiDirectional3.setMaxIterations(35);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional3.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        multiDirectional27.setMaxIterations((-1));
        int int34 = multiDirectional27.getIterations();
        int int35 = multiDirectional27.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional27.getConvergenceChecker();
        multiDirectional26.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker36);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        int int42 = multiDirectional40.getIterations();
        int int43 = multiDirectional40.getMaxEvaluations();
        int int44 = multiDirectional40.getMaxEvaluations();
        multiDirectional40.setMaxIterations((-1));
        int int47 = multiDirectional40.getIterations();
        multiDirectional40.setMaxIterations((int) '#');
        multiDirectional40.setMaxEvaluations(0);
        multiDirectional40.setMaxIterations((int) (byte) 0);
        multiDirectional40.setMaxEvaluations((int) (byte) 0);
        int int56 = multiDirectional40.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = multiDirectional40.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker57);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker13);
        org.junit.Assert.assertNull(realConvergenceChecker18);
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker57);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        multiDirectional0.setMaxIterations((int) (byte) -1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker16);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker9);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction11 = null;
        org.apache.commons.math.optimization.GoalType goalType12 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxIterations();
        double[] doubleArray15 = new double[] {};
        multiDirectional13.setStartConfiguration(doubleArray15);
        int int17 = multiDirectional13.getMaxEvaluations();
        int int18 = multiDirectional13.getIterations();
        int int19 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((int) (short) 1);
        int int22 = multiDirectional13.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getIterations();
        int int31 = multiDirectional23.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional23.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        int int35 = multiDirectional33.getIterations();
        int int36 = multiDirectional33.getMaxEvaluations();
        int int37 = multiDirectional33.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxIterations();
        double[] doubleArray40 = new double[] {};
        multiDirectional38.setStartConfiguration(doubleArray40);
        multiDirectional33.setStartConfiguration(doubleArray40);
        multiDirectional23.setStartConfiguration(doubleArray40);
        multiDirectional13.setStartConfiguration(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair45 = multiDirectional0.optimize(multivariateRealFunction11, goalType12, doubleArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getMaxEvaluations();
        int int18 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = null;
        multiDirectional19.setConvergenceChecker(realConvergenceChecker23);
        double[] doubleArray26 = new double[] { 100.0d };
        multiDirectional19.setStartConfiguration(doubleArray26);
        int int28 = multiDirectional19.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        int int33 = multiDirectional31.getIterations();
        int int34 = multiDirectional31.getMaxEvaluations();
        int int35 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxIterations((-1));
        int int38 = multiDirectional31.getMaxIterations();
        multiDirectional31.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = multiDirectional43.getConvergenceChecker();
        multiDirectional31.setConvergenceChecker(realConvergenceChecker44);
        multiDirectional29.setConvergenceChecker(realConvergenceChecker44);
        multiDirectional19.setConvergenceChecker(realConvergenceChecker44);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker44);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = multiDirectional0.getConvergenceChecker();
        int int50 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker44);
        org.junit.Assert.assertNotNull(realConvergenceChecker49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker7);
        double[] doubleArray11 = new double[] { 1.0d, 2147483647 };
        multiDirectional3.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional3.getConvergenceChecker();
        multiDirectional3.setMaxEvaluations((int) (byte) 100);
        multiDirectional3.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker22);
        double[] doubleArray26 = new double[] { 1.0d, 2147483647 };
        multiDirectional18.setStartConfiguration(doubleArray26);
        int int28 = multiDirectional18.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxIterations();
        double[] doubleArray31 = new double[] {};
        multiDirectional29.setStartConfiguration(doubleArray31);
        multiDirectional18.setStartConfiguration(doubleArray31);
        multiDirectional3.setStartConfiguration(doubleArray31);
        multiDirectional2.setStartConfiguration(doubleArray31);
        multiDirectional2.setMaxIterations((int) 'a');
        int int38 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxEvaluations((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = null;
        multiDirectional9.setConvergenceChecker(realConvergenceChecker13);
        double[] doubleArray17 = new double[] { 1.0d, 2147483647 };
        multiDirectional9.setStartConfiguration(doubleArray17);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional9.getConvergenceChecker();
        multiDirectional9.setMaxEvaluations((int) (byte) 100);
        multiDirectional9.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker28);
        double[] doubleArray32 = new double[] { 1.0d, 2147483647 };
        multiDirectional24.setStartConfiguration(doubleArray32);
        int int34 = multiDirectional24.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxIterations();
        double[] doubleArray37 = new double[] {};
        multiDirectional35.setStartConfiguration(doubleArray37);
        multiDirectional24.setStartConfiguration(doubleArray37);
        multiDirectional9.setStartConfiguration(doubleArray37);
        multiDirectional0.setStartConfiguration(doubleArray37);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 35, (double) (-1.0f));
        multiDirectional2.setMaxIterations((int) 'a');
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker5);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = null;
        multiDirectional7.setConvergenceChecker(realConvergenceChecker11);
        double[] doubleArray15 = new double[] { 1.0d, 2147483647 };
        multiDirectional7.setStartConfiguration(doubleArray15);
        int int17 = multiDirectional7.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxIterations();
        double[] doubleArray20 = new double[] {};
        multiDirectional18.setStartConfiguration(doubleArray20);
        multiDirectional7.setStartConfiguration(doubleArray20);
        multiDirectional3.setStartConfiguration(doubleArray20);
        int int24 = multiDirectional3.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        multiDirectional27.setMaxIterations((-1));
        int int34 = multiDirectional27.getMaxIterations();
        multiDirectional27.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = multiDirectional39.getConvergenceChecker();
        multiDirectional27.setConvergenceChecker(realConvergenceChecker40);
        multiDirectional25.setConvergenceChecker(realConvergenceChecker40);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = multiDirectional25.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker43);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker43);
        java.lang.Class<?> wildcardClass46 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker40);
        org.junit.Assert.assertNotNull(realConvergenceChecker43);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getIterations();
        multiDirectional5.setMaxIterations((int) '#');
        multiDirectional5.setMaxEvaluations(0);
        multiDirectional5.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        int int27 = multiDirectional25.getIterations();
        int int28 = multiDirectional25.getMaxEvaluations();
        int int29 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxIterations((-1));
        int int32 = multiDirectional25.getIterations();
        multiDirectional25.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = null;
        multiDirectional25.setConvergenceChecker(realConvergenceChecker35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxEvaluations();
        multiDirectional37.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = null;
        multiDirectional37.setConvergenceChecker(realConvergenceChecker41);
        double[] doubleArray45 = new double[] { 1.0d, 2147483647 };
        multiDirectional37.setStartConfiguration(doubleArray45);
        multiDirectional25.setStartConfiguration(doubleArray45);
        int int48 = multiDirectional25.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = multiDirectional51.getConvergenceChecker();
        multiDirectional25.setConvergenceChecker(realConvergenceChecker52);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker52);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction55 = null;
        org.apache.commons.math.optimization.GoalType goalType56 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, (double) 10);
        int int60 = multiDirectional59.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int62 = multiDirectional61.getMaxIterations();
        double[] doubleArray63 = new double[] {};
        multiDirectional61.setStartConfiguration(doubleArray63);
        int int65 = multiDirectional61.getMaxEvaluations();
        int int66 = multiDirectional61.getIterations();
        int int67 = multiDirectional61.getMaxEvaluations();
        multiDirectional61.setMaxIterations((int) (short) 1);
        int int70 = multiDirectional61.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int72 = multiDirectional71.getMaxEvaluations();
        int int73 = multiDirectional71.getIterations();
        int int74 = multiDirectional71.getMaxEvaluations();
        int int75 = multiDirectional71.getMaxEvaluations();
        multiDirectional71.setMaxIterations((-1));
        int int78 = multiDirectional71.getIterations();
        int int79 = multiDirectional71.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker80 = multiDirectional71.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional81 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int82 = multiDirectional81.getMaxEvaluations();
        int int83 = multiDirectional81.getIterations();
        int int84 = multiDirectional81.getMaxEvaluations();
        int int85 = multiDirectional81.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional86 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int87 = multiDirectional86.getMaxIterations();
        double[] doubleArray88 = new double[] {};
        multiDirectional86.setStartConfiguration(doubleArray88);
        multiDirectional81.setStartConfiguration(doubleArray88);
        multiDirectional71.setStartConfiguration(doubleArray88);
        multiDirectional61.setStartConfiguration(doubleArray88);
        multiDirectional59.setStartConfiguration(doubleArray88);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair94 = multiDirectional0.optimize(multivariateRealFunction55, goalType56, doubleArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker52);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2147483647 + "'", int84 == 2147483647);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[]");
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxIterations();
        double[] doubleArray7 = new double[] {};
        multiDirectional5.setStartConfiguration(doubleArray7);
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int10 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations((int) 'a');
        int int13 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        int int7 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0L, (double) '4');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        int int4 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional16.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker17);
        int int19 = multiDirectional0.getMaxEvaluations();
        int int20 = multiDirectional0.getMaxEvaluations();
        int int21 = multiDirectional0.getEvaluations();
        int int22 = multiDirectional0.getMaxIterations();
        int int23 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker18);
        int int22 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations(2147483647);
        int int25 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getIterations();
        int int5 = multiDirectional2.getMaxEvaluations();
        int int6 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxIterations((-1));
        int int9 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional14.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker15);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker15);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        int int19 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = null;
        multiDirectional20.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker28);
        double[] doubleArray32 = new double[] { 1.0d, 2147483647 };
        multiDirectional24.setStartConfiguration(doubleArray32);
        int int34 = multiDirectional24.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxIterations();
        double[] doubleArray37 = new double[] {};
        multiDirectional35.setStartConfiguration(doubleArray37);
        multiDirectional24.setStartConfiguration(doubleArray37);
        multiDirectional20.setStartConfiguration(doubleArray37);
        multiDirectional0.setStartConfiguration(doubleArray37);
        int int42 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker15);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        int int12 = multiDirectional0.getMaxEvaluations();
        int int13 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker16);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker22);
        double[] doubleArray26 = new double[] { 1.0d, 2147483647 };
        multiDirectional18.setStartConfiguration(doubleArray26);
        int int28 = multiDirectional18.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxIterations();
        double[] doubleArray31 = new double[] {};
        multiDirectional29.setStartConfiguration(doubleArray31);
        multiDirectional18.setStartConfiguration(doubleArray31);
        multiDirectional14.setStartConfiguration(doubleArray31);
        multiDirectional0.setStartConfiguration(doubleArray31);
        multiDirectional0.setMaxIterations((int) (short) 0);
        int int38 = multiDirectional0.getIterations();
        multiDirectional0.setMaxEvaluations((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 35, (double) '#');
        int int3 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        int int13 = multiDirectional0.getEvaluations();
        int int14 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxEvaluations();
        int int17 = multiDirectional15.getIterations();
        int int18 = multiDirectional15.getMaxEvaluations();
        int int19 = multiDirectional15.getMaxEvaluations();
        multiDirectional15.setMaxIterations((-1));
        int int22 = multiDirectional15.getMaxIterations();
        multiDirectional15.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = multiDirectional27.getConvergenceChecker();
        multiDirectional15.setConvergenceChecker(realConvergenceChecker28);
        int int30 = multiDirectional15.getMaxIterations();
        int int31 = multiDirectional15.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int35 = multiDirectional34.getEvaluations();
        int int36 = multiDirectional34.getMaxEvaluations();
        multiDirectional34.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        int int41 = multiDirectional39.getIterations();
        int int42 = multiDirectional39.getMaxEvaluations();
        int int43 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxIterations((-1));
        int int46 = multiDirectional39.getMaxIterations();
        int int47 = multiDirectional39.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = null;
        multiDirectional48.setConvergenceChecker(realConvergenceChecker50);
        multiDirectional48.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = multiDirectional56.getConvergenceChecker();
        multiDirectional48.setConvergenceChecker(realConvergenceChecker57);
        multiDirectional39.setConvergenceChecker(realConvergenceChecker57);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional62 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int64 = multiDirectional63.getMaxIterations();
        double[] doubleArray65 = new double[] {};
        multiDirectional63.setStartConfiguration(doubleArray65);
        int int67 = multiDirectional63.getMaxEvaluations();
        int int68 = multiDirectional63.getIterations();
        int int69 = multiDirectional63.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker70 = multiDirectional63.getConvergenceChecker();
        multiDirectional62.setConvergenceChecker(realConvergenceChecker70);
        double[] doubleArray72 = new double[] {};
        double[][] doubleArray73 = new double[][] { doubleArray72 };
        multiDirectional62.setStartConfiguration(doubleArray73);
        multiDirectional39.setStartConfiguration(doubleArray73);
        multiDirectional34.setStartConfiguration(doubleArray73);
        multiDirectional15.setStartConfiguration(doubleArray73);
        multiDirectional0.setStartConfiguration(doubleArray73);
        java.lang.Class<?> wildcardClass79 = doubleArray73.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker57);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 100, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int6 = multiDirectional5.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxIterations((-1));
        int int16 = multiDirectional9.getMaxIterations();
        multiDirectional9.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional7.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker25);
        int int28 = multiDirectional2.getIterations();
        int int29 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxIterations((-1));
        int int16 = multiDirectional9.getMaxIterations();
        multiDirectional9.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional2.getConvergenceChecker();
        int int28 = multiDirectional2.getMaxEvaluations();
        int int29 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = null;
        multiDirectional30.setConvergenceChecker(realConvergenceChecker34);
        double[] doubleArray37 = new double[] { 100.0d };
        multiDirectional30.setStartConfiguration(doubleArray37);
        int int39 = multiDirectional30.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = null;
        multiDirectional30.setConvergenceChecker(realConvergenceChecker40);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxIterations();
        double[] doubleArray50 = new double[] {};
        multiDirectional48.setStartConfiguration(doubleArray50);
        int int52 = multiDirectional48.getMaxEvaluations();
        int int53 = multiDirectional48.getIterations();
        int int54 = multiDirectional48.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = multiDirectional48.getConvergenceChecker();
        multiDirectional47.setConvergenceChecker(realConvergenceChecker55);
        double[] doubleArray57 = new double[] {};
        double[][] doubleArray58 = new double[][] { doubleArray57 };
        multiDirectional47.setStartConfiguration(doubleArray58);
        multiDirectional44.setStartConfiguration(doubleArray58);
        multiDirectional30.setStartConfiguration(doubleArray58);
        multiDirectional2.setStartConfiguration(doubleArray58);
        java.lang.Class<?> wildcardClass63 = doubleArray58.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        int int10 = multiDirectional8.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getMaxIterations();
        multiDirectional13.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional25.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional8.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional8.setMaxIterations((int) (byte) 100);
        multiDirectional8.setMaxIterations((-1));
        int int34 = multiDirectional8.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int38 = multiDirectional37.getEvaluations();
        int int39 = multiDirectional37.getMaxEvaluations();
        int int40 = multiDirectional37.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxEvaluations();
        int int43 = multiDirectional41.getIterations();
        int int44 = multiDirectional41.getMaxEvaluations();
        int int45 = multiDirectional41.getMaxEvaluations();
        multiDirectional41.setMaxIterations((-1));
        int int48 = multiDirectional41.getIterations();
        int int49 = multiDirectional41.getEvaluations();
        int int50 = multiDirectional41.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxEvaluations();
        multiDirectional51.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = null;
        multiDirectional51.setConvergenceChecker(realConvergenceChecker55);
        double[] doubleArray59 = new double[] { 1.0d, 2147483647 };
        multiDirectional51.setStartConfiguration(doubleArray59);
        int int61 = multiDirectional51.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional62 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int63 = multiDirectional62.getMaxIterations();
        double[] doubleArray64 = new double[] {};
        multiDirectional62.setStartConfiguration(doubleArray64);
        multiDirectional51.setStartConfiguration(doubleArray64);
        multiDirectional41.setStartConfiguration(doubleArray64);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional68 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int69 = multiDirectional68.getMaxEvaluations();
        int int70 = multiDirectional68.getIterations();
        int int71 = multiDirectional68.getMaxEvaluations();
        int int72 = multiDirectional68.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional73 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int74 = multiDirectional73.getMaxIterations();
        double[] doubleArray75 = new double[] {};
        multiDirectional73.setStartConfiguration(doubleArray75);
        multiDirectional68.setStartConfiguration(doubleArray75);
        multiDirectional41.setStartConfiguration(doubleArray75);
        multiDirectional37.setStartConfiguration(doubleArray75);
        multiDirectional8.setStartConfiguration(doubleArray75);
        multiDirectional2.setStartConfiguration(doubleArray75);
        int int82 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        int int6 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations(32);
        multiDirectional0.setMaxEvaluations((-1));
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        int int17 = multiDirectional0.getMaxEvaluations();
        int int18 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = multiDirectional0.getConvergenceChecker();
        int int13 = multiDirectional0.getIterations();
        multiDirectional0.setMaxEvaluations((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int3 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations((int) (byte) 0);
        java.lang.Class<?> wildcardClass6 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional0.getConvergenceChecker();
        int int6 = multiDirectional0.getIterations();
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getIterations();
        double[] doubleArray11 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional0.setStartConfiguration(doubleArray11);
        int int13 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = multiDirectional0.getConvergenceChecker();
        int int15 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getIterations();
        double[] doubleArray11 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional0.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getIterations();
        int int21 = multiDirectional13.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional13.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        multiDirectional23.setStartConfiguration(doubleArray30);
        multiDirectional13.setStartConfiguration(doubleArray30);
        multiDirectional0.setStartConfiguration(doubleArray30);
        multiDirectional0.setMaxEvaluations((int) '#');
        int int37 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional0.getConvergenceChecker();
        int int39 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 1, (double) 1);
        multiDirectional2.setMaxIterations(0);
        java.lang.Class<?> wildcardClass5 = multiDirectional2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        int int21 = multiDirectional19.getIterations();
        int int22 = multiDirectional19.getMaxEvaluations();
        int int23 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxIterations((-1));
        int int26 = multiDirectional19.getMaxIterations();
        multiDirectional19.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional31.getConvergenceChecker();
        multiDirectional19.setConvergenceChecker(realConvergenceChecker32);
        int int34 = multiDirectional19.getMaxIterations();
        int int35 = multiDirectional19.getEvaluations();
        int int36 = multiDirectional19.getMaxEvaluations();
        int int37 = multiDirectional19.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxEvaluations();
        multiDirectional38.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = null;
        multiDirectional38.setConvergenceChecker(realConvergenceChecker42);
        double[] doubleArray45 = new double[] { 100.0d };
        multiDirectional38.setStartConfiguration(doubleArray45);
        int int47 = multiDirectional38.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxEvaluations();
        int int52 = multiDirectional50.getIterations();
        int int53 = multiDirectional50.getMaxEvaluations();
        int int54 = multiDirectional50.getMaxEvaluations();
        multiDirectional50.setMaxIterations((-1));
        int int57 = multiDirectional50.getMaxIterations();
        multiDirectional50.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional62 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker63 = multiDirectional62.getConvergenceChecker();
        multiDirectional50.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional48.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional38.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional19.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker63);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker69 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (short) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker72 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker72);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker74 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker63);
        org.junit.Assert.assertNotNull(realConvergenceChecker69);
        org.junit.Assert.assertNull(realConvergenceChecker74);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        multiDirectional0.setMaxEvaluations((int) '4');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker18);
        double[] doubleArray22 = new double[] { 1.0d, 2147483647 };
        multiDirectional14.setStartConfiguration(doubleArray22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional14.getConvergenceChecker();
        multiDirectional14.setMaxEvaluations((int) (byte) 100);
        multiDirectional14.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional14.getConvergenceChecker();
        int int30 = multiDirectional14.getEvaluations();
        int int31 = multiDirectional14.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxEvaluations();
        int int34 = multiDirectional32.getIterations();
        int int35 = multiDirectional32.getMaxEvaluations();
        int int36 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxIterations((-1));
        int int39 = multiDirectional32.getIterations();
        int int40 = multiDirectional32.getEvaluations();
        int int41 = multiDirectional32.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional42.setConvergenceChecker(realConvergenceChecker46);
        double[] doubleArray50 = new double[] { 1.0d, 2147483647 };
        multiDirectional42.setStartConfiguration(doubleArray50);
        int int52 = multiDirectional42.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxIterations();
        double[] doubleArray55 = new double[] {};
        multiDirectional53.setStartConfiguration(doubleArray55);
        multiDirectional42.setStartConfiguration(doubleArray55);
        multiDirectional32.setStartConfiguration(doubleArray55);
        multiDirectional14.setStartConfiguration(doubleArray55);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int61 = multiDirectional60.getMaxEvaluations();
        multiDirectional60.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = null;
        multiDirectional60.setConvergenceChecker(realConvergenceChecker64);
        double[] doubleArray68 = new double[] { 1.0d, 2147483647 };
        multiDirectional60.setStartConfiguration(doubleArray68);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker70 = multiDirectional60.getConvergenceChecker();
        multiDirectional60.setMaxEvaluations((int) (byte) 100);
        multiDirectional60.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxEvaluations();
        multiDirectional75.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker79 = null;
        multiDirectional75.setConvergenceChecker(realConvergenceChecker79);
        double[] doubleArray83 = new double[] { 1.0d, 2147483647 };
        multiDirectional75.setStartConfiguration(doubleArray83);
        int int85 = multiDirectional75.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional86 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int87 = multiDirectional86.getMaxIterations();
        double[] doubleArray88 = new double[] {};
        multiDirectional86.setStartConfiguration(doubleArray88);
        multiDirectional75.setStartConfiguration(doubleArray88);
        multiDirectional60.setStartConfiguration(doubleArray88);
        multiDirectional14.setStartConfiguration(doubleArray88);
        multiDirectional0.setStartConfiguration(doubleArray88);
        int int94 = multiDirectional0.getIterations();
        int int95 = multiDirectional0.getIterations();
        int int96 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker24);
        org.junit.Assert.assertNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 52 + "'", int96 == 52);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        int int3 = multiDirectional2.getEvaluations();
        multiDirectional2.setMaxIterations(35);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction6 = null;
        org.apache.commons.math.optimization.GoalType goalType7 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker12);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker18);
        double[] doubleArray22 = new double[] { 1.0d, 2147483647 };
        multiDirectional14.setStartConfiguration(doubleArray22);
        multiDirectional8.setStartConfiguration(doubleArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair25 = multiDirectional2.optimize(multivariateRealFunction6, goalType7, doubleArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int6 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations(1);
        int int9 = multiDirectional0.getMaxIterations();
        int int10 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = null;
        multiDirectional11.setConvergenceChecker(realConvergenceChecker15);
        double[] doubleArray18 = new double[] { 100.0d };
        multiDirectional11.setStartConfiguration(doubleArray18);
        int int20 = multiDirectional11.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = null;
        multiDirectional11.setConvergenceChecker(realConvergenceChecker21);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = null;
        multiDirectional23.setConvergenceChecker(realConvergenceChecker27);
        double[] doubleArray30 = new double[] { 100.0d };
        multiDirectional23.setStartConfiguration(doubleArray30);
        int int32 = multiDirectional23.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxEvaluations();
        int int37 = multiDirectional35.getIterations();
        int int38 = multiDirectional35.getMaxEvaluations();
        int int39 = multiDirectional35.getMaxEvaluations();
        multiDirectional35.setMaxIterations((-1));
        int int42 = multiDirectional35.getMaxIterations();
        multiDirectional35.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = multiDirectional47.getConvergenceChecker();
        multiDirectional35.setConvergenceChecker(realConvergenceChecker48);
        multiDirectional33.setConvergenceChecker(realConvergenceChecker48);
        multiDirectional23.setConvergenceChecker(realConvergenceChecker48);
        multiDirectional23.setMaxIterations(100);
        multiDirectional23.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional58.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxIterations();
        double[] doubleArray69 = new double[] {};
        multiDirectional67.setStartConfiguration(doubleArray69);
        int int71 = multiDirectional67.getMaxEvaluations();
        int int72 = multiDirectional67.getIterations();
        int int73 = multiDirectional67.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker74 = multiDirectional67.getConvergenceChecker();
        multiDirectional66.setConvergenceChecker(realConvergenceChecker74);
        double[] doubleArray76 = new double[] {};
        double[][] doubleArray77 = new double[][] { doubleArray76 };
        multiDirectional66.setStartConfiguration(doubleArray77);
        multiDirectional63.setStartConfiguration(doubleArray77);
        multiDirectional58.setStartConfiguration(doubleArray77);
        multiDirectional23.setStartConfiguration(doubleArray77);
        multiDirectional11.setStartConfiguration(doubleArray77);
        multiDirectional0.setStartConfiguration(doubleArray77);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker48);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, (double) 10.0f);
        int int3 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations((int) ' ');
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction6 = null;
        org.apache.commons.math.optimization.GoalType goalType7 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 0, (double) (short) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = null;
        multiDirectional11.setConvergenceChecker(realConvergenceChecker13);
        multiDirectional11.setMaxEvaluations((int) ' ');
        int int17 = multiDirectional11.getEvaluations();
        int int18 = multiDirectional11.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional21.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker28);
        double[] doubleArray32 = new double[] { 1.0d, 2147483647 };
        multiDirectional24.setStartConfiguration(doubleArray32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional24.getConvergenceChecker();
        multiDirectional24.setMaxEvaluations((int) (byte) 100);
        multiDirectional24.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional24.getConvergenceChecker();
        int int40 = multiDirectional24.getEvaluations();
        int int41 = multiDirectional24.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        int int44 = multiDirectional42.getIterations();
        int int45 = multiDirectional42.getMaxEvaluations();
        int int46 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxIterations((-1));
        int int49 = multiDirectional42.getIterations();
        int int50 = multiDirectional42.getEvaluations();
        int int51 = multiDirectional42.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxEvaluations();
        multiDirectional52.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = null;
        multiDirectional52.setConvergenceChecker(realConvergenceChecker56);
        double[] doubleArray60 = new double[] { 1.0d, 2147483647 };
        multiDirectional52.setStartConfiguration(doubleArray60);
        int int62 = multiDirectional52.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int64 = multiDirectional63.getMaxIterations();
        double[] doubleArray65 = new double[] {};
        multiDirectional63.setStartConfiguration(doubleArray65);
        multiDirectional52.setStartConfiguration(doubleArray65);
        multiDirectional42.setStartConfiguration(doubleArray65);
        multiDirectional24.setStartConfiguration(doubleArray65);
        multiDirectional21.setStartConfiguration(doubleArray65);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional73 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional73.setMaxEvaluations((int) (byte) 0);
        double[] doubleArray78 = new double[] { (-1.0f), ' ' };
        multiDirectional73.setStartConfiguration(doubleArray78);
        multiDirectional21.setStartConfiguration(doubleArray78);
        multiDirectional11.setStartConfiguration(doubleArray78);
        multiDirectional10.setStartConfiguration(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair83 = multiDirectional2.optimize(multivariateRealFunction6, goalType7, doubleArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker34);
        org.junit.Assert.assertNull(realConvergenceChecker39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 32.0]");
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) (short) 10);
        int int3 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = multiDirectional2.getConvergenceChecker();
        int int5 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = null;
        multiDirectional9.setConvergenceChecker(realConvergenceChecker13);
        double[] doubleArray17 = new double[] { 1.0d, 2147483647 };
        multiDirectional9.setStartConfiguration(doubleArray17);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional9.getConvergenceChecker();
        multiDirectional9.setMaxEvaluations((int) (byte) 100);
        multiDirectional9.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker28);
        double[] doubleArray32 = new double[] { 1.0d, 2147483647 };
        multiDirectional24.setStartConfiguration(doubleArray32);
        int int34 = multiDirectional24.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxIterations();
        double[] doubleArray37 = new double[] {};
        multiDirectional35.setStartConfiguration(doubleArray37);
        multiDirectional24.setStartConfiguration(doubleArray37);
        multiDirectional9.setStartConfiguration(doubleArray37);
        multiDirectional8.setStartConfiguration(doubleArray37);
        multiDirectional2.setStartConfiguration(doubleArray37);
        int int43 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker16);
        double[] doubleArray20 = new double[] { 1.0d, 2147483647 };
        multiDirectional12.setStartConfiguration(doubleArray20);
        multiDirectional0.setStartConfiguration(doubleArray20);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        multiDirectional23.setStartConfiguration(doubleArray30);
        multiDirectional0.setStartConfiguration(doubleArray30);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional0.getConvergenceChecker();
        int int35 = multiDirectional0.getMaxIterations();
        int int36 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int40 = multiDirectional39.getEvaluations();
        int int41 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxEvaluations();
        multiDirectional44.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = null;
        multiDirectional44.setConvergenceChecker(realConvergenceChecker48);
        double[] doubleArray52 = new double[] { 1.0d, 2147483647 };
        multiDirectional44.setStartConfiguration(doubleArray52);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = multiDirectional44.getConvergenceChecker();
        multiDirectional44.setMaxEvaluations((int) (byte) 100);
        multiDirectional44.setMaxIterations(35);
        double[] doubleArray60 = new double[] { 100.0d };
        multiDirectional44.setStartConfiguration(doubleArray60);
        multiDirectional39.setStartConfiguration(doubleArray60);
        multiDirectional0.setStartConfiguration(doubleArray60);
        int int64 = multiDirectional0.getMaxEvaluations();
        int int65 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker54);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        int int4 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional5.setConvergenceChecker(realConvergenceChecker9);
        double[] doubleArray13 = new double[] { 1.0d, 2147483647 };
        multiDirectional5.setStartConfiguration(doubleArray13);
        int int15 = multiDirectional5.getMaxIterations();
        int int16 = multiDirectional5.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional5.setConvergenceChecker(realConvergenceChecker17);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional5.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = null;
        multiDirectional23.setConvergenceChecker(realConvergenceChecker27);
        double[] doubleArray30 = new double[] { 100.0d };
        multiDirectional23.setStartConfiguration(doubleArray30);
        int int32 = multiDirectional23.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxEvaluations();
        int int37 = multiDirectional35.getIterations();
        int int38 = multiDirectional35.getMaxEvaluations();
        int int39 = multiDirectional35.getMaxEvaluations();
        multiDirectional35.setMaxIterations((-1));
        int int42 = multiDirectional35.getMaxIterations();
        multiDirectional35.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = multiDirectional47.getConvergenceChecker();
        multiDirectional35.setConvergenceChecker(realConvergenceChecker48);
        multiDirectional33.setConvergenceChecker(realConvergenceChecker48);
        multiDirectional23.setConvergenceChecker(realConvergenceChecker48);
        multiDirectional23.setMaxIterations(100);
        multiDirectional23.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional58.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxIterations();
        double[] doubleArray69 = new double[] {};
        multiDirectional67.setStartConfiguration(doubleArray69);
        int int71 = multiDirectional67.getMaxEvaluations();
        int int72 = multiDirectional67.getIterations();
        int int73 = multiDirectional67.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker74 = multiDirectional67.getConvergenceChecker();
        multiDirectional66.setConvergenceChecker(realConvergenceChecker74);
        double[] doubleArray76 = new double[] {};
        double[][] doubleArray77 = new double[][] { doubleArray76 };
        multiDirectional66.setStartConfiguration(doubleArray77);
        multiDirectional63.setStartConfiguration(doubleArray77);
        multiDirectional58.setStartConfiguration(doubleArray77);
        multiDirectional23.setStartConfiguration(doubleArray77);
        multiDirectional22.setStartConfiguration(doubleArray77);
        multiDirectional5.setStartConfiguration(doubleArray77);
        multiDirectional0.setStartConfiguration(doubleArray77);
        multiDirectional0.setMaxIterations(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker48);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getMaxEvaluations();
        int int15 = multiDirectional0.getMaxEvaluations();
        int int16 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(10);
        double[] doubleArray19 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiDirectional0.setStartConfiguration(doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getIterations();
        int int5 = multiDirectional2.getMaxEvaluations();
        int int6 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxIterations((-1));
        int int9 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional14.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker15);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker15);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        int int19 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(10);
        int int22 = multiDirectional0.getEvaluations();
        int int23 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((-1));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker15);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        multiDirectional2.setMaxEvaluations((int) 'a');
        int int5 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) (short) 10);
        int int3 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = multiDirectional2.getConvergenceChecker();
        int int5 = multiDirectional2.getMaxIterations();
        int int6 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxEvaluations(100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100.0f, (double) 10L);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxIterations((-1));
        int int16 = multiDirectional9.getMaxIterations();
        multiDirectional9.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional2.getConvergenceChecker();
        int int28 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxIterations((-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional0.getConvergenceChecker();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        int int20 = multiDirectional18.getIterations();
        int int21 = multiDirectional18.getMaxEvaluations();
        int int22 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxIterations((-1));
        int int25 = multiDirectional18.getMaxIterations();
        int int26 = multiDirectional18.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = null;
        multiDirectional27.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional27.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional35.getConvergenceChecker();
        multiDirectional27.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional18.setConvergenceChecker(realConvergenceChecker36);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxIterations();
        double[] doubleArray44 = new double[] {};
        multiDirectional42.setStartConfiguration(doubleArray44);
        int int46 = multiDirectional42.getMaxEvaluations();
        int int47 = multiDirectional42.getIterations();
        int int48 = multiDirectional42.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = multiDirectional42.getConvergenceChecker();
        multiDirectional41.setConvergenceChecker(realConvergenceChecker49);
        double[] doubleArray51 = new double[] {};
        double[][] doubleArray52 = new double[][] { doubleArray51 };
        multiDirectional41.setStartConfiguration(doubleArray52);
        multiDirectional18.setStartConfiguration(doubleArray52);
        multiDirectional0.setStartConfiguration(doubleArray52);
        int int56 = multiDirectional0.getMaxEvaluations();
        int int57 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getIterations();
        int int11 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxIterations();
        double[] doubleArray14 = new double[] {};
        multiDirectional12.setStartConfiguration(doubleArray14);
        int int16 = multiDirectional12.getMaxEvaluations();
        int int17 = multiDirectional12.getMaxIterations();
        int int18 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker21);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker21);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxIterations();
        double[] doubleArray7 = new double[] {};
        multiDirectional5.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional5.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        int int12 = multiDirectional10.getIterations();
        int int13 = multiDirectional10.getMaxEvaluations();
        int int14 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxIterations((-1));
        int int17 = multiDirectional10.getIterations();
        multiDirectional10.setMaxIterations((int) '#');
        multiDirectional10.setMaxEvaluations(0);
        multiDirectional10.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional26.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional5.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker27);
        int int31 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations(100);
        int int34 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxIterations();
        double[] doubleArray9 = new double[] {};
        multiDirectional7.setStartConfiguration(doubleArray9);
        int int11 = multiDirectional7.getMaxEvaluations();
        int int12 = multiDirectional7.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional7.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker18);
        double[] doubleArray22 = new double[] { 1.0d, 2147483647 };
        multiDirectional14.setStartConfiguration(doubleArray22);
        multiDirectional14.setMaxIterations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int29 = multiDirectional28.getEvaluations();
        int int30 = multiDirectional28.getMaxEvaluations();
        multiDirectional28.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        int int35 = multiDirectional33.getIterations();
        int int36 = multiDirectional33.getMaxEvaluations();
        int int37 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxIterations((-1));
        int int40 = multiDirectional33.getMaxIterations();
        int int41 = multiDirectional33.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = null;
        multiDirectional42.setConvergenceChecker(realConvergenceChecker44);
        multiDirectional42.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker51 = multiDirectional50.getConvergenceChecker();
        multiDirectional42.setConvergenceChecker(realConvergenceChecker51);
        multiDirectional33.setConvergenceChecker(realConvergenceChecker51);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int58 = multiDirectional57.getMaxIterations();
        double[] doubleArray59 = new double[] {};
        multiDirectional57.setStartConfiguration(doubleArray59);
        int int61 = multiDirectional57.getMaxEvaluations();
        int int62 = multiDirectional57.getIterations();
        int int63 = multiDirectional57.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = multiDirectional57.getConvergenceChecker();
        multiDirectional56.setConvergenceChecker(realConvergenceChecker64);
        double[] doubleArray66 = new double[] {};
        double[][] doubleArray67 = new double[][] { doubleArray66 };
        multiDirectional56.setStartConfiguration(doubleArray67);
        multiDirectional33.setStartConfiguration(doubleArray67);
        multiDirectional28.setStartConfiguration(doubleArray67);
        multiDirectional14.setStartConfiguration(doubleArray67);
        multiDirectional7.setStartConfiguration(doubleArray67);
        multiDirectional6.setStartConfiguration(doubleArray67);
        multiDirectional2.setStartConfiguration(doubleArray67);
        java.lang.Class<?> wildcardClass75 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker51);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        int int4 = multiDirectional0.getMaxIterations();
        int int5 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        int int7 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations((int) ' ');
        int int10 = multiDirectional0.getIterations();
        int int11 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getIterations();
        int int15 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        int int20 = multiDirectional18.getIterations();
        int int21 = multiDirectional18.getMaxEvaluations();
        int int22 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxIterations((-1));
        int int25 = multiDirectional18.getIterations();
        multiDirectional18.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker28);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = null;
        multiDirectional30.setConvergenceChecker(realConvergenceChecker34);
        double[] doubleArray38 = new double[] { 1.0d, 2147483647 };
        multiDirectional30.setStartConfiguration(doubleArray38);
        multiDirectional18.setStartConfiguration(doubleArray38);
        multiDirectional17.setStartConfiguration(doubleArray38);
        multiDirectional0.setStartConfiguration(doubleArray38);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1), (double) (-1.0f));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxIterations();
        double[] doubleArray48 = new double[] {};
        multiDirectional46.setStartConfiguration(doubleArray48);
        int int50 = multiDirectional46.getMaxEvaluations();
        int int51 = multiDirectional46.getIterations();
        int int52 = multiDirectional46.getMaxEvaluations();
        multiDirectional46.setMaxIterations((int) (short) 1);
        int int55 = multiDirectional46.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxEvaluations();
        int int58 = multiDirectional56.getIterations();
        int int59 = multiDirectional56.getMaxEvaluations();
        int int60 = multiDirectional56.getMaxEvaluations();
        multiDirectional56.setMaxIterations((-1));
        int int63 = multiDirectional56.getIterations();
        int int64 = multiDirectional56.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker65 = multiDirectional56.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int67 = multiDirectional66.getMaxEvaluations();
        int int68 = multiDirectional66.getIterations();
        int int69 = multiDirectional66.getMaxEvaluations();
        int int70 = multiDirectional66.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int72 = multiDirectional71.getMaxIterations();
        double[] doubleArray73 = new double[] {};
        multiDirectional71.setStartConfiguration(doubleArray73);
        multiDirectional66.setStartConfiguration(doubleArray73);
        multiDirectional56.setStartConfiguration(doubleArray73);
        multiDirectional46.setStartConfiguration(doubleArray73);
        multiDirectional45.setStartConfiguration(doubleArray73);
        multiDirectional0.setStartConfiguration(doubleArray73);
        int int80 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10.0f, (double) (short) 1);
        int int3 = multiDirectional2.getIterations();
        java.lang.Class<?> wildcardClass4 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxIterations();
        double[] doubleArray11 = new double[] {};
        multiDirectional9.setStartConfiguration(doubleArray11);
        int int13 = multiDirectional9.getMaxEvaluations();
        int int14 = multiDirectional9.getIterations();
        double[] doubleArray20 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional9.setStartConfiguration(doubleArray20);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        int int24 = multiDirectional22.getIterations();
        int int25 = multiDirectional22.getMaxEvaluations();
        int int26 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxIterations((-1));
        int int29 = multiDirectional22.getIterations();
        int int30 = multiDirectional22.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = multiDirectional22.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxEvaluations();
        int int34 = multiDirectional32.getIterations();
        int int35 = multiDirectional32.getMaxEvaluations();
        int int36 = multiDirectional32.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxIterations();
        double[] doubleArray39 = new double[] {};
        multiDirectional37.setStartConfiguration(doubleArray39);
        multiDirectional32.setStartConfiguration(doubleArray39);
        multiDirectional22.setStartConfiguration(doubleArray39);
        multiDirectional9.setStartConfiguration(doubleArray39);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxEvaluations();
        multiDirectional44.setMaxIterations((int) (byte) 0);
        int int48 = multiDirectional44.getMaxIterations();
        int int49 = multiDirectional44.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = multiDirectional44.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker50);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker50);
        int int53 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker10);
        int int12 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations(2147483647);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxEvaluations();
        int int17 = multiDirectional15.getIterations();
        int int18 = multiDirectional15.getMaxEvaluations();
        int int19 = multiDirectional15.getMaxEvaluations();
        multiDirectional15.setMaxIterations((-1));
        int int22 = multiDirectional15.getMaxIterations();
        multiDirectional15.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = multiDirectional27.getConvergenceChecker();
        multiDirectional15.setConvergenceChecker(realConvergenceChecker28);
        int int30 = multiDirectional15.getMaxIterations();
        int int31 = multiDirectional15.getEvaluations();
        int int32 = multiDirectional15.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = multiDirectional15.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int37 = multiDirectional36.getEvaluations();
        int int38 = multiDirectional36.getMaxEvaluations();
        multiDirectional36.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = multiDirectional36.getConvergenceChecker();
        multiDirectional15.setConvergenceChecker(realConvergenceChecker41);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = null;
        multiDirectional43.setConvergenceChecker(realConvergenceChecker45);
        multiDirectional43.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxIterations();
        double[] doubleArray51 = new double[] {};
        multiDirectional49.setStartConfiguration(doubleArray51);
        int int53 = multiDirectional49.getMaxEvaluations();
        int int54 = multiDirectional49.getMaxIterations();
        int int55 = multiDirectional49.getMaxIterations();
        multiDirectional49.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int59 = multiDirectional58.getMaxEvaluations();
        int int60 = multiDirectional58.getIterations();
        int int61 = multiDirectional58.getMaxEvaluations();
        int int62 = multiDirectional58.getMaxEvaluations();
        multiDirectional58.setMaxIterations((-1));
        int int65 = multiDirectional58.getMaxIterations();
        int int66 = multiDirectional58.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker69 = null;
        multiDirectional67.setConvergenceChecker(realConvergenceChecker69);
        multiDirectional67.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker76 = multiDirectional75.getConvergenceChecker();
        multiDirectional67.setConvergenceChecker(realConvergenceChecker76);
        multiDirectional58.setConvergenceChecker(realConvergenceChecker76);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional81 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional82 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int83 = multiDirectional82.getMaxIterations();
        double[] doubleArray84 = new double[] {};
        multiDirectional82.setStartConfiguration(doubleArray84);
        int int86 = multiDirectional82.getMaxEvaluations();
        int int87 = multiDirectional82.getIterations();
        int int88 = multiDirectional82.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker89 = multiDirectional82.getConvergenceChecker();
        multiDirectional81.setConvergenceChecker(realConvergenceChecker89);
        double[] doubleArray91 = new double[] {};
        double[][] doubleArray92 = new double[][] { doubleArray91 };
        multiDirectional81.setStartConfiguration(doubleArray92);
        multiDirectional58.setStartConfiguration(doubleArray92);
        multiDirectional49.setStartConfiguration(doubleArray92);
        multiDirectional43.setStartConfiguration(doubleArray92);
        multiDirectional15.setStartConfiguration(doubleArray92);
        multiDirectional0.setStartConfiguration(doubleArray92);
        int int99 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker76);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2147483647 + "'", int86 == 2147483647);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2147483647 + "'", int88 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker89);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 2147483647 + "'", int99 == 2147483647);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) ' ');
        multiDirectional0.setMaxEvaluations(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getMaxEvaluations();
        int int15 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction16 = null;
        org.apache.commons.math.optimization.GoalType goalType17 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        int int20 = multiDirectional18.getIterations();
        int int21 = multiDirectional18.getMaxEvaluations();
        int int22 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxIterations((-1));
        int int25 = multiDirectional18.getMaxIterations();
        multiDirectional18.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = multiDirectional30.getConvergenceChecker();
        multiDirectional18.setConvergenceChecker(realConvergenceChecker31);
        int int33 = multiDirectional18.getMaxIterations();
        int int34 = multiDirectional18.getEvaluations();
        int int35 = multiDirectional18.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxIterations();
        double[] doubleArray38 = new double[] {};
        multiDirectional36.setStartConfiguration(doubleArray38);
        multiDirectional18.setStartConfiguration(doubleArray38);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxEvaluations();
        int int43 = multiDirectional41.getIterations();
        int int44 = multiDirectional41.getMaxEvaluations();
        int int45 = multiDirectional41.getMaxEvaluations();
        multiDirectional41.setMaxIterations((-1));
        int int48 = multiDirectional41.getIterations();
        int int49 = multiDirectional41.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = multiDirectional41.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxEvaluations();
        int int53 = multiDirectional51.getIterations();
        int int54 = multiDirectional51.getMaxEvaluations();
        int int55 = multiDirectional51.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxIterations();
        double[] doubleArray58 = new double[] {};
        multiDirectional56.setStartConfiguration(doubleArray58);
        multiDirectional51.setStartConfiguration(doubleArray58);
        multiDirectional41.setStartConfiguration(doubleArray58);
        multiDirectional18.setStartConfiguration(doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair63 = multiDirectional0.optimize(multivariateRealFunction16, goalType17, doubleArray58);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker12);
        multiDirectional10.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional18.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker19);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker19);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        int int24 = multiDirectional22.getIterations();
        int int25 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        int int32 = multiDirectional28.getMaxEvaluations();
        int int33 = multiDirectional28.getMaxIterations();
        int int34 = multiDirectional28.getMaxIterations();
        multiDirectional28.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional28.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional28.getConvergenceChecker();
        int int39 = multiDirectional28.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        int int42 = multiDirectional40.getIterations();
        int int43 = multiDirectional40.getMaxEvaluations();
        int int44 = multiDirectional40.getMaxEvaluations();
        multiDirectional40.setMaxIterations((-1));
        int int47 = multiDirectional40.getMaxIterations();
        multiDirectional40.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = multiDirectional52.getConvergenceChecker();
        multiDirectional40.setConvergenceChecker(realConvergenceChecker53);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = null;
        multiDirectional55.setConvergenceChecker(realConvergenceChecker57);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxEvaluations();
        multiDirectional59.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker63 = null;
        multiDirectional59.setConvergenceChecker(realConvergenceChecker63);
        double[] doubleArray67 = new double[] { 1.0d, 2147483647 };
        multiDirectional59.setStartConfiguration(doubleArray67);
        int int69 = multiDirectional59.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int71 = multiDirectional70.getMaxIterations();
        double[] doubleArray72 = new double[] {};
        multiDirectional70.setStartConfiguration(doubleArray72);
        multiDirectional59.setStartConfiguration(doubleArray72);
        multiDirectional55.setStartConfiguration(doubleArray72);
        multiDirectional40.setStartConfiguration(doubleArray72);
        multiDirectional28.setStartConfiguration(doubleArray72);
        multiDirectional22.setStartConfiguration(doubleArray72);
        multiDirectional0.setStartConfiguration(doubleArray72);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker37);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = null;
        multiDirectional9.setConvergenceChecker(realConvergenceChecker13);
        double[] doubleArray17 = new double[] { 1.0d, 2147483647 };
        multiDirectional9.setStartConfiguration(doubleArray17);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional9.getConvergenceChecker();
        multiDirectional9.setMaxEvaluations((int) (byte) 100);
        multiDirectional9.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker28);
        double[] doubleArray32 = new double[] { 1.0d, 2147483647 };
        multiDirectional24.setStartConfiguration(doubleArray32);
        int int34 = multiDirectional24.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxIterations();
        double[] doubleArray37 = new double[] {};
        multiDirectional35.setStartConfiguration(doubleArray37);
        multiDirectional24.setStartConfiguration(doubleArray37);
        multiDirectional9.setStartConfiguration(doubleArray37);
        multiDirectional8.setStartConfiguration(doubleArray37);
        multiDirectional0.setStartConfiguration(doubleArray37);
        java.lang.Class<?> wildcardClass43 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations((int) (byte) -1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxIterations((-1));
        int int16 = multiDirectional9.getMaxIterations();
        multiDirectional9.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker22);
        int int24 = multiDirectional9.getMaxIterations();
        int int25 = multiDirectional9.getEvaluations();
        int int26 = multiDirectional9.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxIterations();
        double[] doubleArray29 = new double[] {};
        multiDirectional27.setStartConfiguration(doubleArray29);
        multiDirectional9.setStartConfiguration(doubleArray29);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxEvaluations();
        int int34 = multiDirectional32.getIterations();
        int int35 = multiDirectional32.getMaxEvaluations();
        int int36 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxIterations((-1));
        int int39 = multiDirectional32.getIterations();
        int int40 = multiDirectional32.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = multiDirectional32.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        int int44 = multiDirectional42.getIterations();
        int int45 = multiDirectional42.getMaxEvaluations();
        int int46 = multiDirectional42.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxIterations();
        double[] doubleArray49 = new double[] {};
        multiDirectional47.setStartConfiguration(doubleArray49);
        multiDirectional42.setStartConfiguration(doubleArray49);
        multiDirectional32.setStartConfiguration(doubleArray49);
        multiDirectional9.setStartConfiguration(doubleArray49);
        int int54 = multiDirectional9.getMaxEvaluations();
        int int55 = multiDirectional9.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = multiDirectional9.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int58 = multiDirectional57.getMaxIterations();
        multiDirectional57.setMaxEvaluations(0);
        int int61 = multiDirectional57.getMaxIterations();
        int int62 = multiDirectional57.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int67 = multiDirectional66.getMaxIterations();
        double[] doubleArray68 = new double[] {};
        multiDirectional66.setStartConfiguration(doubleArray68);
        int int70 = multiDirectional66.getMaxEvaluations();
        int int71 = multiDirectional66.getIterations();
        int int72 = multiDirectional66.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker73 = multiDirectional66.getConvergenceChecker();
        multiDirectional65.setConvergenceChecker(realConvergenceChecker73);
        double[] doubleArray75 = new double[] {};
        double[][] doubleArray76 = new double[][] { doubleArray75 };
        multiDirectional65.setStartConfiguration(doubleArray76);
        multiDirectional57.setStartConfiguration(doubleArray76);
        multiDirectional9.setStartConfiguration(doubleArray76);
        multiDirectional0.setStartConfiguration(doubleArray76);
        multiDirectional0.setMaxIterations((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxIterations();
        double[] doubleArray7 = new double[] {};
        multiDirectional5.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional5.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        int int12 = multiDirectional10.getIterations();
        int int13 = multiDirectional10.getMaxEvaluations();
        int int14 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxIterations((-1));
        int int17 = multiDirectional10.getIterations();
        multiDirectional10.setMaxIterations((int) '#');
        multiDirectional10.setMaxEvaluations(0);
        multiDirectional10.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional26.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional5.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker27);
        int int31 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations(100);
        int int34 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        multiDirectional0.setMaxEvaluations((int) (byte) 1);
        int int16 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional19.setMaxEvaluations((int) (byte) 1);
        multiDirectional19.setMaxEvaluations((int) '#');
        int int24 = multiDirectional19.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional30.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxIterations();
        double[] doubleArray41 = new double[] {};
        multiDirectional39.setStartConfiguration(doubleArray41);
        int int43 = multiDirectional39.getMaxEvaluations();
        int int44 = multiDirectional39.getIterations();
        int int45 = multiDirectional39.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional39.getConvergenceChecker();
        multiDirectional38.setConvergenceChecker(realConvergenceChecker46);
        double[] doubleArray48 = new double[] {};
        double[][] doubleArray49 = new double[][] { doubleArray48 };
        multiDirectional38.setStartConfiguration(doubleArray49);
        multiDirectional35.setStartConfiguration(doubleArray49);
        multiDirectional30.setStartConfiguration(doubleArray49);
        multiDirectional27.setStartConfiguration(doubleArray49);
        multiDirectional19.setStartConfiguration(doubleArray49);
        multiDirectional0.setStartConfiguration(doubleArray49);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxIterations();
        multiDirectional56.setMaxEvaluations(0);
        int int60 = multiDirectional56.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int62 = multiDirectional61.getMaxIterations();
        double[] doubleArray63 = new double[] {};
        multiDirectional61.setStartConfiguration(doubleArray63);
        int int65 = multiDirectional61.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int67 = multiDirectional66.getMaxEvaluations();
        int int68 = multiDirectional66.getIterations();
        int int69 = multiDirectional66.getMaxEvaluations();
        int int70 = multiDirectional66.getMaxEvaluations();
        multiDirectional66.setMaxIterations((-1));
        int int73 = multiDirectional66.getIterations();
        multiDirectional66.setMaxIterations((int) '#');
        multiDirectional66.setMaxEvaluations(0);
        multiDirectional66.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional82 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker83 = multiDirectional82.getConvergenceChecker();
        multiDirectional66.setConvergenceChecker(realConvergenceChecker83);
        multiDirectional61.setConvergenceChecker(realConvergenceChecker83);
        multiDirectional56.setConvergenceChecker(realConvergenceChecker83);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker83);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker83);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional8.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker9);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        int int13 = multiDirectional11.getIterations();
        int int14 = multiDirectional11.getMaxEvaluations();
        int int15 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxIterations((-1));
        int int18 = multiDirectional11.getMaxIterations();
        multiDirectional11.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional23.getConvergenceChecker();
        multiDirectional11.setConvergenceChecker(realConvergenceChecker24);
        int int26 = multiDirectional11.getMaxIterations();
        int int27 = multiDirectional11.getEvaluations();
        int int28 = multiDirectional11.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional11.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int33 = multiDirectional32.getEvaluations();
        int int34 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional32.getConvergenceChecker();
        multiDirectional11.setConvergenceChecker(realConvergenceChecker37);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        int int44 = multiDirectional42.getIterations();
        int int45 = multiDirectional42.getMaxEvaluations();
        int int46 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxIterations((-1));
        int int49 = multiDirectional42.getIterations();
        multiDirectional42.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = null;
        multiDirectional42.setConvergenceChecker(realConvergenceChecker52);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int55 = multiDirectional54.getMaxEvaluations();
        multiDirectional54.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker58 = null;
        multiDirectional54.setConvergenceChecker(realConvergenceChecker58);
        double[] doubleArray62 = new double[] { 1.0d, 2147483647 };
        multiDirectional54.setStartConfiguration(doubleArray62);
        multiDirectional42.setStartConfiguration(doubleArray62);
        multiDirectional41.setStartConfiguration(doubleArray62);
        multiDirectional11.setStartConfiguration(doubleArray62);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int71 = multiDirectional70.getMaxEvaluations();
        int int72 = multiDirectional70.getIterations();
        int int73 = multiDirectional70.getMaxEvaluations();
        int int74 = multiDirectional70.getMaxEvaluations();
        multiDirectional70.setMaxIterations((-1));
        int int77 = multiDirectional70.getIterations();
        multiDirectional70.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker80 = null;
        multiDirectional70.setConvergenceChecker(realConvergenceChecker80);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional82 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int83 = multiDirectional82.getMaxEvaluations();
        multiDirectional82.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker86 = null;
        multiDirectional82.setConvergenceChecker(realConvergenceChecker86);
        double[] doubleArray90 = new double[] { 1.0d, 2147483647 };
        multiDirectional82.setStartConfiguration(doubleArray90);
        multiDirectional70.setStartConfiguration(doubleArray90);
        multiDirectional69.setStartConfiguration(doubleArray90);
        multiDirectional11.setStartConfiguration(doubleArray90);
        multiDirectional0.setStartConfiguration(doubleArray90);
        multiDirectional0.setMaxEvaluations((-1));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxIterations();
        double[] doubleArray7 = new double[] {};
        multiDirectional5.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional5.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        int int12 = multiDirectional10.getIterations();
        int int13 = multiDirectional10.getMaxEvaluations();
        int int14 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxIterations((-1));
        int int17 = multiDirectional10.getIterations();
        multiDirectional10.setMaxIterations((int) '#');
        multiDirectional10.setMaxEvaluations(0);
        multiDirectional10.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional26.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional5.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker27);
        int int31 = multiDirectional0.getIterations();
        int int32 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxIterations();
        multiDirectional33.setMaxEvaluations(0);
        int int37 = multiDirectional33.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int41 = multiDirectional40.getEvaluations();
        int int42 = multiDirectional40.getMaxEvaluations();
        multiDirectional40.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = multiDirectional40.getConvergenceChecker();
        multiDirectional33.setConvergenceChecker(realConvergenceChecker45);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxIterations();
        double[] doubleArray49 = new double[] {};
        multiDirectional47.setStartConfiguration(doubleArray49);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxEvaluations();
        int int55 = multiDirectional53.getIterations();
        int int56 = multiDirectional53.getMaxEvaluations();
        int int57 = multiDirectional53.getMaxEvaluations();
        multiDirectional53.setMaxIterations((-1));
        int int60 = multiDirectional53.getMaxIterations();
        multiDirectional53.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker66 = multiDirectional65.getConvergenceChecker();
        multiDirectional53.setConvergenceChecker(realConvergenceChecker66);
        multiDirectional51.setConvergenceChecker(realConvergenceChecker66);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker69 = multiDirectional51.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker70 = multiDirectional51.getConvergenceChecker();
        multiDirectional47.setConvergenceChecker(realConvergenceChecker70);
        multiDirectional33.setConvergenceChecker(realConvergenceChecker70);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker70);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker66);
        org.junit.Assert.assertNotNull(realConvergenceChecker69);
        org.junit.Assert.assertNotNull(realConvergenceChecker70);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = null;
        multiDirectional9.setConvergenceChecker(realConvergenceChecker13);
        double[] doubleArray17 = new double[] { 1.0d, 2147483647 };
        multiDirectional9.setStartConfiguration(doubleArray17);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional9.getConvergenceChecker();
        multiDirectional9.setMaxEvaluations((int) (byte) 100);
        multiDirectional9.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional9.getConvergenceChecker();
        int int25 = multiDirectional9.getEvaluations();
        int int26 = multiDirectional9.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        multiDirectional27.setMaxIterations((-1));
        int int34 = multiDirectional27.getIterations();
        int int35 = multiDirectional27.getEvaluations();
        int int36 = multiDirectional27.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxEvaluations();
        multiDirectional37.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = null;
        multiDirectional37.setConvergenceChecker(realConvergenceChecker41);
        double[] doubleArray45 = new double[] { 1.0d, 2147483647 };
        multiDirectional37.setStartConfiguration(doubleArray45);
        int int47 = multiDirectional37.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxIterations();
        double[] doubleArray50 = new double[] {};
        multiDirectional48.setStartConfiguration(doubleArray50);
        multiDirectional37.setStartConfiguration(doubleArray50);
        multiDirectional27.setStartConfiguration(doubleArray50);
        multiDirectional9.setStartConfiguration(doubleArray50);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxEvaluations();
        int int57 = multiDirectional55.getIterations();
        int int58 = multiDirectional55.getMaxEvaluations();
        int int59 = multiDirectional55.getMaxEvaluations();
        multiDirectional55.setMaxIterations((-1));
        int int62 = multiDirectional55.getMaxIterations();
        multiDirectional55.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker68 = multiDirectional67.getConvergenceChecker();
        multiDirectional55.setConvergenceChecker(realConvergenceChecker68);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int71 = multiDirectional70.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker72 = null;
        multiDirectional70.setConvergenceChecker(realConvergenceChecker72);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional74 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int75 = multiDirectional74.getMaxEvaluations();
        multiDirectional74.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker78 = null;
        multiDirectional74.setConvergenceChecker(realConvergenceChecker78);
        double[] doubleArray82 = new double[] { 1.0d, 2147483647 };
        multiDirectional74.setStartConfiguration(doubleArray82);
        int int84 = multiDirectional74.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional85 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int86 = multiDirectional85.getMaxIterations();
        double[] doubleArray87 = new double[] {};
        multiDirectional85.setStartConfiguration(doubleArray87);
        multiDirectional74.setStartConfiguration(doubleArray87);
        multiDirectional70.setStartConfiguration(doubleArray87);
        multiDirectional55.setStartConfiguration(doubleArray87);
        multiDirectional9.setStartConfiguration(doubleArray87);
        multiDirectional0.setStartConfiguration(doubleArray87);
        multiDirectional0.setMaxIterations((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker19);
        org.junit.Assert.assertNull(realConvergenceChecker24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2147483647 + "'", int84 == 2147483647);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2147483647 + "'", int86 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = multiDirectional0.getConvergenceChecker();
        int int15 = multiDirectional0.getMaxEvaluations();
        int int16 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional2.setMaxEvaluations((int) (short) -1);
        int int5 = multiDirectional2.getIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction6 = null;
        org.apache.commons.math.optimization.GoalType goalType7 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        int int10 = multiDirectional8.getIterations();
        int int11 = multiDirectional8.getMaxEvaluations();
        int int12 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxIterations((-1));
        int int15 = multiDirectional8.getMaxIterations();
        multiDirectional8.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional20.getConvergenceChecker();
        multiDirectional8.setConvergenceChecker(realConvergenceChecker21);
        int int23 = multiDirectional8.getMaxIterations();
        int int24 = multiDirectional8.getEvaluations();
        int int25 = multiDirectional8.getMaxEvaluations();
        int int26 = multiDirectional8.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        multiDirectional27.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = null;
        multiDirectional27.setConvergenceChecker(realConvergenceChecker31);
        double[] doubleArray34 = new double[] { 100.0d };
        multiDirectional27.setStartConfiguration(doubleArray34);
        int int36 = multiDirectional27.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        int int41 = multiDirectional39.getIterations();
        int int42 = multiDirectional39.getMaxEvaluations();
        int int43 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxIterations((-1));
        int int46 = multiDirectional39.getMaxIterations();
        multiDirectional39.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = multiDirectional51.getConvergenceChecker();
        multiDirectional39.setConvergenceChecker(realConvergenceChecker52);
        multiDirectional37.setConvergenceChecker(realConvergenceChecker52);
        multiDirectional27.setConvergenceChecker(realConvergenceChecker52);
        multiDirectional8.setConvergenceChecker(realConvergenceChecker52);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = multiDirectional8.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int59 = multiDirectional58.getMaxIterations();
        double[] doubleArray60 = new double[] {};
        multiDirectional58.setStartConfiguration(doubleArray60);
        int int62 = multiDirectional58.getMaxEvaluations();
        int int63 = multiDirectional58.getIterations();
        int int64 = multiDirectional58.getMaxEvaluations();
        multiDirectional58.setMaxIterations((int) (short) 1);
        int int67 = multiDirectional58.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional68 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int69 = multiDirectional68.getMaxEvaluations();
        int int70 = multiDirectional68.getIterations();
        int int71 = multiDirectional68.getMaxEvaluations();
        int int72 = multiDirectional68.getMaxEvaluations();
        multiDirectional68.setMaxIterations((-1));
        int int75 = multiDirectional68.getIterations();
        int int76 = multiDirectional68.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker77 = multiDirectional68.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional78 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int79 = multiDirectional78.getMaxEvaluations();
        int int80 = multiDirectional78.getIterations();
        int int81 = multiDirectional78.getMaxEvaluations();
        int int82 = multiDirectional78.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional83 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int84 = multiDirectional83.getMaxIterations();
        double[] doubleArray85 = new double[] {};
        multiDirectional83.setStartConfiguration(doubleArray85);
        multiDirectional78.setStartConfiguration(doubleArray85);
        multiDirectional68.setStartConfiguration(doubleArray85);
        multiDirectional58.setStartConfiguration(doubleArray85);
        multiDirectional8.setStartConfiguration(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair91 = multiDirectional2.optimize(multivariateRealFunction6, goalType7, doubleArray85);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.FunctionEvaluationException; message: org.apache.commons.math.MaxEvaluationsExceededException: Maximal number of evaluations (-1) exceeded");
        } catch (org.apache.commons.math.FunctionEvaluationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker52);
        org.junit.Assert.assertNotNull(realConvergenceChecker57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2147483647 + "'", int79 == 2147483647);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2147483647 + "'", int84 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertNull(realConvergenceChecker7);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) ' ');
        int int10 = multiDirectional0.getMaxEvaluations();
        int int11 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction12 = null;
        org.apache.commons.math.optimization.GoalType goalType13 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        int int16 = multiDirectional14.getIterations();
        int int17 = multiDirectional14.getMaxEvaluations();
        int int18 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxIterations((-1));
        int int21 = multiDirectional14.getIterations();
        multiDirectional14.setMaxIterations((int) '#');
        multiDirectional14.setMaxEvaluations(0);
        int int26 = multiDirectional14.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional33.setConvergenceChecker(realConvergenceChecker37);
        double[] doubleArray41 = new double[] { 1.0d, 2147483647 };
        multiDirectional33.setStartConfiguration(doubleArray41);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = multiDirectional33.getConvergenceChecker();
        multiDirectional33.setMaxEvaluations((int) (byte) 100);
        multiDirectional33.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxEvaluations();
        multiDirectional48.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = null;
        multiDirectional48.setConvergenceChecker(realConvergenceChecker52);
        double[] doubleArray56 = new double[] { 1.0d, 2147483647 };
        multiDirectional48.setStartConfiguration(doubleArray56);
        int int58 = multiDirectional48.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxIterations();
        double[] doubleArray61 = new double[] {};
        multiDirectional59.setStartConfiguration(doubleArray61);
        multiDirectional48.setStartConfiguration(doubleArray61);
        multiDirectional33.setStartConfiguration(doubleArray61);
        multiDirectional32.setStartConfiguration(doubleArray61);
        int int66 = multiDirectional32.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxIterations();
        double[] doubleArray69 = new double[] {};
        multiDirectional67.setStartConfiguration(doubleArray69);
        int int71 = multiDirectional67.getMaxEvaluations();
        int int72 = multiDirectional67.getIterations();
        double[] doubleArray78 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional67.setStartConfiguration(doubleArray78);
        multiDirectional32.setStartConfiguration(doubleArray78);
        multiDirectional29.setStartConfiguration(doubleArray78);
        multiDirectional14.setStartConfiguration(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair83 = multiDirectional0.optimize(multivariateRealFunction12, goalType13, doubleArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker43);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxEvaluations((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        int int29 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        int int32 = multiDirectional30.getIterations();
        int int33 = multiDirectional30.getMaxEvaluations();
        int int34 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxIterations((-1));
        int int37 = multiDirectional30.getMaxIterations();
        int int38 = multiDirectional30.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = null;
        multiDirectional39.setConvergenceChecker(realConvergenceChecker41);
        multiDirectional39.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = multiDirectional47.getConvergenceChecker();
        multiDirectional39.setConvergenceChecker(realConvergenceChecker48);
        multiDirectional30.setConvergenceChecker(realConvergenceChecker48);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int55 = multiDirectional54.getMaxIterations();
        double[] doubleArray56 = new double[] {};
        multiDirectional54.setStartConfiguration(doubleArray56);
        int int58 = multiDirectional54.getMaxEvaluations();
        int int59 = multiDirectional54.getIterations();
        int int60 = multiDirectional54.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker61 = multiDirectional54.getConvergenceChecker();
        multiDirectional53.setConvergenceChecker(realConvergenceChecker61);
        double[] doubleArray63 = new double[] {};
        double[][] doubleArray64 = new double[][] { doubleArray63 };
        multiDirectional53.setStartConfiguration(doubleArray64);
        multiDirectional30.setStartConfiguration(doubleArray64);
        multiDirectional0.setStartConfiguration(doubleArray64);
        multiDirectional0.setMaxIterations((int) '#');
        int int70 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker48);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((-1));
        int int11 = multiDirectional4.getIterations();
        multiDirectional4.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker14);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        multiDirectional4.setStartConfiguration(doubleArray24);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        double[] doubleArray34 = new double[] {};
        multiDirectional32.setStartConfiguration(doubleArray34);
        multiDirectional27.setStartConfiguration(doubleArray34);
        multiDirectional4.setStartConfiguration(doubleArray34);
        multiDirectional2.setStartConfiguration(doubleArray34);
        int int39 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = multiDirectional2.getConvergenceChecker();
        int int41 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction42 = null;
        org.apache.commons.math.optimization.GoalType goalType43 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int45 = multiDirectional44.getMaxEvaluations();
        int int46 = multiDirectional44.getIterations();
        int int47 = multiDirectional44.getMaxEvaluations();
        multiDirectional44.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional52.setMaxEvaluations((int) (byte) 1);
        multiDirectional52.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int58 = multiDirectional57.getMaxIterations();
        double[] doubleArray59 = new double[] {};
        multiDirectional57.setStartConfiguration(doubleArray59);
        int int61 = multiDirectional57.getMaxEvaluations();
        int int62 = multiDirectional57.getIterations();
        double[] doubleArray68 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional57.setStartConfiguration(doubleArray68);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int71 = multiDirectional70.getMaxEvaluations();
        int int72 = multiDirectional70.getIterations();
        int int73 = multiDirectional70.getMaxEvaluations();
        int int74 = multiDirectional70.getMaxEvaluations();
        multiDirectional70.setMaxIterations((-1));
        int int77 = multiDirectional70.getIterations();
        int int78 = multiDirectional70.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker79 = multiDirectional70.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional80 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int81 = multiDirectional80.getMaxEvaluations();
        int int82 = multiDirectional80.getIterations();
        int int83 = multiDirectional80.getMaxEvaluations();
        int int84 = multiDirectional80.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional85 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int86 = multiDirectional85.getMaxIterations();
        double[] doubleArray87 = new double[] {};
        multiDirectional85.setStartConfiguration(doubleArray87);
        multiDirectional80.setStartConfiguration(doubleArray87);
        multiDirectional70.setStartConfiguration(doubleArray87);
        multiDirectional57.setStartConfiguration(doubleArray87);
        multiDirectional52.setStartConfiguration(doubleArray87);
        multiDirectional44.setStartConfiguration(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair94 = multiDirectional2.optimize(multivariateRealFunction42, goalType43, doubleArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2147483647 + "'", int84 == 2147483647);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2147483647 + "'", int86 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int10 = multiDirectional0.getIterations();
        int int11 = multiDirectional0.getMaxIterations();
        int int12 = multiDirectional0.getMaxEvaluations();
        int int13 = multiDirectional0.getMaxIterations();
        double[][] doubleArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiDirectional0.setStartConfiguration(doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0L, (double) 'a');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker16);
        int int18 = multiDirectional3.getMaxIterations();
        int int19 = multiDirectional3.getEvaluations();
        int int20 = multiDirectional3.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional3.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int25 = multiDirectional24.getEvaluations();
        int int26 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional24.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = null;
        multiDirectional31.setConvergenceChecker(realConvergenceChecker33);
        multiDirectional31.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxIterations();
        double[] doubleArray39 = new double[] {};
        multiDirectional37.setStartConfiguration(doubleArray39);
        int int41 = multiDirectional37.getMaxEvaluations();
        int int42 = multiDirectional37.getMaxIterations();
        int int43 = multiDirectional37.getMaxIterations();
        multiDirectional37.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxEvaluations();
        int int48 = multiDirectional46.getIterations();
        int int49 = multiDirectional46.getMaxEvaluations();
        int int50 = multiDirectional46.getMaxEvaluations();
        multiDirectional46.setMaxIterations((-1));
        int int53 = multiDirectional46.getMaxIterations();
        int int54 = multiDirectional46.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = null;
        multiDirectional55.setConvergenceChecker(realConvergenceChecker57);
        multiDirectional55.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = multiDirectional63.getConvergenceChecker();
        multiDirectional55.setConvergenceChecker(realConvergenceChecker64);
        multiDirectional46.setConvergenceChecker(realConvergenceChecker64);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int71 = multiDirectional70.getMaxIterations();
        double[] doubleArray72 = new double[] {};
        multiDirectional70.setStartConfiguration(doubleArray72);
        int int74 = multiDirectional70.getMaxEvaluations();
        int int75 = multiDirectional70.getIterations();
        int int76 = multiDirectional70.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker77 = multiDirectional70.getConvergenceChecker();
        multiDirectional69.setConvergenceChecker(realConvergenceChecker77);
        double[] doubleArray79 = new double[] {};
        double[][] doubleArray80 = new double[][] { doubleArray79 };
        multiDirectional69.setStartConfiguration(doubleArray80);
        multiDirectional46.setStartConfiguration(doubleArray80);
        multiDirectional37.setStartConfiguration(doubleArray80);
        multiDirectional31.setStartConfiguration(doubleArray80);
        multiDirectional3.setStartConfiguration(doubleArray80);
        multiDirectional2.setStartConfiguration(doubleArray80);
        multiDirectional2.setMaxEvaluations(52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) 0L);
        multiDirectional2.setMaxIterations((int) (short) 0);
        multiDirectional2.setMaxIterations((int) 'a');
        int int7 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (short) 1);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker6);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker12);
        double[] doubleArray16 = new double[] { 1.0d, 2147483647 };
        multiDirectional8.setStartConfiguration(doubleArray16);
        int int18 = multiDirectional8.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxIterations();
        double[] doubleArray21 = new double[] {};
        multiDirectional19.setStartConfiguration(doubleArray21);
        multiDirectional8.setStartConfiguration(doubleArray21);
        multiDirectional4.setStartConfiguration(doubleArray21);
        int int25 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = null;
        multiDirectional26.setConvergenceChecker(realConvergenceChecker30);
        double[] doubleArray34 = new double[] { 1.0d, 2147483647 };
        multiDirectional26.setStartConfiguration(doubleArray34);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional26.getConvergenceChecker();
        multiDirectional26.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = multiDirectional41.getConvergenceChecker();
        multiDirectional26.setConvergenceChecker(realConvergenceChecker42);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker42);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxEvaluations();
        int int49 = multiDirectional47.getIterations();
        int int50 = multiDirectional47.getMaxEvaluations();
        int int51 = multiDirectional47.getMaxEvaluations();
        multiDirectional47.setMaxIterations((-1));
        int int54 = multiDirectional47.getMaxIterations();
        multiDirectional47.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = multiDirectional59.getConvergenceChecker();
        multiDirectional47.setConvergenceChecker(realConvergenceChecker60);
        multiDirectional45.setConvergenceChecker(realConvergenceChecker60);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker63 = multiDirectional45.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = multiDirectional45.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int66 = multiDirectional65.getMaxEvaluations();
        int int67 = multiDirectional65.getIterations();
        int int68 = multiDirectional65.getMaxEvaluations();
        int int69 = multiDirectional65.getMaxEvaluations();
        multiDirectional65.setMaxIterations((-1));
        int int72 = multiDirectional65.getMaxIterations();
        multiDirectional65.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional77 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker78 = multiDirectional77.getConvergenceChecker();
        multiDirectional65.setConvergenceChecker(realConvergenceChecker78);
        int int80 = multiDirectional65.getMaxIterations();
        int int81 = multiDirectional65.getEvaluations();
        int int82 = multiDirectional65.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker83 = multiDirectional65.getConvergenceChecker();
        multiDirectional45.setConvergenceChecker(realConvergenceChecker83);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker83);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker83);
        multiDirectional2.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker89 = multiDirectional2.getConvergenceChecker();
        multiDirectional2.setMaxEvaluations((int) 'a');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker36);
        org.junit.Assert.assertNotNull(realConvergenceChecker42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker60);
        org.junit.Assert.assertNotNull(realConvergenceChecker63);
        org.junit.Assert.assertNotNull(realConvergenceChecker64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2147483647 + "'", int66 == 2147483647);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker83);
        org.junit.Assert.assertNotNull(realConvergenceChecker89);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, 0.0d);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        multiDirectional2.setMaxIterations(10);
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        int int7 = multiDirectional0.getMaxEvaluations();
        int int8 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        int int12 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional13.setConvergenceChecker(realConvergenceChecker17);
        double[] doubleArray21 = new double[] { 1.0d, 2147483647 };
        multiDirectional13.setStartConfiguration(doubleArray21);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional13.getConvergenceChecker();
        multiDirectional13.setMaxEvaluations((int) (byte) 100);
        multiDirectional13.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = multiDirectional13.getConvergenceChecker();
        int int29 = multiDirectional13.getEvaluations();
        int int30 = multiDirectional13.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        int int33 = multiDirectional31.getIterations();
        int int34 = multiDirectional31.getMaxEvaluations();
        int int35 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxIterations((-1));
        int int38 = multiDirectional31.getMaxIterations();
        int int39 = multiDirectional31.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = null;
        multiDirectional40.setConvergenceChecker(realConvergenceChecker42);
        multiDirectional40.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = multiDirectional48.getConvergenceChecker();
        multiDirectional40.setConvergenceChecker(realConvergenceChecker49);
        multiDirectional31.setConvergenceChecker(realConvergenceChecker49);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional54 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxIterations();
        double[] doubleArray57 = new double[] {};
        multiDirectional55.setStartConfiguration(doubleArray57);
        int int59 = multiDirectional55.getMaxEvaluations();
        int int60 = multiDirectional55.getIterations();
        int int61 = multiDirectional55.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker62 = multiDirectional55.getConvergenceChecker();
        multiDirectional54.setConvergenceChecker(realConvergenceChecker62);
        double[] doubleArray64 = new double[] {};
        double[][] doubleArray65 = new double[][] { doubleArray64 };
        multiDirectional54.setStartConfiguration(doubleArray65);
        multiDirectional31.setStartConfiguration(doubleArray65);
        multiDirectional13.setStartConfiguration(doubleArray65);
        multiDirectional10.setStartConfiguration(doubleArray65);
        multiDirectional0.setStartConfiguration(doubleArray65);
        multiDirectional0.setMaxIterations(35);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertNull(realConvergenceChecker9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker23);
        org.junit.Assert.assertNull(realConvergenceChecker28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker49);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (short) 10);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxIterations();
        double[] doubleArray7 = new double[] {};
        multiDirectional5.setStartConfiguration(doubleArray7);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        int int13 = multiDirectional11.getIterations();
        int int14 = multiDirectional11.getMaxEvaluations();
        int int15 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxIterations((-1));
        int int18 = multiDirectional11.getMaxIterations();
        multiDirectional11.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional23.getConvergenceChecker();
        multiDirectional11.setConvergenceChecker(realConvergenceChecker24);
        multiDirectional9.setConvergenceChecker(realConvergenceChecker24);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional9.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = multiDirectional9.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker28);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker28);
        multiDirectional2.setMaxIterations(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker24);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertNotNull(realConvergenceChecker28);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 100, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int6 = multiDirectional5.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxIterations((-1));
        int int16 = multiDirectional9.getMaxIterations();
        multiDirectional9.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional7.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker25);
        int int28 = multiDirectional2.getIterations();
        int int29 = multiDirectional2.getIterations();
        java.lang.Class<?> wildcardClass30 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10.0f, 100.0d);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker8 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker8);
        double[] doubleArray12 = new double[] { 1.0d, 2147483647 };
        multiDirectional4.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional4.getMaxIterations();
        int int15 = multiDirectional4.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker16);
        multiDirectional4.setMaxIterations((int) (byte) -1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional22.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker28);
        double[] doubleArray32 = new double[] { 1.0d, 2147483647 };
        multiDirectional24.setStartConfiguration(doubleArray32);
        multiDirectional24.setMaxIterations((int) (byte) 100);
        int int36 = multiDirectional24.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional39.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxIterations();
        double[] doubleArray50 = new double[] {};
        multiDirectional48.setStartConfiguration(doubleArray50);
        int int52 = multiDirectional48.getMaxEvaluations();
        int int53 = multiDirectional48.getIterations();
        int int54 = multiDirectional48.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = multiDirectional48.getConvergenceChecker();
        multiDirectional47.setConvergenceChecker(realConvergenceChecker55);
        double[] doubleArray57 = new double[] {};
        double[][] doubleArray58 = new double[][] { doubleArray57 };
        multiDirectional47.setStartConfiguration(doubleArray58);
        multiDirectional44.setStartConfiguration(doubleArray58);
        multiDirectional39.setStartConfiguration(doubleArray58);
        multiDirectional24.setStartConfiguration(doubleArray58);
        multiDirectional22.setStartConfiguration(doubleArray58);
        multiDirectional4.setStartConfiguration(doubleArray58);
        multiDirectional2.setStartConfiguration(doubleArray58);
        java.lang.Class<?> wildcardClass66 = doubleArray58.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getMaxIterations();
        multiDirectional13.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional25.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker26);
        int int32 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations((int) (short) 1);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction36 = null;
        org.apache.commons.math.optimization.GoalType goalType37 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxEvaluations();
        int int40 = multiDirectional38.getIterations();
        int int41 = multiDirectional38.getMaxEvaluations();
        int int42 = multiDirectional38.getMaxEvaluations();
        multiDirectional38.setMaxIterations((-1));
        int int45 = multiDirectional38.getIterations();
        int int46 = multiDirectional38.getEvaluations();
        int int47 = multiDirectional38.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxEvaluations();
        multiDirectional48.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker52 = null;
        multiDirectional48.setConvergenceChecker(realConvergenceChecker52);
        double[] doubleArray56 = new double[] { 1.0d, 2147483647 };
        multiDirectional48.setStartConfiguration(doubleArray56);
        int int58 = multiDirectional48.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxIterations();
        double[] doubleArray61 = new double[] {};
        multiDirectional59.setStartConfiguration(doubleArray61);
        multiDirectional48.setStartConfiguration(doubleArray61);
        multiDirectional38.setStartConfiguration(doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair65 = multiDirectional0.optimize(multivariateRealFunction36, goalType37, doubleArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker33);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional6.getConvergenceChecker();
        int int8 = multiDirectional6.getEvaluations();
        multiDirectional6.setMaxIterations((int) (short) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, 0.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        int int16 = multiDirectional14.getIterations();
        int int17 = multiDirectional14.getMaxEvaluations();
        int int18 = multiDirectional14.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxIterations();
        double[] doubleArray21 = new double[] {};
        multiDirectional19.setStartConfiguration(doubleArray21);
        multiDirectional14.setStartConfiguration(doubleArray21);
        multiDirectional13.setStartConfiguration(doubleArray21);
        multiDirectional6.setStartConfiguration(doubleArray21);
        multiDirectional2.setStartConfiguration(doubleArray21);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        multiDirectional0.setMaxIterations((-1));
        int int16 = multiDirectional0.getMaxEvaluations();
        int int17 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10, 0.0d);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional0.getConvergenceChecker();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getIterations();
        int int18 = multiDirectional0.getIterations();
        int int19 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int6 = multiDirectional0.getEvaluations();
        int int7 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional10.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional13.setConvergenceChecker(realConvergenceChecker17);
        double[] doubleArray21 = new double[] { 1.0d, 2147483647 };
        multiDirectional13.setStartConfiguration(doubleArray21);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional13.getConvergenceChecker();
        multiDirectional13.setMaxEvaluations((int) (byte) 100);
        multiDirectional13.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = multiDirectional13.getConvergenceChecker();
        int int29 = multiDirectional13.getEvaluations();
        int int30 = multiDirectional13.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        int int33 = multiDirectional31.getIterations();
        int int34 = multiDirectional31.getMaxEvaluations();
        int int35 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxIterations((-1));
        int int38 = multiDirectional31.getIterations();
        int int39 = multiDirectional31.getEvaluations();
        int int40 = multiDirectional31.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxEvaluations();
        multiDirectional41.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = null;
        multiDirectional41.setConvergenceChecker(realConvergenceChecker45);
        double[] doubleArray49 = new double[] { 1.0d, 2147483647 };
        multiDirectional41.setStartConfiguration(doubleArray49);
        int int51 = multiDirectional41.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxIterations();
        double[] doubleArray54 = new double[] {};
        multiDirectional52.setStartConfiguration(doubleArray54);
        multiDirectional41.setStartConfiguration(doubleArray54);
        multiDirectional31.setStartConfiguration(doubleArray54);
        multiDirectional13.setStartConfiguration(doubleArray54);
        multiDirectional10.setStartConfiguration(doubleArray54);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional62 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional62.setMaxEvaluations((int) (byte) 0);
        double[] doubleArray67 = new double[] { (-1.0f), ' ' };
        multiDirectional62.setStartConfiguration(doubleArray67);
        multiDirectional10.setStartConfiguration(doubleArray67);
        multiDirectional0.setStartConfiguration(doubleArray67);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker72 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker73 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker23);
        org.junit.Assert.assertNull(realConvergenceChecker28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 32.0]");
        org.junit.Assert.assertNull(realConvergenceChecker71);
        org.junit.Assert.assertNull(realConvergenceChecker72);
        org.junit.Assert.assertNull(realConvergenceChecker73);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker7);
        double[] doubleArray11 = new double[] { 1.0d, 2147483647 };
        multiDirectional3.setStartConfiguration(doubleArray11);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional3.getConvergenceChecker();
        multiDirectional3.setMaxEvaluations((int) (byte) 100);
        int int16 = multiDirectional3.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxEvaluations();
        multiDirectional17.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = null;
        multiDirectional17.setConvergenceChecker(realConvergenceChecker21);
        double[] doubleArray25 = new double[] { 1.0d, 2147483647 };
        multiDirectional17.setStartConfiguration(doubleArray25);
        multiDirectional3.setStartConfiguration(doubleArray25);
        multiDirectional2.setStartConfiguration(doubleArray25);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, 0.0d);
        multiDirectional31.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int35 = multiDirectional34.getMaxEvaluations();
        multiDirectional34.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = null;
        multiDirectional34.setConvergenceChecker(realConvergenceChecker38);
        double[] doubleArray42 = new double[] { 1.0d, 2147483647 };
        multiDirectional34.setStartConfiguration(doubleArray42);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = multiDirectional34.getConvergenceChecker();
        multiDirectional34.setMaxEvaluations((int) (byte) 100);
        multiDirectional34.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = multiDirectional34.getConvergenceChecker();
        int int50 = multiDirectional34.getEvaluations();
        int int51 = multiDirectional34.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxEvaluations();
        int int54 = multiDirectional52.getIterations();
        int int55 = multiDirectional52.getMaxEvaluations();
        int int56 = multiDirectional52.getMaxEvaluations();
        multiDirectional52.setMaxIterations((-1));
        int int59 = multiDirectional52.getIterations();
        int int60 = multiDirectional52.getEvaluations();
        int int61 = multiDirectional52.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional62 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int63 = multiDirectional62.getMaxEvaluations();
        multiDirectional62.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker66 = null;
        multiDirectional62.setConvergenceChecker(realConvergenceChecker66);
        double[] doubleArray70 = new double[] { 1.0d, 2147483647 };
        multiDirectional62.setStartConfiguration(doubleArray70);
        int int72 = multiDirectional62.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional73 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int74 = multiDirectional73.getMaxIterations();
        double[] doubleArray75 = new double[] {};
        multiDirectional73.setStartConfiguration(doubleArray75);
        multiDirectional62.setStartConfiguration(doubleArray75);
        multiDirectional52.setStartConfiguration(doubleArray75);
        multiDirectional34.setStartConfiguration(doubleArray75);
        multiDirectional31.setStartConfiguration(doubleArray75);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional83 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional83.setMaxEvaluations((int) (byte) 0);
        double[] doubleArray88 = new double[] { (-1.0f), ' ' };
        multiDirectional83.setStartConfiguration(doubleArray88);
        multiDirectional31.setStartConfiguration(doubleArray88);
        multiDirectional2.setStartConfiguration(doubleArray88);
        java.lang.Class<?> wildcardClass92 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker44);
        org.junit.Assert.assertNull(realConvergenceChecker49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-1.0, 32.0]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) (byte) 1);
        multiDirectional2.setMaxIterations((int) '#');
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100L, (double) (-1));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker7);
        double[] doubleArray11 = new double[] { 1.0d, 2147483647 };
        multiDirectional3.setStartConfiguration(doubleArray11);
        int int13 = multiDirectional3.getIterations();
        int int14 = multiDirectional3.getIterations();
        int int15 = multiDirectional3.getIterations();
        int int16 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxEvaluations();
        multiDirectional17.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = null;
        multiDirectional17.setConvergenceChecker(realConvergenceChecker21);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = null;
        multiDirectional23.setConvergenceChecker(realConvergenceChecker27);
        double[] doubleArray31 = new double[] { 1.0d, 2147483647 };
        multiDirectional23.setStartConfiguration(doubleArray31);
        multiDirectional17.setStartConfiguration(doubleArray31);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional36.getConvergenceChecker();
        multiDirectional17.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker37);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNotNull(realConvergenceChecker37);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        int int5 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        int int3 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        int int9 = multiDirectional7.getIterations();
        int int10 = multiDirectional7.getMaxEvaluations();
        int int11 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxIterations((-1));
        int int14 = multiDirectional7.getIterations();
        multiDirectional7.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional7.setConvergenceChecker(realConvergenceChecker17);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = null;
        multiDirectional19.setConvergenceChecker(realConvergenceChecker23);
        double[] doubleArray27 = new double[] { 1.0d, 2147483647 };
        multiDirectional19.setStartConfiguration(doubleArray27);
        multiDirectional7.setStartConfiguration(doubleArray27);
        multiDirectional6.setStartConfiguration(doubleArray27);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = null;
        multiDirectional31.setConvergenceChecker(realConvergenceChecker35);
        double[] doubleArray39 = new double[] { 1.0d, 2147483647 };
        multiDirectional31.setStartConfiguration(doubleArray39);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = multiDirectional31.getConvergenceChecker();
        multiDirectional31.setMaxEvaluations((int) (byte) 100);
        multiDirectional31.setMaxIterations(35);
        multiDirectional31.setMaxIterations(100);
        multiDirectional31.setMaxIterations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxEvaluations();
        int int52 = multiDirectional50.getIterations();
        int int53 = multiDirectional50.getMaxEvaluations();
        int int54 = multiDirectional50.getMaxEvaluations();
        multiDirectional50.setMaxIterations((-1));
        int int57 = multiDirectional50.getMaxIterations();
        int int58 = multiDirectional50.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker61 = null;
        multiDirectional59.setConvergenceChecker(realConvergenceChecker61);
        multiDirectional59.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker68 = multiDirectional67.getConvergenceChecker();
        multiDirectional59.setConvergenceChecker(realConvergenceChecker68);
        multiDirectional50.setConvergenceChecker(realConvergenceChecker68);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional73 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional74 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int75 = multiDirectional74.getMaxIterations();
        double[] doubleArray76 = new double[] {};
        multiDirectional74.setStartConfiguration(doubleArray76);
        int int78 = multiDirectional74.getMaxEvaluations();
        int int79 = multiDirectional74.getIterations();
        int int80 = multiDirectional74.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker81 = multiDirectional74.getConvergenceChecker();
        multiDirectional73.setConvergenceChecker(realConvergenceChecker81);
        double[] doubleArray83 = new double[] {};
        double[][] doubleArray84 = new double[][] { doubleArray83 };
        multiDirectional73.setStartConfiguration(doubleArray84);
        multiDirectional50.setStartConfiguration(doubleArray84);
        multiDirectional31.setStartConfiguration(doubleArray84);
        multiDirectional6.setStartConfiguration(doubleArray84);
        multiDirectional2.setStartConfiguration(doubleArray84);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker90 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker41);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker68);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(realConvergenceChecker90);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxEvaluations();
        int int15 = multiDirectional13.getIterations();
        int int16 = multiDirectional13.getMaxEvaluations();
        int int17 = multiDirectional13.getMaxEvaluations();
        multiDirectional13.setMaxIterations((-1));
        int int20 = multiDirectional13.getMaxIterations();
        multiDirectional13.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = multiDirectional25.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional11.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker26);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker26);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional34.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxEvaluations();
        int int38 = multiDirectional36.getIterations();
        int int39 = multiDirectional36.getMaxEvaluations();
        int int40 = multiDirectional36.getMaxEvaluations();
        multiDirectional36.setMaxIterations((-1));
        int int43 = multiDirectional36.getMaxIterations();
        int int44 = multiDirectional36.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker47 = null;
        multiDirectional45.setConvergenceChecker(realConvergenceChecker47);
        multiDirectional45.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker54 = multiDirectional53.getConvergenceChecker();
        multiDirectional45.setConvergenceChecker(realConvergenceChecker54);
        multiDirectional36.setConvergenceChecker(realConvergenceChecker54);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int61 = multiDirectional60.getMaxIterations();
        double[] doubleArray62 = new double[] {};
        multiDirectional60.setStartConfiguration(doubleArray62);
        int int64 = multiDirectional60.getMaxEvaluations();
        int int65 = multiDirectional60.getIterations();
        int int66 = multiDirectional60.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker67 = multiDirectional60.getConvergenceChecker();
        multiDirectional59.setConvergenceChecker(realConvergenceChecker67);
        double[] doubleArray69 = new double[] {};
        double[][] doubleArray70 = new double[][] { doubleArray69 };
        multiDirectional59.setStartConfiguration(doubleArray70);
        multiDirectional36.setStartConfiguration(doubleArray70);
        multiDirectional34.setStartConfiguration(doubleArray70);
        multiDirectional0.setStartConfiguration(doubleArray70);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional77 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', 100.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional78 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int79 = multiDirectional78.getMaxEvaluations();
        int int80 = multiDirectional78.getIterations();
        int int81 = multiDirectional78.getMaxEvaluations();
        int int82 = multiDirectional78.getMaxEvaluations();
        multiDirectional78.setMaxIterations((-1));
        int int85 = multiDirectional78.getMaxIterations();
        multiDirectional78.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional90 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker91 = multiDirectional90.getConvergenceChecker();
        multiDirectional78.setConvergenceChecker(realConvergenceChecker91);
        int int93 = multiDirectional78.getMaxIterations();
        int int94 = multiDirectional78.getEvaluations();
        int int95 = multiDirectional78.getMaxEvaluations();
        int int96 = multiDirectional78.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker97 = multiDirectional78.getConvergenceChecker();
        multiDirectional77.setConvergenceChecker(realConvergenceChecker97);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker97);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker26);
        org.junit.Assert.assertNotNull(realConvergenceChecker35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker54);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2147483647 + "'", int66 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2147483647 + "'", int79 == 2147483647);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker97);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional2.setMaxEvaluations((int) (byte) 0);
        int int5 = multiDirectional2.getMaxEvaluations();
        int int6 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int11 = multiDirectional10.getEvaluations();
        int int12 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional10.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        int int18 = multiDirectional16.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        int int23 = multiDirectional21.getIterations();
        int int24 = multiDirectional21.getMaxEvaluations();
        int int25 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxIterations((-1));
        int int28 = multiDirectional21.getMaxIterations();
        multiDirectional21.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional33.getConvergenceChecker();
        multiDirectional21.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional19.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional16.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional16.setMaxIterations((int) (byte) 100);
        multiDirectional16.setMaxIterations((-1));
        int int42 = multiDirectional16.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int46 = multiDirectional45.getEvaluations();
        int int47 = multiDirectional45.getMaxEvaluations();
        int int48 = multiDirectional45.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxEvaluations();
        int int51 = multiDirectional49.getIterations();
        int int52 = multiDirectional49.getMaxEvaluations();
        int int53 = multiDirectional49.getMaxEvaluations();
        multiDirectional49.setMaxIterations((-1));
        int int56 = multiDirectional49.getIterations();
        int int57 = multiDirectional49.getEvaluations();
        int int58 = multiDirectional49.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxEvaluations();
        multiDirectional59.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker63 = null;
        multiDirectional59.setConvergenceChecker(realConvergenceChecker63);
        double[] doubleArray67 = new double[] { 1.0d, 2147483647 };
        multiDirectional59.setStartConfiguration(doubleArray67);
        int int69 = multiDirectional59.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int71 = multiDirectional70.getMaxIterations();
        double[] doubleArray72 = new double[] {};
        multiDirectional70.setStartConfiguration(doubleArray72);
        multiDirectional59.setStartConfiguration(doubleArray72);
        multiDirectional49.setStartConfiguration(doubleArray72);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int77 = multiDirectional76.getMaxEvaluations();
        int int78 = multiDirectional76.getIterations();
        int int79 = multiDirectional76.getMaxEvaluations();
        int int80 = multiDirectional76.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional81 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int82 = multiDirectional81.getMaxIterations();
        double[] doubleArray83 = new double[] {};
        multiDirectional81.setStartConfiguration(doubleArray83);
        multiDirectional76.setStartConfiguration(doubleArray83);
        multiDirectional49.setStartConfiguration(doubleArray83);
        multiDirectional45.setStartConfiguration(doubleArray83);
        multiDirectional16.setStartConfiguration(doubleArray83);
        multiDirectional10.setStartConfiguration(doubleArray83);
        multiDirectional2.setStartConfiguration(doubleArray83);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2147483647 + "'", int79 == 2147483647);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        multiDirectional0.setMaxIterations(1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxIterations();
        double[] doubleArray13 = new double[] {};
        multiDirectional11.setStartConfiguration(doubleArray13);
        multiDirectional0.setStartConfiguration(doubleArray13);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNull(realConvergenceChecker16);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) 32);
        int int3 = multiDirectional2.getIterations();
        multiDirectional2.setMaxIterations((int) (short) 100);
        int int6 = multiDirectional2.getIterations();
        java.lang.Class<?> wildcardClass7 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int6 = multiDirectional0.getEvaluations();
        int int7 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations((-1));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker18);
        double[] doubleArray22 = new double[] { 1.0d, 2147483647 };
        multiDirectional14.setStartConfiguration(doubleArray22);
        multiDirectional14.setMaxIterations((int) (byte) 100);
        int int26 = multiDirectional14.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional29.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxIterations();
        double[] doubleArray40 = new double[] {};
        multiDirectional38.setStartConfiguration(doubleArray40);
        int int42 = multiDirectional38.getMaxEvaluations();
        int int43 = multiDirectional38.getIterations();
        int int44 = multiDirectional38.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = multiDirectional38.getConvergenceChecker();
        multiDirectional37.setConvergenceChecker(realConvergenceChecker45);
        double[] doubleArray47 = new double[] {};
        double[][] doubleArray48 = new double[][] { doubleArray47 };
        multiDirectional37.setStartConfiguration(doubleArray48);
        multiDirectional34.setStartConfiguration(doubleArray48);
        multiDirectional29.setStartConfiguration(doubleArray48);
        multiDirectional14.setStartConfiguration(doubleArray48);
        multiDirectional12.setStartConfiguration(doubleArray48);
        multiDirectional0.setStartConfiguration(doubleArray48);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((-1));
        int int11 = multiDirectional4.getMaxIterations();
        int int12 = multiDirectional4.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = null;
        multiDirectional13.setConvergenceChecker(realConvergenceChecker15);
        multiDirectional13.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        int int32 = multiDirectional28.getMaxEvaluations();
        int int33 = multiDirectional28.getIterations();
        int int34 = multiDirectional28.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional28.getConvergenceChecker();
        multiDirectional27.setConvergenceChecker(realConvergenceChecker35);
        double[] doubleArray37 = new double[] {};
        double[][] doubleArray38 = new double[][] { doubleArray37 };
        multiDirectional27.setStartConfiguration(doubleArray38);
        multiDirectional4.setStartConfiguration(doubleArray38);
        multiDirectional2.setStartConfiguration(doubleArray38);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        int int44 = multiDirectional42.getIterations();
        int int45 = multiDirectional42.getMaxEvaluations();
        int int46 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxIterations((-1));
        int int49 = multiDirectional42.getIterations();
        int int50 = multiDirectional42.getEvaluations();
        int int51 = multiDirectional42.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxEvaluations();
        multiDirectional52.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = null;
        multiDirectional52.setConvergenceChecker(realConvergenceChecker56);
        double[] doubleArray60 = new double[] { 1.0d, 2147483647 };
        multiDirectional52.setStartConfiguration(doubleArray60);
        int int62 = multiDirectional52.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int64 = multiDirectional63.getMaxIterations();
        double[] doubleArray65 = new double[] {};
        multiDirectional63.setStartConfiguration(doubleArray65);
        multiDirectional52.setStartConfiguration(doubleArray65);
        multiDirectional42.setStartConfiguration(doubleArray65);
        multiDirectional2.setStartConfiguration(doubleArray65);
        int int70 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker71);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((-1));
        int int11 = multiDirectional4.getIterations();
        multiDirectional4.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional4.setConvergenceChecker(realConvergenceChecker14);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        multiDirectional4.setStartConfiguration(doubleArray24);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxEvaluations();
        int int29 = multiDirectional27.getIterations();
        int int30 = multiDirectional27.getMaxEvaluations();
        int int31 = multiDirectional27.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxIterations();
        double[] doubleArray34 = new double[] {};
        multiDirectional32.setStartConfiguration(doubleArray34);
        multiDirectional27.setStartConfiguration(doubleArray34);
        multiDirectional4.setStartConfiguration(doubleArray34);
        multiDirectional2.setStartConfiguration(doubleArray34);
        int int39 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = multiDirectional2.getConvergenceChecker();
        int int41 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations((int) (byte) -1);
        int int44 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxEvaluations();
        int int47 = multiDirectional45.getIterations();
        int int48 = multiDirectional45.getMaxEvaluations();
        int int49 = multiDirectional45.getMaxEvaluations();
        multiDirectional45.setMaxIterations((-1));
        int int52 = multiDirectional45.getIterations();
        multiDirectional45.setMaxIterations((int) '#');
        int int55 = multiDirectional45.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = multiDirectional45.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = multiDirectional45.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker57);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxEvaluations();
        multiDirectional59.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker63 = null;
        multiDirectional59.setConvergenceChecker(realConvergenceChecker63);
        double[] doubleArray67 = new double[] { 1.0d, 2147483647 };
        multiDirectional59.setStartConfiguration(doubleArray67);
        int int69 = multiDirectional59.getMaxIterations();
        int int70 = multiDirectional59.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker71 = null;
        multiDirectional59.setConvergenceChecker(realConvergenceChecker71);
        int int73 = multiDirectional59.getMaxEvaluations();
        int int74 = multiDirectional59.getMaxEvaluations();
        int int75 = multiDirectional59.getMaxIterations();
        int int76 = multiDirectional59.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional79 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) (short) 10);
        int int80 = multiDirectional79.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker81 = multiDirectional79.getConvergenceChecker();
        multiDirectional59.setConvergenceChecker(realConvergenceChecker81);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker81);
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker56);
        org.junit.Assert.assertNotNull(realConvergenceChecker57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker81);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 'a', (double) (-1));
        int int3 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(100);
        multiDirectional0.setMaxIterations((int) (short) 10);
        int int13 = multiDirectional0.getMaxIterations();
        int int14 = multiDirectional0.getMaxIterations();
        int int15 = multiDirectional0.getIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction16 = null;
        org.apache.commons.math.optimization.GoalType goalType17 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional20.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        int int24 = multiDirectional22.getIterations();
        int int25 = multiDirectional22.getMaxEvaluations();
        int int26 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxIterations((-1));
        int int29 = multiDirectional22.getIterations();
        multiDirectional22.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int35 = multiDirectional34.getMaxEvaluations();
        multiDirectional34.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = null;
        multiDirectional34.setConvergenceChecker(realConvergenceChecker38);
        double[] doubleArray42 = new double[] { 1.0d, 2147483647 };
        multiDirectional34.setStartConfiguration(doubleArray42);
        multiDirectional22.setStartConfiguration(doubleArray42);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxEvaluations();
        int int47 = multiDirectional45.getIterations();
        int int48 = multiDirectional45.getMaxEvaluations();
        int int49 = multiDirectional45.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxIterations();
        double[] doubleArray52 = new double[] {};
        multiDirectional50.setStartConfiguration(doubleArray52);
        multiDirectional45.setStartConfiguration(doubleArray52);
        multiDirectional22.setStartConfiguration(doubleArray52);
        multiDirectional20.setStartConfiguration(doubleArray52);
        int int57 = multiDirectional20.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int59 = multiDirectional58.getMaxEvaluations();
        int int60 = multiDirectional58.getIterations();
        int int61 = multiDirectional58.getMaxEvaluations();
        int int62 = multiDirectional58.getMaxEvaluations();
        multiDirectional58.setMaxIterations((-1));
        int int65 = multiDirectional58.getIterations();
        int int66 = multiDirectional58.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxEvaluations();
        int int69 = multiDirectional67.getIterations();
        int int70 = multiDirectional67.getMaxEvaluations();
        int int71 = multiDirectional67.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional72 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int73 = multiDirectional72.getMaxIterations();
        double[] doubleArray74 = new double[] {};
        multiDirectional72.setStartConfiguration(doubleArray74);
        multiDirectional67.setStartConfiguration(doubleArray74);
        multiDirectional58.setStartConfiguration(doubleArray74);
        double[] doubleArray79 = new double[] { 35 };
        multiDirectional58.setStartConfiguration(doubleArray79);
        multiDirectional20.setStartConfiguration(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair82 = multiDirectional0.optimize(multivariateRealFunction16, goalType17, doubleArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[35.0]");
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations((int) (byte) 1);
        multiDirectional0.setMaxIterations((int) 'a');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertNotNull(realConvergenceChecker7);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        double[] doubleArray16 = new double[] {};
        multiDirectional14.setStartConfiguration(doubleArray16);
        multiDirectional9.setStartConfiguration(doubleArray16);
        multiDirectional0.setStartConfiguration(doubleArray16);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = null;
        multiDirectional23.setConvergenceChecker(realConvergenceChecker27);
        double[] doubleArray30 = new double[] { 100.0d };
        multiDirectional23.setStartConfiguration(doubleArray30);
        int int32 = multiDirectional23.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = multiDirectional23.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional34 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int35 = multiDirectional34.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = null;
        multiDirectional34.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional34.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxIterations();
        double[] doubleArray42 = new double[] {};
        multiDirectional40.setStartConfiguration(doubleArray42);
        int int44 = multiDirectional40.getMaxEvaluations();
        int int45 = multiDirectional40.getMaxIterations();
        int int46 = multiDirectional40.getMaxIterations();
        multiDirectional40.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxEvaluations();
        int int51 = multiDirectional49.getIterations();
        int int52 = multiDirectional49.getMaxEvaluations();
        int int53 = multiDirectional49.getMaxEvaluations();
        multiDirectional49.setMaxIterations((-1));
        int int56 = multiDirectional49.getMaxIterations();
        int int57 = multiDirectional49.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int59 = multiDirectional58.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = null;
        multiDirectional58.setConvergenceChecker(realConvergenceChecker60);
        multiDirectional58.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker67 = multiDirectional66.getConvergenceChecker();
        multiDirectional58.setConvergenceChecker(realConvergenceChecker67);
        multiDirectional49.setConvergenceChecker(realConvergenceChecker67);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional72 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional73 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int74 = multiDirectional73.getMaxIterations();
        double[] doubleArray75 = new double[] {};
        multiDirectional73.setStartConfiguration(doubleArray75);
        int int77 = multiDirectional73.getMaxEvaluations();
        int int78 = multiDirectional73.getIterations();
        int int79 = multiDirectional73.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker80 = multiDirectional73.getConvergenceChecker();
        multiDirectional72.setConvergenceChecker(realConvergenceChecker80);
        double[] doubleArray82 = new double[] {};
        double[][] doubleArray83 = new double[][] { doubleArray82 };
        multiDirectional72.setStartConfiguration(doubleArray83);
        multiDirectional49.setStartConfiguration(doubleArray83);
        multiDirectional40.setStartConfiguration(doubleArray83);
        multiDirectional34.setStartConfiguration(doubleArray83);
        multiDirectional23.setStartConfiguration(doubleArray83);
        multiDirectional0.setStartConfiguration(doubleArray83);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker67);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2147483647 + "'", int79 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction10 = null;
        org.apache.commons.math.optimization.GoalType goalType11 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100L, (double) (-1));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional15.setConvergenceChecker(realConvergenceChecker17);
        multiDirectional15.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker28);
        double[] doubleArray32 = new double[] { 1.0d, 2147483647 };
        multiDirectional24.setStartConfiguration(doubleArray32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional24.getConvergenceChecker();
        multiDirectional24.setMaxEvaluations((int) (byte) 100);
        multiDirectional24.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxEvaluations();
        multiDirectional39.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = null;
        multiDirectional39.setConvergenceChecker(realConvergenceChecker43);
        double[] doubleArray47 = new double[] { 1.0d, 2147483647 };
        multiDirectional39.setStartConfiguration(doubleArray47);
        int int49 = multiDirectional39.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxIterations();
        double[] doubleArray52 = new double[] {};
        multiDirectional50.setStartConfiguration(doubleArray52);
        multiDirectional39.setStartConfiguration(doubleArray52);
        multiDirectional24.setStartConfiguration(doubleArray52);
        multiDirectional23.setStartConfiguration(doubleArray52);
        multiDirectional15.setStartConfiguration(doubleArray52);
        multiDirectional14.setStartConfiguration(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair59 = multiDirectional0.optimize(multivariateRealFunction10, goalType11, doubleArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        int int5 = multiDirectional2.getMaxEvaluations();
        int int6 = multiDirectional2.getMaxEvaluations();
        int int7 = multiDirectional2.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        multiDirectional8.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker12);
        double[] doubleArray15 = new double[] { 100.0d };
        multiDirectional8.setStartConfiguration(doubleArray15);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxIterations();
        double[] doubleArray19 = new double[] {};
        multiDirectional17.setStartConfiguration(doubleArray19);
        int int21 = multiDirectional17.getMaxEvaluations();
        int int22 = multiDirectional17.getIterations();
        double[] doubleArray28 = new double[] { (byte) -1, 1.0f, 100.0d, 100.0f, (short) -1 };
        multiDirectional17.setStartConfiguration(doubleArray28);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        int int32 = multiDirectional30.getIterations();
        int int33 = multiDirectional30.getMaxEvaluations();
        int int34 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxIterations((-1));
        int int37 = multiDirectional30.getIterations();
        int int38 = multiDirectional30.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional30.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        int int42 = multiDirectional40.getIterations();
        int int43 = multiDirectional40.getMaxEvaluations();
        int int44 = multiDirectional40.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxIterations();
        double[] doubleArray47 = new double[] {};
        multiDirectional45.setStartConfiguration(doubleArray47);
        multiDirectional40.setStartConfiguration(doubleArray47);
        multiDirectional30.setStartConfiguration(doubleArray47);
        multiDirectional17.setStartConfiguration(doubleArray47);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxEvaluations();
        multiDirectional52.setMaxIterations((int) (byte) 0);
        int int56 = multiDirectional52.getMaxIterations();
        int int57 = multiDirectional52.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker58 = multiDirectional52.getConvergenceChecker();
        multiDirectional17.setConvergenceChecker(realConvergenceChecker58);
        multiDirectional8.setConvergenceChecker(realConvergenceChecker58);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional61 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int62 = multiDirectional61.getMaxEvaluations();
        int int63 = multiDirectional61.getIterations();
        int int64 = multiDirectional61.getMaxEvaluations();
        int int65 = multiDirectional61.getMaxEvaluations();
        multiDirectional61.setMaxIterations((-1));
        int int68 = multiDirectional61.getIterations();
        int int69 = multiDirectional61.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int71 = multiDirectional70.getMaxEvaluations();
        int int72 = multiDirectional70.getIterations();
        int int73 = multiDirectional70.getMaxEvaluations();
        int int74 = multiDirectional70.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxIterations();
        double[] doubleArray77 = new double[] {};
        multiDirectional75.setStartConfiguration(doubleArray77);
        multiDirectional70.setStartConfiguration(doubleArray77);
        multiDirectional61.setStartConfiguration(doubleArray77);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker81 = multiDirectional61.getConvergenceChecker();
        multiDirectional8.setConvergenceChecker(realConvergenceChecker81);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker81);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 100.0, 100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2147483647 + "'", int65 == 2147483647);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker81);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(100.0d, (double) (short) 0);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction3 = null;
        org.apache.commons.math.optimization.GoalType goalType4 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = null;
        multiDirectional5.setConvergenceChecker(realConvergenceChecker7);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = null;
        multiDirectional9.setConvergenceChecker(realConvergenceChecker13);
        double[] doubleArray17 = new double[] { 1.0d, 2147483647 };
        multiDirectional9.setStartConfiguration(doubleArray17);
        int int19 = multiDirectional9.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxIterations();
        double[] doubleArray22 = new double[] {};
        multiDirectional20.setStartConfiguration(doubleArray22);
        multiDirectional9.setStartConfiguration(doubleArray22);
        multiDirectional5.setStartConfiguration(doubleArray22);
        int int26 = multiDirectional5.getMaxIterations();
        int int27 = multiDirectional5.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxEvaluations();
        int int30 = multiDirectional28.getIterations();
        int int31 = multiDirectional28.getMaxEvaluations();
        int int32 = multiDirectional28.getMaxEvaluations();
        multiDirectional28.setMaxIterations((-1));
        int int35 = multiDirectional28.getIterations();
        int int36 = multiDirectional28.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional28.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxEvaluations();
        int int40 = multiDirectional38.getIterations();
        int int41 = multiDirectional38.getMaxEvaluations();
        int int42 = multiDirectional38.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxIterations();
        double[] doubleArray45 = new double[] {};
        multiDirectional43.setStartConfiguration(doubleArray45);
        multiDirectional38.setStartConfiguration(doubleArray45);
        multiDirectional28.setStartConfiguration(doubleArray45);
        multiDirectional5.setStartConfiguration(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair50 = multiDirectional2.optimize(multivariateRealFunction3, goalType4, doubleArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxIterations();
        double[] doubleArray13 = new double[] {};
        multiDirectional11.setStartConfiguration(doubleArray13);
        multiDirectional0.setStartConfiguration(doubleArray13);
        int int16 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional22.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxIterations();
        double[] doubleArray33 = new double[] {};
        multiDirectional31.setStartConfiguration(doubleArray33);
        int int35 = multiDirectional31.getMaxEvaluations();
        int int36 = multiDirectional31.getIterations();
        int int37 = multiDirectional31.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional31.getConvergenceChecker();
        multiDirectional30.setConvergenceChecker(realConvergenceChecker38);
        double[] doubleArray40 = new double[] {};
        double[][] doubleArray41 = new double[][] { doubleArray40 };
        multiDirectional30.setStartConfiguration(doubleArray41);
        multiDirectional27.setStartConfiguration(doubleArray41);
        multiDirectional22.setStartConfiguration(doubleArray41);
        multiDirectional19.setStartConfiguration(doubleArray41);
        multiDirectional0.setStartConfiguration(doubleArray41);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, (double) 10.0f);
        multiDirectional2.setMaxIterations(97);
        int int5 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) 10.0f);
        int int3 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0L, (double) 'a');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker16);
        int int18 = multiDirectional3.getMaxIterations();
        int int19 = multiDirectional3.getEvaluations();
        int int20 = multiDirectional3.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional3.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int25 = multiDirectional24.getEvaluations();
        int int26 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional24.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = null;
        multiDirectional31.setConvergenceChecker(realConvergenceChecker33);
        multiDirectional31.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxIterations();
        double[] doubleArray39 = new double[] {};
        multiDirectional37.setStartConfiguration(doubleArray39);
        int int41 = multiDirectional37.getMaxEvaluations();
        int int42 = multiDirectional37.getMaxIterations();
        int int43 = multiDirectional37.getMaxIterations();
        multiDirectional37.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxEvaluations();
        int int48 = multiDirectional46.getIterations();
        int int49 = multiDirectional46.getMaxEvaluations();
        int int50 = multiDirectional46.getMaxEvaluations();
        multiDirectional46.setMaxIterations((-1));
        int int53 = multiDirectional46.getMaxIterations();
        int int54 = multiDirectional46.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional55 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int56 = multiDirectional55.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = null;
        multiDirectional55.setConvergenceChecker(realConvergenceChecker57);
        multiDirectional55.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = multiDirectional63.getConvergenceChecker();
        multiDirectional55.setConvergenceChecker(realConvergenceChecker64);
        multiDirectional46.setConvergenceChecker(realConvergenceChecker64);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional69 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional70 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int71 = multiDirectional70.getMaxIterations();
        double[] doubleArray72 = new double[] {};
        multiDirectional70.setStartConfiguration(doubleArray72);
        int int74 = multiDirectional70.getMaxEvaluations();
        int int75 = multiDirectional70.getIterations();
        int int76 = multiDirectional70.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker77 = multiDirectional70.getConvergenceChecker();
        multiDirectional69.setConvergenceChecker(realConvergenceChecker77);
        double[] doubleArray79 = new double[] {};
        double[][] doubleArray80 = new double[][] { doubleArray79 };
        multiDirectional69.setStartConfiguration(doubleArray80);
        multiDirectional46.setStartConfiguration(doubleArray80);
        multiDirectional37.setStartConfiguration(doubleArray80);
        multiDirectional31.setStartConfiguration(doubleArray80);
        multiDirectional3.setStartConfiguration(doubleArray80);
        multiDirectional2.setStartConfiguration(doubleArray80);
        java.lang.Class<?> wildcardClass87 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2147483647 + "'", int74 == 2147483647);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1, (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getMaxIterations();
        int int11 = multiDirectional3.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker14);
        multiDirectional12.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = multiDirectional20.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker21);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker21);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker21);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional25 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int26 = multiDirectional25.getMaxEvaluations();
        int int27 = multiDirectional25.getIterations();
        int int28 = multiDirectional25.getMaxEvaluations();
        int int29 = multiDirectional25.getMaxEvaluations();
        multiDirectional25.setMaxIterations((-1));
        int int32 = multiDirectional25.getIterations();
        int int33 = multiDirectional25.getMaxIterations();
        multiDirectional25.setMaxEvaluations(100);
        multiDirectional25.setMaxIterations((int) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional25.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker38);
        java.lang.Class<?> wildcardClass40 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker38);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations(1);
        int int7 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxEvaluations();
        int int10 = multiDirectional8.getIterations();
        int int11 = multiDirectional8.getMaxEvaluations();
        int int12 = multiDirectional8.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int14 = multiDirectional13.getMaxIterations();
        double[] doubleArray15 = new double[] {};
        multiDirectional13.setStartConfiguration(doubleArray15);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        int int21 = multiDirectional19.getIterations();
        int int22 = multiDirectional19.getMaxEvaluations();
        int int23 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxIterations((-1));
        int int26 = multiDirectional19.getMaxIterations();
        multiDirectional19.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional31.getConvergenceChecker();
        multiDirectional19.setConvergenceChecker(realConvergenceChecker32);
        multiDirectional17.setConvergenceChecker(realConvergenceChecker32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional17.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional17.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional8.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker36);
        int int40 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertNotNull(realConvergenceChecker35);
        org.junit.Assert.assertNotNull(realConvergenceChecker36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1, (double) (byte) -1);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction3 = null;
        org.apache.commons.math.optimization.GoalType goalType4 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100L, (double) (-1));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int9 = multiDirectional8.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker10);
        multiDirectional8.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxEvaluations();
        multiDirectional17.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = null;
        multiDirectional17.setConvergenceChecker(realConvergenceChecker21);
        double[] doubleArray25 = new double[] { 1.0d, 2147483647 };
        multiDirectional17.setStartConfiguration(doubleArray25);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional17.getConvergenceChecker();
        multiDirectional17.setMaxEvaluations((int) (byte) 100);
        multiDirectional17.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = null;
        multiDirectional32.setConvergenceChecker(realConvergenceChecker36);
        double[] doubleArray40 = new double[] { 1.0d, 2147483647 };
        multiDirectional32.setStartConfiguration(doubleArray40);
        int int42 = multiDirectional32.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxIterations();
        double[] doubleArray45 = new double[] {};
        multiDirectional43.setStartConfiguration(doubleArray45);
        multiDirectional32.setStartConfiguration(doubleArray45);
        multiDirectional17.setStartConfiguration(doubleArray45);
        multiDirectional16.setStartConfiguration(doubleArray45);
        multiDirectional8.setStartConfiguration(doubleArray45);
        multiDirectional7.setStartConfiguration(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair52 = multiDirectional2.optimize(multivariateRealFunction3, goalType4, doubleArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (short) 100);
        int int3 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxIterations((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(10.0d, (double) (-1L));
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        multiDirectional2.setMaxEvaluations((int) (byte) 0);
        int int5 = multiDirectional2.getMaxEvaluations();
        int int6 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int11 = multiDirectional10.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional10.getMaxEvaluations();
        int int15 = multiDirectional10.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int17 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = null;
        multiDirectional16.setConvergenceChecker(realConvergenceChecker20);
        double[] doubleArray24 = new double[] { 1.0d, 2147483647 };
        multiDirectional16.setStartConfiguration(doubleArray24);
        multiDirectional10.setStartConfiguration(doubleArray24);
        multiDirectional2.setStartConfiguration(doubleArray24);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction28 = null;
        org.apache.commons.math.optimization.GoalType goalType29 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int33 = multiDirectional32.getEvaluations();
        int int34 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxEvaluations();
        multiDirectional37.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = null;
        multiDirectional37.setConvergenceChecker(realConvergenceChecker41);
        double[] doubleArray45 = new double[] { 1.0d, 2147483647 };
        multiDirectional37.setStartConfiguration(doubleArray45);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker47 = multiDirectional37.getConvergenceChecker();
        multiDirectional37.setMaxEvaluations((int) (byte) 100);
        multiDirectional37.setMaxIterations(35);
        double[] doubleArray53 = new double[] { 100.0d };
        multiDirectional37.setStartConfiguration(doubleArray53);
        multiDirectional32.setStartConfiguration(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair56 = multiDirectional2.optimize(multivariateRealFunction28, goalType29, doubleArray53);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker47);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0]");
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        int int10 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = multiDirectional0.getConvergenceChecker();
        int int13 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(2147483647);
        int int16 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker11);
        org.junit.Assert.assertNotNull(realConvergenceChecker12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxIterations();
        double[] doubleArray6 = new double[] {};
        multiDirectional4.setStartConfiguration(doubleArray6);
        multiDirectional4.setMaxIterations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker14 = null;
        multiDirectional10.setConvergenceChecker(realConvergenceChecker14);
        double[] doubleArray18 = new double[] { 1.0d, 2147483647 };
        multiDirectional10.setStartConfiguration(doubleArray18);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional10.getConvergenceChecker();
        multiDirectional10.setMaxEvaluations((int) (byte) 100);
        multiDirectional10.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional10.getConvergenceChecker();
        int int26 = multiDirectional10.getEvaluations();
        int int27 = multiDirectional10.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxEvaluations();
        int int30 = multiDirectional28.getIterations();
        int int31 = multiDirectional28.getMaxEvaluations();
        int int32 = multiDirectional28.getMaxEvaluations();
        multiDirectional28.setMaxIterations((-1));
        int int35 = multiDirectional28.getIterations();
        int int36 = multiDirectional28.getEvaluations();
        int int37 = multiDirectional28.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxEvaluations();
        multiDirectional38.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = null;
        multiDirectional38.setConvergenceChecker(realConvergenceChecker42);
        double[] doubleArray46 = new double[] { 1.0d, 2147483647 };
        multiDirectional38.setStartConfiguration(doubleArray46);
        int int48 = multiDirectional38.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxIterations();
        double[] doubleArray51 = new double[] {};
        multiDirectional49.setStartConfiguration(doubleArray51);
        multiDirectional38.setStartConfiguration(doubleArray51);
        multiDirectional28.setStartConfiguration(doubleArray51);
        multiDirectional10.setStartConfiguration(doubleArray51);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxEvaluations();
        int int58 = multiDirectional56.getIterations();
        int int59 = multiDirectional56.getMaxEvaluations();
        int int60 = multiDirectional56.getMaxEvaluations();
        multiDirectional56.setMaxIterations((-1));
        int int63 = multiDirectional56.getMaxIterations();
        multiDirectional56.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional68 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker69 = multiDirectional68.getConvergenceChecker();
        multiDirectional56.setConvergenceChecker(realConvergenceChecker69);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int72 = multiDirectional71.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker73 = null;
        multiDirectional71.setConvergenceChecker(realConvergenceChecker73);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxEvaluations();
        multiDirectional75.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker79 = null;
        multiDirectional75.setConvergenceChecker(realConvergenceChecker79);
        double[] doubleArray83 = new double[] { 1.0d, 2147483647 };
        multiDirectional75.setStartConfiguration(doubleArray83);
        int int85 = multiDirectional75.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional86 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int87 = multiDirectional86.getMaxIterations();
        double[] doubleArray88 = new double[] {};
        multiDirectional86.setStartConfiguration(doubleArray88);
        multiDirectional75.setStartConfiguration(doubleArray88);
        multiDirectional71.setStartConfiguration(doubleArray88);
        multiDirectional56.setStartConfiguration(doubleArray88);
        multiDirectional10.setStartConfiguration(doubleArray88);
        multiDirectional4.setStartConfiguration(doubleArray88);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker95 = multiDirectional4.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker95);
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker20);
        org.junit.Assert.assertNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2147483647 + "'", int72 == 2147483647);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker95);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional20 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int21 = multiDirectional20.getMaxIterations();
        double[] doubleArray22 = new double[] {};
        multiDirectional20.setStartConfiguration(doubleArray22);
        int int24 = multiDirectional20.getMaxEvaluations();
        int int25 = multiDirectional20.getMaxIterations();
        int int26 = multiDirectional20.getMaxIterations();
        multiDirectional20.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        int int31 = multiDirectional29.getIterations();
        int int32 = multiDirectional29.getMaxEvaluations();
        int int33 = multiDirectional29.getMaxEvaluations();
        multiDirectional29.setMaxIterations((-1));
        int int36 = multiDirectional29.getMaxIterations();
        int int37 = multiDirectional29.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = null;
        multiDirectional38.setConvergenceChecker(realConvergenceChecker40);
        multiDirectional38.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker47 = multiDirectional46.getConvergenceChecker();
        multiDirectional38.setConvergenceChecker(realConvergenceChecker47);
        multiDirectional29.setConvergenceChecker(realConvergenceChecker47);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxIterations();
        double[] doubleArray55 = new double[] {};
        multiDirectional53.setStartConfiguration(doubleArray55);
        int int57 = multiDirectional53.getMaxEvaluations();
        int int58 = multiDirectional53.getIterations();
        int int59 = multiDirectional53.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = multiDirectional53.getConvergenceChecker();
        multiDirectional52.setConvergenceChecker(realConvergenceChecker60);
        double[] doubleArray62 = new double[] {};
        double[][] doubleArray63 = new double[][] { doubleArray62 };
        multiDirectional52.setStartConfiguration(doubleArray63);
        multiDirectional29.setStartConfiguration(doubleArray63);
        multiDirectional20.setStartConfiguration(doubleArray63);
        multiDirectional0.setStartConfiguration(doubleArray63);
        int int68 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker47);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        int int3 = multiDirectional2.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        int int9 = multiDirectional7.getIterations();
        int int10 = multiDirectional7.getMaxEvaluations();
        int int11 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxIterations((-1));
        int int14 = multiDirectional7.getIterations();
        multiDirectional7.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional7.setConvergenceChecker(realConvergenceChecker17);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = null;
        multiDirectional19.setConvergenceChecker(realConvergenceChecker23);
        double[] doubleArray27 = new double[] { 1.0d, 2147483647 };
        multiDirectional19.setStartConfiguration(doubleArray27);
        multiDirectional7.setStartConfiguration(doubleArray27);
        multiDirectional6.setStartConfiguration(doubleArray27);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = null;
        multiDirectional31.setConvergenceChecker(realConvergenceChecker35);
        double[] doubleArray39 = new double[] { 1.0d, 2147483647 };
        multiDirectional31.setStartConfiguration(doubleArray39);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker41 = multiDirectional31.getConvergenceChecker();
        multiDirectional31.setMaxEvaluations((int) (byte) 100);
        multiDirectional31.setMaxIterations(35);
        multiDirectional31.setMaxIterations(100);
        multiDirectional31.setMaxIterations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxEvaluations();
        int int52 = multiDirectional50.getIterations();
        int int53 = multiDirectional50.getMaxEvaluations();
        int int54 = multiDirectional50.getMaxEvaluations();
        multiDirectional50.setMaxIterations((-1));
        int int57 = multiDirectional50.getMaxIterations();
        int int58 = multiDirectional50.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker61 = null;
        multiDirectional59.setConvergenceChecker(realConvergenceChecker61);
        multiDirectional59.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker68 = multiDirectional67.getConvergenceChecker();
        multiDirectional59.setConvergenceChecker(realConvergenceChecker68);
        multiDirectional50.setConvergenceChecker(realConvergenceChecker68);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional73 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional74 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int75 = multiDirectional74.getMaxIterations();
        double[] doubleArray76 = new double[] {};
        multiDirectional74.setStartConfiguration(doubleArray76);
        int int78 = multiDirectional74.getMaxEvaluations();
        int int79 = multiDirectional74.getIterations();
        int int80 = multiDirectional74.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker81 = multiDirectional74.getConvergenceChecker();
        multiDirectional73.setConvergenceChecker(realConvergenceChecker81);
        double[] doubleArray83 = new double[] {};
        double[][] doubleArray84 = new double[][] { doubleArray83 };
        multiDirectional73.setStartConfiguration(doubleArray84);
        multiDirectional50.setStartConfiguration(doubleArray84);
        multiDirectional31.setStartConfiguration(doubleArray84);
        multiDirectional6.setStartConfiguration(doubleArray84);
        multiDirectional2.setStartConfiguration(doubleArray84);
        int int90 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker41);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker68);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2147483647 + "'", int75 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2147483647 + "'", int80 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        int int4 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional5.setConvergenceChecker(realConvergenceChecker9);
        double[] doubleArray13 = new double[] { 1.0d, 2147483647 };
        multiDirectional5.setStartConfiguration(doubleArray13);
        int int15 = multiDirectional5.getMaxIterations();
        int int16 = multiDirectional5.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = null;
        multiDirectional5.setConvergenceChecker(realConvergenceChecker17);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional5.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) -1, (double) 10.0f);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = null;
        multiDirectional23.setConvergenceChecker(realConvergenceChecker27);
        double[] doubleArray30 = new double[] { 100.0d };
        multiDirectional23.setStartConfiguration(doubleArray30);
        int int32 = multiDirectional23.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxEvaluations();
        int int37 = multiDirectional35.getIterations();
        int int38 = multiDirectional35.getMaxEvaluations();
        int int39 = multiDirectional35.getMaxEvaluations();
        multiDirectional35.setMaxIterations((-1));
        int int42 = multiDirectional35.getMaxIterations();
        multiDirectional35.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker48 = multiDirectional47.getConvergenceChecker();
        multiDirectional35.setConvergenceChecker(realConvergenceChecker48);
        multiDirectional33.setConvergenceChecker(realConvergenceChecker48);
        multiDirectional23.setConvergenceChecker(realConvergenceChecker48);
        multiDirectional23.setMaxIterations(100);
        multiDirectional23.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional58 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional58.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxIterations();
        double[] doubleArray69 = new double[] {};
        multiDirectional67.setStartConfiguration(doubleArray69);
        int int71 = multiDirectional67.getMaxEvaluations();
        int int72 = multiDirectional67.getIterations();
        int int73 = multiDirectional67.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker74 = multiDirectional67.getConvergenceChecker();
        multiDirectional66.setConvergenceChecker(realConvergenceChecker74);
        double[] doubleArray76 = new double[] {};
        double[][] doubleArray77 = new double[][] { doubleArray76 };
        multiDirectional66.setStartConfiguration(doubleArray77);
        multiDirectional63.setStartConfiguration(doubleArray77);
        multiDirectional58.setStartConfiguration(doubleArray77);
        multiDirectional23.setStartConfiguration(doubleArray77);
        multiDirectional22.setStartConfiguration(doubleArray77);
        multiDirectional5.setStartConfiguration(doubleArray77);
        multiDirectional0.setStartConfiguration(doubleArray77);
        int int85 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker48);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getIterations();
        int int5 = multiDirectional2.getMaxEvaluations();
        int int6 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxIterations((-1));
        int int9 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional14.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker15);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker15);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        int int19 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((-1));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker15);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker20);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 1L);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        int int7 = multiDirectional2.getIterations();
        multiDirectional2.setMaxEvaluations(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100.0f);
        int int3 = multiDirectional2.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional6.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker7);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker7);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0L, (double) 0);
        java.lang.Class<?> wildcardClass3 = multiDirectional2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        multiDirectional7.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = null;
        multiDirectional7.setConvergenceChecker(realConvergenceChecker11);
        double[] doubleArray15 = new double[] { 1.0d, 2147483647 };
        multiDirectional7.setStartConfiguration(doubleArray15);
        multiDirectional7.setMaxIterations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int22 = multiDirectional21.getEvaluations();
        int int23 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        int int28 = multiDirectional26.getIterations();
        int int29 = multiDirectional26.getMaxEvaluations();
        int int30 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxIterations((-1));
        int int33 = multiDirectional26.getMaxIterations();
        int int34 = multiDirectional26.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional35.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional35.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = multiDirectional43.getConvergenceChecker();
        multiDirectional35.setConvergenceChecker(realConvergenceChecker44);
        multiDirectional26.setConvergenceChecker(realConvergenceChecker44);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxIterations();
        double[] doubleArray52 = new double[] {};
        multiDirectional50.setStartConfiguration(doubleArray52);
        int int54 = multiDirectional50.getMaxEvaluations();
        int int55 = multiDirectional50.getIterations();
        int int56 = multiDirectional50.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = multiDirectional50.getConvergenceChecker();
        multiDirectional49.setConvergenceChecker(realConvergenceChecker57);
        double[] doubleArray59 = new double[] {};
        double[][] doubleArray60 = new double[][] { doubleArray59 };
        multiDirectional49.setStartConfiguration(doubleArray60);
        multiDirectional26.setStartConfiguration(doubleArray60);
        multiDirectional21.setStartConfiguration(doubleArray60);
        multiDirectional7.setStartConfiguration(doubleArray60);
        multiDirectional0.setStartConfiguration(doubleArray60);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int67 = multiDirectional66.getMaxEvaluations();
        int int68 = multiDirectional66.getIterations();
        int int69 = multiDirectional66.getMaxEvaluations();
        int int70 = multiDirectional66.getMaxEvaluations();
        multiDirectional66.setMaxIterations((-1));
        int int73 = multiDirectional66.getMaxIterations();
        multiDirectional66.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional78 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker79 = multiDirectional78.getConvergenceChecker();
        multiDirectional66.setConvergenceChecker(realConvergenceChecker79);
        int int81 = multiDirectional66.getMaxIterations();
        int int82 = multiDirectional66.getEvaluations();
        int int83 = multiDirectional66.getEvaluations();
        int int84 = multiDirectional66.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker85 = multiDirectional66.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker85);
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker44);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2147483647 + "'", int67 == 2147483647);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2147483647 + "'", int69 == 2147483647);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker85);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '4', (-1.0d));
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        java.lang.Class<?> wildcardClass7 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        int int6 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations(32);
        multiDirectional0.setMaxEvaluations((-1));
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        multiDirectional0.setMaxEvaluations(2147483647);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) 32);
        int int3 = multiDirectional2.getIterations();
        multiDirectional2.setMaxIterations((int) (short) 100);
        int int6 = multiDirectional2.getIterations();
        multiDirectional2.setMaxIterations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxEvaluations();
        multiDirectional15.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = null;
        multiDirectional15.setConvergenceChecker(realConvergenceChecker19);
        double[] doubleArray23 = new double[] { 1.0d, 2147483647 };
        multiDirectional15.setStartConfiguration(doubleArray23);
        int int25 = multiDirectional15.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxIterations();
        double[] doubleArray28 = new double[] {};
        multiDirectional26.setStartConfiguration(doubleArray28);
        multiDirectional15.setStartConfiguration(doubleArray28);
        multiDirectional0.setStartConfiguration(doubleArray28);
        int int32 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations((int) (short) 100);
        java.lang.Class<?> wildcardClass7 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = null;
        multiDirectional11.setConvergenceChecker(realConvergenceChecker13);
        multiDirectional11.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxIterations();
        double[] doubleArray19 = new double[] {};
        multiDirectional17.setStartConfiguration(doubleArray19);
        int int21 = multiDirectional17.getMaxEvaluations();
        int int22 = multiDirectional17.getMaxIterations();
        int int23 = multiDirectional17.getMaxIterations();
        multiDirectional17.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        int int28 = multiDirectional26.getIterations();
        int int29 = multiDirectional26.getMaxEvaluations();
        int int30 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxIterations((-1));
        int int33 = multiDirectional26.getMaxIterations();
        int int34 = multiDirectional26.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional35.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional35.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = multiDirectional43.getConvergenceChecker();
        multiDirectional35.setConvergenceChecker(realConvergenceChecker44);
        multiDirectional26.setConvergenceChecker(realConvergenceChecker44);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxIterations();
        double[] doubleArray52 = new double[] {};
        multiDirectional50.setStartConfiguration(doubleArray52);
        int int54 = multiDirectional50.getMaxEvaluations();
        int int55 = multiDirectional50.getIterations();
        int int56 = multiDirectional50.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = multiDirectional50.getConvergenceChecker();
        multiDirectional49.setConvergenceChecker(realConvergenceChecker57);
        double[] doubleArray59 = new double[] {};
        double[][] doubleArray60 = new double[][] { doubleArray59 };
        multiDirectional49.setStartConfiguration(doubleArray60);
        multiDirectional26.setStartConfiguration(doubleArray60);
        multiDirectional17.setStartConfiguration(doubleArray60);
        multiDirectional11.setStartConfiguration(doubleArray60);
        multiDirectional0.setStartConfiguration(doubleArray60);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker66 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxEvaluations();
        int int69 = multiDirectional67.getIterations();
        int int70 = multiDirectional67.getMaxEvaluations();
        int int71 = multiDirectional67.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker72 = multiDirectional67.getConvergenceChecker();
        int int73 = multiDirectional67.getIterations();
        multiDirectional67.setMaxEvaluations((int) (short) 100);
        int int76 = multiDirectional67.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional77 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int78 = multiDirectional77.getMaxEvaluations();
        multiDirectional77.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker81 = null;
        multiDirectional77.setConvergenceChecker(realConvergenceChecker81);
        double[] doubleArray85 = new double[] { 1.0d, 2147483647 };
        multiDirectional77.setStartConfiguration(doubleArray85);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker87 = multiDirectional77.getConvergenceChecker();
        multiDirectional77.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional92 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker93 = multiDirectional92.getConvergenceChecker();
        multiDirectional77.setConvergenceChecker(realConvergenceChecker93);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker95 = multiDirectional77.getConvergenceChecker();
        multiDirectional67.setConvergenceChecker(realConvergenceChecker95);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker95);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker44);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNull(realConvergenceChecker66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker87);
        org.junit.Assert.assertNotNull(realConvergenceChecker93);
        org.junit.Assert.assertNotNull(realConvergenceChecker95);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        int int6 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        int int11 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations(0);
        multiDirectional0.setMaxIterations(32);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
        org.junit.Assert.assertNotNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) (byte) 0);
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 100, (double) 10);
        int int3 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(1.0d, (double) 100L);
        int int3 = multiDirectional2.getIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction4 = null;
        org.apache.commons.math.optimization.GoalType goalType5 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional8 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int9 = multiDirectional8.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional8.setConvergenceChecker(realConvergenceChecker10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int22 = multiDirectional21.getMaxEvaluations();
        int int23 = multiDirectional21.getIterations();
        int int24 = multiDirectional21.getMaxEvaluations();
        int int25 = multiDirectional21.getMaxEvaluations();
        multiDirectional21.setMaxIterations((-1));
        int int28 = multiDirectional21.getMaxIterations();
        multiDirectional21.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional33.getConvergenceChecker();
        multiDirectional21.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional19.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional18.setConvergenceChecker(realConvergenceChecker34);
        multiDirectional12.setConvergenceChecker(realConvergenceChecker34);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int46 = multiDirectional45.getMaxEvaluations();
        multiDirectional45.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = null;
        multiDirectional45.setConvergenceChecker(realConvergenceChecker49);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxEvaluations();
        multiDirectional51.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker55 = null;
        multiDirectional51.setConvergenceChecker(realConvergenceChecker55);
        double[] doubleArray59 = new double[] { 1.0d, 2147483647 };
        multiDirectional51.setStartConfiguration(doubleArray59);
        multiDirectional45.setStartConfiguration(doubleArray59);
        multiDirectional44.setStartConfiguration(doubleArray59);
        multiDirectional41.setStartConfiguration(doubleArray59);
        multiDirectional12.setStartConfiguration(doubleArray59);
        multiDirectional8.setStartConfiguration(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair66 = multiDirectional2.optimize(multivariateRealFunction4, goalType5, doubleArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(100);
        multiDirectional0.setMaxIterations((int) (short) 10);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) 'a');
        int int16 = multiDirectional0.getMaxIterations();
        java.lang.Class<?> wildcardClass17 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 1, (double) 1);
        multiDirectional2.setMaxIterations(1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((int) (byte) 0);
        multiDirectional5.setMaxIterations((int) '#');
        multiDirectional5.setMaxEvaluations((int) ' ');
        int int13 = multiDirectional5.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int17 = multiDirectional16.getEvaluations();
        int int18 = multiDirectional16.getMaxEvaluations();
        multiDirectional16.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxIterations();
        double[] doubleArray26 = new double[] {};
        multiDirectional24.setStartConfiguration(doubleArray26);
        int int28 = multiDirectional24.getMaxEvaluations();
        int int29 = multiDirectional24.getIterations();
        int int30 = multiDirectional24.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = multiDirectional24.getConvergenceChecker();
        multiDirectional23.setConvergenceChecker(realConvergenceChecker31);
        double[] doubleArray33 = new double[] {};
        double[][] doubleArray34 = new double[][] { doubleArray33 };
        multiDirectional23.setStartConfiguration(doubleArray34);
        multiDirectional16.setStartConfiguration(doubleArray34);
        multiDirectional5.setStartConfiguration(doubleArray34);
        multiDirectional2.setStartConfiguration(doubleArray34);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        int int19 = multiDirectional0.getIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction20 = null;
        org.apache.commons.math.optimization.GoalType goalType21 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional22 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int23 = multiDirectional22.getMaxEvaluations();
        multiDirectional22.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker26 = null;
        multiDirectional22.setConvergenceChecker(realConvergenceChecker26);
        double[] doubleArray30 = new double[] { 1.0d, 2147483647 };
        multiDirectional22.setStartConfiguration(doubleArray30);
        multiDirectional22.setMaxIterations((int) (byte) 100);
        int int34 = multiDirectional22.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int38 = multiDirectional37.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = null;
        multiDirectional37.setConvergenceChecker(realConvergenceChecker39);
        int int41 = multiDirectional37.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int52 = multiDirectional51.getMaxEvaluations();
        int int53 = multiDirectional51.getIterations();
        int int54 = multiDirectional51.getMaxEvaluations();
        int int55 = multiDirectional51.getMaxEvaluations();
        multiDirectional51.setMaxIterations((-1));
        int int58 = multiDirectional51.getMaxIterations();
        multiDirectional51.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional63 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = multiDirectional63.getConvergenceChecker();
        multiDirectional51.setConvergenceChecker(realConvergenceChecker64);
        multiDirectional49.setConvergenceChecker(realConvergenceChecker64);
        multiDirectional48.setConvergenceChecker(realConvergenceChecker64);
        multiDirectional42.setConvergenceChecker(realConvergenceChecker64);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional74 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxEvaluations();
        multiDirectional75.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker79 = null;
        multiDirectional75.setConvergenceChecker(realConvergenceChecker79);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional81 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int82 = multiDirectional81.getMaxEvaluations();
        multiDirectional81.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker85 = null;
        multiDirectional81.setConvergenceChecker(realConvergenceChecker85);
        double[] doubleArray89 = new double[] { 1.0d, 2147483647 };
        multiDirectional81.setStartConfiguration(doubleArray89);
        multiDirectional75.setStartConfiguration(doubleArray89);
        multiDirectional74.setStartConfiguration(doubleArray89);
        multiDirectional71.setStartConfiguration(doubleArray89);
        multiDirectional42.setStartConfiguration(doubleArray89);
        multiDirectional37.setStartConfiguration(doubleArray89);
        multiDirectional22.setStartConfiguration(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair97 = multiDirectional0.optimize(multivariateRealFunction20, goalType21, doubleArray89);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.FunctionEvaluationException; message: org.apache.commons.math.MaxEvaluationsExceededException: Maximal number of evaluations (0) exceeded");
        } catch (org.apache.commons.math.FunctionEvaluationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker64);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker16);
        double[] doubleArray20 = new double[] { 1.0d, 2147483647 };
        multiDirectional12.setStartConfiguration(doubleArray20);
        multiDirectional0.setStartConfiguration(doubleArray20);
        int int23 = multiDirectional0.getMaxEvaluations();
        int int24 = multiDirectional0.getIterations();
        int int25 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 97, (double) (byte) 1);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        int int7 = multiDirectional4.getMaxEvaluations();
        int int8 = multiDirectional4.getMaxEvaluations();
        multiDirectional4.setMaxIterations((-1));
        int int11 = multiDirectional4.getMaxIterations();
        multiDirectional4.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional16 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional16.getConvergenceChecker();
        multiDirectional4.setConvergenceChecker(realConvergenceChecker17);
        int int19 = multiDirectional4.getMaxIterations();
        int int20 = multiDirectional4.getEvaluations();
        int int21 = multiDirectional4.getMaxEvaluations();
        int int22 = multiDirectional4.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional4.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker23);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional0.getConvergenceChecker();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxEvaluations((int) (byte) 1);
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxIterations(97);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getMaxEvaluations();
        int int15 = multiDirectional0.getMaxEvaluations();
        int int16 = multiDirectional0.getMaxIterations();
        int int17 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker18);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        int int3 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxIterations(100);
        multiDirectional2.setMaxEvaluations((int) (byte) 1);
        int int8 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional6 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int7 = multiDirectional6.getMaxEvaluations();
        multiDirectional6.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional6.setConvergenceChecker(realConvergenceChecker10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker16);
        double[] doubleArray20 = new double[] { 1.0d, 2147483647 };
        multiDirectional12.setStartConfiguration(doubleArray20);
        multiDirectional6.setStartConfiguration(doubleArray20);
        multiDirectional5.setStartConfiguration(doubleArray20);
        multiDirectional2.setStartConfiguration(doubleArray20);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 'a', (double) 2147483647);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxEvaluations();
        multiDirectional28.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = null;
        multiDirectional28.setConvergenceChecker(realConvergenceChecker32);
        double[] doubleArray36 = new double[] { 1.0d, 2147483647 };
        multiDirectional28.setStartConfiguration(doubleArray36);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional28.getConvergenceChecker();
        multiDirectional28.setMaxEvaluations((int) (byte) 100);
        multiDirectional28.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = multiDirectional28.getConvergenceChecker();
        int int44 = multiDirectional28.getEvaluations();
        int int45 = multiDirectional28.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxEvaluations();
        int int48 = multiDirectional46.getIterations();
        int int49 = multiDirectional46.getMaxEvaluations();
        int int50 = multiDirectional46.getMaxEvaluations();
        multiDirectional46.setMaxIterations((-1));
        int int53 = multiDirectional46.getIterations();
        int int54 = multiDirectional46.getEvaluations();
        int int55 = multiDirectional46.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxEvaluations();
        multiDirectional56.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = null;
        multiDirectional56.setConvergenceChecker(realConvergenceChecker60);
        double[] doubleArray64 = new double[] { 1.0d, 2147483647 };
        multiDirectional56.setStartConfiguration(doubleArray64);
        int int66 = multiDirectional56.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxIterations();
        double[] doubleArray69 = new double[] {};
        multiDirectional67.setStartConfiguration(doubleArray69);
        multiDirectional56.setStartConfiguration(doubleArray69);
        multiDirectional46.setStartConfiguration(doubleArray69);
        multiDirectional28.setStartConfiguration(doubleArray69);
        multiDirectional27.setStartConfiguration(doubleArray69);
        multiDirectional2.setStartConfiguration(doubleArray69);
        multiDirectional2.setMaxIterations((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker38);
        org.junit.Assert.assertNull(realConvergenceChecker43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2147483647 + "'", int66 == 2147483647);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0L, (double) (byte) 0);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations((int) ' ');
        int int8 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker9);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional0.getConvergenceChecker();
        int int6 = multiDirectional0.getIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 100);
        multiDirectional0.setMaxEvaluations((int) (byte) 10);
        int int11 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getMaxEvaluations();
        int int15 = multiDirectional0.getMaxEvaluations();
        int int16 = multiDirectional0.getIterations();
        int int17 = multiDirectional0.getMaxIterations();
        int int18 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) 100.0f);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        multiDirectional0.setMaxIterations(1);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction13 = null;
        org.apache.commons.math.optimization.GoalType goalType14 = null;
        double[] doubleArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair16 = multiDirectional0.optimize(multivariateRealFunction13, goalType14, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = null;
        multiDirectional3.setConvergenceChecker(realConvergenceChecker5);
        multiDirectional3.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional3.getConvergenceChecker();
        int int10 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker11 = multiDirectional3.getConvergenceChecker();
        int int12 = multiDirectional3.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional3.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker16);
        multiDirectional14.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker20 = multiDirectional14.getConvergenceChecker();
        int int21 = multiDirectional14.getMaxEvaluations();
        int int22 = multiDirectional14.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = null;
        multiDirectional23.setConvergenceChecker(realConvergenceChecker27);
        double[] doubleArray30 = new double[] { 100.0d };
        multiDirectional23.setStartConfiguration(doubleArray30);
        multiDirectional14.setStartConfiguration(doubleArray30);
        multiDirectional3.setStartConfiguration(doubleArray30);
        multiDirectional2.setStartConfiguration(doubleArray30);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNull(realConvergenceChecker11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]");
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        int int9 = multiDirectional0.getIterations();
        int int10 = multiDirectional0.getEvaluations();
        int int11 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setMaxIterations((int) (short) -1);
        int int24 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional0.getConvergenceChecker();
        int int26 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker16);
        double[] doubleArray20 = new double[] { 1.0d, 2147483647 };
        multiDirectional12.setStartConfiguration(doubleArray20);
        multiDirectional0.setStartConfiguration(doubleArray20);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxIterations();
        double[] doubleArray30 = new double[] {};
        multiDirectional28.setStartConfiguration(doubleArray30);
        multiDirectional23.setStartConfiguration(doubleArray30);
        multiDirectional0.setStartConfiguration(doubleArray30);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional0.getConvergenceChecker();
        int int35 = multiDirectional0.getMaxIterations();
        int int36 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker40 = multiDirectional39.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker40);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker40);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        int int8 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations((int) ' ');
        int int11 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations(35);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 10, (double) 'a');
        java.lang.Class<?> wildcardClass3 = multiDirectional2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        int int13 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker18);
        double[] doubleArray22 = new double[] { 1.0d, 2147483647 };
        multiDirectional14.setStartConfiguration(doubleArray22);
        multiDirectional0.setStartConfiguration(doubleArray22);
        int int25 = multiDirectional0.getMaxEvaluations();
        int int26 = multiDirectional0.getEvaluations();
        int int27 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 35, (double) 1.0f);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction3 = null;
        org.apache.commons.math.optimization.GoalType goalType4 = null;
        double[] doubleArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair6 = multiDirectional2.optimize(multivariateRealFunction3, goalType4, doubleArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxIterations();
        double[] doubleArray20 = new double[] {};
        multiDirectional18.setStartConfiguration(doubleArray20);
        multiDirectional0.setStartConfiguration(doubleArray20);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxEvaluations();
        int int25 = multiDirectional23.getIterations();
        int int26 = multiDirectional23.getMaxEvaluations();
        int int27 = multiDirectional23.getMaxEvaluations();
        multiDirectional23.setMaxIterations((-1));
        int int30 = multiDirectional23.getIterations();
        int int31 = multiDirectional23.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional23.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        int int35 = multiDirectional33.getIterations();
        int int36 = multiDirectional33.getMaxEvaluations();
        int int37 = multiDirectional33.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxIterations();
        double[] doubleArray40 = new double[] {};
        multiDirectional38.setStartConfiguration(doubleArray40);
        multiDirectional33.setStartConfiguration(doubleArray40);
        multiDirectional23.setStartConfiguration(doubleArray40);
        multiDirectional0.setStartConfiguration(doubleArray40);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = multiDirectional0.getConvergenceChecker();
        int int46 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(realConvergenceChecker45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        int int19 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) ' ');
        int int3 = multiDirectional2.getEvaluations();
        multiDirectional2.setMaxIterations(2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        int int3 = multiDirectional2.getEvaluations();
        int int4 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) 32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        int int9 = multiDirectional0.getMaxEvaluations();
        int int10 = multiDirectional0.getIterations();
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction11 = null;
        org.apache.commons.math.optimization.GoalType goalType12 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int16 = multiDirectional15.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        int int21 = multiDirectional19.getIterations();
        int int22 = multiDirectional19.getMaxEvaluations();
        int int23 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxIterations((-1));
        int int26 = multiDirectional19.getMaxIterations();
        multiDirectional19.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional31.getConvergenceChecker();
        multiDirectional19.setConvergenceChecker(realConvergenceChecker32);
        multiDirectional17.setConvergenceChecker(realConvergenceChecker32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional17.getConvergenceChecker();
        multiDirectional15.setConvergenceChecker(realConvergenceChecker35);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional37 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int38 = multiDirectional37.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = null;
        multiDirectional37.setConvergenceChecker(realConvergenceChecker39);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxEvaluations();
        multiDirectional41.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = null;
        multiDirectional41.setConvergenceChecker(realConvergenceChecker45);
        double[] doubleArray49 = new double[] { 1.0d, 2147483647 };
        multiDirectional41.setStartConfiguration(doubleArray49);
        int int51 = multiDirectional41.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxIterations();
        double[] doubleArray54 = new double[] {};
        multiDirectional52.setStartConfiguration(doubleArray54);
        multiDirectional41.setStartConfiguration(doubleArray54);
        multiDirectional37.setStartConfiguration(doubleArray54);
        int int58 = multiDirectional37.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional59 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int60 = multiDirectional59.getMaxEvaluations();
        multiDirectional59.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker63 = null;
        multiDirectional59.setConvergenceChecker(realConvergenceChecker63);
        double[] doubleArray67 = new double[] { 1.0d, 2147483647 };
        multiDirectional59.setStartConfiguration(doubleArray67);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker69 = multiDirectional59.getConvergenceChecker();
        multiDirectional59.setMaxEvaluations((int) (byte) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional74 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker75 = multiDirectional74.getConvergenceChecker();
        multiDirectional59.setConvergenceChecker(realConvergenceChecker75);
        multiDirectional37.setConvergenceChecker(realConvergenceChecker75);
        multiDirectional15.setConvergenceChecker(realConvergenceChecker75);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional81 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 100);
        int int82 = multiDirectional81.getMaxEvaluations();
        int int83 = multiDirectional81.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional84 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int85 = multiDirectional84.getMaxEvaluations();
        multiDirectional84.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker88 = null;
        multiDirectional84.setConvergenceChecker(realConvergenceChecker88);
        double[] doubleArray91 = new double[] { 100.0d };
        multiDirectional84.setStartConfiguration(doubleArray91);
        multiDirectional81.setStartConfiguration(doubleArray91);
        multiDirectional15.setStartConfiguration(doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair95 = multiDirectional0.optimize(multivariateRealFunction11, goalType12, doubleArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertNotNull(realConvergenceChecker35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker69);
        org.junit.Assert.assertNotNull(realConvergenceChecker75);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2147483647 + "'", int83 == 2147483647);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[100.0]");
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getIterations();
        int int5 = multiDirectional2.getMaxEvaluations();
        int int6 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxIterations((-1));
        int int9 = multiDirectional2.getMaxIterations();
        multiDirectional2.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional14.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker15);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker15);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        int int19 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations(10);
        multiDirectional0.setMaxEvaluations(100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int25 = multiDirectional24.getMaxEvaluations();
        multiDirectional24.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional24.setConvergenceChecker(realConvergenceChecker28);
        double[] doubleArray31 = new double[] { 100.0d };
        multiDirectional24.setStartConfiguration(doubleArray31);
        multiDirectional24.setMaxEvaluations(2147483647);
        int int35 = multiDirectional24.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxIterations();
        double[] doubleArray38 = new double[] {};
        multiDirectional36.setStartConfiguration(doubleArray38);
        int int40 = multiDirectional36.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxEvaluations();
        int int43 = multiDirectional41.getIterations();
        int int44 = multiDirectional41.getMaxEvaluations();
        int int45 = multiDirectional41.getMaxEvaluations();
        multiDirectional41.setMaxIterations((-1));
        int int48 = multiDirectional41.getIterations();
        multiDirectional41.setMaxIterations((int) '#');
        multiDirectional41.setMaxEvaluations(0);
        multiDirectional41.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker58 = multiDirectional57.getConvergenceChecker();
        multiDirectional41.setConvergenceChecker(realConvergenceChecker58);
        multiDirectional36.setConvergenceChecker(realConvergenceChecker58);
        multiDirectional24.setConvergenceChecker(realConvergenceChecker58);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker58);
        java.lang.Class<?> wildcardClass63 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker15);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker58);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional0.getConvergenceChecker();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        int int20 = multiDirectional18.getIterations();
        int int21 = multiDirectional18.getMaxEvaluations();
        int int22 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxIterations((-1));
        int int25 = multiDirectional18.getMaxIterations();
        int int26 = multiDirectional18.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int28 = multiDirectional27.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = null;
        multiDirectional27.setConvergenceChecker(realConvergenceChecker29);
        multiDirectional27.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional35.getConvergenceChecker();
        multiDirectional27.setConvergenceChecker(realConvergenceChecker36);
        multiDirectional18.setConvergenceChecker(realConvergenceChecker36);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxIterations();
        double[] doubleArray44 = new double[] {};
        multiDirectional42.setStartConfiguration(doubleArray44);
        int int46 = multiDirectional42.getMaxEvaluations();
        int int47 = multiDirectional42.getIterations();
        int int48 = multiDirectional42.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker49 = multiDirectional42.getConvergenceChecker();
        multiDirectional41.setConvergenceChecker(realConvergenceChecker49);
        double[] doubleArray51 = new double[] {};
        double[][] doubleArray52 = new double[][] { doubleArray51 };
        multiDirectional41.setStartConfiguration(doubleArray52);
        multiDirectional18.setStartConfiguration(doubleArray52);
        multiDirectional0.setStartConfiguration(doubleArray52);
        int int56 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(35);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = multiDirectional12.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker13);
        int int15 = multiDirectional0.getMaxIterations();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional19 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int20 = multiDirectional19.getMaxEvaluations();
        int int21 = multiDirectional19.getIterations();
        int int22 = multiDirectional19.getMaxEvaluations();
        int int23 = multiDirectional19.getMaxEvaluations();
        multiDirectional19.setMaxIterations((-1));
        int int26 = multiDirectional19.getMaxIterations();
        multiDirectional19.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = multiDirectional31.getConvergenceChecker();
        multiDirectional19.setConvergenceChecker(realConvergenceChecker32);
        int int34 = multiDirectional19.getMaxIterations();
        int int35 = multiDirectional19.getEvaluations();
        int int36 = multiDirectional19.getMaxEvaluations();
        int int37 = multiDirectional19.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional38 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int39 = multiDirectional38.getMaxEvaluations();
        multiDirectional38.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = null;
        multiDirectional38.setConvergenceChecker(realConvergenceChecker42);
        double[] doubleArray45 = new double[] { 100.0d };
        multiDirectional38.setStartConfiguration(doubleArray45);
        int int47 = multiDirectional38.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional48 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int49 = multiDirectional48.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxEvaluations();
        int int52 = multiDirectional50.getIterations();
        int int53 = multiDirectional50.getMaxEvaluations();
        int int54 = multiDirectional50.getMaxEvaluations();
        multiDirectional50.setMaxIterations((-1));
        int int57 = multiDirectional50.getMaxIterations();
        multiDirectional50.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional62 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker63 = multiDirectional62.getConvergenceChecker();
        multiDirectional50.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional48.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional38.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional19.setConvergenceChecker(realConvergenceChecker63);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker63);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker69 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (short) 1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker72 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker72);
        int int74 = multiDirectional0.getMaxIterations();
        int int75 = multiDirectional0.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker63);
        org.junit.Assert.assertNotNull(realConvergenceChecker69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 0, (double) 0L);
        multiDirectional2.setMaxIterations(0);
        int int5 = multiDirectional2.getIterations();
        java.lang.Class<?> wildcardClass6 = multiDirectional2.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 'a');
        multiDirectional2.setMaxIterations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = null;
        multiDirectional5.setConvergenceChecker(realConvergenceChecker9);
        double[] doubleArray12 = new double[] { 100.0d };
        multiDirectional5.setStartConfiguration(doubleArray12);
        int int14 = multiDirectional5.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxEvaluations();
        int int19 = multiDirectional17.getIterations();
        int int20 = multiDirectional17.getMaxEvaluations();
        int int21 = multiDirectional17.getMaxEvaluations();
        multiDirectional17.setMaxIterations((-1));
        int int24 = multiDirectional17.getMaxIterations();
        multiDirectional17.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker30 = multiDirectional29.getConvergenceChecker();
        multiDirectional17.setConvergenceChecker(realConvergenceChecker30);
        multiDirectional15.setConvergenceChecker(realConvergenceChecker30);
        multiDirectional5.setConvergenceChecker(realConvergenceChecker30);
        multiDirectional5.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker36 = multiDirectional5.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker36);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker30);
        org.junit.Assert.assertNotNull(realConvergenceChecker36);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        int int12 = multiDirectional0.getMaxIterations();
        int int13 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxIterations();
        double[] doubleArray16 = new double[] {};
        multiDirectional14.setStartConfiguration(doubleArray16);
        int int18 = multiDirectional14.getMaxEvaluations();
        int int19 = multiDirectional14.getIterations();
        int int20 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxIterations((int) (short) 1);
        int int23 = multiDirectional14.getEvaluations();
        int int24 = multiDirectional14.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 'a', (double) 2147483647);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxEvaluations();
        multiDirectional28.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = null;
        multiDirectional28.setConvergenceChecker(realConvergenceChecker32);
        double[] doubleArray36 = new double[] { 1.0d, 2147483647 };
        multiDirectional28.setStartConfiguration(doubleArray36);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker38 = multiDirectional28.getConvergenceChecker();
        multiDirectional28.setMaxEvaluations((int) (byte) 100);
        multiDirectional28.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = multiDirectional28.getConvergenceChecker();
        int int44 = multiDirectional28.getEvaluations();
        int int45 = multiDirectional28.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional46 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int47 = multiDirectional46.getMaxEvaluations();
        int int48 = multiDirectional46.getIterations();
        int int49 = multiDirectional46.getMaxEvaluations();
        int int50 = multiDirectional46.getMaxEvaluations();
        multiDirectional46.setMaxIterations((-1));
        int int53 = multiDirectional46.getIterations();
        int int54 = multiDirectional46.getEvaluations();
        int int55 = multiDirectional46.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxEvaluations();
        multiDirectional56.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker60 = null;
        multiDirectional56.setConvergenceChecker(realConvergenceChecker60);
        double[] doubleArray64 = new double[] { 1.0d, 2147483647 };
        multiDirectional56.setStartConfiguration(doubleArray64);
        int int66 = multiDirectional56.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxIterations();
        double[] doubleArray69 = new double[] {};
        multiDirectional67.setStartConfiguration(doubleArray69);
        multiDirectional56.setStartConfiguration(doubleArray69);
        multiDirectional46.setStartConfiguration(doubleArray69);
        multiDirectional28.setStartConfiguration(doubleArray69);
        multiDirectional27.setStartConfiguration(doubleArray69);
        multiDirectional14.setStartConfiguration(doubleArray69);
        multiDirectional0.setStartConfiguration(doubleArray69);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker38);
        org.junit.Assert.assertNull(realConvergenceChecker43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2147483647 + "'", int66 == 2147483647);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getMaxEvaluations();
        int int15 = multiDirectional0.getMaxEvaluations();
        int int16 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker19 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker17);
        org.junit.Assert.assertNull(realConvergenceChecker18);
        org.junit.Assert.assertNull(realConvergenceChecker19);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 35, (double) (byte) -1);
        multiDirectional2.setMaxEvaluations(1);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker18);
        int int22 = multiDirectional2.getMaxEvaluations();
        multiDirectional2.setMaxEvaluations(2147483647);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 1, (double) 1);
        int int28 = multiDirectional27.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = null;
        multiDirectional29.setConvergenceChecker(realConvergenceChecker31);
        multiDirectional29.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker35 = multiDirectional29.getConvergenceChecker();
        int int36 = multiDirectional29.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = multiDirectional29.getConvergenceChecker();
        int int38 = multiDirectional29.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional29.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional40 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int41 = multiDirectional40.getMaxEvaluations();
        int int42 = multiDirectional40.getIterations();
        int int43 = multiDirectional40.getMaxEvaluations();
        int int44 = multiDirectional40.getMaxEvaluations();
        multiDirectional40.setMaxIterations((-1));
        int int47 = multiDirectional40.getIterations();
        multiDirectional40.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker50 = null;
        multiDirectional40.setConvergenceChecker(realConvergenceChecker50);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxEvaluations();
        multiDirectional52.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker56 = null;
        multiDirectional52.setConvergenceChecker(realConvergenceChecker56);
        double[] doubleArray60 = new double[] { 1.0d, 2147483647 };
        multiDirectional52.setStartConfiguration(doubleArray60);
        multiDirectional40.setStartConfiguration(doubleArray60);
        int int63 = multiDirectional40.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional66 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker67 = multiDirectional66.getConvergenceChecker();
        multiDirectional40.setConvergenceChecker(realConvergenceChecker67);
        multiDirectional29.setConvergenceChecker(realConvergenceChecker67);
        multiDirectional27.setConvergenceChecker(realConvergenceChecker67);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker67);
        multiDirectional2.setMaxIterations((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 32 + "'", int36 == 32);
        org.junit.Assert.assertNull(realConvergenceChecker37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2147483647 + "'", int63 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker67);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 10, (double) 100L);
        multiDirectional2.setMaxIterations(10);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxEvaluations((int) (byte) 100);
        multiDirectional0.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker15 = multiDirectional0.getConvergenceChecker();
        int int16 = multiDirectional0.getEvaluations();
        int int17 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        int int20 = multiDirectional18.getIterations();
        int int21 = multiDirectional18.getMaxEvaluations();
        int int22 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxIterations((-1));
        int int25 = multiDirectional18.getIterations();
        int int26 = multiDirectional18.getEvaluations();
        int int27 = multiDirectional18.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int29 = multiDirectional28.getMaxEvaluations();
        multiDirectional28.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker32 = null;
        multiDirectional28.setConvergenceChecker(realConvergenceChecker32);
        double[] doubleArray36 = new double[] { 1.0d, 2147483647 };
        multiDirectional28.setStartConfiguration(doubleArray36);
        int int38 = multiDirectional28.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional39 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int40 = multiDirectional39.getMaxIterations();
        double[] doubleArray41 = new double[] {};
        multiDirectional39.setStartConfiguration(doubleArray41);
        multiDirectional28.setStartConfiguration(doubleArray41);
        multiDirectional18.setStartConfiguration(doubleArray41);
        multiDirectional0.setStartConfiguration(doubleArray41);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional0.getConvergenceChecker();
        int int47 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertNull(realConvergenceChecker15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNull(realConvergenceChecker46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 52, (double) 97);
        multiDirectional2.setMaxEvaluations(1);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 100, 1.0d);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker13 = null;
        multiDirectional11.setConvergenceChecker(realConvergenceChecker13);
        multiDirectional11.setMaxEvaluations((int) (short) 10);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxIterations();
        double[] doubleArray19 = new double[] {};
        multiDirectional17.setStartConfiguration(doubleArray19);
        int int21 = multiDirectional17.getMaxEvaluations();
        int int22 = multiDirectional17.getMaxIterations();
        int int23 = multiDirectional17.getMaxIterations();
        multiDirectional17.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        int int28 = multiDirectional26.getIterations();
        int int29 = multiDirectional26.getMaxEvaluations();
        int int30 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxIterations((-1));
        int int33 = multiDirectional26.getMaxIterations();
        int int34 = multiDirectional26.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional35 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int36 = multiDirectional35.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker37 = null;
        multiDirectional35.setConvergenceChecker(realConvergenceChecker37);
        multiDirectional35.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker44 = multiDirectional43.getConvergenceChecker();
        multiDirectional35.setConvergenceChecker(realConvergenceChecker44);
        multiDirectional26.setConvergenceChecker(realConvergenceChecker44);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional50 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int51 = multiDirectional50.getMaxIterations();
        double[] doubleArray52 = new double[] {};
        multiDirectional50.setStartConfiguration(doubleArray52);
        int int54 = multiDirectional50.getMaxEvaluations();
        int int55 = multiDirectional50.getIterations();
        int int56 = multiDirectional50.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = multiDirectional50.getConvergenceChecker();
        multiDirectional49.setConvergenceChecker(realConvergenceChecker57);
        double[] doubleArray59 = new double[] {};
        double[][] doubleArray60 = new double[][] { doubleArray59 };
        multiDirectional49.setStartConfiguration(doubleArray60);
        multiDirectional26.setStartConfiguration(doubleArray60);
        multiDirectional17.setStartConfiguration(doubleArray60);
        multiDirectional11.setStartConfiguration(doubleArray60);
        multiDirectional0.setStartConfiguration(doubleArray60);
        java.lang.Class<?> wildcardClass66 = doubleArray60.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker44);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((-1.0d), (double) (byte) 1);
        multiDirectional2.setMaxEvaluations(1);
        multiDirectional2.setMaxIterations((int) (short) 0);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (-1.0d));
        int int3 = multiDirectional2.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional4 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int5 = multiDirectional4.getMaxEvaluations();
        int int6 = multiDirectional4.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional7 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int8 = multiDirectional7.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional9 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int10 = multiDirectional9.getMaxEvaluations();
        int int11 = multiDirectional9.getIterations();
        int int12 = multiDirectional9.getMaxEvaluations();
        int int13 = multiDirectional9.getMaxEvaluations();
        multiDirectional9.setMaxIterations((-1));
        int int16 = multiDirectional9.getMaxIterations();
        multiDirectional9.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional21 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional21.getConvergenceChecker();
        multiDirectional9.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional7.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional4.setConvergenceChecker(realConvergenceChecker22);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional2.getConvergenceChecker();
        int int28 = multiDirectional2.getMaxEvaluations();
        int int29 = multiDirectional2.getEvaluations();
        int int30 = multiDirectional2.getIterations();
        int int31 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations(0);
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxEvaluations((int) (byte) 0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker17 = multiDirectional0.getConvergenceChecker();
        java.lang.Class<?> wildcardClass18 = realConvergenceChecker17.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertNotNull(realConvergenceChecker17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        int int7 = multiDirectional0.getMaxIterations();
        int int8 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 97, 100.0d);
        int int3 = multiDirectional2.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1), 1.0d);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) 0, (double) 100);
        multiDirectional2.setMaxIterations((int) ' ');
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10, (double) (byte) 1);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxEvaluations((int) (byte) 10);
        int int11 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        multiDirectional0.setMaxEvaluations((int) '4');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = null;
        multiDirectional14.setConvergenceChecker(realConvergenceChecker18);
        double[] doubleArray22 = new double[] { 1.0d, 2147483647 };
        multiDirectional14.setStartConfiguration(doubleArray22);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker24 = multiDirectional14.getConvergenceChecker();
        multiDirectional14.setMaxEvaluations((int) (byte) 100);
        multiDirectional14.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional14.getConvergenceChecker();
        int int30 = multiDirectional14.getEvaluations();
        int int31 = multiDirectional14.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxEvaluations();
        int int34 = multiDirectional32.getIterations();
        int int35 = multiDirectional32.getMaxEvaluations();
        int int36 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxIterations((-1));
        int int39 = multiDirectional32.getIterations();
        int int40 = multiDirectional32.getEvaluations();
        int int41 = multiDirectional32.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int43 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = null;
        multiDirectional42.setConvergenceChecker(realConvergenceChecker46);
        double[] doubleArray50 = new double[] { 1.0d, 2147483647 };
        multiDirectional42.setStartConfiguration(doubleArray50);
        int int52 = multiDirectional42.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional53 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int54 = multiDirectional53.getMaxIterations();
        double[] doubleArray55 = new double[] {};
        multiDirectional53.setStartConfiguration(doubleArray55);
        multiDirectional42.setStartConfiguration(doubleArray55);
        multiDirectional32.setStartConfiguration(doubleArray55);
        multiDirectional14.setStartConfiguration(doubleArray55);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional60 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int61 = multiDirectional60.getMaxEvaluations();
        multiDirectional60.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = null;
        multiDirectional60.setConvergenceChecker(realConvergenceChecker64);
        double[] doubleArray68 = new double[] { 1.0d, 2147483647 };
        multiDirectional60.setStartConfiguration(doubleArray68);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker70 = multiDirectional60.getConvergenceChecker();
        multiDirectional60.setMaxEvaluations((int) (byte) 100);
        multiDirectional60.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional75 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int76 = multiDirectional75.getMaxEvaluations();
        multiDirectional75.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker79 = null;
        multiDirectional75.setConvergenceChecker(realConvergenceChecker79);
        double[] doubleArray83 = new double[] { 1.0d, 2147483647 };
        multiDirectional75.setStartConfiguration(doubleArray83);
        int int85 = multiDirectional75.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional86 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int87 = multiDirectional86.getMaxIterations();
        double[] doubleArray88 = new double[] {};
        multiDirectional86.setStartConfiguration(doubleArray88);
        multiDirectional75.setStartConfiguration(doubleArray88);
        multiDirectional60.setStartConfiguration(doubleArray88);
        multiDirectional14.setStartConfiguration(doubleArray88);
        multiDirectional0.setStartConfiguration(doubleArray88);
        int int94 = multiDirectional0.getIterations();
        int int95 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker96 = multiDirectional0.getConvergenceChecker();
        int int97 = multiDirectional0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker24);
        org.junit.Assert.assertNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2147483647 + "'", int85 == 2147483647);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNull(realConvergenceChecker96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1), (double) (-1.0f));
        int int3 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional(10.0d, (double) 1.0f);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (byte) -1, (double) (-1L));
        multiDirectional2.setMaxEvaluations(0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional5.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional11 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int12 = multiDirectional11.getMaxEvaluations();
        int int13 = multiDirectional11.getIterations();
        int int14 = multiDirectional11.getMaxEvaluations();
        int int15 = multiDirectional11.getMaxEvaluations();
        multiDirectional11.setMaxIterations((-1));
        int int18 = multiDirectional11.getIterations();
        multiDirectional11.setMaxIterations((int) '#');
        multiDirectional11.setMaxEvaluations(0);
        multiDirectional11.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional27 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = multiDirectional27.getConvergenceChecker();
        multiDirectional11.setConvergenceChecker(realConvergenceChecker28);
        int int30 = multiDirectional11.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = multiDirectional11.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker31);
        multiDirectional2.setConvergenceChecker(realConvergenceChecker31);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = multiDirectional2.getConvergenceChecker();
        int int35 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker31);
        org.junit.Assert.assertNotNull(realConvergenceChecker34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((-1));
        int int7 = multiDirectional0.getIterations();
        int int8 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional0.getConvergenceChecker();
        int int10 = multiDirectional0.getEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional(0.0d, (double) 10.0f);
        int int16 = multiDirectional15.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int18 = multiDirectional17.getMaxEvaluations();
        multiDirectional17.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker21 = null;
        multiDirectional17.setConvergenceChecker(realConvergenceChecker21);
        double[] doubleArray25 = new double[] { 1.0d, 2147483647 };
        multiDirectional17.setStartConfiguration(doubleArray25);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional17.getConvergenceChecker();
        multiDirectional17.setMaxEvaluations((int) (byte) 100);
        int int30 = multiDirectional17.getEvaluations();
        int int31 = multiDirectional17.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional32 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int33 = multiDirectional32.getMaxEvaluations();
        int int34 = multiDirectional32.getIterations();
        int int35 = multiDirectional32.getMaxEvaluations();
        int int36 = multiDirectional32.getMaxEvaluations();
        multiDirectional32.setMaxIterations((-1));
        int int39 = multiDirectional32.getMaxIterations();
        multiDirectional32.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional44 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = multiDirectional44.getConvergenceChecker();
        multiDirectional32.setConvergenceChecker(realConvergenceChecker45);
        int int47 = multiDirectional32.getMaxIterations();
        int int48 = multiDirectional32.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional51 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int52 = multiDirectional51.getEvaluations();
        int int53 = multiDirectional51.getMaxEvaluations();
        multiDirectional51.setMaxEvaluations((int) (short) 100);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional56 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int57 = multiDirectional56.getMaxEvaluations();
        int int58 = multiDirectional56.getIterations();
        int int59 = multiDirectional56.getMaxEvaluations();
        int int60 = multiDirectional56.getMaxEvaluations();
        multiDirectional56.setMaxIterations((-1));
        int int63 = multiDirectional56.getMaxIterations();
        int int64 = multiDirectional56.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional65 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int66 = multiDirectional65.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker67 = null;
        multiDirectional65.setConvergenceChecker(realConvergenceChecker67);
        multiDirectional65.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional73 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker74 = multiDirectional73.getConvergenceChecker();
        multiDirectional65.setConvergenceChecker(realConvergenceChecker74);
        multiDirectional56.setConvergenceChecker(realConvergenceChecker74);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional79 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional80 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int81 = multiDirectional80.getMaxIterations();
        double[] doubleArray82 = new double[] {};
        multiDirectional80.setStartConfiguration(doubleArray82);
        int int84 = multiDirectional80.getMaxEvaluations();
        int int85 = multiDirectional80.getIterations();
        int int86 = multiDirectional80.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker87 = multiDirectional80.getConvergenceChecker();
        multiDirectional79.setConvergenceChecker(realConvergenceChecker87);
        double[] doubleArray89 = new double[] {};
        double[][] doubleArray90 = new double[][] { doubleArray89 };
        multiDirectional79.setStartConfiguration(doubleArray90);
        multiDirectional56.setStartConfiguration(doubleArray90);
        multiDirectional51.setStartConfiguration(doubleArray90);
        multiDirectional32.setStartConfiguration(doubleArray90);
        multiDirectional17.setStartConfiguration(doubleArray90);
        multiDirectional15.setStartConfiguration(doubleArray90);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker97 = multiDirectional15.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker97);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2147483647 + "'", int36 == 2147483647);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2147483647 + "'", int66 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker74);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2147483647 + "'", int84 == 2147483647);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2147483647 + "'", int86 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker87);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(realConvergenceChecker97);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray8 = new double[] { 1.0d, 2147483647 };
        multiDirectional0.setStartConfiguration(doubleArray8);
        int int10 = multiDirectional0.getMaxIterations();
        int int11 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker12 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker12);
        int int14 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional18 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int19 = multiDirectional18.getMaxEvaluations();
        int int20 = multiDirectional18.getIterations();
        int int21 = multiDirectional18.getMaxEvaluations();
        int int22 = multiDirectional18.getMaxEvaluations();
        multiDirectional18.setMaxIterations((-1));
        int int25 = multiDirectional18.getIterations();
        multiDirectional18.setMaxIterations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker28 = null;
        multiDirectional18.setConvergenceChecker(realConvergenceChecker28);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional30 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int31 = multiDirectional30.getMaxEvaluations();
        multiDirectional30.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker34 = null;
        multiDirectional30.setConvergenceChecker(realConvergenceChecker34);
        double[] doubleArray38 = new double[] { 1.0d, 2147483647 };
        multiDirectional30.setStartConfiguration(doubleArray38);
        multiDirectional18.setStartConfiguration(doubleArray38);
        multiDirectional17.setStartConfiguration(doubleArray38);
        multiDirectional0.setStartConfiguration(doubleArray38);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker43);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10, (double) 0);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker2 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker2);
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        int int7 = multiDirectional0.getMaxEvaluations();
        int int8 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations((int) (short) 1);
        java.lang.Class<?> wildcardClass11 = multiDirectional0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNull(realConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxIterations((int) (byte) 0);
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxIterations((int) '#');
        multiDirectional0.setMaxEvaluations((int) ' ');
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction10 = null;
        org.apache.commons.math.optimization.GoalType goalType11 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = null;
        multiDirectional12.setConvergenceChecker(realConvergenceChecker16);
        double[] doubleArray20 = new double[] { 1.0d, 2147483647 };
        multiDirectional12.setStartConfiguration(doubleArray20);
        int int22 = multiDirectional12.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional23 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int24 = multiDirectional23.getMaxIterations();
        double[] doubleArray25 = new double[] {};
        multiDirectional23.setStartConfiguration(doubleArray25);
        multiDirectional12.setStartConfiguration(doubleArray25);
        multiDirectional12.setMaxEvaluations((int) 'a');
        int int30 = multiDirectional12.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        int int33 = multiDirectional31.getIterations();
        int int34 = multiDirectional31.getMaxEvaluations();
        int int35 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxIterations((-1));
        int int38 = multiDirectional31.getIterations();
        int int39 = multiDirectional31.getEvaluations();
        int int40 = multiDirectional31.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxEvaluations();
        multiDirectional41.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker45 = null;
        multiDirectional41.setConvergenceChecker(realConvergenceChecker45);
        double[] doubleArray49 = new double[] { 1.0d, 2147483647 };
        multiDirectional41.setStartConfiguration(doubleArray49);
        int int51 = multiDirectional41.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional52 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int53 = multiDirectional52.getMaxIterations();
        double[] doubleArray54 = new double[] {};
        multiDirectional52.setStartConfiguration(doubleArray54);
        multiDirectional41.setStartConfiguration(doubleArray54);
        multiDirectional31.setStartConfiguration(doubleArray54);
        multiDirectional12.setStartConfiguration(doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair59 = multiDirectional0.optimize(multivariateRealFunction10, goalType11, doubleArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 52, (double) 52);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        int int5 = multiDirectional3.getIterations();
        int int6 = multiDirectional3.getMaxEvaluations();
        int int7 = multiDirectional3.getMaxEvaluations();
        multiDirectional3.setMaxIterations((-1));
        int int10 = multiDirectional3.getMaxIterations();
        multiDirectional3.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker16 = multiDirectional15.getConvergenceChecker();
        multiDirectional3.setConvergenceChecker(realConvergenceChecker16);
        int int18 = multiDirectional3.getMaxIterations();
        int int19 = multiDirectional3.getEvaluations();
        int int20 = multiDirectional3.getMaxEvaluations();
        int int21 = multiDirectional3.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker22 = multiDirectional3.getConvergenceChecker();
        multiDirectional2.setConvergenceChecker(realConvergenceChecker22);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker22);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional0.getConvergenceChecker();
        int int6 = multiDirectional0.getIterations();
        int int7 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) (byte) -1);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker10 = multiDirectional0.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker10);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional3 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int4 = multiDirectional3.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxEvaluations();
        int int7 = multiDirectional5.getIterations();
        int int8 = multiDirectional5.getMaxEvaluations();
        int int9 = multiDirectional5.getMaxEvaluations();
        multiDirectional5.setMaxIterations((-1));
        int int12 = multiDirectional5.getMaxIterations();
        multiDirectional5.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional17 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker18 = multiDirectional17.getConvergenceChecker();
        multiDirectional5.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional3.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker18);
        multiDirectional0.setMaxIterations((int) (byte) 100);
        int int24 = multiDirectional0.getEvaluations();
        int int25 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (short) 100, (double) ' ');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional28.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker29);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker31 = multiDirectional0.getConvergenceChecker();
        int int32 = multiDirectional0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertNotNull(realConvergenceChecker31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional2.setMaxIterations((int) '#');
        multiDirectional2.setMaxEvaluations((int) (byte) 10);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) 10.0f);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker3 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertNotNull(realConvergenceChecker3);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        int int2 = multiDirectional0.getIterations();
        int int3 = multiDirectional0.getMaxEvaluations();
        int int4 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional5 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int6 = multiDirectional5.getMaxIterations();
        double[] doubleArray7 = new double[] {};
        multiDirectional5.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional5.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        int int12 = multiDirectional10.getIterations();
        int int13 = multiDirectional10.getMaxEvaluations();
        int int14 = multiDirectional10.getMaxEvaluations();
        multiDirectional10.setMaxIterations((-1));
        int int17 = multiDirectional10.getIterations();
        multiDirectional10.setMaxIterations((int) '#');
        multiDirectional10.setMaxEvaluations(0);
        multiDirectional10.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker27 = multiDirectional26.getConvergenceChecker();
        multiDirectional10.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional5.setConvergenceChecker(realConvergenceChecker27);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker27);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        int int33 = multiDirectional31.getIterations();
        int int34 = multiDirectional31.getMaxEvaluations();
        int int35 = multiDirectional31.getMaxEvaluations();
        multiDirectional31.setMaxIterations((-1));
        int int38 = multiDirectional31.getIterations();
        multiDirectional31.setMaxIterations((int) '#');
        int int41 = multiDirectional31.getIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker42 = multiDirectional31.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker43 = multiDirectional31.getConvergenceChecker();
        multiDirectional0.setConvergenceChecker(realConvergenceChecker43);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker42);
        org.junit.Assert.assertNotNull(realConvergenceChecker43);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) 0.0f);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        int int31 = multiDirectional29.getIterations();
        int int32 = multiDirectional29.getMaxEvaluations();
        int int33 = multiDirectional29.getMaxEvaluations();
        multiDirectional29.setMaxIterations((-1));
        int int36 = multiDirectional29.getIterations();
        multiDirectional29.setMaxIterations((int) '#');
        multiDirectional29.setMaxEvaluations(0);
        multiDirectional29.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional45 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker46 = multiDirectional45.getConvergenceChecker();
        multiDirectional29.setConvergenceChecker(realConvergenceChecker46);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker46);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional49 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int50 = multiDirectional49.getMaxEvaluations();
        multiDirectional49.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker53 = null;
        multiDirectional49.setConvergenceChecker(realConvergenceChecker53);
        double[] doubleArray57 = new double[] { 1.0d, 2147483647 };
        multiDirectional49.setStartConfiguration(doubleArray57);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker59 = multiDirectional49.getConvergenceChecker();
        multiDirectional49.setMaxEvaluations((int) (byte) 100);
        multiDirectional49.setMaxEvaluations((int) '#');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker64 = multiDirectional49.getConvergenceChecker();
        int int65 = multiDirectional49.getEvaluations();
        int int66 = multiDirectional49.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional67 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int68 = multiDirectional67.getMaxEvaluations();
        int int69 = multiDirectional67.getIterations();
        int int70 = multiDirectional67.getMaxEvaluations();
        int int71 = multiDirectional67.getMaxEvaluations();
        multiDirectional67.setMaxIterations((-1));
        int int74 = multiDirectional67.getIterations();
        int int75 = multiDirectional67.getEvaluations();
        int int76 = multiDirectional67.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional77 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int78 = multiDirectional77.getMaxEvaluations();
        multiDirectional77.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker81 = null;
        multiDirectional77.setConvergenceChecker(realConvergenceChecker81);
        double[] doubleArray85 = new double[] { 1.0d, 2147483647 };
        multiDirectional77.setStartConfiguration(doubleArray85);
        int int87 = multiDirectional77.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional88 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int89 = multiDirectional88.getMaxIterations();
        double[] doubleArray90 = new double[] {};
        multiDirectional88.setStartConfiguration(doubleArray90);
        multiDirectional77.setStartConfiguration(doubleArray90);
        multiDirectional67.setStartConfiguration(doubleArray90);
        multiDirectional49.setStartConfiguration(doubleArray90);
        multiDirectional0.setStartConfiguration(doubleArray90);
        int int96 = multiDirectional0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker59);
        org.junit.Assert.assertNull(realConvergenceChecker64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2147483647 + "'", int89 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2147483647 + "'", int96 == 2147483647);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10, (double) (short) -1);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        multiDirectional2.setMaxEvaluations((int) 'a');
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker5 = multiDirectional2.getConvergenceChecker();
        org.junit.Assert.assertNotNull(realConvergenceChecker5);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker6 = multiDirectional0.getConvergenceChecker();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker7 = multiDirectional0.getConvergenceChecker();
        multiDirectional0.setMaxIterations((int) ' ');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker6);
        org.junit.Assert.assertNotNull(realConvergenceChecker7);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        int int9 = multiDirectional0.getIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional10 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int11 = multiDirectional10.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional12 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int13 = multiDirectional12.getMaxEvaluations();
        int int14 = multiDirectional12.getIterations();
        int int15 = multiDirectional12.getMaxEvaluations();
        int int16 = multiDirectional12.getMaxEvaluations();
        multiDirectional12.setMaxIterations((-1));
        int int19 = multiDirectional12.getMaxIterations();
        multiDirectional12.setMaxEvaluations((int) (short) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional24 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker25 = multiDirectional24.getConvergenceChecker();
        multiDirectional12.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional10.setConvergenceChecker(realConvergenceChecker25);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker25);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker29 = multiDirectional0.getConvergenceChecker();
        int int30 = multiDirectional0.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional31 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int32 = multiDirectional31.getMaxEvaluations();
        int int33 = multiDirectional31.getIterations();
        int int34 = multiDirectional31.getMaxEvaluations();
        int int35 = multiDirectional31.getMaxIterations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional36 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int37 = multiDirectional36.getMaxIterations();
        double[] doubleArray38 = new double[] {};
        multiDirectional36.setStartConfiguration(doubleArray38);
        int int40 = multiDirectional36.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional41 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int42 = multiDirectional41.getMaxEvaluations();
        int int43 = multiDirectional41.getIterations();
        int int44 = multiDirectional41.getMaxEvaluations();
        int int45 = multiDirectional41.getMaxEvaluations();
        multiDirectional41.setMaxIterations((-1));
        int int48 = multiDirectional41.getIterations();
        multiDirectional41.setMaxIterations((int) '#');
        multiDirectional41.setMaxEvaluations(0);
        multiDirectional41.setMaxIterations((int) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional57 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1.0f), (double) (short) 100);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker58 = multiDirectional57.getConvergenceChecker();
        multiDirectional41.setConvergenceChecker(realConvergenceChecker58);
        multiDirectional36.setConvergenceChecker(realConvergenceChecker58);
        multiDirectional31.setConvergenceChecker(realConvergenceChecker58);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker58);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(realConvergenceChecker25);
        org.junit.Assert.assertNotNull(realConvergenceChecker29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker58);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxIterations();
        double[] doubleArray2 = new double[] {};
        multiDirectional0.setStartConfiguration(doubleArray2);
        int int4 = multiDirectional0.getMaxEvaluations();
        int int5 = multiDirectional0.getMaxIterations();
        int int6 = multiDirectional0.getMaxIterations();
        multiDirectional0.setMaxIterations(32);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker9 = multiDirectional0.getConvergenceChecker();
        int int10 = multiDirectional0.getIterations();
        multiDirectional0.setMaxIterations((int) (short) 100);
        org.apache.commons.math.analysis.MultivariateRealFunction multivariateRealFunction13 = null;
        org.apache.commons.math.optimization.GoalType goalType14 = null;
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional15 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int16 = multiDirectional15.getMaxEvaluations();
        int int17 = multiDirectional15.getIterations();
        int int18 = multiDirectional15.getMaxEvaluations();
        int int19 = multiDirectional15.getMaxEvaluations();
        multiDirectional15.setMaxIterations((-1));
        int int22 = multiDirectional15.getIterations();
        int int23 = multiDirectional15.getMaxIterations();
        int int24 = multiDirectional15.getMaxEvaluations();
        int int25 = multiDirectional15.getMaxEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional28 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional29 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int30 = multiDirectional29.getMaxEvaluations();
        multiDirectional29.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker33 = null;
        multiDirectional29.setConvergenceChecker(realConvergenceChecker33);
        double[] doubleArray37 = new double[] { 1.0d, 2147483647 };
        multiDirectional29.setStartConfiguration(doubleArray37);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional29.getConvergenceChecker();
        multiDirectional29.setMaxEvaluations((int) (byte) 100);
        int int42 = multiDirectional29.getEvaluations();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional43 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int44 = multiDirectional43.getMaxEvaluations();
        multiDirectional43.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker47 = null;
        multiDirectional43.setConvergenceChecker(realConvergenceChecker47);
        double[] doubleArray51 = new double[] { 1.0d, 2147483647 };
        multiDirectional43.setStartConfiguration(doubleArray51);
        multiDirectional29.setStartConfiguration(doubleArray51);
        multiDirectional28.setStartConfiguration(doubleArray51);
        multiDirectional15.setStartConfiguration(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.optimization.RealPointValuePair realPointValuePair56 = multiDirectional0.optimize(multivariateRealFunction13, goalType14, doubleArray51);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 2.147483647E9]");
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional0 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int1 = multiDirectional0.getMaxEvaluations();
        multiDirectional0.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker4 = null;
        multiDirectional0.setConvergenceChecker(realConvergenceChecker4);
        double[] doubleArray7 = new double[] { 100.0d };
        multiDirectional0.setStartConfiguration(doubleArray7);
        multiDirectional0.setMaxIterations(1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional13 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0, (double) 1L);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional14 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int15 = multiDirectional14.getMaxEvaluations();
        int int16 = multiDirectional14.getIterations();
        int int17 = multiDirectional14.getMaxEvaluations();
        int int18 = multiDirectional14.getMaxEvaluations();
        multiDirectional14.setMaxIterations((-1));
        int int21 = multiDirectional14.getIterations();
        int int22 = multiDirectional14.getEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker23 = multiDirectional14.getConvergenceChecker();
        multiDirectional13.setConvergenceChecker(realConvergenceChecker23);
        multiDirectional0.setConvergenceChecker(realConvergenceChecker23);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional26 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int27 = multiDirectional26.getMaxEvaluations();
        int int28 = multiDirectional26.getIterations();
        int int29 = multiDirectional26.getMaxEvaluations();
        int int30 = multiDirectional26.getMaxEvaluations();
        multiDirectional26.setMaxIterations(1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional33 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int34 = multiDirectional33.getMaxEvaluations();
        multiDirectional33.setMaxIterations((int) (byte) 0);
        int int37 = multiDirectional33.getMaxIterations();
        int int38 = multiDirectional33.getMaxIterations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker39 = multiDirectional33.getConvergenceChecker();
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional42 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 10L, (double) 0);
        int int43 = multiDirectional42.getEvaluations();
        int int44 = multiDirectional42.getMaxEvaluations();
        multiDirectional42.setMaxEvaluations((int) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional47 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int48 = multiDirectional47.getMaxEvaluations();
        multiDirectional47.setMaxEvaluations(0);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker51 = null;
        multiDirectional47.setConvergenceChecker(realConvergenceChecker51);
        double[] doubleArray55 = new double[] { 1.0d, 2147483647 };
        multiDirectional47.setStartConfiguration(doubleArray55);
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker57 = multiDirectional47.getConvergenceChecker();
        multiDirectional47.setMaxEvaluations((int) (byte) 100);
        multiDirectional47.setMaxIterations(35);
        double[] doubleArray63 = new double[] { 100.0d };
        multiDirectional47.setStartConfiguration(doubleArray63);
        multiDirectional42.setStartConfiguration(doubleArray63);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional68 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 0.0f, (double) (byte) 0);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional71 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 1.0f, (double) '4');
        multiDirectional71.setMaxIterations(32);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional76 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional79 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) (-1L), (double) (byte) 1);
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional80 = new org.apache.commons.math.optimization.direct.MultiDirectional();
        int int81 = multiDirectional80.getMaxIterations();
        double[] doubleArray82 = new double[] {};
        multiDirectional80.setStartConfiguration(doubleArray82);
        int int84 = multiDirectional80.getMaxEvaluations();
        int int85 = multiDirectional80.getIterations();
        int int86 = multiDirectional80.getMaxEvaluations();
        org.apache.commons.math.optimization.RealConvergenceChecker realConvergenceChecker87 = multiDirectional80.getConvergenceChecker();
        multiDirectional79.setConvergenceChecker(realConvergenceChecker87);
        double[] doubleArray89 = new double[] {};
        double[][] doubleArray90 = new double[][] { doubleArray89 };
        multiDirectional79.setStartConfiguration(doubleArray90);
        multiDirectional76.setStartConfiguration(doubleArray90);
        multiDirectional71.setStartConfiguration(doubleArray90);
        multiDirectional68.setStartConfiguration(doubleArray90);
        multiDirectional42.setStartConfiguration(doubleArray90);
        multiDirectional33.setStartConfiguration(doubleArray90);
        multiDirectional26.setStartConfiguration(doubleArray90);
        multiDirectional0.setStartConfiguration(doubleArray90);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(realConvergenceChecker39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 2.147483647E9]");
        org.junit.Assert.assertNull(realConvergenceChecker57);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2147483647 + "'", int84 == 2147483647);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2147483647 + "'", int86 == 2147483647);
        org.junit.Assert.assertNotNull(realConvergenceChecker87);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) '#', (double) (short) 10);
        int int3 = multiDirectional2.getMaxEvaluations();
        int int4 = multiDirectional2.getEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 97, 1.0d);
        int int3 = multiDirectional2.getIterations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.apache.commons.math.optimization.direct.MultiDirectional multiDirectional2 = new org.apache.commons.math.optimization.direct.MultiDirectional((double) 32, (double) 32);
        int int3 = multiDirectional2.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = range4.equals((java.lang.Object) (byte) 100);
        double double8 = range4.getCentralValue();
        java.lang.String str9 = range4.toString();
        boolean boolean11 = range4.contains((-6400.0d));
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range4, 16.0d, 50.0d);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range4, 121.0d, false);
        java.lang.String str18 = range4.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 50.5d + "'", double8 == 50.5d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[1.0,100.0]" + "'", str9, "Range[1.0,100.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[1.0,100.0]" + "'", str18, "Range[1.0,100.0]");
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range35, (double) 1L);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range8, range35);
        double double40 = range38.constrain(50.5d);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range38, 26.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.5d + "'", double40 == 50.5d);
        org.junit.Assert.assertNotNull(range42);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getCentralValue();
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range14, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range17, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) 10);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range10, range24);
        boolean boolean28 = range10.intersects(150.0d, (double) 'a');
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range10, (double) 100, 19.0d);
        boolean boolean32 = borderArrangement0.equals((java.lang.Object) range10);
        borderArrangement0.clear();
        boolean boolean35 = borderArrangement0.equals((java.lang.Object) 67.5d);
        borderArrangement0.clear();
        org.jfree.data.Range range39 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range39, (double) 1.0f, false);
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range39, (double) 100L, true);
        double double46 = range39.getLowerBound();
        boolean boolean47 = borderArrangement0.equals((java.lang.Object) double46);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5.0d + "'", double15 == 5.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1.0f, false);
        boolean boolean7 = range5.contains((double) 0L);
        double double8 = range5.getLowerBound();
        double double9 = range5.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 11.0d + "'", double8 == 11.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 32.0d + "'", double9 == 32.0d);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, 20.0d);
        org.junit.Assert.assertNotNull(range2);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 5346.0d);
        double double4 = range2.constrain((double) 0L);
        double double6 = range2.constrain(142.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 142.0d + "'", double6 == 142.0d);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-670.0d), 264.5d);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1.0d, (double) (short) 10);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 10.0d, (double) (short) 10);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range5, (double) 10L, false);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, 150.5d);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range8, 154.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        double double9 = range7.getLowerBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range12);
        double double20 = range7.constrain((double) (byte) 1);
        double double21 = range7.getCentralValue();
        double double22 = range7.getCentralValue();
        boolean boolean23 = borderArrangement0.equals((java.lang.Object) double22);
        borderArrangement0.clear();
        org.jfree.chart.block.Block block25 = null;
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj29 = new java.lang.Object();
        boolean boolean30 = range28.equals(obj29);
        boolean boolean33 = range28.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double38 = range36.constrain(10.0d);
        org.jfree.data.Range range39 = org.jfree.data.Range.combine(range28, range36);
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range42.getLength();
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range42, (double) (short) 10);
        double double46 = range45.getLowerBound();
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) 100L);
        org.jfree.data.Range range51 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range54 = org.jfree.data.Range.expand(range51, 100.0d, (double) 100);
        boolean boolean55 = range48.equals((java.lang.Object) range51);
        org.jfree.data.Range range57 = org.jfree.data.Range.shift(range48, (double) 100);
        org.jfree.data.Range range58 = org.jfree.data.Range.combine(range39, range57);
        org.jfree.data.Range range61 = org.jfree.data.Range.expand(range58, (double) ' ', 1.0d);
        java.lang.String str62 = range58.toString();
        org.jfree.data.Range range64 = org.jfree.data.Range.expandToInclude(range58, (double) 1L);
        double double65 = range58.getLowerBound();
        double double66 = range58.getCentralValue();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block25, (java.lang.Object) range58);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Range[0.0,200.0]" + "'", str62, "Range[0.0,200.0]");
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 100.0d + "'", double66 == 100.0d);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range6, 10.0d, false);
        double double29 = range6.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range6, 55.0d, 52.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, 50.0d);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 630.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, 45.5d);
        boolean boolean14 = range9.intersects(54.0d, 10100.0d);
        double double15 = range9.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 635.0d + "'", double15 == 635.0d);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range31.getLength();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) (short) 10);
        double double35 = range34.getLowerBound();
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range34, (double) 100L);
        boolean boolean40 = range37.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getLength();
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range43, (double) (short) 10);
        double double47 = range46.getLowerBound();
        boolean boolean49 = range46.contains((double) (byte) 0);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range46, (double) 1.0f, false);
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range37, range52);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range37, (double) 0.0f, false);
        java.lang.String str57 = range37.toString();
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range37, 530.0d, false);
        org.jfree.data.Range range62 = org.jfree.data.Range.shift(range60, (double) 10L);
        boolean boolean63 = borderArrangement0.equals((java.lang.Object) range60);
        borderArrangement0.clear();
        org.jfree.chart.block.Block block65 = null;
        org.jfree.data.Range range68 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double69 = range68.getLength();
        org.jfree.data.Range range71 = org.jfree.data.Range.expandToInclude(range68, (double) (short) 10);
        double double72 = range71.getLowerBound();
        boolean boolean74 = range71.contains((double) (byte) 0);
        org.jfree.data.Range range77 = org.jfree.data.Range.shift(range71, (double) 1.0f, false);
        org.jfree.data.Range range80 = org.jfree.data.Range.expand(range77, (double) (short) 1, (double) (-1L));
        double double81 = range80.getLength();
        org.jfree.data.Range range83 = org.jfree.data.Range.expandToInclude(range80, (-9899.0d));
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block65, (java.lang.Object) range83);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Range[0.0,100.0]" + "'", str57, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 10.0d + "'", double69 == 10.0d);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 10.0d + "'", double81 == 10.0d);
        org.junit.Assert.assertNotNull(range83);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        java.lang.String str8 = range2.toString();
        double double9 = range2.getCentralValue();
        double double10 = range2.getUpperBound();
        double double12 = range2.constrain(38.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[1.0,100.0]" + "'", str8, "Range[1.0,100.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.5d + "'", double9 == 50.5d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 38.0d + "'", double12 == 38.0d);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getUpperBound();
        boolean boolean8 = range4.intersects(50.0d, 5.0d);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        org.jfree.data.Range range15 = org.jfree.data.Range.combine(range4, range11);
        boolean boolean17 = range4.contains((-1.0d));
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range4, 150.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range19, 15.0d, false);
        org.jfree.data.Range range25 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double26 = range25.getLength();
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range25, (double) (short) 10);
        double double29 = range28.getLowerBound();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) 100L);
        boolean boolean34 = range31.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double38 = range37.getLength();
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range37, (double) (short) 10);
        double double41 = range40.getLowerBound();
        boolean boolean43 = range40.contains((double) (byte) 0);
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range40, (double) 1.0f, false);
        org.jfree.data.Range range47 = org.jfree.data.Range.combine(range31, range46);
        double double48 = range47.getLength();
        org.jfree.data.Range range51 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double52 = range51.getLength();
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range51, (double) (short) 10);
        double double55 = range54.getLowerBound();
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range54, (double) 100L);
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range57, (double) 100L, true);
        boolean boolean61 = range47.equals((java.lang.Object) range57);
        boolean boolean63 = range57.contains((double) 0.0f);
        boolean boolean64 = range22.equals((java.lang.Object) 0.0f);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 99.0d + "'", double5 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        double double8 = range2.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1.0f, 10000.0d);
        boolean boolean14 = range2.equals((java.lang.Object) 10000.0d);
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double18 = range17.getLength();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range17, (double) (short) 10);
        double double21 = range20.getLowerBound();
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range20, (double) 100L);
        org.jfree.data.Range range26 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range26, 100.0d, (double) 100);
        boolean boolean30 = range23.equals((java.lang.Object) range26);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range23, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range36 = org.jfree.data.Range.expand(range23, (-1.0d), 100.0d);
        java.lang.String str37 = range36.toString();
        boolean boolean40 = range36.intersects(1011.0d, 50.5d);
        boolean boolean42 = range36.contains(0.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range2, range36);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Range[100.0,10100.0]" + "'", str37, "Range[100.0,10100.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(range43);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range2, (double) (short) -1);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getLength();
        double double18 = range15.constrain(0.0d);
        java.lang.String str19 = range15.toString();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range15, (double) (short) 1, true);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) '4');
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range2, range24);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range2, 200.0d);
        boolean boolean29 = range27.contains((double) 100);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range27, (-2005.0d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Range[0.0,10.0]" + "'", str19, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.jfree.data.Range range2 = new org.jfree.data.Range(5048.5d, 99.0d);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        boolean boolean5 = range2.contains((double) (-1L));
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double9 = range8.getLength();
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range8, (double) (short) 10);
        double double13 = range8.constrain((double) (-1.0f));
        double double14 = range8.getUpperBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range8, (double) 1.0f);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range19, (double) (-1));
        double double22 = range21.getUpperBound();
        double double23 = range21.getCentralValue();
        double double24 = range21.getLowerBound();
        boolean boolean26 = range21.contains((-989.0d));
        boolean boolean27 = range8.equals((java.lang.Object) (-989.0d));
        boolean boolean28 = range2.equals((java.lang.Object) boolean27);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 99.0d + "'", double22 == 99.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 54.0d + "'", double23 == 54.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 9.0d + "'", double24 == 9.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        double double10 = range5.constrain(5248.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1.0d, (double) (byte) -1);
        double double3 = range2.getCentralValue();
        boolean boolean5 = range2.contains(0.0d);
        double double6 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) '#', 99.0d);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-24106.5d), (-3011.0d));
        org.junit.Assert.assertNotNull(range5);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-6400.0d));
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 100.0d, false);
        java.lang.String str7 = range2.toString();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj11 = new java.lang.Object();
        boolean boolean12 = range10.equals(obj11);
        boolean boolean15 = range10.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double20 = range18.constrain(10.0d);
        org.jfree.data.Range range21 = org.jfree.data.Range.combine(range10, range18);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range10, (double) (short) 100, false);
        boolean boolean27 = range10.intersects((double) '#', (double) 0.0f);
        double double28 = range10.getUpperBound();
        org.jfree.data.Range range31 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, 100.0d, (double) 100);
        double double36 = range34.constrain((double) (short) 1);
        boolean boolean38 = range34.contains((double) '4');
        double double39 = range34.getLowerBound();
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range34, 100.0d);
        boolean boolean43 = range41.contains((double) (byte) -1);
        boolean boolean44 = range10.equals((java.lang.Object) boolean43);
        boolean boolean47 = range10.intersects(10.0d, 54.0d);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range10, 0.0d);
        org.jfree.data.Range range50 = org.jfree.data.Range.combine(range2, range10);
        double double51 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-6500.0d) + "'", double3 == (-6500.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Range[100.0,-6400.0]" + "'", str7, "Range[100.0,-6400.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-9899.0d) + "'", double39 == (-9899.0d));
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-3150.0d) + "'", double51 == (-3150.0d));
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        boolean boolean13 = range7.intersects(0.0d, (double) (byte) 0);
        boolean boolean14 = borderArrangement0.equals((java.lang.Object) (byte) 0);
        org.jfree.chart.block.BorderArrangement borderArrangement15 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement15.clear();
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean20 = borderArrangement15.equals((java.lang.Object) range19);
        borderArrangement15.clear();
        boolean boolean23 = borderArrangement15.equals((java.lang.Object) (short) 0);
        boolean boolean25 = borderArrangement15.equals((java.lang.Object) '#');
        org.jfree.data.Range range28 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range28, 100.0d, (double) 100);
        double double33 = range31.constrain((double) (short) 1);
        boolean boolean34 = borderArrangement15.equals((java.lang.Object) (short) 1);
        boolean boolean35 = borderArrangement0.equals((java.lang.Object) boolean34);
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.jfree.data.Range range2 = new org.jfree.data.Range(43.0d, (-445.0d));
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        double double26 = range6.getLength();
        double double28 = range6.constrain(15.0d);
        boolean boolean30 = range6.contains((double) (byte) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range6, 121.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 530.0d + "'", double26 == 530.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 15.0d + "'", double28 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(range32);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, 100.0d, (double) 100);
        boolean boolean25 = range19.intersects((double) 'a', (-9899.0d));
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range19, (double) (-1.0f), true);
        boolean boolean29 = borderArrangement0.equals((java.lang.Object) true);
        org.jfree.chart.block.BorderArrangement borderArrangement30 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement30.clear();
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean35 = borderArrangement30.equals((java.lang.Object) range34);
        boolean boolean36 = borderArrangement0.equals((java.lang.Object) boolean35);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, 50.0d);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 630.0d);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        boolean boolean15 = range12.contains((double) (byte) 0);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range12, (double) 100.0f, (double) 10.0f);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range18, 11.0d);
        java.lang.String str21 = range20.toString();
        double double22 = range20.getUpperBound();
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range2, range20);
        double double24 = range20.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Range[-989.0,121.0]" + "'", str21, "Range[-989.0,121.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 121.0d + "'", double22 == 121.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1110.0d + "'", double24 == 1110.0d);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        double double37 = range33.getUpperBound();
        org.jfree.data.Range range40 = new org.jfree.data.Range((double) (byte) 100, (double) '#');
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range33, range40);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range41, (-100.0d), 92.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 11.0d + "'", double37 == 11.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range44);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean9 = range2.equals((java.lang.Object) 10);
        boolean boolean11 = range2.contains((double) 1.0f);
        double double12 = range2.getUpperBound();
        double double13 = range2.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        double double28 = range27.getLowerBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) 100L);
        boolean boolean31 = range16.equals((java.lang.Object) 100L);
        boolean boolean33 = range16.contains(35.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range2, range16);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, 10000.0d, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range34, 1011.0d, true);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range34, 2010.0d);
        java.lang.Class<?> wildcardClass43 = range34.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        double double8 = range2.getLength();
        double double9 = range2.getLength();
        double double10 = range2.getLowerBound();
        double double11 = range2.getLowerBound();
        double double12 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5.0d + "'", double12 == 5.0d);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getLength();
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        double double16 = range15.getLowerBound();
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range15, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, 100.0d, (double) 100);
        boolean boolean25 = range18.equals((java.lang.Object) range21);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range18, (double) 1.0f, (double) 'a');
        boolean boolean29 = range9.equals((java.lang.Object) 1.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement30 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement30.clear();
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean35 = borderArrangement30.equals((java.lang.Object) range34);
        borderArrangement30.clear();
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj40 = new java.lang.Object();
        boolean boolean41 = range39.equals(obj40);
        boolean boolean42 = borderArrangement30.equals(obj40);
        boolean boolean43 = range9.equals((java.lang.Object) borderArrangement30);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range9, (double) (short) 0, 51.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(range46);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain((double) '#');
        double double14 = range5.constrain((double) (short) -1);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range5, (double) (-1));
        java.lang.Class<?> wildcardClass17 = range5.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        double double26 = range24.getLowerBound();
        boolean boolean29 = range24.intersects((-989.0d), (double) 0L);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range24, 131.0d, 0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1340.0d, (double) (short) 0);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        java.lang.String str4 = range2.toString();
        double double5 = range2.getCentralValue();
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 1.0d);
        double double8 = range2.getLowerBound();
        double double9 = range2.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Range[100.0,1.0]" + "'", str4, "Range[100.0,1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 50.5d + "'", double5 == 50.5d);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-99.0d) + "'", double9 == (-99.0d));
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.BlockContainer blockContainer19 = null;
        java.awt.Graphics2D graphics2D20 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D22 = borderArrangement0.arrange(blockContainer19, graphics2D20, rectangleConstraint21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str8 = range2.toString();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, (double) 100L);
        double double11 = range10.getLength();
        boolean boolean13 = range10.contains(1110.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[0.0,10.0]" + "'", str8, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, 5248.0d, 1551.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        double double9 = range7.getLowerBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range12);
        double double20 = range7.constrain((double) (byte) 1);
        double double21 = range7.getCentralValue();
        double double22 = range7.getCentralValue();
        boolean boolean23 = borderArrangement0.equals((java.lang.Object) double22);
        org.jfree.chart.block.Block block24 = null;
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement28 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean30 = borderArrangement28.equals((java.lang.Object) (-1L));
        borderArrangement28.clear();
        boolean boolean32 = range27.equals((java.lang.Object) borderArrangement28);
        org.jfree.chart.block.Block block33 = null;
        java.lang.Object obj34 = null;
        borderArrangement28.add(block33, obj34);
        org.jfree.data.Range range38 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range38, (double) (-1));
        double double41 = range40.getUpperBound();
        boolean boolean44 = range40.intersects(50.0d, 5.0d);
        org.jfree.data.Range range47 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double48 = range47.getLength();
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range47, (double) (short) 10);
        org.jfree.data.Range range51 = org.jfree.data.Range.combine(range40, range47);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range40, (double) (byte) 10);
        boolean boolean54 = borderArrangement28.equals((java.lang.Object) range40);
        org.jfree.data.Range range57 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double58 = range57.getUpperBound();
        org.jfree.data.Range range61 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double62 = range61.getCentralValue();
        org.jfree.data.Range range64 = org.jfree.data.Range.shift(range61, (double) 1);
        org.jfree.data.Range range67 = org.jfree.data.Range.expand(range64, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range68 = org.jfree.data.Range.combine(range57, range64);
        org.jfree.data.Range range70 = org.jfree.data.Range.expandToInclude(range64, (double) '4');
        boolean boolean71 = borderArrangement28.equals((java.lang.Object) '4');
        org.jfree.data.Range range74 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double75 = range74.getLength();
        org.jfree.data.Range range77 = org.jfree.data.Range.expandToInclude(range74, (double) (short) 10);
        double double78 = range74.getUpperBound();
        org.jfree.data.Range range80 = org.jfree.data.Range.expandToInclude(range74, 0.0d);
        double double81 = range80.getCentralValue();
        double double82 = range80.getLength();
        boolean boolean83 = borderArrangement28.equals((java.lang.Object) range80);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block24, (java.lang.Object) boolean83);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Boolean cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 99.0d + "'", double41 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 5.0d + "'", double62 == 5.0d);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 10.0d + "'", double75 == 10.0d);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 10.0d + "'", double78 == 10.0d);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 5.0d + "'", double81 == 5.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 10.0d + "'", double82 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean11 = range6.contains((double) 0.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        boolean boolean25 = range22.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        boolean boolean34 = range31.contains((double) (byte) 0);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range31, (double) 1.0f, false);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range22, range37);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range22, (double) 0.0f, false);
        java.lang.String str42 = range22.toString();
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range22, 530.0d, false);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range45, (double) 10L);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range6, range45);
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range48, 165.0d, 0.0d);
        boolean boolean53 = range48.contains(1340.0d);
        boolean boolean55 = range48.contains(19.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Range[0.0,100.0]" + "'", str42, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1000.0d), 5097.5d);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (byte) 0, (double) (-1L));
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double9 = range8.getCentralValue();
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range8, (double) 0L, (double) '4');
        boolean boolean15 = range12.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean17 = range12.contains((double) 0.0f);
        double double19 = range12.constrain((double) (byte) 100);
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range12, (double) (-1.0f));
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range2, range21);
        boolean boolean25 = range2.intersects(5018543.0d, 142.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5.0d + "'", double9 == 5.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        double double8 = range2.getLength();
        java.lang.String str9 = range2.toString();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getLength();
        double double15 = range12.constrain(0.0d);
        java.lang.String str16 = range12.toString();
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, (double) (short) 1, true);
        boolean boolean21 = range19.contains((double) 0L);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range2, range19);
        java.lang.String str23 = range2.toString();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range2, (double) 'a', false);
        boolean boolean28 = range26.contains(335.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[0.0,10.0]" + "'", str9, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Range[0.0,10.0]" + "'", str16, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Range[0.0,10.0]" + "'", str23, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (byte) 0, (double) (-1L));
        double double23 = range19.getUpperBound();
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        boolean boolean35 = range32.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double39 = range38.getLength();
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range38, (double) (short) 10);
        double double42 = range41.getLowerBound();
        boolean boolean44 = range41.contains((double) (byte) 0);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range41, (double) 1.0f, false);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range32, range47);
        double double49 = range48.getLength();
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double54 = range52.constrain(10.0d);
        boolean boolean57 = range52.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str58 = range52.toString();
        boolean boolean59 = range48.equals((java.lang.Object) range52);
        boolean boolean60 = range19.equals((java.lang.Object) range52);
        boolean boolean61 = range13.equals((java.lang.Object) range52);
        boolean boolean62 = borderArrangement3.equals((java.lang.Object) range13);
        borderArrangement3.clear();
        borderArrangement3.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Range[0.0,10.0]" + "'", str58, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getLength();
        double double12 = range9.constrain(0.0d);
        java.lang.String str13 = range9.toString();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, (double) (short) 1, true);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range9, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range19, (double) (byte) 1, (double) (-1));
        boolean boolean26 = borderArrangement0.equals((java.lang.Object) range25);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double30 = range29.getUpperBound();
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range33.getCentralValue();
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range33, (double) 1);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range29, range36);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range25, range29);
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        double double47 = range44.getLowerBound();
        boolean boolean50 = range44.intersects((double) (byte) 0, 0.0d);
        double double52 = range44.constrain((double) (byte) -1);
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range44, 11.0d);
        double double55 = range54.getUpperBound();
        org.jfree.data.Range range57 = org.jfree.data.Range.shift(range54, 31.0d);
        org.jfree.data.Range range60 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range62 = org.jfree.data.Range.shift(range60, (double) (-1));
        double double63 = range62.getUpperBound();
        boolean boolean66 = range62.intersects(50.0d, 5.0d);
        org.jfree.data.Range range69 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double70 = range69.getLength();
        org.jfree.data.Range range72 = org.jfree.data.Range.expandToInclude(range69, (double) (short) 10);
        org.jfree.data.Range range73 = org.jfree.data.Range.combine(range62, range69);
        org.jfree.data.Range range75 = org.jfree.data.Range.shift(range62, (double) (byte) 10);
        double double77 = range75.constrain(11.0d);
        org.jfree.data.Range range78 = org.jfree.data.Range.combine(range54, range75);
        boolean boolean79 = range29.equals((java.lang.Object) range78);
        double double80 = range29.getLowerBound();
        double double81 = range29.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,10.0]" + "'", str13, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5.0d + "'", double34 == 5.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 11.0d + "'", double55 == 11.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 99.0d + "'", double63 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 19.0d + "'", double77 == 19.0d);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 100.0d + "'", double80 == 100.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 100.0d + "'", double81 == 100.0d);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain((double) '#');
        double double14 = range5.constrain((double) (short) -1);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range5, (double) (-1));
        boolean boolean18 = range5.contains(26.5d);
        boolean boolean21 = range5.intersects(300.0d, (-3150.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double8 = range2.getUpperBound();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, 108.0d);
        boolean boolean13 = range10.intersects(50.0d, 0.0d);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getCentralValue();
        double double18 = range16.getLowerBound();
        double double19 = range16.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range16, 142.0d, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range16, (double) (byte) 0);
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement28 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean30 = borderArrangement28.equals((java.lang.Object) (-1L));
        borderArrangement28.clear();
        boolean boolean32 = range27.equals((java.lang.Object) borderArrangement28);
        org.jfree.chart.block.Block block33 = null;
        java.lang.Object obj34 = null;
        borderArrangement28.add(block33, obj34);
        org.jfree.data.Range range38 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range38, (double) (-1));
        double double41 = range40.getUpperBound();
        boolean boolean44 = range40.intersects(50.0d, 5.0d);
        org.jfree.data.Range range47 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double48 = range47.getLength();
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range47, (double) (short) 10);
        org.jfree.data.Range range51 = org.jfree.data.Range.combine(range40, range47);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range40, (double) (byte) 10);
        boolean boolean54 = borderArrangement28.equals((java.lang.Object) range40);
        org.jfree.data.Range range57 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double58 = range57.getLength();
        org.jfree.data.Range range60 = org.jfree.data.Range.expandToInclude(range57, (double) (short) 10);
        double double61 = range60.getLowerBound();
        org.jfree.data.Range range63 = org.jfree.data.Range.expandToInclude(range60, (double) 100L);
        org.jfree.data.Range range66 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range69 = org.jfree.data.Range.expand(range66, 100.0d, (double) 100);
        boolean boolean70 = range63.equals((java.lang.Object) range66);
        org.jfree.data.Range range73 = org.jfree.data.Range.expand(range63, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range75 = org.jfree.data.Range.expandToInclude(range63, (double) 100.0f);
        org.jfree.data.Range range78 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range79 = org.jfree.data.Range.combine(range63, range78);
        boolean boolean80 = borderArrangement28.equals((java.lang.Object) range79);
        boolean boolean81 = range24.equals((java.lang.Object) borderArrangement28);
        double double82 = range24.getUpperBound();
        org.jfree.data.Range range83 = org.jfree.data.Range.combine(range10, range24);
        double double84 = range10.getUpperBound();
        double double85 = range10.getLength();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.0d + "'", double17 == 5.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 99.0d + "'", double41 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 10.0d + "'", double82 == 10.0d);
        org.junit.Assert.assertNotNull(range83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 118.0d + "'", double84 == 118.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 10.0d + "'", double85 == 10.0d);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        double double9 = range2.getUpperBound();
        double double11 = range2.constrain((double) (short) 10);
        double double12 = range2.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 50.5d + "'", double12 == 50.5d);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        boolean boolean10 = borderArrangement0.equals((java.lang.Object) '#');
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 100.0d, (double) 100);
        double double18 = range16.constrain((double) (short) 1);
        boolean boolean19 = borderArrangement0.equals((java.lang.Object) (short) 1);
        borderArrangement0.clear();
        org.jfree.data.Range range23 = new org.jfree.data.Range(1.0d, (double) 10.0f);
        boolean boolean24 = borderArrangement0.equals((java.lang.Object) 10.0f);
        org.jfree.chart.block.Block block25 = null;
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement33 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean35 = borderArrangement33.equals((java.lang.Object) (-1L));
        boolean boolean37 = borderArrangement33.equals((java.lang.Object) (-1.0f));
        boolean boolean38 = range31.equals((java.lang.Object) borderArrangement33);
        double double39 = range31.getCentralValue();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block25, (java.lang.Object) double39);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 5.0d + "'", double39 == 5.0d);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        boolean boolean37 = range32.contains((-1.0d));
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range32, 0.0d);
        org.jfree.data.Range range42 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range42);
        double double44 = range43.getUpperBound();
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range43, (-1.9898E8d));
        org.jfree.data.Range range49 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range52 = org.jfree.data.Range.expand(range49, 100.0d, (double) 100);
        double double53 = range52.getLowerBound();
        double double54 = range52.getLowerBound();
        org.jfree.data.Range range57 = org.jfree.data.Range.shift(range52, 10000.0d, true);
        org.jfree.data.Range range60 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj61 = new java.lang.Object();
        boolean boolean62 = range60.equals(obj61);
        boolean boolean65 = range60.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range68 = org.jfree.data.Range.expand(range60, 0.0d, (double) (byte) -1);
        boolean boolean71 = range60.intersects((double) 100, (double) 10L);
        boolean boolean74 = range60.intersects(19899.0d, 9999.0d);
        org.jfree.data.Range range75 = org.jfree.data.Range.combine(range52, range60);
        org.jfree.data.Range range76 = org.jfree.data.Range.combine(range46, range75);
        java.lang.Class<?> wildcardClass77 = range76.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 200.0d + "'", double44 == 200.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-9899.0d) + "'", double53 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-9899.0d) + "'", double54 == (-9899.0d));
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 265.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, 9999.0d, (double) 0.0f);
        double double13 = range2.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range2, (-3150.0d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 31.0d + "'", double13 == 31.0d);
        org.junit.Assert.assertNotNull(range15);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range10, (double) 10.0f);
        java.lang.String str16 = range10.toString();
        java.lang.String str17 = range10.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Range[0.0,10.0]" + "'", str16, "Range[0.0,10.0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[0.0,10.0]" + "'", str17, "Range[0.0,10.0]");
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        boolean boolean10 = borderArrangement0.equals((java.lang.Object) '#');
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 100.0d, (double) 100);
        double double18 = range16.constrain((double) (short) 1);
        boolean boolean19 = borderArrangement0.equals((java.lang.Object) (short) 1);
        borderArrangement0.clear();
        org.jfree.data.Range range23 = new org.jfree.data.Range(1.0d, (double) 10.0f);
        boolean boolean24 = borderArrangement0.equals((java.lang.Object) 10.0f);
        borderArrangement0.clear();
        org.jfree.chart.block.BlockContainer blockContainer26 = null;
        java.awt.Graphics2D graphics2D27 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D29 = borderArrangement0.arrange(blockContainer26, graphics2D27, rectangleConstraint28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        double double37 = range36.getCentralValue();
        double double38 = range36.getLength();
        java.lang.String str39 = range36.toString();
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range42.getLength();
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range42, (double) (short) 10);
        double double46 = range45.getLowerBound();
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) 100L);
        boolean boolean51 = range48.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range54 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double55 = range54.getLength();
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range54, (double) (short) 10);
        double double58 = range57.getLowerBound();
        boolean boolean60 = range57.contains((double) (byte) 0);
        org.jfree.data.Range range63 = org.jfree.data.Range.shift(range57, (double) 1.0f, false);
        org.jfree.data.Range range64 = org.jfree.data.Range.combine(range48, range63);
        double double65 = range64.getLength();
        boolean boolean68 = range64.intersects((double) ' ', 0.0d);
        boolean boolean69 = range36.equals((java.lang.Object) ' ');
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Range[0.0,100.0]" + "'", str39, "Range[0.0,100.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 100.0d + "'", double65 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double33 = range32.getUpperBound();
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getCentralValue();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range36, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range39, (double) '4');
        boolean boolean46 = borderArrangement3.equals((java.lang.Object) '4');
        org.jfree.data.Range range49 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double50 = range49.getLength();
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range49, (double) (short) 10);
        double double53 = range49.getUpperBound();
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range49, 0.0d);
        double double56 = range55.getCentralValue();
        double double57 = range55.getLength();
        boolean boolean58 = borderArrangement3.equals((java.lang.Object) range55);
        org.jfree.data.Range range59 = null;
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range59, 10.0d);
        double double62 = range61.getLength();
        double double64 = range61.constrain((double) (-1));
        double double65 = range61.getCentralValue();
        boolean boolean66 = borderArrangement3.equals((java.lang.Object) range61);
        borderArrangement3.clear();
        org.jfree.chart.block.Block block68 = null;
        java.lang.Object obj69 = null;
        borderArrangement3.add(block68, obj69);
        org.jfree.chart.block.BlockContainer blockContainer71 = null;
        java.awt.Graphics2D graphics2D72 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D74 = borderArrangement3.arrange(blockContainer71, graphics2D72, rectangleConstraint73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5.0d + "'", double37 == 5.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5.0d + "'", double56 == 5.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.0d + "'", double65 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) (short) 100, false);
        boolean boolean19 = range2.intersects((double) '#', (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range2, (double) 0, 26.5d);
        double double23 = range2.getLength();
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj27 = new java.lang.Object();
        boolean boolean28 = range26.equals(obj27);
        boolean boolean31 = range26.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range34 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double36 = range34.constrain(10.0d);
        org.jfree.data.Range range37 = org.jfree.data.Range.combine(range26, range34);
        org.jfree.data.Range range40 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double41 = range40.getLength();
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range40, (double) (short) 10);
        double double44 = range43.getLowerBound();
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range43, (double) 100L);
        org.jfree.data.Range range49 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range52 = org.jfree.data.Range.expand(range49, 100.0d, (double) 100);
        boolean boolean53 = range46.equals((java.lang.Object) range49);
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range46, (double) 100);
        org.jfree.data.Range range56 = org.jfree.data.Range.combine(range37, range55);
        org.jfree.data.Range range58 = org.jfree.data.Range.expandToInclude(range56, 26.5d);
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range2, range56);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range59);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) (-1L));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 49.0d, 10.0d);
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range8.constrain(10.0d);
        boolean boolean13 = range8.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str14 = range8.toString();
        double double16 = range8.constrain((double) 100L);
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range2, range8);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj21 = new java.lang.Object();
        boolean boolean22 = range20.equals(obj21);
        boolean boolean25 = range20.intersects(1.0d, (double) (short) 10);
        double double26 = range20.getCentralValue();
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range20, 49.0d, 50.0d);
        org.jfree.data.Range range30 = org.jfree.data.Range.combine(range8, range20);
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double35 = range33.constrain(10.0d);
        boolean boolean38 = range33.intersects((double) 10.0f, (double) (-1.0f));
        boolean boolean40 = range33.contains((double) 0);
        boolean boolean41 = range8.equals((java.lang.Object) range33);
        double double42 = range33.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[0.0,10.0]" + "'", str14, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5.0d + "'", double26 == 5.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 5.0d + "'", double42 == 5.0d);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        boolean boolean28 = borderArrangement7.equals((java.lang.Object) 50.0d);
        borderArrangement7.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range32.constrain(10.0d);
        boolean boolean37 = range32.intersects((double) 10.0f, (double) (-1.0f));
        double double39 = range32.constrain(0.0d);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range32, (double) 0.0f, (double) ' ');
        double double43 = range42.getUpperBound();
        org.jfree.data.Range range46 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean47 = range42.equals((java.lang.Object) range46);
        boolean boolean48 = borderArrangement7.equals((java.lang.Object) boolean47);
        org.jfree.data.Range range51 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double52 = range51.getLength();
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range51, (double) (short) 10);
        double double55 = range54.getLowerBound();
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range54, (double) 100L);
        org.jfree.data.Range range60 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range63 = org.jfree.data.Range.expand(range60, 100.0d, (double) 100);
        boolean boolean64 = range57.equals((java.lang.Object) range60);
        org.jfree.data.Range range67 = org.jfree.data.Range.expand(range57, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range69 = org.jfree.data.Range.expandToInclude(range57, (double) 100.0f);
        double double70 = range57.getCentralValue();
        org.jfree.data.Range range73 = org.jfree.data.Range.shift(range57, (double) 1, true);
        org.jfree.data.Range range76 = org.jfree.data.Range.shift(range57, (-6400.0d), true);
        boolean boolean77 = borderArrangement7.equals((java.lang.Object) true);
        org.jfree.data.Range range80 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double81 = range80.getLength();
        org.jfree.data.Range range83 = org.jfree.data.Range.expandToInclude(range80, (double) (short) 10);
        double double84 = range83.getLowerBound();
        boolean boolean86 = range83.contains((double) (byte) 0);
        org.jfree.data.Range range89 = org.jfree.data.Range.shift(range83, (double) 1.0f, false);
        org.jfree.data.Range range92 = org.jfree.data.Range.expand(range89, (double) (short) 1, (double) (-1L));
        double double93 = range89.getLength();
        boolean boolean94 = borderArrangement7.equals((java.lang.Object) double93);
        borderArrangement7.clear();
        org.jfree.chart.block.BlockContainer blockContainer96 = null;
        java.awt.Graphics2D graphics2D97 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D99 = borderArrangement7.arrange(blockContainer96, graphics2D97, rectangleConstraint98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 330.0d + "'", double43 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 10.0d + "'", double81 == 10.0d);
        org.junit.Assert.assertNotNull(range83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(range89);
        org.junit.Assert.assertNotNull(range92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.chart.block.Block block11 = null;
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, 100.0d, (double) 100);
        boolean boolean20 = range14.intersects((double) 'a', (-9899.0d));
        double double22 = range14.constrain((double) 10L);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range14, 0.0d);
        boolean boolean27 = range24.intersects(51.0d, (-100.0d));
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement3.add(block11, (java.lang.Object) 51.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range5, (double) '4', false);
        org.jfree.data.Range range17 = new org.jfree.data.Range(50.5d, (double) ' ');
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range14, range17);
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) (byte) 100, (double) '#');
        boolean boolean22 = range14.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = range14.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Range[52.0,62.0]" + "'", str23, "Range[52.0,62.0]");
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range10, (double) 0L, (double) '4');
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range10, (double) ' ');
        boolean boolean17 = borderArrangement0.equals((java.lang.Object) ' ');
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj21 = new java.lang.Object();
        boolean boolean22 = range20.equals(obj21);
        boolean boolean25 = range20.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        boolean boolean35 = range20.equals((java.lang.Object) 100L);
        double double36 = range20.getLength();
        boolean boolean37 = borderArrangement0.equals((java.lang.Object) range20);
        java.lang.Object obj38 = null;
        boolean boolean39 = borderArrangement0.equals(obj38);
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj43 = new java.lang.Object();
        boolean boolean44 = range42.equals(obj43);
        boolean boolean47 = range42.intersects(1.0d, (double) (short) 10);
        double double48 = range42.getUpperBound();
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range42, (double) (byte) 0);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range50, (double) (short) -1, true);
        boolean boolean54 = borderArrangement0.equals((java.lang.Object) range53);
        org.jfree.chart.block.Block block55 = null;
        org.jfree.data.Range range58 = new org.jfree.data.Range(1340.0d, 16.0d);
        double double59 = range58.getUpperBound();
        org.jfree.data.Range range62 = org.jfree.data.Range.shift(range58, 6676165.0d, false);
        boolean boolean65 = range58.intersects(530.0d, (-100.0d));
        java.lang.String str66 = range58.toString();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block55, (java.lang.Object) range58);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 16.0d + "'", double59 == 16.0d);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Range[1340.0,16.0]" + "'", str66, "Range[1340.0,16.0]");
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        double double28 = range27.getLowerBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) 100L);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range30, (double) 100L, true);
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range30, (double) 100, false);
        org.jfree.data.Range range37 = org.jfree.data.Range.combine(range8, range30);
        double double38 = range8.getUpperBound();
        java.lang.Class<?> wildcardClass39 = range8.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        boolean boolean38 = range32.intersects((double) 1L, (double) (byte) 1);
        org.jfree.data.Range range41 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range41, (double) 0);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range32, range43);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range43, 15.0d, false);
        org.jfree.data.Range range50 = new org.jfree.data.Range(43.0d, (-1.0d));
        org.jfree.data.Range range53 = org.jfree.data.Range.expand(range50, 19757.0d, 5346.0d);
        org.jfree.data.Range range54 = org.jfree.data.Range.combine(range47, range53);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range54, (-495.0d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range56);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        boolean boolean12 = range7.intersects(107.0d, 9.0d);
        double double13 = range7.getUpperBound();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range7, (-9790.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 132.0d + "'", double13 == 132.0d);
        org.junit.Assert.assertNotNull(range15);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.jfree.data.Range range2 = new org.jfree.data.Range(51.0d, 55.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, 19757.0d);
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range4, 0.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range6);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getCentralValue();
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range14, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range17, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) 10);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range10, range24);
        boolean boolean28 = range10.intersects(150.0d, (double) 'a');
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range10, (double) 100, 19.0d);
        boolean boolean32 = borderArrangement0.equals((java.lang.Object) range10);
        boolean boolean34 = borderArrangement0.equals((java.lang.Object) "Range[0.0,2010.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5.0d + "'", double15 == 5.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.chart.block.Block block5 = null;
        org.jfree.data.Range range6 = null;
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        borderArrangement0.add(block5, (java.lang.Object) range6);
        org.jfree.data.Range range12 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean14 = range12.contains((double) 1L);
        boolean boolean17 = range12.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, 265.0d);
        boolean boolean20 = borderArrangement0.equals((java.lang.Object) 265.0d);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) (byte) 100, 101.0d);
        boolean boolean24 = borderArrangement0.equals((java.lang.Object) (byte) 100);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.Block block27 = null;
        java.lang.Object obj28 = null;
        borderArrangement0.add(block27, obj28);
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj33 = new java.lang.Object();
        boolean boolean34 = range32.equals(obj33);
        boolean boolean37 = range32.intersects(5.0d, (double) 100L);
        double double38 = range32.getLength();
        java.lang.String str39 = range32.toString();
        double double40 = range32.getLength();
        boolean boolean41 = borderArrangement0.equals((java.lang.Object) double40);
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double45 = range44.getLength();
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range44, (double) (short) 10);
        double double48 = range47.getLowerBound();
        boolean boolean50 = range47.contains((double) (byte) 0);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range47, (double) 1.0f, false);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range47, (double) '4', false);
        java.lang.String str57 = range47.toString();
        org.jfree.data.Range range59 = org.jfree.data.Range.expandToInclude(range47, (-10.0d));
        boolean boolean60 = borderArrangement0.equals((java.lang.Object) (-10.0d));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Range[0.0,10.0]" + "'", str39, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Range[0.0,10.0]" + "'", str57, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, 265.0d);
        org.jfree.data.Range range3 = null;
        org.jfree.data.Range range4 = org.jfree.data.Range.combine(range2, range3);
        boolean boolean7 = range2.intersects(1010.0d, 110.0d);
        double double8 = range2.getLowerBound();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 11.0d + "'", double8 == 11.0d);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        double double6 = range2.getLength();
        boolean boolean8 = range2.contains(150.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        boolean boolean9 = range2.contains((double) 0);
        double double10 = range2.getLowerBound();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.jfree.data.Range range2 = new org.jfree.data.Range(35.0d, (double) 0.0f);
        org.jfree.data.Range range5 = new org.jfree.data.Range(1.0d, (double) 10.0f);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, 265.0d, (double) '4');
        org.jfree.data.Range range9 = org.jfree.data.Range.combine(range2, range5);
        java.lang.Class<?> wildcardClass10 = range5.getClass();
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.jfree.data.Range range2 = new org.jfree.data.Range(300.0d, 136.0d);
        org.jfree.data.Range range5 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj6 = new java.lang.Object();
        boolean boolean7 = range5.equals(obj6);
        boolean boolean10 = range5.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range5, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range5, (double) (short) -1);
        double double17 = range15.constrain(50.5d);
        double double18 = range15.getLength();
        boolean boolean21 = range15.intersects(54.0d, 19.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range2, range15);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 11.0d + "'", double18 == 11.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-9899.0d), (-420.0d));
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        borderArrangement0.clear();
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj9 = new java.lang.Object();
        boolean boolean10 = range8.equals(obj9);
        boolean boolean13 = range8.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double18 = range16.constrain(10.0d);
        org.jfree.data.Range range19 = org.jfree.data.Range.combine(range8, range16);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        double double26 = range25.getLowerBound();
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range25, (double) 100L);
        org.jfree.data.Range range31 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, 100.0d, (double) 100);
        boolean boolean35 = range28.equals((java.lang.Object) range31);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range28, (double) 100);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range19, range37);
        org.jfree.data.Range range41 = org.jfree.data.Range.expand(range38, (double) ' ', 1.0d);
        boolean boolean43 = range38.contains((-1.0d));
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range38, 0.0d);
        boolean boolean48 = range38.intersects((double) (-1.0f), 530.0d);
        org.jfree.data.Range range50 = org.jfree.data.Range.shift(range38, 54.0d);
        org.jfree.data.Range range53 = org.jfree.data.Range.expand(range50, 107.0d, 67.5d);
        boolean boolean54 = borderArrangement0.equals((java.lang.Object) 107.0d);
        org.jfree.data.Range range57 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double58 = range57.getLength();
        double double60 = range57.constrain(0.0d);
        java.lang.String str61 = range57.toString();
        org.jfree.data.Range range64 = org.jfree.data.Range.shift(range57, (double) (short) 1, true);
        boolean boolean65 = borderArrangement0.equals((java.lang.Object) (short) 1);
        org.jfree.chart.block.BlockContainer blockContainer66 = null;
        java.awt.Graphics2D graphics2D67 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D69 = borderArrangement0.arrange(blockContainer66, graphics2D67, rectangleConstraint68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Range[0.0,10.0]" + "'", str61, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range5, (double) (byte) -1, (double) 100L);
        boolean boolean11 = range5.contains(99.0d);
        double double12 = range5.getUpperBound();
        org.jfree.data.Range range15 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range15, (double) (-1));
        double double18 = range17.getUpperBound();
        boolean boolean21 = range17.intersects(50.0d, 5.0d);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range17, range24);
        boolean boolean29 = range5.equals((java.lang.Object) range24);
        double double30 = range24.getCentralValue();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range24, 135.0d, true);
        double double34 = range24.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9899.0d) + "'", double6 == (-9899.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10000.0d + "'", double12 == 10000.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 99.0d + "'", double18 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5.0d + "'", double30 == 5.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range7);
        double double15 = range2.constrain((double) (byte) 1);
        double double16 = range2.getCentralValue();
        double double17 = range2.getLength();
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range2, 0.0d, false);
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double24 = range23.getLength();
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range23, (double) (short) 10);
        double double27 = range26.getLowerBound();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) 100L);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, 100.0d, (double) 100);
        boolean boolean36 = range29.equals((java.lang.Object) range32);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range29, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range29, (double) 100.0f);
        double double42 = range29.getCentralValue();
        boolean boolean44 = range29.equals((java.lang.Object) 0);
        org.jfree.data.Range range47 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double48 = range47.getLength();
        double double50 = range47.constrain(0.0d);
        java.lang.String str51 = range47.toString();
        org.jfree.data.Range range54 = org.jfree.data.Range.shift(range47, (double) (short) 1, true);
        org.jfree.data.Range range56 = org.jfree.data.Range.expandToInclude(range54, (double) '4');
        org.jfree.data.Range range58 = org.jfree.data.Range.expandToInclude(range56, (double) 1L);
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range29, range56);
        org.jfree.data.Range range62 = org.jfree.data.Range.expand(range56, 107.0d, 0.0d);
        org.jfree.data.Range range65 = org.jfree.data.Range.expand(range56, 82.5d, 0.0d);
        org.jfree.data.Range range66 = org.jfree.data.Range.combine(range20, range56);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 50.0d + "'", double42 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Range[0.0,10.0]" + "'", str51, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range66);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (byte) 0, (double) (-1L));
        boolean boolean7 = range5.contains((-1.0d));
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range5, 11.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range9, (double) (short) 100, true);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getLength();
        boolean boolean21 = range2.intersects(100.0d, (double) (short) 100);
        boolean boolean24 = range2.intersects(0.0d, (double) (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        double double13 = range12.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean17 = range12.equals((java.lang.Object) range16);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range20, (double) (-1));
        double double23 = range22.getUpperBound();
        double double24 = range22.getCentralValue();
        double double25 = range22.getLowerBound();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range28.constrain(10.0d);
        double double31 = range28.getUpperBound();
        java.lang.String str32 = range28.toString();
        boolean boolean33 = range22.equals((java.lang.Object) str32);
        double double34 = range22.getLowerBound();
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range16, range22);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range22, (-1000.0d));
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range37, (-3000.0d), false);
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range37, 131.0d, (double) '#');
        boolean boolean46 = range43.intersects((-3.3380139E7d), (double) (short) 0);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 330.0d + "'", double13 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 99.0d + "'", double23 == 99.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 54.0d + "'", double24 == 54.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 9.0d + "'", double25 == 9.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Range[0.0,10.0]" + "'", str32, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 9.0d + "'", double34 == 9.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((-1908.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, (-1.0d));
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range6, (double) 1);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range6, (double) 'a');
        boolean boolean13 = range6.equals((java.lang.Object) 10);
        boolean boolean15 = range6.contains((double) 1.0f);
        double double16 = range6.getUpperBound();
        double double17 = range6.getUpperBound();
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj21 = new java.lang.Object();
        boolean boolean22 = range20.equals(obj21);
        boolean boolean25 = range20.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        boolean boolean35 = range20.equals((java.lang.Object) 100L);
        boolean boolean37 = range20.contains(35.0d);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range6, range20);
        org.jfree.data.Range range41 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj42 = new java.lang.Object();
        boolean boolean43 = range41.equals(obj42);
        boolean boolean46 = range41.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range49 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double50 = range49.getLength();
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range49, (double) (short) 10);
        double double53 = range52.getLowerBound();
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range52, (double) 100L);
        boolean boolean56 = range41.equals((java.lang.Object) 100L);
        boolean boolean58 = range41.contains((double) (byte) 100);
        double double59 = range41.getUpperBound();
        org.jfree.data.Range range60 = org.jfree.data.Range.combine(range38, range41);
        org.jfree.data.Range range61 = org.jfree.data.Range.combine(range2, range38);
        boolean boolean64 = range38.intersects(0.0d, 62.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.0d + "'", double7 == 5.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        double double16 = range8.getUpperBound();
        double double17 = range8.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        double double8 = range5.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 19899.0d + "'", double8 == 19899.0d);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range12, (double) 0L, false);
        double double19 = range12.getCentralValue();
        boolean boolean21 = range12.contains(1340.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5.0d + "'", double19 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        boolean boolean10 = borderArrangement0.equals((java.lang.Object) '#');
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 100.0d, (double) 100);
        double double18 = range16.constrain((double) (short) 1);
        boolean boolean19 = borderArrangement0.equals((java.lang.Object) (short) 1);
        borderArrangement0.clear();
        org.jfree.data.Range range23 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean25 = range23.contains((double) 1L);
        boolean boolean28 = range23.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range23, 265.0d);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range23, 9999.0d, (double) 0.0f);
        boolean boolean34 = borderArrangement0.equals((java.lang.Object) range33);
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getUpperBound();
        double double7 = range2.getLength();
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range10, 100.0d, (double) 100);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range13, (double) (byte) -1, (double) 100L);
        double double19 = range13.constrain(265.0d);
        java.lang.String str20 = range13.toString();
        double double21 = range13.getLength();
        boolean boolean22 = range2.equals((java.lang.Object) range13);
        double double24 = range13.constrain(54.0d);
        double double25 = range13.getUpperBound();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range13, 150.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9899.0d) + "'", double14 == (-9899.0d));
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 265.0d + "'", double19 == 265.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Range[-9899.0,10000.0]" + "'", str20, "Range[-9899.0,10000.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 19899.0d + "'", double21 == 19899.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 54.0d + "'", double24 == 54.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10000.0d + "'", double25 == 10000.0d);
        org.junit.Assert.assertNotNull(range27);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range15, (double) (-1));
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range18, 19899.0d, 150.0d);
        boolean boolean23 = range18.contains((double) (byte) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range18, 340.0d, 62.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(range26);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        double double7 = range6.getCentralValue();
        double double8 = range6.getCentralValue();
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range6, 6.0d, (double) 10L);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range6, (-11.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 265.0d + "'", double7 == 265.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 265.0d + "'", double8 == 265.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) (-1.0f));
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj12 = new java.lang.Object();
        boolean boolean13 = range11.equals(obj12);
        boolean boolean16 = range11.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range11, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range11, (double) (short) -1);
        double double23 = range21.constrain(50.5d);
        double double25 = range21.constrain((double) (short) 10);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range21, (double) 1.0f, false);
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range5, range21);
        double double30 = range29.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) ' ');
        java.lang.Class<?> wildcardClass9 = range2.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        double double6 = range2.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 330.0d, true);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        boolean boolean15 = range12.contains((double) (byte) 0);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range12, (double) 100.0f, (double) 10.0f);
        boolean boolean19 = range2.equals((java.lang.Object) range12);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range12, (-2005.0d), false);
        double double23 = range22.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1002.5d) + "'", double23 == (-1002.5d));
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean11 = range6.contains((double) 0.0f);
        boolean boolean13 = range6.equals((java.lang.Object) (-1));
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getCentralValue();
        double double18 = range16.getLowerBound();
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getCentralValue();
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range21, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range21, (double) (short) 10);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range16, range21);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range27, (double) '#', false);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range27, 9999.0d, false);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range6, range27);
        boolean boolean36 = range27.contains((double) (-1L));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.0d + "'", double17 == 5.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        double double10 = range2.constrain((double) 10L);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        boolean boolean15 = range12.intersects(265.0d, 92.5d);
        boolean boolean18 = range12.intersects(5100.0d, 9999.0d);
        double double20 = range12.constrain(0.0d);
        double double21 = range12.getLength();
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range12, (-3.3380139E7d), false);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(range24);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj10 = new java.lang.Object();
        boolean boolean11 = range9.equals(obj10);
        boolean boolean12 = borderArrangement0.equals(obj10);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.Block block15 = null;
        java.lang.Object obj16 = null;
        borderArrangement0.add(block15, obj16);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range32, 19899.0d);
        double double38 = range37.getLowerBound();
        double double39 = range37.getCentralValue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 19899.0d + "'", double38 == 19899.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 19999.0d + "'", double39 == 19999.0d);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.jfree.data.Range range2 = new org.jfree.data.Range(67.5d, 51.0d);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, 136.0d);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        borderArrangement3.clear();
        borderArrangement3.clear();
        borderArrangement3.clear();
        org.jfree.chart.block.BlockContainer blockContainer11 = null;
        java.awt.Graphics2D graphics2D12 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D14 = borderArrangement3.arrange(blockContainer11, graphics2D12, rectangleConstraint13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = borderArrangement0.equals((java.lang.Object) 1.0f);
        java.lang.Object obj8 = null;
        boolean boolean9 = borderArrangement0.equals(obj8);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj13 = new java.lang.Object();
        boolean boolean14 = range12.equals(obj13);
        boolean boolean17 = range12.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range20.constrain(10.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range12, range20);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, 100.0d, (double) 100);
        boolean boolean39 = range32.equals((java.lang.Object) range35);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, (double) 100);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range23, range41);
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) range23);
        org.jfree.data.Range range46 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double47 = range46.getLength();
        org.jfree.data.Range range49 = org.jfree.data.Range.expandToInclude(range46, (double) (short) 10);
        double double50 = range46.getUpperBound();
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range46, 0.0d);
        double double53 = range52.getCentralValue();
        org.jfree.data.Range range56 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement57 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean59 = borderArrangement57.equals((java.lang.Object) (-1L));
        borderArrangement57.clear();
        boolean boolean61 = range56.equals((java.lang.Object) borderArrangement57);
        org.jfree.chart.block.Block block62 = null;
        java.lang.Object obj63 = null;
        borderArrangement57.add(block62, obj63);
        org.jfree.data.Range range67 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range69 = org.jfree.data.Range.shift(range67, (double) (-1));
        double double70 = range69.getUpperBound();
        boolean boolean73 = range69.intersects(50.0d, 5.0d);
        org.jfree.data.Range range76 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double77 = range76.getLength();
        org.jfree.data.Range range79 = org.jfree.data.Range.expandToInclude(range76, (double) (short) 10);
        org.jfree.data.Range range80 = org.jfree.data.Range.combine(range69, range76);
        org.jfree.data.Range range82 = org.jfree.data.Range.shift(range69, (double) (byte) 10);
        boolean boolean83 = borderArrangement57.equals((java.lang.Object) range69);
        boolean boolean84 = range52.equals((java.lang.Object) boolean83);
        boolean boolean85 = borderArrangement0.equals((java.lang.Object) range52);
        org.jfree.data.Range range88 = new org.jfree.data.Range(1.0d, (double) 10.0f);
        org.jfree.data.Range range91 = org.jfree.data.Range.expand(range88, 265.0d, (double) '4');
        boolean boolean92 = borderArrangement0.equals((java.lang.Object) range91);
        borderArrangement0.clear();
        org.jfree.chart.block.BlockContainer blockContainer94 = null;
        java.awt.Graphics2D graphics2D95 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D97 = borderArrangement0.arrange(blockContainer94, graphics2D95, rectangleConstraint96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5.0d + "'", double53 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 99.0d + "'", double70 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 10.0d + "'", double77 == 10.0d);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertNotNull(range82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(range91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double7 = range2.constrain((double) (-1.0f));
        double double8 = range2.getUpperBound();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, (double) 1.0f);
        boolean boolean13 = range2.intersects((double) (short) 10, 510.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range31.getLength();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) (short) 10);
        double double35 = range34.getLowerBound();
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range34, (double) 100L);
        boolean boolean40 = range37.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getLength();
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range43, (double) (short) 10);
        double double47 = range46.getLowerBound();
        boolean boolean49 = range46.contains((double) (byte) 0);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range46, (double) 1.0f, false);
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range37, range52);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range37, (double) 0.0f, false);
        java.lang.String str57 = range37.toString();
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range37, 530.0d, false);
        org.jfree.data.Range range62 = org.jfree.data.Range.shift(range60, (double) 10L);
        boolean boolean63 = borderArrangement0.equals((java.lang.Object) range60);
        borderArrangement0.clear();
        org.jfree.data.Range range67 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double68 = range67.getLength();
        org.jfree.data.Range range70 = org.jfree.data.Range.expandToInclude(range67, (double) (short) 10);
        double double71 = range70.getLowerBound();
        boolean boolean73 = range70.contains((double) (byte) 0);
        org.jfree.data.Range range76 = org.jfree.data.Range.shift(range70, (double) 1.0f, false);
        org.jfree.data.Range range79 = org.jfree.data.Range.expand(range76, (double) (short) 1, (double) (-1L));
        org.jfree.data.Range range82 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double84 = range82.constrain(10.0d);
        boolean boolean87 = range82.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str88 = range82.toString();
        double double90 = range82.constrain((double) 100L);
        org.jfree.data.Range range91 = org.jfree.data.Range.combine(range79, range82);
        org.jfree.data.Range range93 = org.jfree.data.Range.expandToInclude(range91, (double) 100);
        boolean boolean94 = borderArrangement0.equals((java.lang.Object) range91);
        org.jfree.chart.block.BlockContainer blockContainer95 = null;
        java.awt.Graphics2D graphics2D96 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D98 = borderArrangement0.arrange(blockContainer95, graphics2D96, rectangleConstraint97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Range[0.0,100.0]" + "'", str57, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 10.0d + "'", double68 == 10.0d);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 10.0d + "'", double84 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Range[0.0,10.0]" + "'", str88, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 10.0d + "'", double90 == 10.0d);
        org.junit.Assert.assertNotNull(range91);
        org.junit.Assert.assertNotNull(range93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double33 = range32.getUpperBound();
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getCentralValue();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range36, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range39, (double) '4');
        boolean boolean46 = borderArrangement3.equals((java.lang.Object) '4');
        org.jfree.data.Range range49 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double50 = range49.getLength();
        double double52 = range49.constrain(0.0d);
        java.lang.String str53 = range49.toString();
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range49, (double) (short) 1, true);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range49, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range62 = org.jfree.data.Range.expand(range59, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range65 = org.jfree.data.Range.shift(range59, (double) 0L, false);
        boolean boolean68 = range65.intersects(9.0d, (double) 100.0f);
        boolean boolean71 = range65.intersects((double) 0L, (double) (byte) 0);
        boolean boolean72 = borderArrangement3.equals((java.lang.Object) boolean71);
        org.jfree.chart.block.BlockContainer blockContainer73 = null;
        java.awt.Graphics2D graphics2D74 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D76 = borderArrangement3.arrange(blockContainer73, graphics2D74, rectangleConstraint75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5.0d + "'", double37 == 5.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Range[0.0,10.0]" + "'", str53, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.Range.shift(range0, (-3150.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        double double27 = range26.getLowerBound();
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (-1));
        double double33 = range32.getUpperBound();
        boolean boolean36 = range32.intersects(50.0d, 5.0d);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range39.getLength();
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range39, (double) (short) 10);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range26, range39);
        org.jfree.data.Range range47 = new org.jfree.data.Range(1.0d, (double) (short) 10);
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range47, 10.0d, (double) (short) 10);
        org.jfree.data.Range range51 = org.jfree.data.Range.combine(range26, range47);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9899.0d) + "'", double27 == (-9899.0d));
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 99.0d + "'", double33 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range51);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range2, (double) (byte) 10);
        org.jfree.data.Range range15 = new org.jfree.data.Range(100.0d, (double) (byte) 100);
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range2, range15);
        java.lang.String str17 = range16.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[0.0,100.0]" + "'", str17, "Range[0.0,100.0]");
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        boolean boolean10 = borderArrangement0.equals((java.lang.Object) '#');
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 100.0d, (double) 100);
        double double18 = range16.constrain((double) (short) 1);
        boolean boolean19 = borderArrangement0.equals((java.lang.Object) (short) 1);
        borderArrangement0.clear();
        org.jfree.data.Range range23 = new org.jfree.data.Range(1.0d, (double) 10.0f);
        boolean boolean24 = borderArrangement0.equals((java.lang.Object) 10.0f);
        org.jfree.data.Range range27 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range27, (double) 1.0f, false);
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range27, 0.0d);
        boolean boolean33 = borderArrangement0.equals((java.lang.Object) 0.0d);
        borderArrangement0.clear();
        org.jfree.chart.block.Block block35 = null;
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj39 = new java.lang.Object();
        boolean boolean40 = range38.equals(obj39);
        boolean boolean43 = range38.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range46 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double48 = range46.constrain(10.0d);
        org.jfree.data.Range range49 = org.jfree.data.Range.combine(range38, range46);
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double53 = range52.getLength();
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range52, (double) (short) 10);
        double double56 = range55.getLowerBound();
        org.jfree.data.Range range58 = org.jfree.data.Range.expandToInclude(range55, (double) 100L);
        org.jfree.data.Range range61 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range64 = org.jfree.data.Range.expand(range61, 100.0d, (double) 100);
        boolean boolean65 = range58.equals((java.lang.Object) range61);
        org.jfree.data.Range range67 = org.jfree.data.Range.shift(range58, (double) 100);
        org.jfree.data.Range range68 = org.jfree.data.Range.combine(range49, range67);
        org.jfree.data.Range range71 = org.jfree.data.Range.expand(range68, (double) ' ', 1.0d);
        boolean boolean73 = range68.contains((-1.0d));
        org.jfree.data.Range range75 = org.jfree.data.Range.shift(range68, 0.0d);
        org.jfree.data.Range range78 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range79 = org.jfree.data.Range.combine(range68, range78);
        org.jfree.data.Range range82 = new org.jfree.data.Range((double) 100.0f, (double) (byte) 10);
        double double84 = range82.constrain((double) 100L);
        boolean boolean87 = range82.intersects((double) (short) 1, (double) 100L);
        org.jfree.data.Range range90 = org.jfree.data.Range.shift(range82, 16.0d, false);
        java.lang.Class<?> wildcardClass91 = range90.getClass();
        boolean boolean92 = range68.equals((java.lang.Object) range90);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block35, (java.lang.Object) range68);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 10.0d + "'", double84 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(range90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        double double5 = range2.getLowerBound();
        boolean boolean8 = range2.intersects((double) (byte) 0, 0.0d);
        double double10 = range2.constrain((double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range2, 630.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range2, 5097.5d, true);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100.0f, 51.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.expandToInclude(range2, (-3011.0d));
        org.junit.Assert.assertNotNull(range4);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, 265.0d);
        org.jfree.data.Range range3 = null;
        org.jfree.data.Range range4 = org.jfree.data.Range.combine(range2, range3);
        org.jfree.data.Range range7 = org.jfree.data.Range.expand(range2, 19899.0d, 19757.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, 275.0d, true);
        double double11 = range2.getLength();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 254.0d + "'", double11 == 254.0d);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (byte) 0, (double) (-1L));
        double double23 = range19.getUpperBound();
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        boolean boolean35 = range32.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double39 = range38.getLength();
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range38, (double) (short) 10);
        double double42 = range41.getLowerBound();
        boolean boolean44 = range41.contains((double) (byte) 0);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range41, (double) 1.0f, false);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range32, range47);
        double double49 = range48.getLength();
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double54 = range52.constrain(10.0d);
        boolean boolean57 = range52.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str58 = range52.toString();
        boolean boolean59 = range48.equals((java.lang.Object) range52);
        boolean boolean60 = range19.equals((java.lang.Object) range52);
        boolean boolean61 = range13.equals((java.lang.Object) range52);
        boolean boolean62 = borderArrangement3.equals((java.lang.Object) range13);
        org.jfree.data.Range range65 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double66 = range65.getLength();
        org.jfree.data.Range range68 = org.jfree.data.Range.expandToInclude(range65, (double) (short) 10);
        double double69 = range68.getLowerBound();
        org.jfree.data.Range range71 = org.jfree.data.Range.expandToInclude(range68, (double) 100L);
        boolean boolean74 = range71.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range77 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double78 = range77.getLength();
        org.jfree.data.Range range80 = org.jfree.data.Range.expandToInclude(range77, (double) (short) 10);
        double double81 = range80.getLowerBound();
        boolean boolean83 = range80.contains((double) (byte) 0);
        org.jfree.data.Range range86 = org.jfree.data.Range.shift(range80, (double) 1.0f, false);
        org.jfree.data.Range range87 = org.jfree.data.Range.combine(range71, range86);
        org.jfree.data.Range range90 = org.jfree.data.Range.shift(range71, (double) 0.0f, false);
        boolean boolean91 = borderArrangement3.equals((java.lang.Object) range90);
        double double92 = range90.getCentralValue();
        double double93 = range90.getCentralValue();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Range[0.0,10.0]" + "'", str58, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 10.0d + "'", double78 == 10.0d);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(range86);
        org.junit.Assert.assertNotNull(range87);
        org.junit.Assert.assertNotNull(range90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 50.0d + "'", double92 == 50.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.0d + "'", double93 == 50.0d);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range5, (double) (byte) -1);
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range5, 2010.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double33 = range32.getUpperBound();
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getCentralValue();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range36, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range39, (double) '4');
        boolean boolean46 = borderArrangement3.equals((java.lang.Object) '4');
        org.jfree.data.Range range49 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double50 = range49.getLength();
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range49, (double) (short) 10);
        double double53 = range49.getUpperBound();
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range49, 0.0d);
        double double56 = range55.getCentralValue();
        double double57 = range55.getLength();
        boolean boolean58 = borderArrangement3.equals((java.lang.Object) range55);
        org.jfree.data.Range range59 = null;
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range59, 10.0d);
        double double62 = range61.getLength();
        double double64 = range61.constrain((double) (-1));
        double double66 = range61.constrain((double) 0.0f);
        org.jfree.data.Range range68 = org.jfree.data.Range.expandToInclude(range61, 19899.0d);
        double double69 = range61.getLength();
        org.jfree.data.Range range72 = org.jfree.data.Range.expand(range61, (-164.5d), 48845.0d);
        boolean boolean73 = range55.equals((java.lang.Object) (-164.5d));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5.0d + "'", double37 == 5.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5.0d + "'", double56 == 5.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range5, (double) '4', false);
        org.jfree.data.Range range17 = new org.jfree.data.Range(50.5d, (double) ' ');
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range14, range17);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range14, 15.0d, 10.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range14, 19757.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 'a', (double) '4');
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, (-11.0d), false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-45.0d) + "'", double3 == (-45.0d));
        org.junit.Assert.assertNotNull(range6);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        double double9 = range2.constrain(10.0d);
        double double10 = range2.getLength();
        double double12 = range2.constrain(42.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 'a');
        java.lang.Object obj3 = null;
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(118.0d, (double) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getLength();
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range15, (double) (short) 10);
        double double19 = range18.getLowerBound();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range24, 100.0d, (double) 100);
        boolean boolean28 = range21.equals((java.lang.Object) range24);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range21, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range21, (double) 100.0f);
        double double34 = range21.getCentralValue();
        org.jfree.data.Range range37 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range37, (double) (byte) 0, (double) (-1L));
        double double41 = range37.getUpperBound();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double45 = range44.getLength();
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range44, (double) (short) 10);
        double double48 = range47.getLowerBound();
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range47, (double) 100L);
        boolean boolean53 = range50.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range56 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double57 = range56.getLength();
        org.jfree.data.Range range59 = org.jfree.data.Range.expandToInclude(range56, (double) (short) 10);
        double double60 = range59.getLowerBound();
        boolean boolean62 = range59.contains((double) (byte) 0);
        org.jfree.data.Range range65 = org.jfree.data.Range.shift(range59, (double) 1.0f, false);
        org.jfree.data.Range range66 = org.jfree.data.Range.combine(range50, range65);
        double double67 = range66.getLength();
        org.jfree.data.Range range70 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double72 = range70.constrain(10.0d);
        boolean boolean75 = range70.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str76 = range70.toString();
        boolean boolean77 = range66.equals((java.lang.Object) range70);
        boolean boolean78 = range37.equals((java.lang.Object) range70);
        boolean boolean79 = range21.equals((java.lang.Object) range37);
        boolean boolean80 = borderArrangement7.equals((java.lang.Object) range37);
        double double82 = range37.constrain((-24106.5d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 100.0d + "'", double67 == 100.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 10.0d + "'", double72 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Range[0.0,10.0]" + "'", str76, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        org.jfree.data.Range range24 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range24, (double) (byte) 0, (double) (-1L));
        double double28 = range24.getUpperBound();
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range31.getLength();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) (short) 10);
        double double35 = range34.getLowerBound();
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range34, (double) 100L);
        boolean boolean40 = range37.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getLength();
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range43, (double) (short) 10);
        double double47 = range46.getLowerBound();
        boolean boolean49 = range46.contains((double) (byte) 0);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range46, (double) 1.0f, false);
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range37, range52);
        double double54 = range53.getLength();
        org.jfree.data.Range range57 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double59 = range57.constrain(10.0d);
        boolean boolean62 = range57.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str63 = range57.toString();
        boolean boolean64 = range53.equals((java.lang.Object) range57);
        boolean boolean65 = range24.equals((java.lang.Object) range57);
        boolean boolean66 = range8.equals((java.lang.Object) range24);
        boolean boolean68 = range24.contains(45.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Range[0.0,10.0]" + "'", str63, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, 10.0d);
        double double3 = range2.getLength();
        double double5 = range2.constrain((double) (-1));
        double double7 = range2.constrain((double) 0.0f);
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range2, 19899.0d);
        boolean boolean12 = range9.intersects((double) 10, 50.5d);
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 1, (-45.0d));
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-1.0d), false);
        org.junit.Assert.assertNotNull(range5);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        double double9 = range7.getLowerBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range12);
        double double20 = range7.constrain((double) (byte) 1);
        double double21 = range7.getCentralValue();
        double double22 = range7.getCentralValue();
        boolean boolean23 = borderArrangement0.equals((java.lang.Object) double22);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range32, (double) 100L, true);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range32, (double) 100, false);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, 35.0d, true);
        boolean boolean42 = borderArrangement0.equals((java.lang.Object) range41);
        org.jfree.data.Range range44 = org.jfree.data.Range.expandToInclude(range41, 5100.0d);
        java.lang.String str45 = range44.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Range[35.0,5100.0]" + "'", str45, "Range[35.0,5100.0]");
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.jfree.data.Range range2 = new org.jfree.data.Range(131.0d, (-164.5d));
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        org.jfree.chart.block.Block block30 = null;
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range33.getCentralValue();
        double double35 = range33.getLowerBound();
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double39 = range38.getCentralValue();
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range38, (double) 1);
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range38, (double) (short) 10);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range33, range38);
        boolean boolean46 = range44.contains((double) (short) 10);
        boolean boolean49 = range44.intersects(5100.0d, 9904.0d);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement3.add(block30, (java.lang.Object) boolean49);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Boolean cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5.0d + "'", double34 == 5.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 5.0d + "'", double39 == 5.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double26 = range24.constrain(10.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range16, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range2, range16);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj32 = new java.lang.Object();
        boolean boolean33 = range31.equals(obj32);
        boolean boolean36 = range31.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double41 = range39.constrain(10.0d);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range31, range39);
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range31, (double) (short) 100, false);
        boolean boolean48 = range31.intersects((double) '#', (double) 0.0f);
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range31, (double) 0, 26.5d);
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range51, (-100.0d));
        boolean boolean54 = range16.equals((java.lang.Object) range53);
        org.jfree.data.Range range56 = org.jfree.data.Range.expandToInclude(range16, 51.0d);
        org.jfree.data.Range range59 = org.jfree.data.Range.shift(range16, 100.0d, false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range59);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        boolean boolean11 = range9.contains((double) 0L);
        double double13 = range9.constrain(50.5d);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range9, (double) 1.0f);
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getCentralValue();
        org.jfree.data.Range range20 = org.jfree.data.Range.combine(range9, range18);
        double double21 = range18.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 11.0d + "'", double13 == 11.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5.0d + "'", double19 == 5.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double14 = range13.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) (short) 10);
        double double17 = range16.getLowerBound();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) 100L);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range19, (double) 100L, true);
        boolean boolean23 = borderArrangement3.equals((java.lang.Object) 100L);
        borderArrangement3.clear();
        borderArrangement3.clear();
        org.jfree.chart.block.BlockContainer blockContainer26 = null;
        java.awt.Graphics2D graphics2D27 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D29 = borderArrangement3.arrange(blockContainer26, graphics2D27, rectangleConstraint28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        boolean boolean11 = range9.contains((double) 0L);
        double double13 = range9.constrain(50.5d);
        java.lang.String str14 = range9.toString();
        boolean boolean17 = range9.intersects((-12.0d), (double) (short) 1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 11.0d + "'", double13 == 11.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[1.0,11.0]" + "'", str14, "Range[1.0,11.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range12, (double) (byte) 1, (double) (-1));
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) (short) 10);
        double double25 = range24.getLowerBound();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) 100L);
        boolean boolean30 = range27.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range33.getLength();
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range33, (double) (short) 10);
        double double37 = range36.getLowerBound();
        boolean boolean39 = range36.contains((double) (byte) 0);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range36, (double) 1.0f, false);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range27, range42);
        double double44 = range43.getLength();
        org.jfree.data.Range range47 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double48 = range47.getLength();
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range47, (double) (short) 10);
        double double51 = range50.getLowerBound();
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range50, (double) 100L);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range53, (double) 100L, true);
        boolean boolean57 = range43.equals((java.lang.Object) range53);
        double double58 = range53.getCentralValue();
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range18, range53);
        org.jfree.data.Range range62 = new org.jfree.data.Range((double) 10.0f, 0.0d);
        org.jfree.data.Range range63 = org.jfree.data.Range.combine(range59, range62);
        org.jfree.data.Range range66 = org.jfree.data.Range.expand(range59, 5097.5d, (double) ' ');
        double double67 = range66.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-7878307.5d) + "'", double67 == (-7878307.5d));
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.Range.shift(range0, 488.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.Block block34 = null;
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double38 = range37.getCentralValue();
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range37, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range37, (double) 'a');
        boolean boolean44 = range42.equals((java.lang.Object) 100);
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range42, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block34, (java.lang.Object) range42);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5.0d + "'", double38 == 5.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(range46);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 0);
        double double6 = range4.constrain((double) (short) 0);
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range4, (-3150.0d), 12.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertNotNull(range9);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str8 = range2.toString();
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, (double) (-1));
        double double14 = range13.getUpperBound();
        boolean boolean17 = range13.intersects(50.0d, 5.0d);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double21 = range20.getLength();
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range20, (double) (short) 10);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range20);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range2, range24);
        boolean boolean28 = range24.intersects((double) 0.0f, 15.0d);
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range24, 32.0d);
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range24, (double) ' ');
        boolean boolean34 = range32.contains(38.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[0.0,10.0]" + "'", str8, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 99.0d + "'", double14 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getLength();
        double double12 = range9.constrain(0.0d);
        java.lang.String str13 = range9.toString();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, (double) (short) 1, true);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range9, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range19, (double) (byte) 1, (double) (-1));
        boolean boolean26 = borderArrangement0.equals((java.lang.Object) range25);
        java.lang.Object obj27 = null;
        boolean boolean28 = borderArrangement0.equals(obj27);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range31.getCentralValue();
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range31, (double) 0L, (double) '4');
        boolean boolean38 = range35.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean40 = range35.contains((double) 0.0f);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range35, 10.0d);
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) range35);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range48 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range48, 100.0d, (double) 100);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range48, (double) ' ');
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range53, 10.0d);
        org.jfree.data.Range range58 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double59 = range58.getLength();
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range58, (double) (short) 10);
        double double62 = range61.getLowerBound();
        org.jfree.data.Range range64 = org.jfree.data.Range.expandToInclude(range61, (double) 100L);
        org.jfree.data.Range range67 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range70 = org.jfree.data.Range.expand(range67, 100.0d, (double) 100);
        boolean boolean71 = range64.equals((java.lang.Object) range67);
        org.jfree.data.Range range74 = org.jfree.data.Range.expand(range64, (double) 1.0f, (double) 'a');
        boolean boolean75 = range55.equals((java.lang.Object) 1.0f);
        org.jfree.data.Range range78 = org.jfree.data.Range.expand(range55, 43.0d, (double) (short) 10);
        org.jfree.data.Range range80 = org.jfree.data.Range.expandToInclude(range78, 9999.0d);
        org.jfree.data.Range range83 = org.jfree.data.Range.expand(range80, (double) 1, 9999.0d);
        boolean boolean84 = borderArrangement0.equals((java.lang.Object) range83);
        org.jfree.chart.block.BorderArrangement borderArrangement85 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement85.clear();
        org.jfree.data.Range range89 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean90 = borderArrangement85.equals((java.lang.Object) range89);
        boolean boolean92 = range89.equals((java.lang.Object) (byte) 100);
        double double93 = range89.getCentralValue();
        java.lang.String str94 = range89.toString();
        org.jfree.data.Range range96 = org.jfree.data.Range.shift(range89, 540.0d);
        boolean boolean97 = borderArrangement0.equals((java.lang.Object) range96);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,10.0]" + "'", str13, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5.0d + "'", double32 == 5.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertNotNull(range83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 50.5d + "'", double93 == 50.5d);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Range[1.0,100.0]" + "'", str94, "Range[1.0,100.0]");
        org.junit.Assert.assertNotNull(range96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range35, (double) 1L);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range8, range35);
        org.jfree.data.Range range41 = org.jfree.data.Range.expand(range35, 107.0d, 0.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range41, (double) (short) 100);
        java.lang.String str44 = range41.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Range[-5456.0,52.0]" + "'", str44, "Range[-5456.0,52.0]");
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range8, (-1.0d), 100.0d);
        java.lang.String str22 = range21.toString();
        boolean boolean25 = range21.intersects(1011.0d, 50.5d);
        boolean boolean27 = range21.contains(0.0d);
        java.lang.String str28 = range21.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Range[100.0,10100.0]" + "'", str22, "Range[100.0,10100.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[100.0,10100.0]" + "'", str28, "Range[100.0,10100.0]");
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 0, (double) (byte) 10);
        org.jfree.data.Range range4 = org.jfree.data.Range.expandToInclude(range2, (double) (-1.0f));
        double double5 = range2.getCentralValue();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 5.0d + "'", double5 == 5.0d);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range8, (double) 0.0f, false);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range8, (double) 10L, (double) '#');
        double double31 = range30.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1300.0d + "'", double31 == 1300.0d);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        boolean boolean9 = range7.contains(27.5d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100.0f, (double) (byte) 10);
        boolean boolean4 = range2.contains((double) (short) 100);
        java.lang.String str5 = range2.toString();
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, (double) 10L);
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range7, (-4924.0d));
        java.lang.Class<?> wildcardClass10 = range9.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Range[100.0,10.0]" + "'", str5, "Range[100.0,10.0]");
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-6400.0d));
        java.lang.Class<?> wildcardClass12 = range11.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        java.lang.String str37 = range36.toString();
        org.jfree.data.Range range40 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double41 = range40.getCentralValue();
        double double42 = range40.getLowerBound();
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range45.getCentralValue();
        org.jfree.data.Range range48 = org.jfree.data.Range.shift(range45, (double) 1);
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range45, (double) (short) 10);
        org.jfree.data.Range range51 = org.jfree.data.Range.combine(range40, range45);
        org.jfree.data.Range range54 = org.jfree.data.Range.shift(range51, (double) '#', false);
        org.jfree.data.Range range57 = org.jfree.data.Range.shift(range51, 9999.0d, false);
        double double58 = range51.getUpperBound();
        boolean boolean59 = range36.equals((java.lang.Object) range51);
        double double60 = range36.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Range[0.0,100.0]" + "'", str37, "Range[0.0,100.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 5.0d + "'", double41 == 5.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 5.0d + "'", double46 == 5.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 100.0d + "'", double60 == 100.0d);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        java.lang.String str21 = range20.toString();
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range20, (double) (-1.0f));
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range23, 50.0d, true);
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range26, (double) 1);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (-1908.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Range[0.0,100.0]" + "'", str21, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 148.0d + "'", double29 == 148.0d);
        org.junit.Assert.assertNotNull(range31);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        boolean boolean28 = borderArrangement7.equals((java.lang.Object) 50.0d);
        borderArrangement7.clear();
        borderArrangement7.clear();
        borderArrangement7.clear();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, (double) 100L, true);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, (double) (-1L));
        java.lang.String str14 = range11.toString();
        boolean boolean17 = range11.intersects(1.5955855E7d, 27.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[100.0,200.0]" + "'", str14, "Range[100.0,200.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        boolean boolean28 = borderArrangement7.equals((java.lang.Object) 50.0d);
        borderArrangement7.clear();
        borderArrangement7.clear();
        org.jfree.chart.block.Block block31 = null;
        java.lang.Object obj32 = null;
        borderArrangement7.add(block31, obj32);
        org.jfree.chart.block.Block block34 = null;
        org.jfree.data.Range range37 = new org.jfree.data.Range((double) 10.0f, 5346.0d);
        double double39 = range37.constrain((double) 0L);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement7.add(block34, (java.lang.Object) range37);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) ' ', 265.0d);
        org.jfree.data.Range range5 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double6 = range5.getLength();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) (short) 10);
        double double9 = range5.getCentralValue();
        boolean boolean12 = range5.intersects((double) 100L, (double) (short) 0);
        boolean boolean14 = range5.contains((double) (short) 1);
        double double15 = range5.getUpperBound();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj19 = new java.lang.Object();
        boolean boolean20 = range18.equals(obj19);
        boolean boolean23 = range18.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double28 = range26.constrain(10.0d);
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range18, range26);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range18, (double) (short) 100, false);
        boolean boolean35 = range18.intersects((double) '#', (double) 0.0f);
        double double36 = range18.getUpperBound();
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, 100.0d, (double) 100);
        double double44 = range42.constrain((double) (short) 1);
        boolean boolean46 = range42.contains((double) '4');
        double double47 = range42.getLowerBound();
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range42, 100.0d);
        boolean boolean51 = range49.contains((double) (byte) -1);
        boolean boolean52 = range18.equals((java.lang.Object) boolean51);
        org.jfree.data.Range range55 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double56 = range55.getLength();
        double double58 = range55.constrain(0.0d);
        java.lang.String str59 = range55.toString();
        org.jfree.data.Range range62 = org.jfree.data.Range.shift(range55, (double) (short) 1, true);
        org.jfree.data.Range range64 = org.jfree.data.Range.expandToInclude(range62, (double) '4');
        org.jfree.data.Range range67 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double68 = range67.getCentralValue();
        org.jfree.data.Range range71 = org.jfree.data.Range.expand(range67, (double) 0L, (double) '4');
        boolean boolean74 = range71.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean76 = range71.contains((double) 0.0f);
        boolean boolean78 = range71.equals((java.lang.Object) (-1));
        boolean boolean79 = range64.equals((java.lang.Object) boolean78);
        org.jfree.data.Range range80 = org.jfree.data.Range.combine(range18, range64);
        org.jfree.data.Range range81 = org.jfree.data.Range.combine(range5, range18);
        boolean boolean82 = range2.equals((java.lang.Object) range18);
        boolean boolean85 = range18.intersects(6.0d, 97.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5.0d + "'", double9 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-9899.0d) + "'", double47 == (-9899.0d));
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 10.0d + "'", double56 == 10.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Range[0.0,10.0]" + "'", str59, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5.0d + "'", double68 == 5.0d);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertNotNull(range81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        double double7 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.0d + "'", double7 == 5.0d);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        java.lang.String str4 = range2.toString();
        org.jfree.data.Range range6 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) (-1.0f), (double) '#');
        double double10 = range9.getLowerBound();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range9, 265.0d, false);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, 100.0d, (double) 100);
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range16, (double) ' ');
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range21, 10.0d);
        boolean boolean26 = range21.intersects((double) 1L, 1.0d);
        boolean boolean27 = range9.equals((java.lang.Object) 1.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 'a', (double) '4');
        double double31 = range30.getLength();
        boolean boolean32 = range9.equals((java.lang.Object) range30);
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range2, range30);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Range[100.0,1.0]" + "'", str4, "Range[100.0,1.0]");
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-45.0d) + "'", double31 == (-45.0d));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range33);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) (-1L));
        org.jfree.data.Range range4 = org.jfree.data.Range.expandToInclude(range0, 16.0d);
        double double5 = range4.getLength();
        boolean boolean8 = range4.intersects((-6500.0d), (-39.5d));
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range4, (double) 10L);
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range10);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        java.lang.String str6 = range5.toString();
        double double7 = range5.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[-9899.0,10000.0]" + "'", str6, "Range[-9899.0,10000.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 19899.0d + "'", double7 == 19899.0d);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        double double39 = range38.getUpperBound();
        boolean boolean40 = borderArrangement0.equals((java.lang.Object) range38);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range38, (double) (-1));
        org.jfree.data.Range range44 = org.jfree.data.Range.expandToInclude(range42, 31.0d);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range42, 10009.0d, false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range47);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double14 = range13.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) (short) 10);
        double double17 = range16.getLowerBound();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) 100L);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range19, (double) 100L, true);
        boolean boolean23 = borderArrangement3.equals((java.lang.Object) 100L);
        borderArrangement3.clear();
        org.jfree.chart.block.Block block25 = null;
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range28.constrain(10.0d);
        boolean boolean33 = range28.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str34 = range28.toString();
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double38 = range37.getLength();
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range37, (double) (short) 10);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range40, (double) (-1));
        boolean boolean43 = range28.equals((java.lang.Object) range40);
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range40, 6676165.0d, true);
        org.jfree.data.Range range49 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj50 = new java.lang.Object();
        boolean boolean51 = range49.equals(obj50);
        boolean boolean54 = range49.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range57 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double59 = range57.constrain(10.0d);
        org.jfree.data.Range range60 = org.jfree.data.Range.combine(range49, range57);
        org.jfree.data.Range range63 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double64 = range63.getLength();
        org.jfree.data.Range range66 = org.jfree.data.Range.expandToInclude(range63, (double) (short) 10);
        double double67 = range66.getLowerBound();
        org.jfree.data.Range range69 = org.jfree.data.Range.expandToInclude(range66, (double) 100L);
        org.jfree.data.Range range72 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range75 = org.jfree.data.Range.expand(range72, 100.0d, (double) 100);
        boolean boolean76 = range69.equals((java.lang.Object) range72);
        org.jfree.data.Range range78 = org.jfree.data.Range.shift(range69, (double) 100);
        org.jfree.data.Range range79 = org.jfree.data.Range.combine(range60, range78);
        org.jfree.data.Range range82 = org.jfree.data.Range.expand(range79, (double) ' ', 1.0d);
        boolean boolean84 = range79.contains((-1.0d));
        org.jfree.data.Range range85 = org.jfree.data.Range.combine(range40, range79);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement3.add(block25, (java.lang.Object) range40);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Range[0.0,10.0]" + "'", str34, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertNotNull(range82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(range85);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.jfree.data.Range range2 = new org.jfree.data.Range(142.0d, 630.0d);
        boolean boolean4 = range2.contains(97.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 100L, (double) (short) 0);
        java.lang.String str10 = range2.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Range[0.0,10.0]" + "'", str10, "Range[0.0,10.0]");
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) (byte) 0);
        boolean boolean14 = borderArrangement3.equals((java.lang.Object) 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.jfree.data.Range range2 = new org.jfree.data.Range(142.0d, 0.0d);
        double double3 = range2.getUpperBound();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range6 = org.jfree.data.Range.expandToInclude(range2, 330.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 142.0d + "'", double4 == 142.0d);
        org.junit.Assert.assertNotNull(range6);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, (double) ' ');
        double double15 = range12.getLength();
        java.lang.String str16 = range12.toString();
        double double17 = range12.getLowerBound();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range12, (-1003.0d));
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range12, 48845.0d, (-1.9898E8d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2010.0d + "'", double15 == 2010.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Range[-1000.0,1010.0]" + "'", str16, "Range[-1000.0,1010.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1000.0d) + "'", double17 == (-1000.0d));
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (short) 1, (double) (-1L));
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range17.constrain(10.0d);
        boolean boolean22 = range17.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str23 = range17.toString();
        double double25 = range17.constrain((double) 100L);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range14, range17);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range26, 132.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Range[0.0,10.0]" + "'", str23, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        double double8 = range2.getLength();
        double double9 = range2.getUpperBound();
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range2, 142.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range2, 49.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range6, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range9, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) 10);
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range2, range16);
        double double18 = range16.getLowerBound();
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range16, (double) 100L, true);
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range16, 37.0d);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getCentralValue();
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range26, (double) 1);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range26, (double) 'a');
        boolean boolean33 = range31.equals((java.lang.Object) 100);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range31, 0.0d);
        double double36 = range35.getLowerBound();
        boolean boolean37 = range23.equals((java.lang.Object) range35);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.0d + "'", double7 == 5.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5.0d + "'", double27 == 5.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 97.0d + "'", double36 == 97.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range6, 10.0d, false);
        double double29 = range6.getLowerBound();
        boolean boolean32 = range6.intersects(75.5d, (-2006.0d));
        java.lang.String str33 = range6.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Range[0.0,530.0]" + "'", str33, "Range[0.0,530.0]");
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range7);
        double double15 = range2.constrain((double) (byte) 1);
        double double16 = range2.getCentralValue();
        double double17 = range2.getCentralValue();
        java.lang.Class<?> wildcardClass18 = range2.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.0d + "'", double17 == 5.0d);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.jfree.data.Range range2 = new org.jfree.data.Range(2010.0d, 340.0d);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range7, 100.0d, (double) 100);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range7, (double) ' ');
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, 10.0d);
        boolean boolean17 = range12.intersects((double) 1L, 1.0d);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range12, 55.0d, false);
        org.jfree.data.Range range21 = org.jfree.data.Range.combine(range2, range20);
        double double22 = range21.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range8, 340.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(range25);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (-4949.0d));
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range27, 340.0d);
        java.lang.String str30 = range29.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[-4949.0,340.0]" + "'", str30, "Range[-4949.0,340.0]");
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.jfree.data.Range range2 = new org.jfree.data.Range(254.0d, 6676175.0d);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str8 = range2.toString();
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, (double) (-1));
        double double14 = range13.getUpperBound();
        boolean boolean17 = range13.intersects(50.0d, 5.0d);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double21 = range20.getLength();
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range20, (double) (short) 10);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range20);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range2, range24);
        boolean boolean28 = range24.intersects((double) 0.0f, 15.0d);
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range24, 32.0d);
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range24, (double) ' ');
        boolean boolean35 = range24.intersects((-3011.0d), (double) '4');
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[0.0,10.0]" + "'", str8, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 99.0d + "'", double14 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = borderArrangement0.equals((java.lang.Object) 1.0f);
        java.lang.Object obj8 = null;
        boolean boolean9 = borderArrangement0.equals(obj8);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj13 = new java.lang.Object();
        boolean boolean14 = range12.equals(obj13);
        boolean boolean17 = range12.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range20.constrain(10.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range12, range20);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, 100.0d, (double) 100);
        boolean boolean39 = range32.equals((java.lang.Object) range35);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, (double) 100);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range23, range41);
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) range23);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.Block block47 = null;
        org.jfree.data.Range range48 = null;
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range48, (double) (short) 1);
        boolean boolean52 = range50.contains((double) 1.0f);
        org.jfree.data.Range range55 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean57 = range55.contains((double) 1L);
        boolean boolean58 = range50.equals((java.lang.Object) range55);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block47, (java.lang.Object) boolean58);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Boolean cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        borderArrangement7.clear();
        borderArrangement7.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double18 = range17.getLength();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range17, (double) (short) 10);
        double double21 = range17.getCentralValue();
        boolean boolean24 = range17.intersects((double) 100L, (double) (short) 0);
        boolean boolean26 = range17.contains((double) (short) 1);
        java.lang.Class<?> wildcardClass27 = range17.getClass();
        boolean boolean28 = borderArrangement7.equals((java.lang.Object) range17);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        double double37 = range36.getCentralValue();
        double double38 = range36.getLength();
        double double40 = range36.constrain((-9790.0d));
        double double42 = range36.constrain((-2006.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        boolean boolean5 = range2.contains((double) (byte) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) 10.0f);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, 11.0d);
        java.lang.String str11 = range10.toString();
        double double12 = range10.getUpperBound();
        org.jfree.data.Range range15 = new org.jfree.data.Range((double) (-1.0f), (double) '#');
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range10, range15);
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double20 = range19.getLength();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) (short) 10);
        double double23 = range22.getLowerBound();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) 100L);
        boolean boolean28 = range25.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range31.getLength();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) (short) 10);
        double double35 = range34.getLowerBound();
        boolean boolean37 = range34.contains((double) (byte) 0);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range34, (double) 1.0f, false);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range25, range40);
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double45 = range44.getLength();
        double double47 = range44.constrain(0.0d);
        java.lang.String str48 = range44.toString();
        org.jfree.data.Range range51 = org.jfree.data.Range.shift(range44, (double) (short) 1, true);
        org.jfree.data.Range range54 = org.jfree.data.Range.expand(range44, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range54, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range54, (double) 0L, false);
        org.jfree.data.Range range61 = org.jfree.data.Range.combine(range25, range60);
        org.jfree.chart.block.BorderArrangement borderArrangement62 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement62.clear();
        org.jfree.data.Range range66 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean67 = borderArrangement62.equals((java.lang.Object) range66);
        java.lang.Object obj68 = null;
        boolean boolean69 = borderArrangement62.equals(obj68);
        borderArrangement62.clear();
        org.jfree.data.Range range73 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double74 = range73.getCentralValue();
        org.jfree.data.Range range77 = org.jfree.data.Range.expand(range73, (double) 0L, (double) '4');
        boolean boolean80 = range77.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean82 = range77.contains((double) 0.0f);
        double double84 = range77.constrain((double) (byte) 100);
        org.jfree.data.Range range86 = org.jfree.data.Range.expandToInclude(range77, (double) (-1.0f));
        double double87 = range86.getCentralValue();
        boolean boolean88 = borderArrangement62.equals((java.lang.Object) range86);
        org.jfree.data.Range range89 = org.jfree.data.Range.combine(range25, range86);
        org.jfree.data.Range range90 = org.jfree.data.Range.combine(range15, range25);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[-989.0,121.0]" + "'", str11, "Range[-989.0,121.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 121.0d + "'", double12 == 121.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Range[0.0,10.0]" + "'", str48, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 5.0d + "'", double74 == 5.0d);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertNotNull(range86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 264.5d + "'", double87 == 264.5d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(range89);
        org.junit.Assert.assertNotNull(range90);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range28.constrain(10.0d);
        boolean boolean33 = range28.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str34 = range28.toString();
        boolean boolean35 = range24.equals((java.lang.Object) range28);
        double double36 = range24.getLowerBound();
        double double38 = range24.constrain((-4949.0d));
        org.jfree.data.Range range41 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj42 = new java.lang.Object();
        boolean boolean43 = range41.equals(obj42);
        boolean boolean46 = range41.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range49 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double51 = range49.constrain(10.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.combine(range41, range49);
        org.jfree.data.Range range55 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double56 = range55.getLength();
        org.jfree.data.Range range58 = org.jfree.data.Range.expandToInclude(range55, (double) (short) 10);
        double double59 = range58.getLowerBound();
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range58, (double) 100L);
        org.jfree.data.Range range64 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range67 = org.jfree.data.Range.expand(range64, 100.0d, (double) 100);
        boolean boolean68 = range61.equals((java.lang.Object) range64);
        org.jfree.data.Range range70 = org.jfree.data.Range.shift(range61, (double) 100);
        org.jfree.data.Range range71 = org.jfree.data.Range.combine(range52, range70);
        org.jfree.data.Range range74 = org.jfree.data.Range.expand(range71, (double) ' ', 1.0d);
        java.lang.String str75 = range71.toString();
        org.jfree.data.Range range77 = org.jfree.data.Range.expandToInclude(range71, (double) 1L);
        org.jfree.data.Range range79 = org.jfree.data.Range.expandToInclude(range71, (-100.0d));
        org.jfree.data.Range range80 = org.jfree.data.Range.combine(range24, range79);
        double double82 = range24.constrain(2010.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Range[0.0,10.0]" + "'", str34, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 10.0d + "'", double56 == 10.0d);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Range[0.0,200.0]" + "'", str75, "Range[0.0,200.0]");
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 100.0d + "'", double82 == 100.0d);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range10, (double) 0L, (double) '4');
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range10, (double) ' ');
        boolean boolean17 = borderArrangement0.equals((java.lang.Object) ' ');
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj21 = new java.lang.Object();
        boolean boolean22 = range20.equals(obj21);
        boolean boolean25 = range20.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        boolean boolean35 = range20.equals((java.lang.Object) 100L);
        double double36 = range20.getLength();
        boolean boolean37 = borderArrangement0.equals((java.lang.Object) range20);
        org.jfree.data.Range range40 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double41 = range40.getCentralValue();
        double double42 = range40.getLowerBound();
        double double43 = range40.getLowerBound();
        double double44 = range40.getCentralValue();
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range40, 110.0d, false);
        boolean boolean48 = borderArrangement0.equals((java.lang.Object) range40);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 5.0d + "'", double41 == 5.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 5.0d + "'", double44 == 5.0d);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (-1.0f));
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.Block block7 = null;
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        org.jfree.data.Range range18 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range18, 100.0d, (double) 100);
        boolean boolean24 = range18.intersects((double) 'a', (-9899.0d));
        double double25 = range18.getUpperBound();
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range18, 110.0d, (double) 1);
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range10, range28);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block7, (java.lang.Object) range29);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range29);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) (short) 100, false);
        java.lang.String str17 = range2.toString();
        double double19 = range2.constrain(99.0d);
        boolean boolean21 = range2.contains(0.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range2, (double) (byte) 1);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range2, 67.5d);
        double double26 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[0.0,10.0]" + "'", str17, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5.0d + "'", double26 == 5.0d);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) (short) 100, false);
        boolean boolean19 = range2.intersects((double) '#', (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range2, 10000.0d, 1011.0d);
        java.lang.Class<?> wildcardClass23 = range2.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        org.jfree.data.Range range2 = new org.jfree.data.Range(300.0d, 6676165.0d);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 265.0d);
        double double11 = range2.constrain(15.0d);
        double double12 = range2.getLowerBound();
        double double14 = range2.constrain(92.5d);
        double double15 = range2.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 15.0d + "'", double11 == 15.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 42.0d + "'", double15 == 42.0d);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.chart.block.Block block5 = null;
        org.jfree.data.Range range6 = null;
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        borderArrangement0.add(block5, (java.lang.Object) range6);
        org.jfree.data.Range range12 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean14 = range12.contains((double) 1L);
        boolean boolean17 = range12.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, 265.0d);
        boolean boolean20 = borderArrangement0.equals((java.lang.Object) 265.0d);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 1L, (double) (byte) 0);
        java.lang.String str24 = range23.toString();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range23, 0.0d);
        boolean boolean27 = borderArrangement0.equals((java.lang.Object) range23);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 100.0f, (double) (byte) 10);
        boolean boolean32 = range30.contains((double) (short) 100);
        java.lang.String str33 = range30.toString();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range30, (double) 10L);
        boolean boolean36 = borderArrangement0.equals((java.lang.Object) 10L);
        org.jfree.chart.block.Block block37 = null;
        org.jfree.data.Range range40 = new org.jfree.data.Range(5.0d, 630.0d);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block37, (java.lang.Object) 5.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Range[1.0,0.0]" + "'", str24, "Range[1.0,0.0]");
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Range[100.0,10.0]" + "'", str33, "Range[100.0,10.0]");
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getCentralValue();
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        double double24 = range21.constrain(0.0d);
        java.lang.String str25 = range21.toString();
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range21, (double) (short) 1, true);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range21, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range2, range31);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range31, (double) '#');
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range37, 19.0d, (-4924.0d));
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range40, (double) ' ');
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range40, 1340.0d);
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range40, 0.0d);
        double double47 = range46.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Range[0.0,10.0]" + "'", str25, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-39155.0d) + "'", double47 == (-39155.0d));
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range13 = null;
        org.jfree.data.Range range14 = org.jfree.data.Range.combine(range5, range13);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertNotNull(range14);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        boolean boolean37 = range32.contains((-1.0d));
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range32, 0.0d);
        org.jfree.data.Range range42 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range42);
        double double44 = range43.getLowerBound();
        boolean boolean46 = range43.contains(50.5d);
        boolean boolean48 = range43.contains(1026.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range5, 100.0d);
        boolean boolean14 = range12.contains((double) (byte) -1);
        double double16 = range12.constrain((double) 0.0f);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range12, 50.0d, 90.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(range19);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getLength();
        double double12 = range9.constrain(0.0d);
        java.lang.String str13 = range9.toString();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, (double) (short) 1, true);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range9, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range19, (double) (byte) 1, (double) (-1));
        boolean boolean26 = borderArrangement0.equals((java.lang.Object) range25);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.Block block29 = null;
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        org.jfree.data.Range range41 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range41, (double) (byte) 0, (double) (-1L));
        double double45 = range41.getUpperBound();
        org.jfree.data.Range range48 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double49 = range48.getLength();
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range48, (double) (short) 10);
        double double52 = range51.getLowerBound();
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range51, (double) 100L);
        boolean boolean57 = range54.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range60 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double61 = range60.getLength();
        org.jfree.data.Range range63 = org.jfree.data.Range.expandToInclude(range60, (double) (short) 10);
        double double64 = range63.getLowerBound();
        boolean boolean66 = range63.contains((double) (byte) 0);
        org.jfree.data.Range range69 = org.jfree.data.Range.shift(range63, (double) 1.0f, false);
        org.jfree.data.Range range70 = org.jfree.data.Range.combine(range54, range69);
        double double71 = range70.getLength();
        org.jfree.data.Range range74 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double76 = range74.constrain(10.0d);
        boolean boolean79 = range74.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str80 = range74.toString();
        boolean boolean81 = range70.equals((java.lang.Object) range74);
        boolean boolean82 = range41.equals((java.lang.Object) range74);
        boolean boolean83 = range35.equals((java.lang.Object) range74);
        org.jfree.data.Range range84 = null;
        org.jfree.data.Range range85 = org.jfree.data.Range.combine(range74, range84);
        boolean boolean87 = range85.equals((java.lang.Object) 0L);
        org.jfree.data.Range range89 = org.jfree.data.Range.expandToInclude(range85, 330.0d);
        org.jfree.data.Range range91 = org.jfree.data.Range.expandToInclude(range85, 4.5d);
        org.jfree.data.Range range94 = org.jfree.data.Range.shift(range85, (double) (byte) 1, false);
        boolean boolean96 = range94.contains(1.5955855E7d);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block29, (java.lang.Object) 1.5955855E7d);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,10.0]" + "'", str13, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 100.0d + "'", double71 == 100.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 10.0d + "'", double76 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Range[0.0,10.0]" + "'", str80, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(range85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(range89);
        org.junit.Assert.assertNotNull(range91);
        org.junit.Assert.assertNotNull(range94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) (short) 100, false);
        java.lang.String str17 = range2.toString();
        double double19 = range2.constrain(99.0d);
        boolean boolean21 = range2.contains(0.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range2, (double) (byte) 1);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range2, 67.5d);
        double double26 = range2.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[0.0,10.0]" + "'", str17, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) (-1L));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-2006.0d), (-3011.0d));
        org.junit.Assert.assertNotNull(range5);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        double double10 = range2.constrain((double) 10L);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range2, 38.0d);
        double double13 = range12.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 99.0d + "'", double13 == 99.0d);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.jfree.data.Range range2 = new org.jfree.data.Range(33.75d, 5346.0d);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range6, 10.0d, false);
        double double29 = range6.getCentralValue();
        double double30 = range6.getCentralValue();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range6, (double) ' ', false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 265.0d + "'", double29 == 265.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 265.0d + "'", double30 == 265.0d);
        org.junit.Assert.assertNotNull(range33);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        java.lang.String str36 = range32.toString();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) 1L);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range38, 0.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Range[0.0,200.0]" + "'", str36, "Range[0.0,200.0]");
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range40);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range2, (double) (byte) 10);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range2, (double) 10.0f, 15.0d);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range15, 5.5d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range12, (double) (byte) 1, (double) (-1));
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) (short) 10);
        double double25 = range24.getLowerBound();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) 100L);
        boolean boolean30 = range27.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range33.getLength();
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range33, (double) (short) 10);
        double double37 = range36.getLowerBound();
        boolean boolean39 = range36.contains((double) (byte) 0);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range36, (double) 1.0f, false);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range27, range42);
        double double44 = range43.getLength();
        org.jfree.data.Range range47 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double48 = range47.getLength();
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range47, (double) (short) 10);
        double double51 = range50.getLowerBound();
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range50, (double) 100L);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range53, (double) 100L, true);
        boolean boolean57 = range43.equals((java.lang.Object) range53);
        double double58 = range53.getCentralValue();
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range18, range53);
        org.jfree.data.Range range62 = new org.jfree.data.Range((double) 10.0f, 0.0d);
        org.jfree.data.Range range63 = org.jfree.data.Range.combine(range59, range62);
        org.jfree.data.Range range66 = org.jfree.data.Range.expand(range59, 5097.5d, (double) ' ');
        double double67 = range66.getLength();
        boolean boolean70 = range66.intersects(0.0d, (-9.0d));
        org.jfree.data.Range range72 = org.jfree.data.Range.shift(range66, (-445.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.5955855E7d + "'", double67 == 1.5955855E7d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(range72);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        java.lang.String str36 = range32.toString();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) 1L);
        double double40 = range32.constrain((double) 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Range[0.0,200.0]" + "'", str36, "Range[0.0,200.0]");
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range2, (-6400.0d), 37.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, 330.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range13, 51.0d, 1.0d);
        double double19 = range18.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 530.0d + "'", double19 == 530.0d);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, (double) 100.0f);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 10);
        org.jfree.data.Range range15 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range15, (double) (-1));
        double double18 = range17.getUpperBound();
        boolean boolean21 = range17.intersects(50.0d, 5.0d);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range17, range24);
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range10, range24);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range10, 101.0d, (-4949.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 99.0d + "'", double18 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range32);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range7);
        boolean boolean15 = range13.contains((double) (short) 10);
        double double17 = range13.constrain((double) 0.0f);
        boolean boolean19 = range13.contains((-3000.0d));
        java.lang.Class<?> wildcardClass20 = range13.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement10 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean12 = borderArrangement10.equals((java.lang.Object) (-1L));
        borderArrangement10.clear();
        boolean boolean14 = range9.equals((java.lang.Object) borderArrangement10);
        org.jfree.chart.block.Block block15 = null;
        java.lang.Object obj16 = null;
        borderArrangement10.add(block15, obj16);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range20, (double) (-1));
        double double23 = range22.getUpperBound();
        boolean boolean26 = range22.intersects(50.0d, 5.0d);
        org.jfree.data.Range range29 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range29.getLength();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) (short) 10);
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range22, range29);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range22, (double) (byte) 10);
        boolean boolean36 = borderArrangement10.equals((java.lang.Object) range22);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double40 = range39.getUpperBound();
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getCentralValue();
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range43, (double) 1);
        org.jfree.data.Range range49 = org.jfree.data.Range.expand(range46, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range50 = org.jfree.data.Range.combine(range39, range46);
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range46, (double) '4');
        boolean boolean53 = borderArrangement10.equals((java.lang.Object) '4');
        boolean boolean54 = borderArrangement0.equals((java.lang.Object) borderArrangement10);
        org.jfree.data.Range range57 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj58 = new java.lang.Object();
        boolean boolean59 = range57.equals(obj58);
        boolean boolean62 = range57.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range65 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double67 = range65.constrain(10.0d);
        org.jfree.data.Range range68 = org.jfree.data.Range.combine(range57, range65);
        org.jfree.data.Range range71 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj72 = new java.lang.Object();
        boolean boolean73 = range71.equals(obj72);
        boolean boolean76 = range71.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range79 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double81 = range79.constrain(10.0d);
        org.jfree.data.Range range82 = org.jfree.data.Range.combine(range71, range79);
        org.jfree.data.Range range83 = org.jfree.data.Range.combine(range57, range71);
        boolean boolean84 = borderArrangement10.equals((java.lang.Object) range57);
        borderArrangement10.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 99.0d + "'", double23 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 5.0d + "'", double44 == 5.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 10.0d + "'", double81 == 10.0d);
        org.junit.Assert.assertNotNull(range82);
        org.junit.Assert.assertNotNull(range83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1.0d, (double) 10.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 265.0d, (double) '4');
        double double6 = range2.getCentralValue();
        double double7 = range2.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.5d + "'", double6 == 5.5d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 9.0d + "'", double7 == 9.0d);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10L, 275.0d);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        boolean boolean38 = range32.intersects((double) 1L, (double) (byte) 1);
        org.jfree.data.Range range41 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range41, (double) 0);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range32, range43);
        double double45 = range32.getUpperBound();
        double double46 = range32.getLowerBound();
        boolean boolean49 = range32.intersects((double) (byte) 1, 530.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 200.0d + "'", double45 == 200.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = range4.equals((java.lang.Object) (byte) 100);
        double double8 = range4.getCentralValue();
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) (short) 1, (double) (-1));
        boolean boolean12 = range4.equals((java.lang.Object) range11);
        double double13 = range11.getCentralValue();
        double double14 = range11.getUpperBound();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 50.5d + "'", double8 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-164.5d), 100.0d);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range6, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range9, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) 10);
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range2, range16);
        boolean boolean20 = range2.intersects(150.0d, (double) 'a');
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range2, (double) 100, 19.0d);
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range2, (double) (byte) 0, false);
        boolean boolean29 = range26.intersects((double) (short) -1, 16.0d);
        double double31 = range26.constrain(635.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.0d + "'", double7 == 5.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (byte) 0, (double) (-1L));
        double double6 = range2.getUpperBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) 10);
        org.jfree.data.Range range11 = new org.jfree.data.Range(11.0d, (-1.0d));
        org.jfree.data.Range range12 = org.jfree.data.Range.combine(range8, range11);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range8, 55.0d, 121.0d);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range15, (double) 10);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, 100.0d, (double) 100);
        boolean boolean25 = range19.intersects((double) 'a', (-9899.0d));
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range19, (double) (-1.0f), true);
        boolean boolean29 = borderArrangement0.equals((java.lang.Object) true);
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        java.lang.Class<?> wildcardClass39 = range35.getClass();
        boolean boolean40 = borderArrangement0.equals((java.lang.Object) range35);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        boolean boolean5 = range2.contains((double) (-1L));
        double double6 = range2.getLength();
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, 100.0d, (double) 100);
        double double13 = range9.getLength();
        boolean boolean14 = range2.equals((java.lang.Object) double13);
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement18 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean20 = borderArrangement18.equals((java.lang.Object) (-1L));
        borderArrangement18.clear();
        boolean boolean22 = range17.equals((java.lang.Object) borderArrangement18);
        org.jfree.chart.block.Block block23 = null;
        java.lang.Object obj24 = null;
        borderArrangement18.add(block23, obj24);
        org.jfree.data.Range range28 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range28, (double) (-1));
        double double31 = range30.getUpperBound();
        boolean boolean34 = range30.intersects(50.0d, 5.0d);
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double38 = range37.getLength();
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range37, (double) (short) 10);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range30, range37);
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range30, (double) (byte) 10);
        boolean boolean44 = borderArrangement18.equals((java.lang.Object) range30);
        borderArrangement18.clear();
        borderArrangement18.clear();
        boolean boolean47 = range2.equals((java.lang.Object) borderArrangement18);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 99.0d + "'", double13 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 99.0d + "'", double31 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        org.jfree.data.Range range24 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range24, (double) (byte) 0, (double) (-1L));
        double double28 = range24.getUpperBound();
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range31.getLength();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) (short) 10);
        double double35 = range34.getLowerBound();
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range34, (double) 100L);
        boolean boolean40 = range37.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getLength();
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range43, (double) (short) 10);
        double double47 = range46.getLowerBound();
        boolean boolean49 = range46.contains((double) (byte) 0);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range46, (double) 1.0f, false);
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range37, range52);
        double double54 = range53.getLength();
        org.jfree.data.Range range57 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double59 = range57.constrain(10.0d);
        boolean boolean62 = range57.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str63 = range57.toString();
        boolean boolean64 = range53.equals((java.lang.Object) range57);
        boolean boolean65 = range24.equals((java.lang.Object) range57);
        boolean boolean66 = range8.equals((java.lang.Object) range24);
        org.jfree.data.Range range69 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double70 = range69.getUpperBound();
        org.jfree.data.Range range71 = org.jfree.data.Range.combine(range8, range69);
        double double73 = range69.constrain((-1.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Range[0.0,10.0]" + "'", str63, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-164.5d), 10000.0d);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement10 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean12 = borderArrangement10.equals((java.lang.Object) (-1L));
        borderArrangement10.clear();
        boolean boolean14 = range9.equals((java.lang.Object) borderArrangement10);
        org.jfree.chart.block.Block block15 = null;
        java.lang.Object obj16 = null;
        borderArrangement10.add(block15, obj16);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range20, (double) (-1));
        double double23 = range22.getUpperBound();
        boolean boolean26 = range22.intersects(50.0d, 5.0d);
        org.jfree.data.Range range29 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range29.getLength();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) (short) 10);
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range22, range29);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range22, (double) (byte) 10);
        boolean boolean36 = borderArrangement10.equals((java.lang.Object) range22);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double40 = range39.getUpperBound();
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getCentralValue();
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range43, (double) 1);
        org.jfree.data.Range range49 = org.jfree.data.Range.expand(range46, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range50 = org.jfree.data.Range.combine(range39, range46);
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range46, (double) '4');
        boolean boolean53 = borderArrangement10.equals((java.lang.Object) '4');
        boolean boolean54 = borderArrangement0.equals((java.lang.Object) borderArrangement10);
        borderArrangement10.clear();
        borderArrangement10.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 99.0d + "'", double23 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 5.0d + "'", double44 == 5.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, (double) ' ');
        double double15 = range12.getLength();
        double double16 = range12.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2010.0d + "'", double15 == 2010.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1010.0d + "'", double16 == 1010.0d);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (-1L), (double) (short) 100);
        boolean boolean4 = range2.contains((double) 1);
        org.jfree.data.Range range7 = new org.jfree.data.Range((double) (byte) 10, 82.5d);
        org.jfree.data.Range range8 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj12 = new java.lang.Object();
        boolean boolean13 = range11.equals(obj12);
        boolean boolean16 = range11.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double21 = range19.constrain(10.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range19);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range11, (double) (short) 100, false);
        double double26 = range25.getLowerBound();
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range2, range25);
        double double29 = range27.constrain(48845.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 110.0d + "'", double29 == 110.0d);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 0);
        java.lang.String str3 = range2.toString();
        org.jfree.data.Range range4 = null;
        org.jfree.data.Range range6 = org.jfree.data.Range.expandToInclude(range4, 10.0d);
        double double7 = range6.getLength();
        double double9 = range6.constrain((double) (-1));
        double double10 = range6.getCentralValue();
        double double11 = range6.getLowerBound();
        org.jfree.data.Range range12 = org.jfree.data.Range.combine(range2, range6);
        boolean boolean15 = range2.intersects((-1000.0d), 5100.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Range[0.0,0.0]" + "'", str3, "Range[0.0,0.0]");
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        org.jfree.data.Range range39 = null;
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range39, (double) (short) 1);
        boolean boolean43 = range41.contains((double) 1.0f);
        org.jfree.data.Range range46 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean48 = range46.contains((double) 1L);
        boolean boolean49 = range41.equals((java.lang.Object) range46);
        org.jfree.data.Range range50 = org.jfree.data.Range.combine(range34, range41);
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range34, 75.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        org.jfree.data.Range range2 = new org.jfree.data.Range(35.0d, (double) 0.0f);
        org.jfree.data.Range range5 = new org.jfree.data.Range(1.0d, (double) 10.0f);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, 265.0d, (double) '4');
        org.jfree.data.Range range9 = org.jfree.data.Range.combine(range2, range5);
        org.jfree.data.Range range12 = new org.jfree.data.Range((double) 1.0f, 10000.0d);
        boolean boolean13 = range9.equals((java.lang.Object) 1.0f);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        org.jfree.data.Range range6 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range6, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range9);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range9, (double) '4');
        boolean boolean18 = range9.intersects(10100.0d, 5100.0d);
        java.lang.Class<?> wildcardClass19 = range9.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.0d + "'", double7 == 5.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 265.0d);
        double double11 = range2.constrain(15.0d);
        double double12 = range2.getCentralValue();
        java.lang.Class<?> wildcardClass13 = range2.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 15.0d + "'", double11 == 15.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 31.0d + "'", double12 == 31.0d);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        double double27 = range15.getLength();
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj31 = new java.lang.Object();
        boolean boolean32 = range30.equals(obj31);
        boolean boolean35 = range30.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range30, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range30, (double) (byte) 10);
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range30, (double) 10.0f, 15.0d);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range15, range43);
        double double45 = range43.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 30.0d + "'", double45 == 30.0d);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        org.jfree.data.Range range29 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range29.constrain(10.0d);
        double double32 = range29.getLowerBound();
        boolean boolean35 = range29.intersects((double) (byte) 0, 0.0d);
        double double37 = range29.constrain((double) (byte) -1);
        double double38 = range29.getUpperBound();
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range29, 1011.0d);
        org.jfree.data.Range range43 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range43, (double) (byte) 0, (double) (-1L));
        double double47 = range43.getUpperBound();
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range43, (-1.0d));
        org.jfree.data.Range range52 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range55 = org.jfree.data.Range.expand(range52, 100.0d, (double) 100);
        double double56 = range55.getLowerBound();
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range55, (double) (byte) -1, (double) 100L);
        double double61 = range55.constrain(265.0d);
        java.lang.String str62 = range55.toString();
        boolean boolean65 = range55.intersects(101.0d, (double) (byte) 100);
        org.jfree.data.Range range66 = org.jfree.data.Range.combine(range49, range55);
        boolean boolean67 = range29.equals((java.lang.Object) range49);
        double double68 = range29.getUpperBound();
        org.jfree.data.Range range69 = org.jfree.data.Range.combine(range5, range29);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-9899.0d) + "'", double56 == (-9899.0d));
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 265.0d + "'", double61 == 265.0d);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Range[-9899.0,10000.0]" + "'", str62, "Range[-9899.0,10000.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 10.0d + "'", double68 == 10.0d);
        org.junit.Assert.assertNotNull(range69);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range8, 0.0d);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range26, (double) (-1.0f), 132.0d);
        double double31 = range29.constrain(100.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range29, 100.0d, true);
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range34, 0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range36);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100.0f, (double) (byte) 10);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, 0.0d, false);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range5, 67.5d, false);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 0);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj8 = new java.lang.Object();
        boolean boolean9 = range7.equals(obj8);
        boolean boolean12 = range7.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range15.constrain(10.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range15);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) (short) 10);
        double double25 = range24.getLowerBound();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) 100L);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range30, 100.0d, (double) 100);
        boolean boolean34 = range27.equals((java.lang.Object) range30);
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range27, (double) 100);
        org.jfree.data.Range range37 = org.jfree.data.Range.combine(range18, range36);
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range37, (double) ' ', 1.0d);
        boolean boolean42 = range37.contains((-1.0d));
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range37, 0.0d);
        org.jfree.data.Range range47 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range37, range47);
        boolean boolean49 = range2.equals((java.lang.Object) range37);
        boolean boolean52 = range37.intersects(97.0d, 410.5d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range8, (double) 1, true);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range24, 200.0d, true);
        double double28 = range27.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 201.0d + "'", double28 == 201.0d);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        org.jfree.data.Range range2 = new org.jfree.data.Range(5.5d, 0.0d);
        boolean boolean5 = range2.intersects((double) (short) -1, 150.5d);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range2, 264.5d, 1.989802E8d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(range8);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, 265.0d);
        org.jfree.data.Range range3 = null;
        org.jfree.data.Range range4 = org.jfree.data.Range.combine(range2, range3);
        org.jfree.data.Range range7 = org.jfree.data.Range.expand(range2, 19899.0d, 19757.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, 275.0d, true);
        boolean boolean12 = range2.contains((double) (short) -1);
        double double13 = range2.getCentralValue();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 138.0d + "'", double13 == 138.0d);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        double double37 = range36.getCentralValue();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range36, (double) 1);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range39, 10100.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range41);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.5d, 11.0d);
        double double3 = range2.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 11.5d + "'", double3 == 11.5d);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, 10.0d);
        double double3 = range2.getLength();
        double double5 = range2.constrain((double) (-1));
        boolean boolean7 = range2.contains(55.0d);
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) '#', 99.0d);
        double double12 = range10.constrain(42.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range15.constrain(10.0d);
        boolean boolean20 = range15.intersects((double) 10.0f, (double) (-1.0f));
        double double22 = range15.constrain(0.0d);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range15, (double) 0.0f, (double) ' ');
        double double26 = range25.getUpperBound();
        org.jfree.data.Range range29 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean30 = range25.equals((java.lang.Object) range29);
        org.jfree.data.Range range33 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range33, (double) (-1));
        double double36 = range35.getUpperBound();
        double double37 = range35.getCentralValue();
        double double38 = range35.getLowerBound();
        org.jfree.data.Range range41 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range41.constrain(10.0d);
        double double44 = range41.getUpperBound();
        java.lang.String str45 = range41.toString();
        boolean boolean46 = range35.equals((java.lang.Object) str45);
        double double47 = range35.getLowerBound();
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range29, range35);
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range29, 19899.0d);
        double double52 = range50.constrain((-6500.0d));
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range10, range50);
        org.jfree.data.Range range54 = org.jfree.data.Range.combine(range2, range53);
        double double56 = range54.constrain(121.0d);
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 42.0d + "'", double12 == 42.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 330.0d + "'", double26 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 99.0d + "'", double36 == 99.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 54.0d + "'", double37 == 54.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 9.0d + "'", double38 == 9.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Range[0.0,10.0]" + "'", str45, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 9.0d + "'", double47 == 9.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 142.0d + "'", double52 == 142.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 121.0d + "'", double56 == 121.0d);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 100L, (double) (short) 0);
        double double10 = range2.getUpperBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double14 = range13.getCentralValue();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range13, (double) 1);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range13, (double) 'a');
        boolean boolean20 = range13.equals((java.lang.Object) 10);
        boolean boolean22 = range13.contains((double) 1.0f);
        boolean boolean25 = range13.intersects(10.0d, (double) 0);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range2, range13);
        java.lang.String str27 = range2.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5.0d + "'", double14 == 5.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Range[0.0,10.0]" + "'", str27, "Range[0.0,10.0]");
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        java.lang.String str14 = range10.toString();
        double double15 = range10.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[0.0,10.0]" + "'", str14, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) (short) 100, false);
        java.lang.String str17 = range2.toString();
        double double19 = range2.constrain(99.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range2, 340.0d, 4.5d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[0.0,10.0]" + "'", str17, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range22);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.jfree.data.Range range2 = new org.jfree.data.Range(118.0d, (double) (short) 0);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10L, (-39.5d));
        boolean boolean5 = range2.intersects(135.0d, (-4949.0d));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (double) (byte) -1, true);
        double double12 = range2.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 99.0d + "'", double12 == 99.0d);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-164.5d), (double) 'a');
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain((double) '#');
        double double14 = range5.constrain((double) (short) -1);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range5, (double) (-1));
        double double17 = range5.getLowerBound();
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range5, (-9.0d), 10100.0d);
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double24 = range23.getCentralValue();
        boolean boolean26 = range23.contains((double) (byte) 0);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range23, (double) 100.0f, (double) 10.0f);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range29, 11.0d);
        double double32 = range29.getUpperBound();
        boolean boolean35 = range29.intersects(9.0d, (double) 1.0f);
        boolean boolean36 = range5.equals((java.lang.Object) 1.0f);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9899.0d) + "'", double17 == (-9899.0d));
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5.0d + "'", double24 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 110.0d + "'", double32 == 110.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) (-1.0f));
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj12 = new java.lang.Object();
        boolean boolean13 = range11.equals(obj12);
        boolean boolean16 = range11.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range11, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range11, (double) (short) -1);
        double double23 = range21.constrain(50.5d);
        double double25 = range21.constrain((double) (short) 10);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range21, (double) 1.0f, false);
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range5, range21);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range21, 132.0d);
        java.lang.String str32 = range31.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Range[0.0,142.0]" + "'", str32, "Range[0.0,142.0]");
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.Range.shift(range0, 31.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double8 = range2.getUpperBound();
        double double9 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5.0d + "'", double9 == 5.0d);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        org.jfree.data.Range range6 = org.jfree.data.Range.expandToInclude(range2, (double) (byte) 0);
        double double7 = range2.getLowerBound();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        borderArrangement3.clear();
        borderArrangement3.clear();
        org.jfree.chart.block.BlockContainer blockContainer13 = null;
        java.awt.Graphics2D graphics2D14 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D16 = borderArrangement3.arrange(blockContainer13, graphics2D14, rectangleConstraint15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (double) (-1.0f), true);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 121.0d, 49.0d);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range11, 48845.0d, true);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range34 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double35 = range34.getLength();
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range34, (double) (short) 10);
        double double38 = range37.getLowerBound();
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range37, (double) 100L);
        org.jfree.data.Range range43 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range43, 100.0d, (double) 100);
        boolean boolean47 = range40.equals((java.lang.Object) range43);
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range40, (double) 1.0f, (double) 'a');
        double double51 = range40.getLength();
        boolean boolean52 = borderArrangement0.equals((java.lang.Object) range40);
        org.jfree.chart.block.Block block53 = null;
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block53, (java.lang.Object) (-209948.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 100.0d + "'", double51 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(1.0d, (double) (short) 10);
        double double8 = range2.getCentralValue();
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj12 = new java.lang.Object();
        boolean boolean13 = range11.equals(obj12);
        boolean boolean16 = range11.intersects(1.0d, (double) (short) 10);
        double double17 = range11.getCentralValue();
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, 49.0d, 50.0d);
        boolean boolean22 = range20.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range2, range20);
        boolean boolean25 = range20.contains((double) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.0d + "'", double17 == 5.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getLength();
        double double12 = range9.constrain(0.0d);
        java.lang.String str13 = range9.toString();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, (double) (short) 1, true);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range9, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range19, (double) (byte) 1, (double) (-1));
        boolean boolean26 = borderArrangement0.equals((java.lang.Object) range25);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double30 = range29.getUpperBound();
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range33.getCentralValue();
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range33, (double) 1);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range29, range36);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range25, range29);
        org.jfree.data.Range range44 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range47 = org.jfree.data.Range.expand(range44, 100.0d, (double) 100);
        double double48 = range47.getLowerBound();
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range47, (double) (byte) -1, (double) 100L);
        boolean boolean53 = range47.contains(99.0d);
        double double54 = range47.getUpperBound();
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range47, 9999.0d, 335.0d);
        double double58 = range57.getUpperBound();
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range29, range57);
        org.jfree.data.Range range62 = new org.jfree.data.Range(0.0d, (double) (-1L));
        org.jfree.data.Range range65 = org.jfree.data.Range.expand(range62, 49.0d, 10.0d);
        org.jfree.data.Range range68 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double70 = range68.constrain(10.0d);
        boolean boolean73 = range68.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str74 = range68.toString();
        double double76 = range68.constrain((double) 100L);
        org.jfree.data.Range range77 = org.jfree.data.Range.combine(range62, range68);
        org.jfree.data.Range range78 = org.jfree.data.Range.combine(range57, range68);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,10.0]" + "'", str13, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5.0d + "'", double34 == 5.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-9899.0d) + "'", double48 == (-9899.0d));
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10000.0d + "'", double54 == 10000.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 6676165.0d + "'", double58 == 6676165.0d);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Range[0.0,10.0]" + "'", str74, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 10.0d + "'", double76 == 10.0d);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range78);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double9 = range8.getLength();
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range8, (double) (short) 10);
        double double12 = range11.getLowerBound();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) 100L);
        boolean boolean15 = borderArrangement0.equals((java.lang.Object) 100L);
        borderArrangement0.clear();
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double20 = range19.getLength();
        double double22 = range19.constrain(0.0d);
        java.lang.String str23 = range19.toString();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range19, (double) (short) 1, true);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range19, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range29, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range29, (double) (byte) 1, (double) (-1));
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double39 = range38.getLength();
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range38, (double) (short) 10);
        double double42 = range41.getLowerBound();
        org.jfree.data.Range range44 = org.jfree.data.Range.expandToInclude(range41, (double) 100L);
        boolean boolean47 = range44.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range50 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double51 = range50.getLength();
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range50, (double) (short) 10);
        double double54 = range53.getLowerBound();
        boolean boolean56 = range53.contains((double) (byte) 0);
        org.jfree.data.Range range59 = org.jfree.data.Range.shift(range53, (double) 1.0f, false);
        org.jfree.data.Range range60 = org.jfree.data.Range.combine(range44, range59);
        double double61 = range60.getLength();
        org.jfree.data.Range range64 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double65 = range64.getLength();
        org.jfree.data.Range range67 = org.jfree.data.Range.expandToInclude(range64, (double) (short) 10);
        double double68 = range67.getLowerBound();
        org.jfree.data.Range range70 = org.jfree.data.Range.expandToInclude(range67, (double) 100L);
        org.jfree.data.Range range73 = org.jfree.data.Range.shift(range70, (double) 100L, true);
        boolean boolean74 = range60.equals((java.lang.Object) range70);
        double double75 = range70.getCentralValue();
        org.jfree.data.Range range76 = org.jfree.data.Range.combine(range35, range70);
        org.jfree.data.Range range79 = new org.jfree.data.Range((double) 10.0f, 0.0d);
        org.jfree.data.Range range80 = org.jfree.data.Range.combine(range76, range79);
        boolean boolean81 = borderArrangement0.equals((java.lang.Object) range79);
        org.jfree.chart.block.BlockContainer blockContainer82 = null;
        java.awt.Graphics2D graphics2D83 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D85 = borderArrangement0.arrange(blockContainer82, graphics2D83, rectangleConstraint84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Range[0.0,10.0]" + "'", str23, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.0d + "'", double65 == 10.0d);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        boolean boolean26 = range8.intersects((-3.3380139E7d), 33.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        boolean boolean28 = borderArrangement7.equals((java.lang.Object) 50.0d);
        borderArrangement7.clear();
        borderArrangement7.clear();
        org.jfree.chart.block.Block block31 = null;
        java.lang.Object obj32 = null;
        borderArrangement7.add(block31, obj32);
        org.jfree.chart.block.Block block34 = null;
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double38 = range37.getCentralValue();
        double double39 = range37.getLowerBound();
        double double40 = range37.getLowerBound();
        double double41 = range37.getLength();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement7.add(block34, (java.lang.Object) double41);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5.0d + "'", double38 == 5.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        org.jfree.data.Range range2 = new org.jfree.data.Range(27.5d, (double) 100);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (byte) 0, (double) (-1L));
        double double15 = range11.getUpperBound();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean27 = range24.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        double double41 = range40.getLength();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        boolean boolean49 = range44.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str50 = range44.toString();
        boolean boolean51 = range40.equals((java.lang.Object) range44);
        boolean boolean52 = range11.equals((java.lang.Object) range44);
        boolean boolean53 = range5.equals((java.lang.Object) range44);
        org.jfree.data.Range range54 = null;
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range44, range54);
        boolean boolean57 = range55.equals((java.lang.Object) 0L);
        org.jfree.data.Range range59 = org.jfree.data.Range.expandToInclude(range55, 330.0d);
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range55, 4.5d);
        org.jfree.data.Range range64 = org.jfree.data.Range.shift(range55, (double) (byte) 1, false);
        double double65 = range55.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,10.0]" + "'", str50, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 5.0d + "'", double65 == 5.0d);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 55.0d);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range34 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double35 = range34.getLength();
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range34, (double) (short) 10);
        double double38 = range37.getLowerBound();
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range37, (double) 100L);
        org.jfree.data.Range range43 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range43, 100.0d, (double) 100);
        boolean boolean47 = range40.equals((java.lang.Object) range43);
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range40, (double) 1.0f, (double) 'a');
        double double51 = range40.getLength();
        boolean boolean52 = borderArrangement0.equals((java.lang.Object) range40);
        org.jfree.chart.block.BlockContainer blockContainer53 = null;
        java.awt.Graphics2D graphics2D54 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D56 = borderArrangement0.arrange(blockContainer53, graphics2D54, rectangleConstraint55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 100.0d + "'", double51 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean11 = range6.contains((double) 0.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        boolean boolean25 = range22.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        boolean boolean34 = range31.contains((double) (byte) 0);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range31, (double) 1.0f, false);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range22, range37);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range22, (double) 0.0f, false);
        java.lang.String str42 = range22.toString();
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range22, 530.0d, false);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range45, (double) 10L);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range6, range45);
        double double49 = range45.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Range[0.0,100.0]" + "'", str42, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (byte) 0, (double) (-1L));
        double double23 = range19.getUpperBound();
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        boolean boolean35 = range32.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double39 = range38.getLength();
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range38, (double) (short) 10);
        double double42 = range41.getLowerBound();
        boolean boolean44 = range41.contains((double) (byte) 0);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range41, (double) 1.0f, false);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range32, range47);
        double double49 = range48.getLength();
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double54 = range52.constrain(10.0d);
        boolean boolean57 = range52.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str58 = range52.toString();
        boolean boolean59 = range48.equals((java.lang.Object) range52);
        boolean boolean60 = range19.equals((java.lang.Object) range52);
        boolean boolean61 = range13.equals((java.lang.Object) range52);
        boolean boolean62 = borderArrangement3.equals((java.lang.Object) range13);
        borderArrangement3.clear();
        org.jfree.data.Range range66 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj67 = new java.lang.Object();
        boolean boolean68 = range66.equals(obj67);
        boolean boolean71 = range66.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range74 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double76 = range74.constrain(10.0d);
        org.jfree.data.Range range77 = org.jfree.data.Range.combine(range66, range74);
        org.jfree.data.Range range80 = org.jfree.data.Range.shift(range66, (double) (short) 100, false);
        java.lang.String str81 = range66.toString();
        double double83 = range66.constrain(99.0d);
        boolean boolean85 = range66.contains(0.0d);
        org.jfree.data.Range range87 = org.jfree.data.Range.shift(range66, (double) (byte) 1);
        org.jfree.data.Range range89 = org.jfree.data.Range.shift(range66, 67.5d);
        boolean boolean90 = borderArrangement3.equals((java.lang.Object) range89);
        org.jfree.chart.block.BlockContainer blockContainer91 = null;
        java.awt.Graphics2D graphics2D92 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D94 = borderArrangement3.arrange(blockContainer91, graphics2D92, rectangleConstraint93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Range[0.0,10.0]" + "'", str58, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 10.0d + "'", double76 == 10.0d);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Range[0.0,10.0]" + "'", str81, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 10.0d + "'", double83 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(range87);
        org.junit.Assert.assertNotNull(range89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        double double10 = range2.constrain((double) 10L);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        boolean boolean15 = range12.intersects(265.0d, 92.5d);
        boolean boolean18 = range12.intersects(5100.0d, 9999.0d);
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range12, (-1003.0d), true);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(range21);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain((double) '#');
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range5, 1340.0d, true);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
        org.junit.Assert.assertNotNull(range15);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1.5955855E7d, (-6400.0d));
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range35, (double) 1L);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range8, range35);
        double double40 = range38.constrain(50.5d);
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range38, (-2006.0d), false);
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range43, 5346.0d);
        double double46 = range43.getCentralValue();
        double double47 = range43.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.5d + "'", double40 == 50.5d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1003.0d) + "'", double46 == (-1003.0d));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100.0f, (double) (byte) 10);
        double double4 = range2.constrain((double) 100L);
        java.lang.String str5 = range2.toString();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Range[100.0,10.0]" + "'", str5, "Range[100.0,10.0]");
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getCentralValue();
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        double double24 = range21.constrain(0.0d);
        java.lang.String str25 = range21.toString();
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range21, (double) (short) 1, true);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range21, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range2, range31);
        double double37 = range2.constrain((double) 1L);
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range2, (double) 'a');
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range2, 6676165.0d, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Range[0.0,10.0]" + "'", str25, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double28 = range27.getLength();
        double double30 = range27.constrain(0.0d);
        java.lang.String str31 = range27.toString();
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range27, (double) (short) 1, true);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range27, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range37, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range37, (double) 0L, false);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range8, range43);
        org.jfree.chart.block.BorderArrangement borderArrangement45 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement45.clear();
        org.jfree.data.Range range49 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean50 = borderArrangement45.equals((java.lang.Object) range49);
        java.lang.Object obj51 = null;
        boolean boolean52 = borderArrangement45.equals(obj51);
        borderArrangement45.clear();
        org.jfree.data.Range range56 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double57 = range56.getCentralValue();
        org.jfree.data.Range range60 = org.jfree.data.Range.expand(range56, (double) 0L, (double) '4');
        boolean boolean63 = range60.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean65 = range60.contains((double) 0.0f);
        double double67 = range60.constrain((double) (byte) 100);
        org.jfree.data.Range range69 = org.jfree.data.Range.expandToInclude(range60, (double) (-1.0f));
        double double70 = range69.getCentralValue();
        boolean boolean71 = borderArrangement45.equals((java.lang.Object) range69);
        org.jfree.data.Range range72 = org.jfree.data.Range.combine(range8, range69);
        double double74 = range8.constrain(0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Range[0.0,10.0]" + "'", str31, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5.0d + "'", double57 == 5.0d);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 100.0d + "'", double67 == 100.0d);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 264.5d + "'", double70 == 264.5d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, (double) 100L, true);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range8, (double) 100, false);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range8, 35.0d, true);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range17, (double) 'a');
        java.lang.Class<?> wildcardClass20 = range19.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range9, (double) '4');
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1L);
        double double14 = range11.getCentralValue();
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double18 = range17.getCentralValue();
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getCentralValue();
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range21, (double) 1);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range24, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range24, (double) 100.0f);
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range29, (double) 10);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range17, range31);
        double double33 = range31.getLowerBound();
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range31, (double) 100L, true);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range31, 275.0d, 340.0d);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range11, range39);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range11, (-1001.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 26.5d + "'", double14 == 26.5d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain((double) '#');
        double double14 = range5.constrain((double) (short) -1);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range5, (double) (-1));
        double double17 = range5.getLowerBound();
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range5, (-9.0d), 10100.0d);
        double double21 = range5.getUpperBound();
        java.lang.String str22 = range5.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9899.0d) + "'", double17 == (-9899.0d));
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10000.0d + "'", double21 == 10000.0d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Range[-9899.0,10000.0]" + "'", str22, "Range[-9899.0,10000.0]");
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        double double6 = range5.getLength();
        double double7 = range5.getUpperBound();
        boolean boolean10 = range5.intersects((-100.0d), 19.0d);
        boolean boolean12 = range5.contains((double) 0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 11.0d + "'", double7 == 11.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        double double10 = range2.constrain((double) 10L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range2, (double) (byte) 10, (double) (byte) -1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getCentralValue();
        boolean boolean19 = range16.contains((double) (byte) 0);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range16, (double) 100.0f, (double) 10.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range22, (-6500.0d));
        boolean boolean25 = range2.equals((java.lang.Object) range22);
        double double27 = range22.constrain((-420.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.0d + "'", double17 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-420.0d) + "'", double27 == (-420.0d));
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getCentralValue();
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        double double24 = range21.constrain(0.0d);
        java.lang.String str25 = range21.toString();
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range21, (double) (short) 1, true);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range21, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range2, range31);
        double double37 = range2.constrain((double) 1L);
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range2, (double) 'a');
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range42.getCentralValue();
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range42, (double) 1);
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range42, 50.0d);
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range47, (-6400.0d), 107.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range47, 67.5d);
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range2, range52);
        boolean boolean56 = range52.intersects(10000.0d, (-1001.0d));
        org.jfree.data.Range range59 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj60 = new java.lang.Object();
        boolean boolean61 = range59.equals(obj60);
        boolean boolean64 = range59.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range67 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double69 = range67.constrain(10.0d);
        org.jfree.data.Range range70 = org.jfree.data.Range.combine(range59, range67);
        org.jfree.data.Range range73 = org.jfree.data.Range.shift(range59, (double) (short) 100, false);
        java.lang.String str74 = range59.toString();
        double double76 = range59.constrain(99.0d);
        boolean boolean78 = range59.contains(0.0d);
        org.jfree.data.Range range80 = org.jfree.data.Range.shift(range59, (double) (byte) 1);
        org.jfree.data.Range range82 = org.jfree.data.Range.shift(range59, 67.5d);
        org.jfree.data.Range range83 = org.jfree.data.Range.combine(range52, range82);
        double double84 = range52.getUpperBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Range[0.0,10.0]" + "'", str25, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5.0d + "'", double43 == 5.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 10.0d + "'", double69 == 10.0d);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Range[0.0,10.0]" + "'", str74, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 10.0d + "'", double76 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertNotNull(range82);
        org.junit.Assert.assertNotNull(range83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 67.5d + "'", double84 == 67.5d);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        org.jfree.data.Range range39 = null;
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range39, (double) (short) 1);
        boolean boolean43 = range41.contains((double) 1.0f);
        org.jfree.data.Range range46 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean48 = range46.contains((double) 1L);
        boolean boolean49 = range41.equals((java.lang.Object) range46);
        org.jfree.data.Range range50 = org.jfree.data.Range.combine(range34, range41);
        java.lang.String str51 = range41.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Range[1.0,1.0]" + "'", str51, "Range[1.0,1.0]");
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        double double13 = range12.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean17 = range12.equals((java.lang.Object) range16);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range20, (double) (-1));
        double double23 = range22.getUpperBound();
        double double24 = range22.getCentralValue();
        double double25 = range22.getLowerBound();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range28.constrain(10.0d);
        double double31 = range28.getUpperBound();
        java.lang.String str32 = range28.toString();
        boolean boolean33 = range22.equals((java.lang.Object) str32);
        double double34 = range22.getLowerBound();
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range16, range22);
        double double36 = range16.getUpperBound();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 330.0d + "'", double13 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 99.0d + "'", double23 == 99.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 54.0d + "'", double24 == 54.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 9.0d + "'", double25 == 9.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Range[0.0,10.0]" + "'", str32, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 9.0d + "'", double34 == 9.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        double double10 = range9.getLowerBound();
        boolean boolean13 = range9.intersects((double) 0, (double) 10);
        double double14 = range9.getLength();
        double double15 = range9.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range7);
        double double14 = range7.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range7, (double) '4');
        double double17 = range7.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        double double13 = range5.getCentralValue();
        double double14 = range5.getUpperBound();
        double double15 = range5.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        double double37 = range8.getLength();
        boolean boolean39 = range8.contains((-7878307.5d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (byte) 0, (double) (-1L));
        double double6 = range2.getUpperBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) 10);
        org.jfree.data.Range range11 = new org.jfree.data.Range(11.0d, (-1.0d));
        org.jfree.data.Range range12 = org.jfree.data.Range.combine(range8, range11);
        java.lang.String str13 = range12.toString();
        double double15 = range12.constrain((double) (byte) 100);
        double double17 = range12.constrain((double) ' ');
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[1.0,100.0]" + "'", str13, "Range[1.0,100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 32.0d + "'", double17 == 32.0d);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double4 = range2.getUpperBound();
        double double5 = range2.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getUpperBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range4, (double) 1, true);
        double double10 = range8.constrain(49.5d);
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double14 = range13.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) (short) 10);
        double double17 = range16.getLowerBound();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) 100L);
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range22, 100.0d, (double) 100);
        boolean boolean26 = range19.equals((java.lang.Object) range22);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range19, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range19, (double) 100.0f);
        double double32 = range19.getCentralValue();
        org.jfree.data.Range range35 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double36 = range35.getLength();
        double double38 = range35.constrain(0.0d);
        java.lang.String str39 = range35.toString();
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range35, (double) (short) 1, true);
        double double43 = range42.getLowerBound();
        boolean boolean46 = range42.intersects((double) 0, (double) 10);
        org.jfree.data.Range range47 = org.jfree.data.Range.combine(range19, range42);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range8, range19);
        double double50 = range8.constrain(31.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 99.0d + "'", double5 == 99.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 49.5d + "'", double10 == 49.5d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Range[0.0,10.0]" + "'", str39, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 31.0d + "'", double50 == 31.0d);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        double double29 = range17.getUpperBound();
        boolean boolean32 = range17.intersects(6676165.0d, 39.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range5, (double) (-1));
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range7, 375.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range7, 6676165.0d, true);
        double double13 = range12.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 6676169.5d + "'", double13 == 6676169.5d);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 0.0d);
        org.jfree.data.Range range5 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, 100.0d, (double) 100);
        boolean boolean11 = range5.intersects((double) 'a', (-9899.0d));
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range5, (double) (-1.0f), true);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, 121.0d, 49.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range2, range17);
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range2, (double) ' ');
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range20, 37.0d);
        double double23 = range22.getUpperBound();
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 37.0d + "'", double23 == 37.0d);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean9 = range2.equals((java.lang.Object) 10);
        boolean boolean11 = range2.contains((double) 1.0f);
        double double12 = range2.getUpperBound();
        double double13 = range2.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, 19.0d);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range16, (-99.0d), true);
        boolean boolean20 = range2.equals((java.lang.Object) (-99.0d));
        double double21 = range2.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range17, 108.0d);
        boolean boolean33 = range17.intersects((double) (short) 1, 100.0d);
        double double34 = range17.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        double double26 = range6.getLength();
        double double27 = range6.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 530.0d + "'", double26 == 530.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 265.0d + "'", double27 == 265.0d);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.BlockContainer blockContainer5 = null;
        java.awt.Graphics2D graphics2D6 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D8 = borderArrangement0.arrange(blockContainer5, graphics2D6, rectangleConstraint7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 49.0d, false);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 0.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        double double8 = range2.getLength();
        java.lang.String str9 = range2.toString();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getLength();
        double double15 = range12.constrain(0.0d);
        java.lang.String str16 = range12.toString();
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, (double) (short) 1, true);
        boolean boolean21 = range19.contains((double) 0L);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range2, range19);
        boolean boolean25 = range22.intersects((double) (short) 10, (-6400.0d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[0.0,10.0]" + "'", str9, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Range[0.0,10.0]" + "'", str16, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1.0f, false);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        double double8 = range2.getUpperBound();
        double double9 = range2.getLowerBound();
        double double10 = range2.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 42.0d + "'", double10 == 42.0d);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        org.jfree.data.Range range2 = new org.jfree.data.Range(49.0d, (double) (-1));
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        double double9 = range7.getLowerBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range12);
        double double20 = range7.constrain((double) (byte) 1);
        double double21 = range7.getCentralValue();
        double double22 = range7.getCentralValue();
        boolean boolean23 = borderArrangement0.equals((java.lang.Object) double22);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range32, (double) 100L, true);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range32, (double) 100, false);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, 35.0d, true);
        boolean boolean42 = borderArrangement0.equals((java.lang.Object) range41);
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double47 = range45.constrain(10.0d);
        boolean boolean50 = range45.intersects((double) 10.0f, (double) (-1.0f));
        double double52 = range45.constrain(0.0d);
        double double54 = range45.constrain((double) (short) 10);
        org.jfree.data.Range range56 = org.jfree.data.Range.expandToInclude(range45, (-6400.0d));
        org.jfree.data.Range range58 = org.jfree.data.Range.expandToInclude(range45, 52.0d);
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range41, range45);
        org.jfree.data.Range range62 = new org.jfree.data.Range((double) 10.0f, 0.0d);
        double double63 = range62.getLength();
        org.jfree.data.Range range64 = org.jfree.data.Range.combine(range59, range62);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-10.0d) + "'", double63 == (-10.0d));
        org.junit.Assert.assertNotNull(range64);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.chart.block.Block block5 = null;
        org.jfree.data.Range range6 = null;
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        borderArrangement0.add(block5, (java.lang.Object) range6);
        org.jfree.data.Range range12 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean14 = range12.contains((double) 1L);
        boolean boolean17 = range12.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, 265.0d);
        boolean boolean20 = borderArrangement0.equals((java.lang.Object) 265.0d);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) (byte) 100, 101.0d);
        boolean boolean24 = borderArrangement0.equals((java.lang.Object) (byte) 100);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.BorderArrangement borderArrangement27 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean31 = borderArrangement27.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range34 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double35 = range34.getCentralValue();
        double double36 = range34.getLowerBound();
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range39.getCentralValue();
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range39, (double) 1);
        org.jfree.data.Range range44 = org.jfree.data.Range.expandToInclude(range39, (double) (short) 10);
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range34, range39);
        double double47 = range34.constrain((double) (byte) 1);
        double double48 = range34.getCentralValue();
        double double49 = range34.getCentralValue();
        boolean boolean50 = borderArrangement27.equals((java.lang.Object) double49);
        borderArrangement27.clear();
        boolean boolean52 = borderArrangement0.equals((java.lang.Object) borderArrangement27);
        org.jfree.data.Range range55 = new org.jfree.data.Range((-2006.0d), (-6400.0d));
        boolean boolean56 = borderArrangement27.equals((java.lang.Object) (-6400.0d));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 5.0d + "'", double35 == 5.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5.0d + "'", double40 == 5.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 5.0d + "'", double48 == 5.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 5.0d + "'", double49 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        org.jfree.data.Range range29 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range29, (double) 0);
        java.lang.String str32 = range31.toString();
        boolean boolean33 = borderArrangement7.equals((java.lang.Object) range31);
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj37 = new java.lang.Object();
        boolean boolean38 = range36.equals(obj37);
        boolean boolean41 = range36.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range36, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range36, (double) (short) -1);
        boolean boolean47 = borderArrangement7.equals((java.lang.Object) range36);
        org.jfree.data.Range range50 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double51 = range50.getCentralValue();
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range50, (double) 1);
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range50, 50.0d);
        org.jfree.data.Range range57 = org.jfree.data.Range.shift(range50, 630.0d);
        org.jfree.data.Range range59 = org.jfree.data.Range.shift(range57, 45.5d);
        boolean boolean60 = borderArrangement7.equals((java.lang.Object) range57);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Range[11.0,-1.0]" + "'", str32, "Range[11.0,-1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 5.0d + "'", double51 == 5.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range8, (double) (short) 100);
        org.jfree.data.Range range41 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double42 = range41.getLength();
        org.jfree.data.Range range44 = org.jfree.data.Range.expandToInclude(range41, (double) (short) 10);
        double double45 = range41.getCentralValue();
        boolean boolean48 = range41.intersects((double) 100L, (double) (short) 0);
        double double49 = range41.getUpperBound();
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double53 = range52.getCentralValue();
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range52, (double) 1);
        org.jfree.data.Range range57 = org.jfree.data.Range.shift(range52, (double) 'a');
        boolean boolean59 = range52.equals((java.lang.Object) 10);
        boolean boolean61 = range52.contains((double) 1.0f);
        boolean boolean64 = range52.intersects(10.0d, (double) 0);
        org.jfree.data.Range range65 = org.jfree.data.Range.combine(range41, range52);
        org.jfree.data.Range range67 = org.jfree.data.Range.expandToInclude(range65, 51.0d);
        org.jfree.data.Range range68 = org.jfree.data.Range.combine(range38, range67);
        org.jfree.data.Range range71 = org.jfree.data.Range.shift(range67, (double) (-1), false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 5.0d + "'", double45 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5.0d + "'", double53 == 5.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range71);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 100L, (double) (short) 0);
        double double11 = range2.constrain((-445.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        double double8 = range2.getLength();
        java.lang.String str9 = range2.toString();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getLength();
        double double15 = range12.constrain(0.0d);
        java.lang.String str16 = range12.toString();
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, (double) (short) 1, true);
        boolean boolean21 = range19.contains((double) 0L);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range2, range19);
        double double23 = range22.getLength();
        double double25 = range22.constrain(211.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[0.0,10.0]" + "'", str9, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Range[0.0,10.0]" + "'", str16, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 11.0d + "'", double23 == 11.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 11.0d + "'", double25 == 11.0d);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getUpperBound();
        double double6 = range4.getCentralValue();
        double double7 = range4.getLowerBound();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        double double13 = range10.getUpperBound();
        java.lang.String str14 = range10.toString();
        boolean boolean15 = range4.equals((java.lang.Object) str14);
        double double16 = range4.getLowerBound();
        double double17 = range4.getUpperBound();
        org.jfree.data.Range range18 = null;
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 1);
        boolean boolean22 = range20.contains((double) 1.0f);
        org.jfree.data.Range range25 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean27 = range25.contains((double) 1L);
        boolean boolean28 = range20.equals((java.lang.Object) range25);
        org.jfree.chart.block.BorderArrangement borderArrangement29 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement29.clear();
        org.jfree.data.Range range33 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean34 = borderArrangement29.equals((java.lang.Object) range33);
        borderArrangement29.clear();
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double39 = range38.getLength();
        double double41 = range38.constrain(0.0d);
        java.lang.String str42 = range38.toString();
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range38, (double) (short) 1, true);
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range38, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range48, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range54 = org.jfree.data.Range.expand(range48, (double) (byte) 1, (double) (-1));
        boolean boolean55 = borderArrangement29.equals((java.lang.Object) range54);
        java.lang.Object obj56 = null;
        boolean boolean57 = borderArrangement29.equals(obj56);
        org.jfree.data.Range range60 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double61 = range60.getCentralValue();
        org.jfree.data.Range range64 = org.jfree.data.Range.expand(range60, (double) 0L, (double) '4');
        boolean boolean67 = range64.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean69 = range64.contains((double) 0.0f);
        org.jfree.data.Range range71 = org.jfree.data.Range.expandToInclude(range64, 10.0d);
        boolean boolean72 = borderArrangement29.equals((java.lang.Object) range64);
        boolean boolean73 = range25.equals((java.lang.Object) boolean72);
        org.jfree.data.Range range74 = org.jfree.data.Range.combine(range4, range25);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 99.0d + "'", double5 == 99.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 54.0d + "'", double6 == 54.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 9.0d + "'", double7 == 9.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[0.0,10.0]" + "'", str14, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 9.0d + "'", double16 == 9.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 99.0d + "'", double17 == 99.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Range[0.0,10.0]" + "'", str42, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 5.0d + "'", double61 == 5.0d);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(range74);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        double double6 = range5.getLength();
        double double7 = range5.getUpperBound();
        double double8 = range5.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 11.0d + "'", double7 == 11.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 6.0d + "'", double8 == 6.0d);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        borderArrangement3.clear();
        borderArrangement3.clear();
        org.jfree.chart.block.BorderArrangement borderArrangement32 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement32.clear();
        org.jfree.data.Range range36 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean37 = borderArrangement32.equals((java.lang.Object) range36);
        borderArrangement32.clear();
        boolean boolean40 = borderArrangement32.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getLength();
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range43, (double) (short) 10);
        double double47 = range46.getLowerBound();
        org.jfree.data.Range range49 = org.jfree.data.Range.expandToInclude(range46, (double) 100L);
        org.jfree.data.Range range52 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range55 = org.jfree.data.Range.expand(range52, 100.0d, (double) 100);
        boolean boolean56 = range49.equals((java.lang.Object) range52);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range49, (double) 1.0f, (double) 'a');
        boolean boolean60 = borderArrangement32.equals((java.lang.Object) range49);
        borderArrangement32.clear();
        borderArrangement32.clear();
        borderArrangement32.clear();
        org.jfree.data.Range range66 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range69 = org.jfree.data.Range.expand(range66, 100.0d, (double) 100);
        boolean boolean70 = borderArrangement32.equals((java.lang.Object) range69);
        double double72 = range69.constrain((-1.0d));
        double double73 = range69.getCentralValue();
        boolean boolean74 = borderArrangement3.equals((java.lang.Object) double73);
        java.lang.Object obj75 = null;
        boolean boolean76 = borderArrangement3.equals(obj75);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-1.0d) + "'", double72 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.5d + "'", double73 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getCentralValue();
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range14, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range17, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) 10);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range10, range24);
        boolean boolean28 = range10.intersects(150.0d, (double) 'a');
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range10, (double) 100, 19.0d);
        boolean boolean32 = borderArrangement0.equals((java.lang.Object) range10);
        borderArrangement0.clear();
        boolean boolean35 = borderArrangement0.equals((java.lang.Object) 67.5d);
        org.jfree.chart.block.Block block36 = null;
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range39.getLength();
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range39, (double) (short) 10);
        double double43 = range42.getLowerBound();
        boolean boolean45 = range42.contains((double) (byte) 0);
        org.jfree.data.Range range48 = org.jfree.data.Range.shift(range42, (double) 1.0f, false);
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range48, (double) (short) 1, (double) (-1L));
        java.lang.Class<?> wildcardClass52 = range51.getClass();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block36, (java.lang.Object) wildcardClass52);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Class cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5.0d + "'", double15 == 5.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        boolean boolean39 = range8.intersects((double) 100L, 1.0d);
        double double40 = range8.getLowerBound();
        double double41 = range8.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range10, 100.0d, (double) 100);
        boolean boolean16 = range10.intersects((double) 'a', (-9899.0d));
        double double17 = range10.getUpperBound();
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range10, 110.0d, (double) 1);
        org.jfree.data.Range range21 = org.jfree.data.Range.combine(range2, range20);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range21, (-1908.0d), false);
        double double25 = range24.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-12797.0d) + "'", double25 == (-12797.0d));
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getLength();
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        double double16 = range15.getLowerBound();
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range15, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, 100.0d, (double) 100);
        boolean boolean25 = range18.equals((java.lang.Object) range21);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range18, (double) 1.0f, (double) 'a');
        boolean boolean29 = range9.equals((java.lang.Object) 1.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement30 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement30.clear();
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean35 = borderArrangement30.equals((java.lang.Object) range34);
        borderArrangement30.clear();
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj40 = new java.lang.Object();
        boolean boolean41 = range39.equals(obj40);
        boolean boolean42 = borderArrangement30.equals(obj40);
        boolean boolean43 = range9.equals((java.lang.Object) borderArrangement30);
        java.lang.String str44 = range9.toString();
        double double45 = range9.getLength();
        double double46 = range9.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Range[43.0,142.0]" + "'", str44, "Range[43.0,142.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 99.0d + "'", double45 == 99.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 43.0d + "'", double46 == 43.0d);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        double double6 = range2.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 330.0d, true);
        double double10 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        borderArrangement0.clear();
        java.lang.Object obj31 = null;
        boolean boolean32 = borderArrangement0.equals(obj31);
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        boolean boolean5 = range2.contains((double) (byte) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) 10.0f);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, 90.0d, (double) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (-2005.0d));
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getCentralValue();
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range16, (double) 0L, (double) '4');
        boolean boolean23 = range20.intersects((double) (short) 1, (double) 0.0f);
        double double24 = range20.getLowerBound();
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj28 = new java.lang.Object();
        boolean boolean29 = range27.equals(obj28);
        boolean boolean32 = range27.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range35 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range35.constrain(10.0d);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range27, range35);
        org.jfree.data.Range range39 = org.jfree.data.Range.combine(range20, range38);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range20, 10.0d, false);
        double double44 = range42.constrain(97.0d);
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range11, range42);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.0d + "'", double17 == 5.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 97.0d + "'", double44 == 97.0d);
        org.junit.Assert.assertNotNull(range45);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 1, (double) (-1));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 1);
        boolean boolean7 = range2.intersects(26.0d, 200.0d);
        double double9 = range2.constrain(410.5d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (byte) 0, (double) (-1L));
        double double15 = range11.getUpperBound();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean27 = range24.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        double double41 = range40.getLength();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        boolean boolean49 = range44.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str50 = range44.toString();
        boolean boolean51 = range40.equals((java.lang.Object) range44);
        boolean boolean52 = range11.equals((java.lang.Object) range44);
        boolean boolean53 = range5.equals((java.lang.Object) range44);
        org.jfree.data.Range range54 = null;
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range44, range54);
        double double57 = range44.constrain((double) (short) 1);
        boolean boolean59 = range44.contains((-9790.0d));
        double double61 = range44.constrain(9.0d);
        org.jfree.data.Range range63 = org.jfree.data.Range.expandToInclude(range44, 92.5d);
        java.lang.String str64 = range44.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,10.0]" + "'", str50, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 9.0d + "'", double61 == 9.0d);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Range[0.0,10.0]" + "'", str64, "Range[0.0,10.0]");
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, 11.0d);
        java.lang.Class<?> wildcardClass3 = range2.getClass();
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        double double9 = range7.getLowerBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range12);
        double double20 = range7.constrain((double) (byte) 1);
        double double21 = range7.getCentralValue();
        double double22 = range7.getCentralValue();
        boolean boolean23 = borderArrangement0.equals((java.lang.Object) double22);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range32, (double) 100L, true);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range32, (double) 100, false);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, 35.0d, true);
        boolean boolean42 = borderArrangement0.equals((java.lang.Object) range41);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.BlockContainer blockContainer45 = null;
        java.awt.Graphics2D graphics2D46 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D48 = borderArrangement0.arrange(blockContainer45, graphics2D46, rectangleConstraint47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (-1L), (-2006.0d));
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, 108.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1003.5d) + "'", double3 == (-1003.5d));
        org.junit.Assert.assertNotNull(range5);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        org.jfree.data.Range range12 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, (double) 0);
        org.jfree.data.Range range15 = org.jfree.data.Range.combine(range5, range12);
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range18.getUpperBound();
        org.jfree.data.Range range25 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj26 = new java.lang.Object();
        boolean boolean27 = range25.equals(obj26);
        boolean boolean30 = range25.intersects(5.0d, (double) 100L);
        double double31 = range25.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range25, 0.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range18, range33);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range12, range18);
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range35, 51.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        org.jfree.data.Range range6 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range6, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range9);
        double double14 = range2.getLength();
        boolean boolean16 = range2.equals((java.lang.Object) "Range[10.0,10.0]");
        java.lang.Class<?> wildcardClass17 = range2.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.0d + "'", double7 == 5.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-99.0d) + "'", double14 == (-99.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getLength();
        double double12 = range9.constrain(0.0d);
        java.lang.String str13 = range9.toString();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, (double) (short) 1, true);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range9, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range19, (double) (byte) 1, (double) (-1));
        boolean boolean26 = borderArrangement0.equals((java.lang.Object) range25);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double30 = range29.getUpperBound();
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range33.getCentralValue();
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range33, (double) 1);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range29, range36);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range25, range29);
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        double double47 = range44.getLowerBound();
        boolean boolean50 = range44.intersects((double) (byte) 0, 0.0d);
        double double52 = range44.constrain((double) (byte) -1);
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range44, 11.0d);
        double double55 = range54.getUpperBound();
        org.jfree.data.Range range57 = org.jfree.data.Range.shift(range54, 31.0d);
        org.jfree.data.Range range60 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range62 = org.jfree.data.Range.shift(range60, (double) (-1));
        double double63 = range62.getUpperBound();
        boolean boolean66 = range62.intersects(50.0d, 5.0d);
        org.jfree.data.Range range69 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double70 = range69.getLength();
        org.jfree.data.Range range72 = org.jfree.data.Range.expandToInclude(range69, (double) (short) 10);
        org.jfree.data.Range range73 = org.jfree.data.Range.combine(range62, range69);
        org.jfree.data.Range range75 = org.jfree.data.Range.shift(range62, (double) (byte) 10);
        double double77 = range75.constrain(11.0d);
        org.jfree.data.Range range78 = org.jfree.data.Range.combine(range54, range75);
        boolean boolean79 = range29.equals((java.lang.Object) range78);
        org.jfree.data.Range range81 = org.jfree.data.Range.shift(range29, 9.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,10.0]" + "'", str13, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5.0d + "'", double34 == 5.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 11.0d + "'", double55 == 11.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 99.0d + "'", double63 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 19.0d + "'", double77 == 19.0d);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(range81);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getUpperBound();
        double double6 = range4.getCentralValue();
        double double7 = range4.getLowerBound();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        double double13 = range10.getUpperBound();
        java.lang.String str14 = range10.toString();
        boolean boolean15 = range4.equals((java.lang.Object) str14);
        double double16 = range4.getLowerBound();
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range4, (double) (byte) 100);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getCentralValue();
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range21, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range21, (double) 'a');
        boolean boolean28 = range26.equals((java.lang.Object) 100);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range26, 0.0d);
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range26, (double) (short) -1);
        boolean boolean33 = range4.equals((java.lang.Object) (short) -1);
        double double34 = range4.getUpperBound();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 99.0d + "'", double5 == 99.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 54.0d + "'", double6 == 54.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 9.0d + "'", double7 == 9.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[0.0,10.0]" + "'", str14, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 9.0d + "'", double16 == 9.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 99.0d + "'", double34 == 99.0d);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        double double13 = range12.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean17 = range12.equals((java.lang.Object) range16);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range20, (double) (-1));
        double double23 = range22.getUpperBound();
        double double24 = range22.getCentralValue();
        double double25 = range22.getLowerBound();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range28.constrain(10.0d);
        double double31 = range28.getUpperBound();
        java.lang.String str32 = range28.toString();
        boolean boolean33 = range22.equals((java.lang.Object) str32);
        double double34 = range22.getLowerBound();
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range16, range22);
        double double36 = range35.getLowerBound();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 330.0d + "'", double13 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 99.0d + "'", double23 == 99.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 54.0d + "'", double24 == 54.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 9.0d + "'", double25 == 9.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Range[0.0,10.0]" + "'", str32, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 9.0d + "'", double34 == 9.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 9.0d + "'", double36 == 9.0d);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, (double) (short) -1, 82.5d);
        boolean boolean15 = range9.intersects((double) 1.0f, 5.0d);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range9, (-445.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range17);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double8 = range2.getCentralValue();
        double double9 = range2.getLength();
        double double10 = range2.getCentralValue();
        java.lang.String str11 = range2.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5.0d + "'", double10 == 5.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[0.0,10.0]" + "'", str11, "Range[0.0,10.0]");
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (-1.0f), (double) '#');
        double double3 = range2.getLowerBound();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 265.0d, false);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, 100.0d, (double) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range9, (double) ' ');
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range14, 10.0d);
        boolean boolean19 = range14.intersects((double) 1L, 1.0d);
        boolean boolean20 = range2.equals((java.lang.Object) 1.0d);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 'a', (double) '4');
        double double24 = range23.getLength();
        boolean boolean25 = range2.equals((java.lang.Object) range23);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range23, 671.0d, true);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-45.0d) + "'", double24 == (-45.0d));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        double double6 = range5.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range5, 82.5d, 43.0d);
        boolean boolean11 = range5.contains(19.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 5346.0d);
        double double4 = range2.constrain((double) 0L);
        double double5 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 5346.0d + "'", double5 == 5346.0d);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        double double27 = range26.getLowerBound();
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (-1));
        double double33 = range32.getUpperBound();
        boolean boolean36 = range32.intersects(50.0d, 5.0d);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range39.getLength();
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range39, (double) (short) 10);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range26, range39);
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range26, 132.0d);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range26, 0.0d, false);
        double double50 = range49.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9899.0d) + "'", double27 == (-9899.0d));
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 99.0d + "'", double33 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10000.0d + "'", double50 == 10000.0d);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (byte) 0, (double) (-1L));
        double double6 = range2.getUpperBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) 10);
        org.jfree.data.Range range11 = new org.jfree.data.Range(11.0d, (-1.0d));
        org.jfree.data.Range range12 = org.jfree.data.Range.combine(range8, range11);
        java.lang.String str13 = range12.toString();
        double double14 = range12.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[1.0,100.0]" + "'", str13, "Range[1.0,100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 99.0d + "'", double14 == 99.0d);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        boolean boolean12 = range7.intersects((double) 1L, 1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range7, 55.0d, false);
        org.jfree.data.Range range18 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range18, 100.0d, (double) 100);
        double double23 = range21.constrain((double) (short) 1);
        boolean boolean25 = range21.contains((double) '4');
        org.jfree.data.Range range28 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range28, (double) 0);
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range21, range28);
        boolean boolean32 = range7.equals((java.lang.Object) range28);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) (byte) -1, 54.0d);
        double double36 = range35.getLength();
        double double38 = range35.constrain(340.0d);
        java.lang.String str39 = range35.toString();
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range28, range35);
        org.jfree.data.Range range43 = new org.jfree.data.Range(11.0d, 265.0d);
        org.jfree.data.Range range44 = null;
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range43, range44);
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range43, 19899.0d, 19757.0d);
        java.lang.String str49 = range43.toString();
        boolean boolean50 = range35.equals((java.lang.Object) range43);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 55.0d + "'", double36 == 55.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 54.0d + "'", double38 == 54.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Range[-1.0,54.0]" + "'", str39, "Range[-1.0,54.0]");
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Range[11.0,265.0]" + "'", str49, "Range[11.0,265.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, 335.0d);
        org.junit.Assert.assertNotNull(range2);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 0, (double) (byte) 10);
        org.jfree.data.Range range4 = org.jfree.data.Range.expandToInclude(range2, (double) (-1.0f));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range4, 138.0d, false);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range7);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        boolean boolean13 = range7.intersects(0.0d, (double) (byte) 0);
        boolean boolean14 = borderArrangement0.equals((java.lang.Object) (byte) 0);
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double18 = range17.getLength();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range17, (double) (short) 10);
        double double21 = range20.getLowerBound();
        double double22 = range20.getLength();
        double double24 = range20.constrain((double) 10);
        boolean boolean25 = borderArrangement0.equals((java.lang.Object) range20);
        borderArrangement0.clear();
        org.jfree.chart.block.Block block27 = null;
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) (-1L));
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range30, 49.0d, 10.0d);
        boolean boolean35 = range30.contains(10000.0d);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block27, (java.lang.Object) boolean35);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Boolean cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range34, 100.0d, (double) 100);
        boolean boolean38 = borderArrangement0.equals((java.lang.Object) range37);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.BlockContainer blockContainer41 = null;
        java.awt.Graphics2D graphics2D42 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D44 = borderArrangement0.arrange(blockContainer41, graphics2D42, rectangleConstraint43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        double double6 = range2.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 330.0d, true);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        boolean boolean15 = range12.contains((double) (byte) 0);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range12, (double) 100.0f, (double) 10.0f);
        boolean boolean19 = range2.equals((java.lang.Object) range12);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range12, (-2005.0d), false);
        boolean boolean24 = range12.contains((-12.0d));
        double double25 = range12.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        org.jfree.data.Range range2 = new org.jfree.data.Range(671.0d, (-39155.0d));
        double double3 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-19242.0d) + "'", double3 == (-19242.0d));
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 100L, (double) (short) 0);
        boolean boolean11 = range2.contains((double) (short) 1);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range2, (double) 1L, 0.0d);
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1.0f, 10000.0d);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range17, (double) 0);
        double double20 = range17.getLength();
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 'a', false);
        double double24 = range23.getCentralValue();
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range23, 4.5d, (double) ' ');
        boolean boolean28 = range14.equals((java.lang.Object) ' ');
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 9999.0d + "'", double20 == 9999.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5097.5d + "'", double24 == 5097.5d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double14 = range13.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) (short) 10);
        double double17 = range16.getLowerBound();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) 100L);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range19, (double) 100L, true);
        boolean boolean23 = borderArrangement3.equals((java.lang.Object) 100L);
        org.jfree.chart.block.BlockContainer blockContainer24 = null;
        java.awt.Graphics2D graphics2D25 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D27 = borderArrangement3.arrange(blockContainer24, graphics2D25, rectangleConstraint26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        java.lang.String str36 = range32.toString();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) 1L);
        org.jfree.data.Range range41 = org.jfree.data.Range.expand(range32, 45.5d, (-100.0d));
        double double42 = range41.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Range[0.0,200.0]" + "'", str36, "Range[0.0,200.0]");
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-9100.0d) + "'", double42 == (-9100.0d));
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range2, 1340.0d);
        java.lang.String str15 = range2.toString();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Range[0.0,10.0]" + "'", str15, "Range[0.0,10.0]");
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        double double27 = range26.getLowerBound();
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (-1));
        double double33 = range32.getUpperBound();
        boolean boolean36 = range32.intersects(50.0d, 5.0d);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range39.getLength();
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range39, (double) (short) 10);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range26, range39);
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range26, 132.0d);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range26, 0.0d, false);
        boolean boolean51 = range49.contains((-1000.0d));
        double double52 = range49.getLength();
        boolean boolean55 = range49.intersects(5048.5d, 55.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9899.0d) + "'", double27 == (-9899.0d));
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 99.0d + "'", double33 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 19899.0d + "'", double52 == 19899.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range13, (double) '#', false);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range13, (double) (byte) 0, 52.0d);
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range19, 131.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range21);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, 265.0d);
        org.jfree.data.Range range3 = null;
        org.jfree.data.Range range4 = org.jfree.data.Range.combine(range2, range3);
        boolean boolean6 = range4.equals((java.lang.Object) "Range[-670.0,1340.0]");
        org.jfree.data.Range range9 = new org.jfree.data.Range(11.0d, (-1.0d));
        org.jfree.data.Range range10 = org.jfree.data.Range.combine(range4, range9);
        java.lang.String str11 = range9.toString();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[11.0,-1.0]" + "'", str11, "Range[11.0,-1.0]");
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) '#', 31.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (short) 10);
        double double6 = range4.constrain(488.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 41.0d + "'", double6 == 41.0d);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) (-1L));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 49.0d, 10.0d);
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range8.constrain(10.0d);
        boolean boolean13 = range8.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str14 = range8.toString();
        double double16 = range8.constrain((double) 100L);
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range2, range8);
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range8, (double) (-1.0f));
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range8, 150.0d, 5.5d);
        double double23 = range8.getLength();
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range8, 110.0d, 1286.0d);
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range26, (-10.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[0.0,10.0]" + "'", str14, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getUpperBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range4, (double) 1, true);
        double double10 = range8.constrain(49.5d);
        double double11 = range8.getCentralValue();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 99.0d + "'", double5 == 99.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 49.5d + "'", double10 == 49.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 55.0d + "'", double11 == 55.0d);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.jfree.data.Range range2 = new org.jfree.data.Range(49.0d, (double) (short) -1);
        java.lang.String str3 = range2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Range[49.0,-1.0]" + "'", str3, "Range[49.0,-1.0]");
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100.0f, (double) (byte) 10);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, 0.0d, false);
        double double6 = range5.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 55.0d + "'", double6 == 55.0d);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) (short) 100, false);
        java.lang.String str17 = range2.toString();
        double double19 = range2.constrain(99.0d);
        boolean boolean21 = range2.contains(0.0d);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getCentralValue();
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range24, (double) 1);
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        double double30 = range24.getCentralValue();
        double double31 = range24.getLength();
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range2, range24);
        double double33 = range24.getUpperBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[0.0,10.0]" + "'", str17, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5.0d + "'", double25 == 5.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5.0d + "'", double30 == 5.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        double double5 = range2.getLowerBound();
        boolean boolean8 = range2.intersects((double) (byte) 0, 0.0d);
        double double10 = range2.constrain((double) (byte) -1);
        double double11 = range2.getUpperBound();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range2, 1011.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range2, 10097.0d);
        double double16 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        double double36 = range32.getCentralValue();
        double double38 = range32.constrain(71.0d);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, 37.0d, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 71.0d + "'", double38 == 71.0d);
        org.junit.Assert.assertNotNull(range41);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        boolean boolean30 = range17.contains(6676165.0d);
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj34 = new java.lang.Object();
        boolean boolean35 = range33.equals(obj34);
        boolean boolean38 = range33.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range41 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range41.constrain(10.0d);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range33, range41);
        org.jfree.data.Range range47 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double48 = range47.getLength();
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range47, (double) (short) 10);
        double double51 = range50.getLowerBound();
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range50, (double) 100L);
        org.jfree.data.Range range56 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range56, 100.0d, (double) 100);
        boolean boolean60 = range53.equals((java.lang.Object) range56);
        org.jfree.data.Range range62 = org.jfree.data.Range.shift(range53, (double) 100);
        org.jfree.data.Range range63 = org.jfree.data.Range.combine(range44, range62);
        org.jfree.data.Range range66 = org.jfree.data.Range.expand(range63, (double) ' ', 1.0d);
        boolean boolean68 = range63.contains((-1.0d));
        org.jfree.data.Range range70 = org.jfree.data.Range.shift(range63, 0.0d);
        boolean boolean73 = range63.intersects((double) (-1.0f), 530.0d);
        org.jfree.data.Range range75 = org.jfree.data.Range.shift(range63, 54.0d);
        org.jfree.data.Range range78 = org.jfree.data.Range.expand(range75, 107.0d, 67.5d);
        org.jfree.data.Range range79 = org.jfree.data.Range.combine(range17, range75);
        org.jfree.data.Range range82 = org.jfree.data.Range.shift(range75, 133.0d, true);
        org.jfree.data.Range range84 = org.jfree.data.Range.expandToInclude(range82, 5.5d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertNotNull(range82);
        org.junit.Assert.assertNotNull(range84);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, 265.0d);
        org.jfree.data.Range range3 = null;
        org.jfree.data.Range range4 = org.jfree.data.Range.combine(range2, range3);
        org.jfree.data.Range range7 = org.jfree.data.Range.expand(range2, 19899.0d, 19757.0d);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        boolean boolean15 = range10.intersects((double) 10.0f, (double) (-1.0f));
        double double17 = range10.constrain(0.0d);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range10, (double) 0.0f, (double) ' ');
        double double21 = range20.getUpperBound();
        org.jfree.data.Range range24 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean25 = range20.equals((java.lang.Object) range24);
        org.jfree.data.Range range28 = new org.jfree.data.Range(11.0d, (-1.0d));
        double double29 = range28.getCentralValue();
        org.jfree.data.Range range30 = org.jfree.data.Range.combine(range20, range28);
        org.jfree.data.Range range33 = new org.jfree.data.Range(99.0d, (double) (byte) -1);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range28, range33);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range7, range34);
        double double36 = range7.getLength();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 330.0d + "'", double21 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5.0d + "'", double29 == 5.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0072878E7d + "'", double36 == 1.0072878E7d);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        boolean boolean12 = range7.intersects((double) 1L, 1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range7, 55.0d, false);
        org.jfree.data.Range range18 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range18, 100.0d, (double) 100);
        double double23 = range21.constrain((double) (short) 1);
        boolean boolean25 = range21.contains((double) '4');
        org.jfree.data.Range range28 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range28, (double) 0);
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range21, range28);
        boolean boolean32 = range7.equals((java.lang.Object) range28);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range28, 45.5d, true);
        double double36 = range28.getLowerBound();
        double double37 = range28.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 11.0d + "'", double36 == 11.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-12.0d) + "'", double37 == (-12.0d));
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        java.lang.String str21 = range20.toString();
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range20, (double) (-1.0f));
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range23, 50.0d, true);
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range26, 39.0d, false);
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range26, (-2.0d));
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, 154.0d, (-9899.0d));
        double double35 = range31.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Range[0.0,100.0]" + "'", str21, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 73.5d + "'", double35 == 73.5d);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        double double6 = range2.getLength();
        double double7 = range2.getUpperBound();
        double double8 = range2.getLength();
        double double10 = range2.constrain((-10.0d));
        boolean boolean12 = range2.contains((double) (short) -1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double9 = range8.getLength();
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range8, (double) (short) 10);
        double double12 = range11.getLowerBound();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) 100L);
        boolean boolean15 = borderArrangement0.equals((java.lang.Object) 100L);
        borderArrangement0.clear();
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double20 = range19.getLength();
        double double22 = range19.constrain(0.0d);
        java.lang.String str23 = range19.toString();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range19, (double) (short) 1, true);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range19, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range29, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range29, (double) (byte) 1, (double) (-1));
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double39 = range38.getLength();
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range38, (double) (short) 10);
        double double42 = range41.getLowerBound();
        org.jfree.data.Range range44 = org.jfree.data.Range.expandToInclude(range41, (double) 100L);
        boolean boolean47 = range44.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range50 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double51 = range50.getLength();
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range50, (double) (short) 10);
        double double54 = range53.getLowerBound();
        boolean boolean56 = range53.contains((double) (byte) 0);
        org.jfree.data.Range range59 = org.jfree.data.Range.shift(range53, (double) 1.0f, false);
        org.jfree.data.Range range60 = org.jfree.data.Range.combine(range44, range59);
        double double61 = range60.getLength();
        org.jfree.data.Range range64 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double65 = range64.getLength();
        org.jfree.data.Range range67 = org.jfree.data.Range.expandToInclude(range64, (double) (short) 10);
        double double68 = range67.getLowerBound();
        org.jfree.data.Range range70 = org.jfree.data.Range.expandToInclude(range67, (double) 100L);
        org.jfree.data.Range range73 = org.jfree.data.Range.shift(range70, (double) 100L, true);
        boolean boolean74 = range60.equals((java.lang.Object) range70);
        double double75 = range70.getCentralValue();
        org.jfree.data.Range range76 = org.jfree.data.Range.combine(range35, range70);
        org.jfree.data.Range range79 = new org.jfree.data.Range((double) 10.0f, 0.0d);
        org.jfree.data.Range range80 = org.jfree.data.Range.combine(range76, range79);
        boolean boolean81 = borderArrangement0.equals((java.lang.Object) range79);
        java.lang.String str82 = range79.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Range[0.0,10.0]" + "'", str23, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.0d + "'", double65 == 10.0d);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 50.0d + "'", double75 == 50.0d);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Range[10.0,0.0]" + "'", str82, "Range[10.0,0.0]");
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        borderArrangement3.clear();
        borderArrangement3.clear();
        org.jfree.chart.block.Block block32 = null;
        org.jfree.data.Range range35 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj36 = new java.lang.Object();
        boolean boolean37 = range35.equals(obj36);
        boolean boolean40 = range35.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double45 = range43.constrain(10.0d);
        org.jfree.data.Range range46 = org.jfree.data.Range.combine(range35, range43);
        org.jfree.data.Range range49 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double50 = range49.getLength();
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range49, (double) (short) 10);
        double double53 = range52.getLowerBound();
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range52, (double) 100L);
        org.jfree.data.Range range58 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range61 = org.jfree.data.Range.expand(range58, 100.0d, (double) 100);
        boolean boolean62 = range55.equals((java.lang.Object) range58);
        org.jfree.data.Range range64 = org.jfree.data.Range.shift(range55, (double) 100);
        org.jfree.data.Range range65 = org.jfree.data.Range.combine(range46, range64);
        org.jfree.data.Range range68 = org.jfree.data.Range.expand(range65, (double) ' ', 1.0d);
        boolean boolean70 = range65.contains((-1.0d));
        org.jfree.data.Range range72 = org.jfree.data.Range.shift(range65, 0.0d);
        org.jfree.data.Range range75 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range76 = org.jfree.data.Range.combine(range65, range75);
        double double77 = range76.getLowerBound();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement3.add(block32, (java.lang.Object) double77);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj10 = new java.lang.Object();
        boolean boolean11 = range9.equals(obj10);
        boolean boolean12 = borderArrangement0.equals(obj10);
        org.jfree.data.Range range15 = new org.jfree.data.Range(1.0d, (double) (short) 10);
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        borderArrangement0.clear();
        org.jfree.chart.block.Block block18 = null;
        org.jfree.data.Range range21 = new org.jfree.data.Range(100.0d, (-6400.0d));
        double double22 = range21.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range21, 100.0d, false);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 200.0d, (-12.0d));
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block18, (java.lang.Object) range28);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-6500.0d) + "'", double22 == (-6500.0d));
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 100L, (double) (short) 0);
        boolean boolean11 = range2.contains((double) (short) 1);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range2, (double) 1L, 0.0d);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range2, (double) 1L, 136.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        borderArrangement0.clear();
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range20, (double) ' ');
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range25, 10.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range33, (double) 100L);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, 100.0d, (double) 100);
        boolean boolean43 = range36.equals((java.lang.Object) range39);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range36, (double) 1.0f, (double) 'a');
        boolean boolean47 = range27.equals((java.lang.Object) 1.0f);
        java.lang.String str48 = range27.toString();
        double double50 = range27.constrain((-4949.0d));
        org.jfree.data.Range range51 = null;
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range51, 10.0d);
        double double54 = range53.getLength();
        double double56 = range53.constrain((double) (-1));
        double double57 = range53.getCentralValue();
        java.lang.String str58 = range53.toString();
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range27, range53);
        org.jfree.data.Range range62 = org.jfree.data.Range.expand(range27, 340.0d, 154.0d);
        boolean boolean63 = borderArrangement0.equals((java.lang.Object) range27);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Range[43.0,142.0]" + "'", str48, "Range[43.0,142.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 43.0d + "'", double50 == 43.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 10.0d + "'", double56 == 10.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Range[10.0,10.0]" + "'", str58, "Range[10.0,10.0]");
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1.0d, (double) 10.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 265.0d, (double) '4');
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, 11.0d);
        double double8 = range7.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 6.0d + "'", double8 == 6.0d);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-6400.0d));
        double double3 = range2.getLength();
        boolean boolean6 = range2.intersects((-4924.0d), (-1.0d));
        boolean boolean8 = range2.contains((-670.0d));
        boolean boolean10 = range2.contains(0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-6500.0d) + "'", double3 == (-6500.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        double double8 = range2.getLength();
        java.lang.String str9 = range2.toString();
        double double10 = range2.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range2, 5346.0d, false);
        java.lang.String str14 = range2.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[0.0,10.0]" + "'", str9, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[0.0,10.0]" + "'", str14, "Range[0.0,10.0]");
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        boolean boolean13 = range7.intersects(0.0d, (double) (byte) 0);
        boolean boolean14 = borderArrangement0.equals((java.lang.Object) (byte) 0);
        borderArrangement0.clear();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement19 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean21 = borderArrangement19.equals((java.lang.Object) (-1L));
        borderArrangement19.clear();
        boolean boolean23 = range18.equals((java.lang.Object) borderArrangement19);
        boolean boolean24 = borderArrangement0.equals((java.lang.Object) borderArrangement19);
        borderArrangement0.clear();
        boolean boolean27 = borderArrangement0.equals((java.lang.Object) "Range[1340.0,1350.0]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        double double37 = range33.getLowerBound();
        double double38 = range33.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 6.0d + "'", double38 == 6.0d);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getUpperBound();
        boolean boolean8 = range4.intersects(50.0d, 5.0d);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        org.jfree.data.Range range15 = org.jfree.data.Range.combine(range4, range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range11, 1.0d, false);
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range18, (double) (byte) 0);
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range20, 71.0d);
        double double23 = range22.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range22, (-9.94899E7d), (-2006.0d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 99.0d + "'", double5 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 71.0d + "'", double23 == 71.0d);
        org.junit.Assert.assertNotNull(range26);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        double double6 = range5.getLength();
        double double7 = range5.getUpperBound();
        boolean boolean10 = range5.intersects((double) (byte) 10, 1265.0d);
        java.lang.Class<?> wildcardClass11 = range5.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 11.0d + "'", double7 == 11.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, (double) ' ');
        double double15 = range12.getLength();
        java.lang.String str16 = range12.toString();
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, 254.0d, true);
        boolean boolean21 = range19.contains((double) (byte) 10);
        double double22 = range19.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2010.0d + "'", double15 == 2010.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Range[-1000.0,1010.0]" + "'", str16, "Range[-1000.0,1010.0]");
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-746.0d) + "'", double22 == (-746.0d));
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean11 = range6.contains((double) 0.0f);
        double double12 = range6.getLength();
        boolean boolean15 = range6.intersects(1340.0d, (double) 100);
        double double17 = range6.constrain(6676165.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 530.0d + "'", double12 == 530.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 530.0d + "'", double17 == 530.0d);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) (-1L));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 49.0d, 10.0d);
        boolean boolean7 = range5.contains(0.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        boolean boolean28 = borderArrangement7.equals((java.lang.Object) 50.0d);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj32 = new java.lang.Object();
        boolean boolean33 = range31.equals(obj32);
        boolean boolean36 = range31.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range31, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range31, (double) (short) -1);
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double45 = range44.getLength();
        double double47 = range44.constrain(0.0d);
        java.lang.String str48 = range44.toString();
        org.jfree.data.Range range51 = org.jfree.data.Range.shift(range44, (double) (short) 1, true);
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range51, (double) '4');
        org.jfree.data.Range range54 = org.jfree.data.Range.combine(range31, range53);
        double double55 = range31.getLowerBound();
        boolean boolean56 = borderArrangement7.equals((java.lang.Object) range31);
        java.lang.Class<?> wildcardClass57 = borderArrangement7.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Range[0.0,10.0]" + "'", str48, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        double double9 = range5.getLength();
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range5, 99.0d, (-6400.0d));
        double double13 = range5.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1.0d, (double) 10.0f);
        double double4 = range2.constrain(0.0d);
        double double5 = range2.getLength();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 9.0d + "'", double5 == 9.0d);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain((double) '#');
        double double14 = range5.constrain((double) (short) -1);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range5, (double) (-1));
        double double17 = range5.getLowerBound();
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range5, (-9.0d), 10100.0d);
        double double21 = range20.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9899.0d) + "'", double17 == (-9899.0d));
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 169192.0d + "'", double21 == 169192.0d);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        boolean boolean28 = borderArrangement7.equals((java.lang.Object) 50.0d);
        borderArrangement7.clear();
        borderArrangement7.clear();
        org.jfree.chart.block.Block block31 = null;
        java.lang.Object obj32 = null;
        borderArrangement7.add(block31, obj32);
        org.jfree.chart.block.Block block34 = null;
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj38 = new java.lang.Object();
        boolean boolean39 = range37.equals(obj38);
        boolean boolean42 = range37.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double47 = range45.constrain(10.0d);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range37, range45);
        org.jfree.data.Range range51 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double52 = range51.getLength();
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range51, (double) (short) 10);
        double double55 = range54.getLowerBound();
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range54, (double) 100L);
        org.jfree.data.Range range60 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range63 = org.jfree.data.Range.expand(range60, 100.0d, (double) 100);
        boolean boolean64 = range57.equals((java.lang.Object) range60);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range57, (double) 100);
        org.jfree.data.Range range67 = org.jfree.data.Range.combine(range48, range66);
        org.jfree.data.Range range70 = org.jfree.data.Range.expand(range67, (double) ' ', 1.0d);
        boolean boolean72 = range67.contains((-1.0d));
        org.jfree.data.Range range74 = org.jfree.data.Range.shift(range67, 0.0d);
        boolean boolean77 = range67.intersects((double) (-1.0f), 530.0d);
        org.jfree.data.Range range79 = org.jfree.data.Range.shift(range67, 54.0d);
        double double80 = range79.getCentralValue();
        double double81 = range79.getUpperBound();
        org.jfree.data.Range range84 = org.jfree.data.Range.shift(range79, 11.0d, false);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement7.add(block34, (java.lang.Object) false);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Boolean cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 154.0d + "'", double80 == 154.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 254.0d + "'", double81 == 254.0d);
        org.junit.Assert.assertNotNull(range84);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        double double39 = range38.getUpperBound();
        boolean boolean40 = borderArrangement0.equals((java.lang.Object) range38);
        double double41 = range38.getCentralValue();
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range38, (-1003.5d));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertNotNull(range43);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range6, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range9, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) 10);
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range2, range16);
        double double18 = range16.getLowerBound();
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range16, (double) 100L, true);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range16, 275.0d, 340.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range16, 54.0d, (-12.0d));
        double double28 = range16.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.0d + "'", double7 == 5.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 60.5d + "'", double28 == 60.5d);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (-2005.0d));
        double double6 = range4.constrain(1265.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-2006.0d) + "'", double6 == (-2006.0d));
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        double double39 = range38.getUpperBound();
        boolean boolean40 = borderArrangement0.equals((java.lang.Object) range38);
        double double41 = range38.getCentralValue();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double45 = range44.getCentralValue();
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range44, (double) 0L, (double) '4');
        boolean boolean51 = range48.intersects((double) (short) 1, (double) 0.0f);
        double double52 = range48.getLowerBound();
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range38, range48);
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range48, 33.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 5.0d + "'", double45 == 5.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range55);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range6, 90.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range6, 10000.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) '#');
        java.lang.String str14 = range13.toString();
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double18 = range17.getCentralValue();
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range17, (double) 1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, (double) (byte) 0, 100.0d);
        double double24 = range23.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range23, 0.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range13, range26);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 265.0d + "'", double7 == 265.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[0.0,10000.0]" + "'", str14, "Range[0.0,10000.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1011.0d + "'", double24 == 1011.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        boolean boolean10 = borderArrangement0.equals((java.lang.Object) '#');
        org.jfree.chart.block.Block block11 = null;
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getCentralValue();
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range14, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range14, (double) 'a');
        boolean boolean21 = range14.equals((java.lang.Object) 10);
        boolean boolean23 = range14.contains((double) 1.0f);
        double double24 = range14.getUpperBound();
        double double25 = range14.getUpperBound();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj29 = new java.lang.Object();
        boolean boolean30 = range28.equals(obj29);
        boolean boolean33 = range28.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getLength();
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range36, (double) (short) 10);
        double double40 = range39.getLowerBound();
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range39, (double) 100L);
        boolean boolean43 = range28.equals((java.lang.Object) 100L);
        boolean boolean45 = range28.contains(35.0d);
        org.jfree.data.Range range46 = org.jfree.data.Range.combine(range14, range28);
        org.jfree.data.Range range49 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj50 = new java.lang.Object();
        boolean boolean51 = range49.equals(obj50);
        boolean boolean54 = range49.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range57 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double58 = range57.getLength();
        org.jfree.data.Range range60 = org.jfree.data.Range.expandToInclude(range57, (double) (short) 10);
        double double61 = range60.getLowerBound();
        org.jfree.data.Range range63 = org.jfree.data.Range.expandToInclude(range60, (double) 100L);
        boolean boolean64 = range49.equals((java.lang.Object) 100L);
        boolean boolean66 = range49.contains((double) (byte) 100);
        double double67 = range49.getUpperBound();
        org.jfree.data.Range range68 = org.jfree.data.Range.combine(range46, range49);
        double double69 = range46.getLength();
        org.jfree.data.Range range72 = org.jfree.data.Range.expand(range46, 0.0d, 26.5d);
        org.jfree.data.Range range75 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double76 = range75.getLength();
        org.jfree.data.Range range78 = org.jfree.data.Range.expandToInclude(range75, (double) (short) 10);
        double double79 = range75.getCentralValue();
        boolean boolean82 = range75.intersects((double) 100L, (double) (short) 0);
        boolean boolean84 = range75.contains((double) (short) 1);
        double double85 = range75.getUpperBound();
        boolean boolean86 = range72.equals((java.lang.Object) range75);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block11, (java.lang.Object) boolean86);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Boolean cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5.0d + "'", double15 == 5.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 10.0d + "'", double69 == 10.0d);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 10.0d + "'", double76 == 10.0d);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 5.0d + "'", double79 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 10.0d + "'", double85 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100.0f, (double) (byte) 10);
        boolean boolean4 = range2.contains((double) (short) 100);
        java.lang.String str5 = range2.toString();
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, (double) 10L);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 102.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Range[100.0,10.0]" + "'", str5, "Range[100.0,10.0]");
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getCentralValue();
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        double double24 = range21.constrain(0.0d);
        java.lang.String str25 = range21.toString();
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range21, (double) (short) 1, true);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range21, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range2, range31);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range31, (double) '#');
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range37, 11.0d);
        double double41 = range37.constrain(31.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Range[0.0,10.0]" + "'", str25, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 31.0d + "'", double41 == 31.0d);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        org.jfree.data.Range range2 = new org.jfree.data.Range(35.0d, (double) 0.0f);
        org.jfree.data.Range range5 = new org.jfree.data.Range(1.0d, (double) 10.0f);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, 265.0d, (double) '4');
        org.jfree.data.Range range9 = org.jfree.data.Range.combine(range2, range5);
        boolean boolean11 = range2.contains(1011.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        org.jfree.data.Range range2 = new org.jfree.data.Range(55.0d, (-3000.0d));
        double double4 = range2.constrain(635.0d);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 1, false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-3000.0d) + "'", double4 == (-3000.0d));
        org.junit.Assert.assertNotNull(range7);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        boolean boolean38 = range32.intersects((double) 1L, (double) (byte) 1);
        org.jfree.data.Range range41 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range41, (double) 0);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range32, range43);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range43, 15.0d, false);
        org.jfree.data.Range range50 = new org.jfree.data.Range(43.0d, (-1.0d));
        org.jfree.data.Range range53 = org.jfree.data.Range.expand(range50, 19757.0d, 5346.0d);
        org.jfree.data.Range range54 = org.jfree.data.Range.combine(range47, range53);
        org.jfree.data.Range range57 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double58 = range57.getLength();
        org.jfree.data.Range range60 = org.jfree.data.Range.expandToInclude(range57, (double) (short) 10);
        double double61 = range60.getLowerBound();
        org.jfree.data.Range range63 = org.jfree.data.Range.expandToInclude(range60, (double) 100L);
        boolean boolean66 = range63.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range69 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double70 = range69.getLength();
        org.jfree.data.Range range72 = org.jfree.data.Range.expandToInclude(range69, (double) (short) 10);
        double double73 = range72.getLowerBound();
        boolean boolean75 = range72.contains((double) (byte) 0);
        org.jfree.data.Range range78 = org.jfree.data.Range.shift(range72, (double) 1.0f, false);
        org.jfree.data.Range range79 = org.jfree.data.Range.combine(range63, range78);
        double double80 = range79.getLength();
        org.jfree.data.Range range83 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double84 = range83.getLength();
        org.jfree.data.Range range86 = org.jfree.data.Range.expandToInclude(range83, (double) (short) 10);
        double double87 = range86.getLowerBound();
        org.jfree.data.Range range89 = org.jfree.data.Range.expandToInclude(range86, (double) 100L);
        org.jfree.data.Range range92 = org.jfree.data.Range.shift(range89, (double) 100L, true);
        boolean boolean93 = range79.equals((java.lang.Object) range89);
        org.jfree.data.Range range96 = org.jfree.data.Range.shift(range79, 1011.0d, false);
        boolean boolean97 = range47.equals((java.lang.Object) false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 100.0d + "'", double80 == 100.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 10.0d + "'", double84 == 10.0d);
        org.junit.Assert.assertNotNull(range86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(range89);
        org.junit.Assert.assertNotNull(range92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(range96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, (double) ' ');
        double double16 = range14.constrain((double) (short) -1);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range14, 31.0d);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range14, 51.0d, 60.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        double double8 = range2.getLength();
        double double9 = range2.getLength();
        double double10 = range2.getLowerBound();
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range2, 5346.0d, 26.0d);
        org.jfree.data.Range range16 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range16, (double) 1.0f, false);
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range16, 0.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range16, (double) (byte) -1);
        boolean boolean25 = range23.contains(31.0d);
        boolean boolean26 = range13.equals((java.lang.Object) 31.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, (double) 100.0f);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 10);
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range10, 265.0d);
        double double16 = range14.constrain((-445.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 101.0d + "'", double16 == 101.0d);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 100L, (double) (short) 0);
        boolean boolean11 = range2.contains(165.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        boolean boolean6 = borderArrangement0.equals((java.lang.Object) 'a');
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj11 = new java.lang.Object();
        boolean boolean12 = range10.equals(obj11);
        boolean boolean15 = range10.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean25 = range10.equals((java.lang.Object) 100L);
        boolean boolean27 = range10.contains((double) (byte) 100);
        double double28 = range10.getLowerBound();
        boolean boolean29 = borderArrangement0.equals((java.lang.Object) double28);
        org.jfree.chart.block.BorderArrangement borderArrangement30 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement30.clear();
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean35 = borderArrangement30.equals((java.lang.Object) range34);
        borderArrangement30.clear();
        borderArrangement30.clear();
        org.jfree.data.Range range40 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double41 = range40.getCentralValue();
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range40, (double) 1);
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range40, (double) 'a');
        boolean boolean46 = borderArrangement30.equals((java.lang.Object) range45);
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) (-1));
        boolean boolean49 = borderArrangement0.equals((java.lang.Object) (-1));
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj53 = new java.lang.Object();
        boolean boolean54 = range52.equals(obj53);
        boolean boolean57 = range52.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range60 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double62 = range60.constrain(10.0d);
        org.jfree.data.Range range63 = org.jfree.data.Range.combine(range52, range60);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range52, (double) 100L, true);
        boolean boolean67 = borderArrangement0.equals((java.lang.Object) true);
        org.jfree.data.Range range70 = new org.jfree.data.Range((-9899.0d), 5.0d);
        boolean boolean71 = borderArrangement0.equals((java.lang.Object) 5.0d);
        borderArrangement0.clear();
        org.jfree.chart.block.Block block73 = null;
        org.jfree.data.Range range76 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double77 = range76.getLength();
        org.jfree.data.Range range79 = org.jfree.data.Range.expandToInclude(range76, (double) (short) 10);
        org.jfree.data.Range range81 = org.jfree.data.Range.expandToInclude(range76, 11.0d);
        org.jfree.data.Range range84 = org.jfree.data.Range.expand(range76, (double) (byte) -1, (double) (short) 10);
        double double85 = range76.getUpperBound();
        double double87 = range76.constrain((-10.0d));
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block73, (java.lang.Object) double87);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 5.0d + "'", double41 == 5.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 10.0d + "'", double77 == 10.0d);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertNotNull(range81);
        org.junit.Assert.assertNotNull(range84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 10.0d + "'", double85 == 10.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        double double28 = range5.constrain((-39155.0d));
        org.jfree.data.Range range29 = null;
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range29, 10.0d);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range5, range31);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-9899.0d) + "'", double28 == (-9899.0d));
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range8, 5.0d);
        double double26 = range8.getUpperBound();
        double double27 = range8.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.chart.block.Block block1 = null;
        org.jfree.chart.block.BorderArrangement borderArrangement2 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement2.clear();
        org.jfree.data.Range range6 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean7 = borderArrangement2.equals((java.lang.Object) range6);
        borderArrangement2.clear();
        boolean boolean10 = borderArrangement2.equals((java.lang.Object) (short) 0);
        boolean boolean12 = borderArrangement2.equals((java.lang.Object) '#');
        org.jfree.data.Range range15 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range15, 100.0d, (double) 100);
        double double20 = range18.constrain((double) (short) 1);
        boolean boolean21 = borderArrangement2.equals((java.lang.Object) (short) 1);
        borderArrangement2.clear();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block1, (java.lang.Object) borderArrangement2);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.chart.block.BorderArrangement cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        boolean boolean37 = range32.contains((-1.0d));
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range32, 0.0d);
        org.jfree.data.Range range42 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range42);
        double double44 = range43.getUpperBound();
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range43, (-1.9898E8d));
        double double47 = range46.getUpperBound();
        double double48 = range46.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 200.0d + "'", double44 == 200.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 200.0d + "'", double47 == 200.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.989802E8d + "'", double48 == 1.989802E8d);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double33 = range32.getUpperBound();
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getCentralValue();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range36, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range39, (double) '4');
        boolean boolean46 = borderArrangement3.equals((java.lang.Object) '4');
        org.jfree.data.Range range49 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double50 = range49.getLength();
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range49, (double) (short) 10);
        double double53 = range49.getUpperBound();
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range49, 0.0d);
        double double56 = range55.getCentralValue();
        double double57 = range55.getLength();
        boolean boolean58 = borderArrangement3.equals((java.lang.Object) range55);
        borderArrangement3.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5.0d + "'", double37 == 5.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5.0d + "'", double56 == 5.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double26 = range24.constrain(10.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range16, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range2, range16);
        double double29 = range16.getLowerBound();
        double double30 = range16.getCentralValue();
        double double31 = range16.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5.0d + "'", double30 == 5.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        double double39 = range38.getUpperBound();
        boolean boolean40 = borderArrangement0.equals((java.lang.Object) range38);
        boolean boolean42 = range38.contains((double) 1.0f);
        boolean boolean44 = range38.contains(118.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range6, 90.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range6, 10000.0d);
        boolean boolean14 = range11.intersects(52.0d, 6676169.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 265.0d + "'", double7 == 265.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getCentralValue();
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range14, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range17, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) 10);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range10, range24);
        boolean boolean28 = range10.intersects(150.0d, (double) 'a');
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range10, (double) 100, 19.0d);
        boolean boolean32 = borderArrangement0.equals((java.lang.Object) range10);
        borderArrangement0.clear();
        boolean boolean35 = borderArrangement0.equals((java.lang.Object) 67.5d);
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double39 = range38.getLength();
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range38, (double) (short) 10);
        double double42 = range41.getLowerBound();
        boolean boolean44 = range41.contains((double) (byte) 0);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range41, (double) 1.0f, false);
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range47, (double) (short) 1, (double) (-1L));
        org.jfree.data.Range range53 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double55 = range53.constrain(10.0d);
        boolean boolean58 = range53.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str59 = range53.toString();
        double double61 = range53.constrain((double) 100L);
        org.jfree.data.Range range62 = org.jfree.data.Range.combine(range50, range53);
        org.jfree.data.Range range65 = org.jfree.data.Range.shift(range62, 52.0d, false);
        org.jfree.data.Range range68 = org.jfree.data.Range.shift(range62, 0.0d, false);
        org.jfree.data.Range range71 = org.jfree.data.Range.expand(range62, 0.0d, (-2006.0d));
        boolean boolean72 = borderArrangement0.equals((java.lang.Object) (-2006.0d));
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5.0d + "'", double15 == 5.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Range[0.0,10.0]" + "'", str59, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.jfree.data.Range range2 = new org.jfree.data.Range(5100.0d, 5248.0d);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        borderArrangement0.clear();
        org.jfree.chart.block.BlockContainer blockContainer4 = null;
        java.awt.Graphics2D graphics2D5 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D7 = borderArrangement0.arrange(blockContainer4, graphics2D5, rectangleConstraint6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (-6500.0d));
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range34, (double) '4');
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range40, (double) 10, 488.0d);
        org.jfree.data.Range range46 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range49 = org.jfree.data.Range.expand(range46, 100.0d, (double) 100);
        double double51 = range49.constrain((double) (short) 1);
        boolean boolean53 = range49.contains((double) '4');
        org.jfree.data.Range range56 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range58 = org.jfree.data.Range.shift(range56, (double) 0);
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range49, range56);
        org.jfree.data.Range range60 = org.jfree.data.Range.combine(range40, range56);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range60);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        double double39 = range38.getUpperBound();
        boolean boolean40 = borderArrangement0.equals((java.lang.Object) range38);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range38, (double) 100);
        java.lang.String str43 = range38.toString();
        org.jfree.data.Range range44 = null;
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range38, range44);
        org.jfree.data.Range range48 = org.jfree.data.Range.shift(range38, 1300.0d, false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Range[0.0,100.0]" + "'", str43, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range48);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        boolean boolean13 = range11.contains((double) (short) 1);
        org.jfree.chart.block.BorderArrangement borderArrangement14 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement14.clear();
        org.jfree.data.Range range18 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean19 = borderArrangement14.equals((java.lang.Object) range18);
        borderArrangement14.clear();
        boolean boolean22 = borderArrangement14.equals((java.lang.Object) (short) 0);
        boolean boolean24 = borderArrangement14.equals((java.lang.Object) '#');
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, 100.0d, (double) 100);
        double double32 = range30.constrain((double) (short) 1);
        boolean boolean33 = borderArrangement14.equals((java.lang.Object) (short) 1);
        boolean boolean34 = range11.equals((java.lang.Object) (short) 1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getUpperBound();
        double double7 = range2.getLength();
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range10, 100.0d, (double) 100);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range13, (double) (byte) -1, (double) 100L);
        double double19 = range13.constrain(265.0d);
        java.lang.String str20 = range13.toString();
        double double21 = range13.getLength();
        boolean boolean22 = range2.equals((java.lang.Object) range13);
        double double24 = range13.constrain(54.0d);
        double double25 = range13.getUpperBound();
        org.jfree.data.Range range28 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range28, (double) 1.0f, false);
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range28, 0.0d);
        org.jfree.data.Range range36 = org.jfree.data.Range.expand(range28, (double) 100L, (double) (byte) 10);
        double double37 = range28.getCentralValue();
        boolean boolean38 = range13.equals((java.lang.Object) double37);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9899.0d) + "'", double14 == (-9899.0d));
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 265.0d + "'", double19 == 265.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Range[-9899.0,10000.0]" + "'", str20, "Range[-9899.0,10000.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 19899.0d + "'", double21 == 19899.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 54.0d + "'", double24 == 54.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10000.0d + "'", double25 == 10000.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 31.0d + "'", double37 == 31.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 265.0d);
        double double11 = range2.constrain(15.0d);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range2, 110.0d, true);
        double double15 = range14.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 15.0d + "'", double11 == 15.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 42.0d + "'", double15 == 42.0d);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.chart.block.Block block5 = null;
        org.jfree.data.Range range6 = null;
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        borderArrangement0.add(block5, (java.lang.Object) range6);
        org.jfree.data.Range range12 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean14 = range12.contains((double) 1L);
        boolean boolean17 = range12.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, 265.0d);
        boolean boolean20 = borderArrangement0.equals((java.lang.Object) 265.0d);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 1L, (double) (byte) 0);
        java.lang.String str24 = range23.toString();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range23, 0.0d);
        boolean boolean27 = borderArrangement0.equals((java.lang.Object) range23);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 100.0f, (double) (byte) 10);
        boolean boolean32 = range30.contains((double) (short) 100);
        java.lang.String str33 = range30.toString();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range30, (double) 10L);
        boolean boolean36 = borderArrangement0.equals((java.lang.Object) 10L);
        org.jfree.chart.block.Block block37 = null;
        org.jfree.data.Range range40 = new org.jfree.data.Range((double) 1L, (double) (byte) 0);
        java.lang.String str41 = range40.toString();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block37, (java.lang.Object) range40);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Range[1.0,0.0]" + "'", str24, "Range[1.0,0.0]");
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Range[100.0,10.0]" + "'", str33, "Range[100.0,10.0]");
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Range[1.0,0.0]" + "'", str41, "Range[1.0,0.0]");
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        double double37 = range36.getCentralValue();
        java.lang.String str38 = range36.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Range[0.0,100.0]" + "'", str38, "Range[0.0,100.0]");
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getCentralValue();
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        double double24 = range21.constrain(0.0d);
        java.lang.String str25 = range21.toString();
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range21, (double) (short) 1, true);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range21, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range2, range31);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range31, 110.0d, 375.0d);
        org.jfree.data.Range range41 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double42 = range41.getLength();
        double double44 = range41.constrain(0.0d);
        org.jfree.data.Range range47 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double48 = range47.getLength();
        double double50 = range47.constrain(0.0d);
        java.lang.String str51 = range47.toString();
        org.jfree.data.Range range54 = org.jfree.data.Range.shift(range47, (double) (short) 1, true);
        double double55 = range54.getLowerBound();
        boolean boolean58 = range54.intersects((double) 0, (double) 10);
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range41, range54);
        double double60 = range59.getLength();
        double double61 = range59.getCentralValue();
        double double62 = range59.getUpperBound();
        org.jfree.data.Range range63 = org.jfree.data.Range.combine(range38, range59);
        org.jfree.data.Range range66 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double67 = range66.getCentralValue();
        double double68 = range66.getLowerBound();
        org.jfree.data.Range range71 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double72 = range71.getCentralValue();
        org.jfree.data.Range range74 = org.jfree.data.Range.shift(range71, (double) 1);
        org.jfree.data.Range range76 = org.jfree.data.Range.expandToInclude(range71, (double) (short) 10);
        org.jfree.data.Range range77 = org.jfree.data.Range.combine(range66, range71);
        org.jfree.data.Range range80 = org.jfree.data.Range.shift(range77, (double) '#', false);
        org.jfree.data.Range range83 = org.jfree.data.Range.expand(range77, (double) (byte) 0, 52.0d);
        double double84 = range83.getLength();
        boolean boolean85 = range59.equals((java.lang.Object) double84);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Range[0.0,10.0]" + "'", str25, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Range[0.0,10.0]" + "'", str51, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 11.0d + "'", double60 == 11.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 5.5d + "'", double61 == 5.5d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 11.0d + "'", double62 == 11.0d);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 5.0d + "'", double67 == 5.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 5.0d + "'", double72 == 5.0d);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertNotNull(range83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 530.0d + "'", double84 == 530.0d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range10, (double) 0L, (double) '4');
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range10, (double) ' ');
        boolean boolean17 = borderArrangement0.equals((java.lang.Object) ' ');
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj21 = new java.lang.Object();
        boolean boolean22 = range20.equals(obj21);
        boolean boolean25 = range20.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        boolean boolean35 = range20.equals((java.lang.Object) 100L);
        double double36 = range20.getLength();
        boolean boolean37 = borderArrangement0.equals((java.lang.Object) range20);
        java.lang.Object obj38 = null;
        boolean boolean39 = borderArrangement0.equals(obj38);
        org.jfree.chart.block.BlockContainer blockContainer40 = null;
        java.awt.Graphics2D graphics2D41 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D43 = borderArrangement0.arrange(blockContainer40, graphics2D41, rectangleConstraint42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = borderArrangement0.equals((java.lang.Object) 1.0f);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range10.getCentralValue();
        boolean boolean17 = range10.intersects((double) 100L, (double) (short) 0);
        boolean boolean19 = range10.contains((double) (short) 1);
        boolean boolean20 = borderArrangement0.equals((java.lang.Object) range10);
        borderArrangement0.clear();
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getCentralValue();
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range24, (double) 1);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range27, (double) 100.0f);
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range32, (double) 10);
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range32, 265.0d);
        boolean boolean37 = borderArrangement0.equals((java.lang.Object) range32);
        org.jfree.chart.block.Block block38 = null;
        org.jfree.data.Range range41 = new org.jfree.data.Range((double) (short) 1, (-45.0d));
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block38, (java.lang.Object) range41);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5.0d + "'", double14 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5.0d + "'", double25 == 5.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-18.5d), 107.0d);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        boolean boolean6 = borderArrangement0.equals((java.lang.Object) 'a');
        borderArrangement0.clear();
        org.jfree.chart.block.Block block8 = null;
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj12 = new java.lang.Object();
        boolean boolean13 = range11.equals(obj12);
        boolean boolean16 = range11.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double21 = range19.constrain(10.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range19);
        org.jfree.data.Range range25 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double26 = range25.getLength();
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range25, (double) (short) 10);
        double double29 = range28.getLowerBound();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) 100L);
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range34, 100.0d, (double) 100);
        boolean boolean38 = range31.equals((java.lang.Object) range34);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range31, (double) 100);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range22, range40);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range41, (double) ' ', 1.0d);
        java.lang.String str45 = range41.toString();
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range41, (double) 1L);
        org.jfree.data.Range range49 = org.jfree.data.Range.expandToInclude(range41, (-100.0d));
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range41, 43.0d);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range41, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block8, (java.lang.Object) range53);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Range[0.0,200.0]" + "'", str45, "Range[0.0,200.0]");
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range53);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        java.lang.String str37 = range33.toString();
        double double38 = range33.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Range[1.0,11.0]" + "'", str37, "Range[1.0,11.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.jfree.data.Range range2 = new org.jfree.data.Range(630.0d, 211.0d);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-6400.0d));
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 100.0d, false);
        java.lang.String str7 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 0.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range9, 135.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range9, 340.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-6500.0d) + "'", double3 == (-6500.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Range[100.0,-6400.0]" + "'", str7, "Range[100.0,-6400.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = borderArrangement0.equals((java.lang.Object) 1.0f);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range10.getCentralValue();
        boolean boolean17 = range10.intersects((double) 100L, (double) (short) 0);
        boolean boolean19 = range10.contains((double) (short) 1);
        boolean boolean20 = borderArrangement0.equals((java.lang.Object) range10);
        borderArrangement0.clear();
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getCentralValue();
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range24, (double) 1);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range27, (double) 100.0f);
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range32, (double) 10);
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range32, 265.0d);
        boolean boolean37 = borderArrangement0.equals((java.lang.Object) range32);
        org.jfree.chart.block.Block block38 = null;
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block38, (java.lang.Object) "Range[2010.0,102.0]");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5.0d + "'", double14 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5.0d + "'", double25 == 5.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) (short) 100, false);
        boolean boolean19 = range2.intersects((double) '#', (double) 0.0f);
        double double20 = range2.getUpperBound();
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, 100.0d, (double) 100);
        double double28 = range26.constrain((double) (short) 1);
        boolean boolean30 = range26.contains((double) '4');
        double double31 = range26.getLowerBound();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, 100.0d);
        boolean boolean35 = range33.contains((double) (byte) -1);
        boolean boolean36 = range2.equals((java.lang.Object) boolean35);
        boolean boolean39 = range2.intersects(10.0d, 54.0d);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range2, 0.0d);
        java.lang.Class<?> wildcardClass42 = range41.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9899.0d) + "'", double31 == (-9899.0d));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 142.0d);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        double double5 = range2.getLowerBound();
        boolean boolean8 = range2.intersects((double) (byte) 0, 0.0d);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range17, (double) 100.0f);
        double double30 = range17.getCentralValue();
        boolean boolean32 = range17.equals((java.lang.Object) 0);
        org.jfree.data.Range range35 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double36 = range35.getLength();
        double double38 = range35.constrain(0.0d);
        java.lang.String str39 = range35.toString();
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range35, (double) (short) 1, true);
        org.jfree.data.Range range44 = org.jfree.data.Range.expandToInclude(range42, (double) '4');
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range17, range42);
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range17, (double) (short) 100);
        boolean boolean49 = range47.contains(0.0d);
        org.jfree.data.Range range50 = org.jfree.data.Range.combine(range2, range47);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Range[0.0,10.0]" + "'", str39, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(range50);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-670.0d), (double) 0.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, 50.5d, false);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double9 = range8.getUpperBound();
        java.lang.String str10 = range8.toString();
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range2, range8);
        double double12 = range8.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Range[100.0,1.0]" + "'", str10, "Range[100.0,1.0]");
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        double double27 = range26.getLowerBound();
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj31 = new java.lang.Object();
        boolean boolean32 = range30.equals(obj31);
        boolean boolean35 = range30.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range38.constrain(10.0d);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range30, range38);
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj45 = new java.lang.Object();
        boolean boolean46 = range44.equals(obj45);
        boolean boolean49 = range44.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double54 = range52.constrain(10.0d);
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range44, range52);
        org.jfree.data.Range range56 = org.jfree.data.Range.combine(range30, range44);
        double double57 = range44.getLowerBound();
        double double58 = range44.getUpperBound();
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range26, range44);
        boolean boolean62 = range44.intersects(10000.0d, 35.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9899.0d) + "'", double27 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(1.0d, (double) (short) 10);
        double double8 = range2.getUpperBound();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range2, (double) (byte) 0);
        java.lang.String str11 = range2.toString();
        boolean boolean14 = range2.intersects(1010.0d, 254.0d);
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double18 = range17.getLength();
        double double20 = range17.constrain(0.0d);
        boolean boolean22 = range17.contains(6676175.0d);
        org.jfree.data.Range range25 = new org.jfree.data.Range(200.0d, 51.0d);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj29 = new java.lang.Object();
        boolean boolean30 = range28.equals(obj29);
        boolean boolean33 = range28.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range36 = org.jfree.data.Range.expand(range28, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range28, (double) (byte) 10);
        org.jfree.data.Range range41 = new org.jfree.data.Range(100.0d, (double) (byte) 100);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range28, range41);
        java.lang.String str43 = range41.toString();
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range41, 52.0d);
        boolean boolean46 = range25.equals((java.lang.Object) 52.0d);
        org.jfree.data.Range range47 = org.jfree.data.Range.combine(range17, range25);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range2, range17);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[0.0,10.0]" + "'", str11, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Range[100.0,100.0]" + "'", str43, "Range[100.0,100.0]");
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean9 = range2.equals((java.lang.Object) 10);
        boolean boolean11 = range2.contains((double) 1.0f);
        double double12 = range2.getUpperBound();
        double double13 = range2.getUpperBound();
        double double14 = range2.getLowerBound();
        double double15 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5.0d + "'", double15 == 5.0d);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, (double) ' ');
        java.lang.Class<?> wildcardClass15 = range12.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, 26.5d, false);
        boolean boolean18 = range16.contains(6676165.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        boolean boolean13 = range11.contains((double) 10L);
        boolean boolean15 = range11.contains(375.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) (short) 100, false);
        boolean boolean19 = range2.intersects((double) '#', (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range2, (double) 0, 26.5d);
        java.lang.String str23 = range2.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Range[0.0,10.0]" + "'", str23, "Range[0.0,10.0]");
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str8 = range2.toString();
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, (double) (-1));
        double double14 = range13.getUpperBound();
        boolean boolean17 = range13.intersects(50.0d, 5.0d);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double21 = range20.getLength();
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range20, (double) (short) 10);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range20);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range2, range24);
        double double26 = range25.getUpperBound();
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range25, 530.0d, 42.0d);
        double double30 = range25.getLowerBound();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[0.0,10.0]" + "'", str8, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 99.0d + "'", double14 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 99.0d + "'", double26 == 99.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range35, (double) 1L);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range8, range35);
        double double40 = range38.constrain(50.5d);
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range38, (-2006.0d), false);
        double double44 = range38.getLowerBound();
        org.jfree.data.Range range47 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range47, 100.0d, (double) 100);
        double double51 = range47.getLength();
        double double52 = range47.getUpperBound();
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range38, range47);
        double double55 = range47.constrain(630.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 50.5d + "'", double40 == 50.5d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 99.0d + "'", double51 == 99.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str8 = range2.toString();
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) (-1));
        boolean boolean17 = range2.equals((java.lang.Object) range14);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range14, 6676165.0d, true);
        boolean boolean22 = range20.contains(52.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[0.0,10.0]" + "'", str8, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (-99990.0d));
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getUpperBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        double double9 = range8.getCentralValue();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean15 = borderArrangement13.equals((java.lang.Object) (-1L));
        borderArrangement13.clear();
        boolean boolean17 = range12.equals((java.lang.Object) borderArrangement13);
        org.jfree.chart.block.Block block18 = null;
        java.lang.Object obj19 = null;
        borderArrangement13.add(block18, obj19);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, (double) (-1));
        double double26 = range25.getUpperBound();
        boolean boolean29 = range25.intersects(50.0d, 5.0d);
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range25, range32);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range25, (double) (byte) 10);
        boolean boolean39 = borderArrangement13.equals((java.lang.Object) range25);
        boolean boolean40 = range8.equals((java.lang.Object) boolean39);
        double double41 = range8.getLength();
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range8, (double) (-1L));
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range8, (double) 100.0f, (double) ' ');
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5.0d + "'", double9 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 99.0d + "'", double26 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range46);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range34, 100.0d, (double) 100);
        boolean boolean38 = borderArrangement0.equals((java.lang.Object) range37);
        double double40 = range37.constrain((-1.0d));
        double double41 = range37.getCentralValue();
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range37, 132.0d);
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range43, 340.0d, false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1.0d) + "'", double40 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.5d + "'", double41 == 50.5d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range46);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1.0d, 10.0d);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1908.0d), 488.0d);
        double double4 = range2.constrain((double) (short) -1);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (-4949.0d));
        double double28 = range27.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (-1.0f), (double) '#');
        double double4 = range3.getLowerBound();
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range3, 265.0d, false);
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range10, 100.0d, (double) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) ' ');
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range15, 10.0d);
        boolean boolean20 = range15.intersects((double) 1L, 1.0d);
        boolean boolean21 = range3.equals((java.lang.Object) 1.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range3, 43.0d, (-4949.0d));
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range0, range3);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 20.0d, 45.5d);
        boolean boolean31 = range28.intersects(3310.0d, 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (byte) 0, (double) (-1L));
        double double15 = range11.getUpperBound();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean27 = range24.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        double double41 = range40.getLength();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        boolean boolean49 = range44.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str50 = range44.toString();
        boolean boolean51 = range40.equals((java.lang.Object) range44);
        boolean boolean52 = range11.equals((java.lang.Object) range44);
        boolean boolean53 = range5.equals((java.lang.Object) range44);
        org.jfree.data.Range range54 = null;
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range44, range54);
        boolean boolean57 = range55.equals((java.lang.Object) 0L);
        org.jfree.data.Range range59 = org.jfree.data.Range.expandToInclude(range55, 330.0d);
        double double60 = range59.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,10.0]" + "'", str50, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 165.0d + "'", double60 == 165.0d);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, 100.0d, (double) 100);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range35, (double) (byte) -1, (double) 100L);
        double double41 = range35.constrain(265.0d);
        boolean boolean42 = range15.equals((java.lang.Object) range35);
        double double44 = range35.constrain(37.0d);
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range35, (double) 1L);
        double double47 = range35.getLength();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9899.0d) + "'", double36 == (-9899.0d));
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 265.0d + "'", double41 == 265.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 37.0d + "'", double44 == 37.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 19899.0d + "'", double47 == 19899.0d);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-495.0d), (-1000.0d));
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getUpperBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        double double9 = range8.getCentralValue();
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range8, (-9899.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5.0d + "'", double9 == 5.0d);
        org.junit.Assert.assertNotNull(range11);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        boolean boolean30 = range17.contains(6676165.0d);
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj34 = new java.lang.Object();
        boolean boolean35 = range33.equals(obj34);
        boolean boolean38 = range33.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range41 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range41.constrain(10.0d);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range33, range41);
        org.jfree.data.Range range47 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double48 = range47.getLength();
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range47, (double) (short) 10);
        double double51 = range50.getLowerBound();
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range50, (double) 100L);
        org.jfree.data.Range range56 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range56, 100.0d, (double) 100);
        boolean boolean60 = range53.equals((java.lang.Object) range56);
        org.jfree.data.Range range62 = org.jfree.data.Range.shift(range53, (double) 100);
        org.jfree.data.Range range63 = org.jfree.data.Range.combine(range44, range62);
        org.jfree.data.Range range66 = org.jfree.data.Range.expand(range63, (double) ' ', 1.0d);
        boolean boolean68 = range63.contains((-1.0d));
        org.jfree.data.Range range70 = org.jfree.data.Range.shift(range63, 0.0d);
        boolean boolean73 = range63.intersects((double) (-1.0f), 530.0d);
        org.jfree.data.Range range75 = org.jfree.data.Range.shift(range63, 54.0d);
        org.jfree.data.Range range78 = org.jfree.data.Range.expand(range75, 107.0d, 67.5d);
        org.jfree.data.Range range79 = org.jfree.data.Range.combine(range17, range75);
        double double80 = range17.getUpperBound();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 100.0d + "'", double80 == 100.0d);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range3 = org.jfree.data.Range.shift(range0, 375.0d, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        double double8 = range2.getLength();
        java.lang.String str9 = range2.toString();
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (double) 0);
        double double12 = range11.getLength();
        java.lang.String str13 = range11.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[0.0,10.0]" + "'", str9, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,10.0]" + "'", str13, "Range[0.0,10.0]");
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getLength();
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        double double16 = range15.getLowerBound();
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range15, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, 100.0d, (double) 100);
        boolean boolean25 = range18.equals((java.lang.Object) range21);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range18, (double) 1.0f, (double) 'a');
        boolean boolean29 = range9.equals((java.lang.Object) 1.0f);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range9, 43.0d, (double) (short) 10);
        double double33 = range32.getLength();
        org.jfree.data.Range range36 = org.jfree.data.Range.expand(range32, 9904.0d, (double) 1);
        boolean boolean39 = range32.intersects((double) (short) 100, 340.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5346.0d + "'", double33 == 5346.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str8 = range2.toString();
        double double10 = range2.constrain((double) 100L);
        boolean boolean12 = range2.contains(1340.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[0.0,10.0]" + "'", str8, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double21 = range20.getLength();
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range20, (double) (short) 10);
        double double24 = range23.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement25 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean27 = borderArrangement25.equals((java.lang.Object) (-1L));
        boolean boolean29 = borderArrangement25.equals((java.lang.Object) (-1.0f));
        boolean boolean30 = range23.equals((java.lang.Object) borderArrangement25);
        org.jfree.chart.block.BorderArrangement borderArrangement31 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement31.clear();
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean36 = borderArrangement31.equals((java.lang.Object) range35);
        borderArrangement31.clear();
        org.jfree.data.Range range40 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj41 = new java.lang.Object();
        boolean boolean42 = range40.equals(obj41);
        boolean boolean43 = borderArrangement31.equals(obj41);
        boolean boolean44 = borderArrangement25.equals((java.lang.Object) borderArrangement31);
        boolean boolean46 = borderArrangement25.equals((java.lang.Object) 50.0d);
        borderArrangement25.clear();
        boolean boolean48 = range2.equals((java.lang.Object) borderArrangement25);
        org.jfree.chart.block.Block block49 = null;
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj53 = new java.lang.Object();
        boolean boolean54 = range52.equals(obj53);
        boolean boolean57 = range52.intersects(5.0d, (double) 100L);
        double double58 = range52.getLength();
        java.lang.String str59 = range52.toString();
        double double60 = range52.getLength();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement25.add(block49, (java.lang.Object) double60);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Range[0.0,10.0]" + "'", str59, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 10.0d + "'", double60 == 10.0d);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range9, (double) '4');
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range11, (double) (short) 100, false);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range14, 45.5d, true);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range20, (double) (-1));
        double double23 = range22.getUpperBound();
        boolean boolean26 = range22.intersects(50.0d, 5.0d);
        org.jfree.data.Range range29 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range29.getLength();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) (short) 10);
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range22, range29);
        boolean boolean35 = range22.contains((-1.0d));
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range22, 150.0d);
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range22, (double) 'a');
        boolean boolean40 = range17.equals((java.lang.Object) range22);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 99.0d + "'", double23 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 265.0d);
        boolean boolean12 = range9.intersects((double) (short) 10, 101.0d);
        double double13 = range9.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, 1011.0d, false);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, 100.0d, (double) 100);
        double double24 = range22.constrain((double) (short) 1);
        boolean boolean26 = range22.contains((double) '4');
        org.jfree.data.Range range29 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range29, (double) 0);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range22, range29);
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range16, range22);
        org.jfree.data.Range range34 = null;
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range22, range34);
        boolean boolean38 = range35.intersects((double) (byte) 1, (double) 'a');
        java.lang.Class<?> wildcardClass39 = range35.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 42.0d + "'", double13 == 42.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double33 = range32.getUpperBound();
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getCentralValue();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range36, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range39, (double) '4');
        boolean boolean46 = borderArrangement3.equals((java.lang.Object) '4');
        borderArrangement3.clear();
        borderArrangement3.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5.0d + "'", double37 == 5.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        borderArrangement3.clear();
        borderArrangement3.clear();
        org.jfree.chart.block.BorderArrangement borderArrangement32 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement32.clear();
        org.jfree.data.Range range36 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean37 = borderArrangement32.equals((java.lang.Object) range36);
        borderArrangement32.clear();
        boolean boolean40 = borderArrangement32.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getLength();
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range43, (double) (short) 10);
        double double47 = range46.getLowerBound();
        org.jfree.data.Range range49 = org.jfree.data.Range.expandToInclude(range46, (double) 100L);
        org.jfree.data.Range range52 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range55 = org.jfree.data.Range.expand(range52, 100.0d, (double) 100);
        boolean boolean56 = range49.equals((java.lang.Object) range52);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range49, (double) 1.0f, (double) 'a');
        boolean boolean60 = borderArrangement32.equals((java.lang.Object) range49);
        borderArrangement32.clear();
        borderArrangement32.clear();
        borderArrangement32.clear();
        org.jfree.data.Range range66 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range69 = org.jfree.data.Range.expand(range66, 100.0d, (double) 100);
        boolean boolean70 = borderArrangement32.equals((java.lang.Object) range69);
        double double72 = range69.constrain((-1.0d));
        double double73 = range69.getCentralValue();
        boolean boolean74 = borderArrangement3.equals((java.lang.Object) double73);
        org.jfree.chart.block.Block block75 = null;
        org.jfree.data.Range range78 = new org.jfree.data.Range((double) 100.0f, (double) (byte) 10);
        boolean boolean80 = range78.contains((double) (short) 100);
        double double81 = range78.getUpperBound();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement3.add(block75, (java.lang.Object) double81);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-1.0d) + "'", double72 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.5d + "'", double73 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 10.0d + "'", double81 == 10.0d);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        org.jfree.data.Range range2 = new org.jfree.data.Range(19757.0d, 540.0d);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, 330.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range13, (double) (byte) 10, false);
        double double20 = range13.constrain((double) (byte) -1);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range13, (-420.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getCentralValue();
        boolean boolean8 = range2.contains(9999.0d);
        boolean boolean11 = range2.intersects((-77.25d), 132.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        java.lang.String str8 = range7.toString();
        double double10 = range7.constrain((-420.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[33.0,132.0]" + "'", str8, "Range[33.0,132.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 33.0d + "'", double10 == 33.0d);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-100.0d), 635.0d);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        org.jfree.data.Range range2 = new org.jfree.data.Range(4.5d, (double) (-1.0f));
        double double3 = range2.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 4.5d + "'", double3 == 4.5d);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(1.0d, (double) (short) 10);
        double double8 = range2.getCentralValue();
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range11);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        double double39 = range38.getUpperBound();
        boolean boolean40 = borderArrangement0.equals((java.lang.Object) range38);
        org.jfree.data.Range range41 = null;
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double45 = range44.getLength();
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range44, (double) (short) 10);
        double double48 = range47.getLowerBound();
        boolean boolean50 = range47.contains((double) (byte) 0);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range47, (double) 1.0f, false);
        org.jfree.data.Range range56 = org.jfree.data.Range.expand(range53, (double) (short) 1, (double) (-1L));
        org.jfree.data.Range range59 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double61 = range59.constrain(10.0d);
        boolean boolean64 = range59.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str65 = range59.toString();
        double double67 = range59.constrain((double) 100L);
        org.jfree.data.Range range68 = org.jfree.data.Range.combine(range56, range59);
        org.jfree.data.Range range71 = org.jfree.data.Range.shift(range68, 52.0d, false);
        org.jfree.data.Range range72 = org.jfree.data.Range.combine(range41, range68);
        boolean boolean73 = borderArrangement0.equals((java.lang.Object) range41);
        java.lang.Class<?> wildcardClass74 = borderArrangement0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Range[0.0,10.0]" + "'", str65, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean9 = range2.equals((java.lang.Object) 10);
        boolean boolean11 = range2.contains((double) 1.0f);
        boolean boolean14 = range2.intersects(5.0d, 54.0d);
        boolean boolean16 = range2.contains(132.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        double double34 = range31.constrain((double) 100L);
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double38 = range37.getLength();
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range37, (double) (short) 10);
        double double41 = range40.getLowerBound();
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range40, (double) 100L);
        org.jfree.data.Range range46 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range49 = org.jfree.data.Range.expand(range46, 100.0d, (double) 100);
        boolean boolean50 = range43.equals((java.lang.Object) range46);
        org.jfree.data.Range range53 = org.jfree.data.Range.expand(range43, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range43, (double) 100.0f);
        double double56 = range43.getCentralValue();
        org.jfree.data.Range range59 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double60 = range59.getLength();
        org.jfree.data.Range range62 = org.jfree.data.Range.expandToInclude(range59, (double) (short) 10);
        double double63 = range62.getLowerBound();
        org.jfree.data.Range range65 = org.jfree.data.Range.expandToInclude(range62, (double) 100L);
        org.jfree.data.Range range68 = org.jfree.data.Range.shift(range65, (double) 100L, true);
        org.jfree.data.Range range71 = org.jfree.data.Range.shift(range65, (double) 100, false);
        org.jfree.data.Range range72 = org.jfree.data.Range.combine(range43, range65);
        double double73 = range43.getUpperBound();
        org.jfree.data.Range range74 = org.jfree.data.Range.combine(range31, range43);
        double double75 = range31.getCentralValue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 10.0d + "'", double60 == 10.0d);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 150.0d + "'", double75 == 150.0d);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (-1L), (double) (short) 100);
        boolean boolean4 = range2.contains((double) 1);
        org.jfree.data.Range range7 = new org.jfree.data.Range((double) (byte) 10, 82.5d);
        org.jfree.data.Range range8 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, 48845.0d, false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        boolean boolean28 = borderArrangement7.equals((java.lang.Object) 50.0d);
        borderArrangement7.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getCentralValue();
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getCentralValue();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range36, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range39, (double) 100.0f);
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range44, (double) 10);
        org.jfree.data.Range range47 = org.jfree.data.Range.combine(range32, range46);
        double double48 = range46.getLowerBound();
        org.jfree.data.Range range51 = org.jfree.data.Range.shift(range46, (double) 100L, true);
        boolean boolean52 = borderArrangement7.equals((java.lang.Object) range46);
        org.jfree.chart.block.Block block53 = null;
        org.jfree.data.Range range56 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double57 = range56.getCentralValue();
        org.jfree.data.Range range59 = org.jfree.data.Range.shift(range56, (double) 1);
        org.jfree.data.Range range61 = org.jfree.data.Range.shift(range56, (double) 'a');
        boolean boolean63 = range56.equals((java.lang.Object) 10);
        boolean boolean65 = range56.contains((double) 1.0f);
        double double66 = range56.getUpperBound();
        double double67 = range56.getUpperBound();
        org.jfree.data.Range range70 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj71 = new java.lang.Object();
        boolean boolean72 = range70.equals(obj71);
        boolean boolean75 = range70.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range78 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double79 = range78.getLength();
        org.jfree.data.Range range81 = org.jfree.data.Range.expandToInclude(range78, (double) (short) 10);
        double double82 = range81.getLowerBound();
        org.jfree.data.Range range84 = org.jfree.data.Range.expandToInclude(range81, (double) 100L);
        boolean boolean85 = range70.equals((java.lang.Object) 100L);
        boolean boolean87 = range70.contains(35.0d);
        org.jfree.data.Range range88 = org.jfree.data.Range.combine(range56, range70);
        boolean boolean90 = range56.contains((-670.0d));
        double double91 = range56.getUpperBound();
        boolean boolean94 = range56.intersects(16.0d, (-10.0d));
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement7.add(block53, (java.lang.Object) range56);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5.0d + "'", double33 == 5.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5.0d + "'", double37 == 5.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5.0d + "'", double57 == 5.0d);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 10.0d + "'", double79 == 10.0d);
        org.junit.Assert.assertNotNull(range81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(range84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(range88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        double double9 = range7.getLowerBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range12);
        double double20 = range7.constrain((double) (byte) 1);
        double double21 = range7.getCentralValue();
        double double22 = range7.getCentralValue();
        boolean boolean23 = borderArrangement0.equals((java.lang.Object) double22);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range32, (double) 100L, true);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range32, (double) 100, false);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, 35.0d, true);
        boolean boolean42 = borderArrangement0.equals((java.lang.Object) range41);
        borderArrangement0.clear();
        org.jfree.data.Range range46 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double47 = range46.getLength();
        org.jfree.data.Range range49 = org.jfree.data.Range.expandToInclude(range46, (double) (short) 10);
        double double50 = range49.getLowerBound();
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range49, (double) 100L);
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range52, (double) 100L, true);
        org.jfree.data.Range range57 = org.jfree.data.Range.shift(range55, (double) 100);
        double double58 = range55.getUpperBound();
        boolean boolean59 = borderArrangement0.equals((java.lang.Object) double58);
        org.jfree.chart.block.Block block60 = null;
        org.jfree.data.Range range63 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double64 = range63.getCentralValue();
        org.jfree.data.Range range67 = org.jfree.data.Range.expand(range63, (double) 0L, (double) '4');
        org.jfree.data.Range range69 = org.jfree.data.Range.expandToInclude(range63, (double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block60, (java.lang.Object) range63);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 200.0d + "'", double58 == 200.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 5.0d + "'", double64 == 5.0d);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertNotNull(range69);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range6, 10.0d, false);
        double double29 = range6.getCentralValue();
        double double30 = range6.getCentralValue();
        boolean boolean32 = range6.contains(0.0d);
        double double33 = range6.getLength();
        org.jfree.data.Range range36 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, 100.0d, (double) 100);
        double double40 = range39.getLowerBound();
        double double41 = range39.getLowerBound();
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range39, 1.0d);
        org.jfree.data.Range range46 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj47 = new java.lang.Object();
        boolean boolean48 = range46.equals(obj47);
        boolean boolean51 = range46.intersects(5.0d, (double) 100L);
        double double52 = range46.getLength();
        java.lang.String str53 = range46.toString();
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range46, (double) 0);
        org.jfree.data.Range range58 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double59 = range58.getLength();
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range58, (double) (short) 10);
        double double62 = range61.getLowerBound();
        org.jfree.data.Range range64 = org.jfree.data.Range.expandToInclude(range61, (double) 100L);
        org.jfree.data.Range range67 = org.jfree.data.Range.shift(range64, (double) 100L, true);
        org.jfree.data.Range range70 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range73 = org.jfree.data.Range.shift(range70, (double) 1.0f, false);
        org.jfree.data.Range range75 = org.jfree.data.Range.expandToInclude(range70, 0.0d);
        org.jfree.data.Range range76 = org.jfree.data.Range.combine(range64, range75);
        org.jfree.data.Range range77 = org.jfree.data.Range.combine(range55, range76);
        org.jfree.data.Range range78 = org.jfree.data.Range.combine(range39, range76);
        org.jfree.data.Range range79 = org.jfree.data.Range.combine(range6, range78);
        org.jfree.data.Range range82 = org.jfree.data.Range.expand(range78, 9999.0d, 131.0d);
        double double84 = range82.constrain(62.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 265.0d + "'", double29 == 265.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 265.0d + "'", double30 == 265.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 530.0d + "'", double33 == 530.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-9899.0d) + "'", double40 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-9899.0d) + "'", double41 == (-9899.0d));
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Range[0.0,10.0]" + "'", str53, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertNotNull(range82);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 62.0d + "'", double84 == 62.0d);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double26 = range24.constrain(10.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range16, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range2, range16);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range28, (-235.0d), false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getCentralValue();
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        double double24 = range21.constrain(0.0d);
        java.lang.String str25 = range21.toString();
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range21, (double) (short) 1, true);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range21, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range2, range31);
        double double37 = range2.constrain((double) 1L);
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range2, (double) 'a');
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range42.getCentralValue();
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range42, (double) 1);
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range42, 50.0d);
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range47, (-6400.0d), 107.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range47, 67.5d);
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range2, range52);
        double double54 = range53.getLength();
        double double55 = range53.getUpperBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Range[0.0,10.0]" + "'", str25, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5.0d + "'", double43 == 5.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 67.5d + "'", double54 == 67.5d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 67.5d + "'", double55 == 67.5d);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        double double9 = range7.getLowerBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range12);
        double double20 = range7.constrain((double) (byte) 1);
        double double21 = range7.getCentralValue();
        double double22 = range7.getCentralValue();
        boolean boolean23 = borderArrangement0.equals((java.lang.Object) double22);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range32, (double) 100L, true);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range32, (double) 100, false);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, 35.0d, true);
        boolean boolean42 = borderArrangement0.equals((java.lang.Object) range41);
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range45.getLength();
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) (short) 10);
        double double49 = range48.getLowerBound();
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range48, (double) 100L);
        org.jfree.data.Range range54 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range54, 100.0d, (double) 100);
        boolean boolean58 = range51.equals((java.lang.Object) range54);
        org.jfree.data.Range range61 = org.jfree.data.Range.expand(range51, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range63 = org.jfree.data.Range.expandToInclude(range51, (double) 100.0f);
        java.lang.String str64 = range63.toString();
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range63, (double) (-1.0f));
        double double67 = range63.getLowerBound();
        boolean boolean68 = borderArrangement0.equals((java.lang.Object) double67);
        org.jfree.chart.block.Block block69 = null;
        org.jfree.data.Range range72 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double73 = range72.getLength();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block69, (java.lang.Object) range72);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Range[0.0,100.0]" + "'", str64, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-9.0d) + "'", double73 == (-9.0d));
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        java.lang.String str37 = range33.toString();
        boolean boolean40 = range33.intersects((-3011.0d), (-7878307.5d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Range[1.0,11.0]" + "'", str37, "Range[1.0,11.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range6, 10.0d, false);
        boolean boolean30 = range28.contains((double) (-1.0f));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getLength();
        double double12 = range9.constrain(0.0d);
        java.lang.String str13 = range9.toString();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, (double) (short) 1, true);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range9, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range19, (double) (byte) 1, (double) (-1));
        boolean boolean26 = borderArrangement0.equals((java.lang.Object) range25);
        java.lang.Object obj27 = null;
        boolean boolean28 = borderArrangement0.equals(obj27);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range31.getCentralValue();
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range31, (double) 0L, (double) '4');
        boolean boolean38 = range35.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean40 = range35.contains((double) 0.0f);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range35, 10.0d);
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) range35);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range48 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range48, 100.0d, (double) 100);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range48, (double) ' ');
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range53, 10.0d);
        org.jfree.data.Range range58 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double59 = range58.getLength();
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range58, (double) (short) 10);
        double double62 = range61.getLowerBound();
        org.jfree.data.Range range64 = org.jfree.data.Range.expandToInclude(range61, (double) 100L);
        org.jfree.data.Range range67 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range70 = org.jfree.data.Range.expand(range67, 100.0d, (double) 100);
        boolean boolean71 = range64.equals((java.lang.Object) range67);
        org.jfree.data.Range range74 = org.jfree.data.Range.expand(range64, (double) 1.0f, (double) 'a');
        boolean boolean75 = range55.equals((java.lang.Object) 1.0f);
        org.jfree.data.Range range78 = org.jfree.data.Range.expand(range55, 43.0d, (double) (short) 10);
        org.jfree.data.Range range80 = org.jfree.data.Range.expandToInclude(range78, 9999.0d);
        org.jfree.data.Range range83 = org.jfree.data.Range.expand(range80, (double) 1, 9999.0d);
        boolean boolean84 = borderArrangement0.equals((java.lang.Object) range83);
        org.jfree.chart.block.Block block85 = null;
        org.jfree.data.Range range88 = new org.jfree.data.Range(100.0d, (-6400.0d));
        double double89 = range88.getLength();
        org.jfree.data.Range range92 = org.jfree.data.Range.shift(range88, 100.0d, false);
        java.lang.String str93 = range88.toString();
        org.jfree.data.Range range95 = org.jfree.data.Range.shift(range88, 0.0d);
        org.jfree.data.Range range97 = org.jfree.data.Range.shift(range88, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block85, (java.lang.Object) range88);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,10.0]" + "'", str13, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5.0d + "'", double32 == 5.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertNotNull(range83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-6500.0d) + "'", double89 == (-6500.0d));
        org.junit.Assert.assertNotNull(range92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Range[100.0,-6400.0]" + "'", str93, "Range[100.0,-6400.0]");
        org.junit.Assert.assertNotNull(range95);
        org.junit.Assert.assertNotNull(range97);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 0.0d);
        double double3 = range2.getLength();
        boolean boolean5 = range2.contains((-4924.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-10.0d) + "'", double3 == (-10.0d));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1.0f, false);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        double double8 = range7.getLowerBound();
        double double9 = range7.getUpperBound();
        boolean boolean12 = range7.intersects(0.0d, (-746.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        double double6 = range2.getLength();
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, 37.0d);
        double double10 = range2.constrain(25.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        double double28 = range27.getLowerBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) 100L);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range30, (double) 100L, true);
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range30, (double) 100, false);
        org.jfree.data.Range range37 = org.jfree.data.Range.combine(range8, range30);
        double double38 = range37.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range10, (double) 0L, (double) '4');
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range10, (double) ' ');
        boolean boolean17 = borderArrangement0.equals((java.lang.Object) ' ');
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj21 = new java.lang.Object();
        boolean boolean22 = range20.equals(obj21);
        boolean boolean25 = range20.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        boolean boolean35 = range20.equals((java.lang.Object) 100L);
        double double36 = range20.getLength();
        boolean boolean37 = borderArrangement0.equals((java.lang.Object) range20);
        java.lang.Object obj38 = null;
        boolean boolean39 = borderArrangement0.equals(obj38);
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj43 = new java.lang.Object();
        boolean boolean44 = range42.equals(obj43);
        boolean boolean47 = range42.intersects(1.0d, (double) (short) 10);
        double double48 = range42.getUpperBound();
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range42, (double) (byte) 0);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range50, (double) (short) -1, true);
        boolean boolean54 = borderArrangement0.equals((java.lang.Object) range53);
        borderArrangement0.clear();
        org.jfree.chart.block.Block block56 = null;
        org.jfree.data.Range range59 = new org.jfree.data.Range(100.0d, (-6400.0d));
        double double60 = range59.getLength();
        org.jfree.data.Range range63 = org.jfree.data.Range.shift(range59, 100.0d, false);
        java.lang.String str64 = range59.toString();
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range59, 0.0d);
        org.jfree.data.Range range68 = org.jfree.data.Range.expandToInclude(range66, 135.0d);
        java.lang.String str69 = range68.toString();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block56, (java.lang.Object) str69);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-6500.0d) + "'", double60 == (-6500.0d));
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Range[100.0,-6400.0]" + "'", str64, "Range[100.0,-6400.0]");
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Range[100.0,135.0]" + "'", str69, "Range[100.0,135.0]");
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        boolean boolean11 = range9.contains((double) 0L);
        boolean boolean14 = range9.intersects((double) 1L, 1.0d);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range9, 10000.0d);
        double double18 = range16.constrain((-3000.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        double double12 = range5.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range5, 3310.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        boolean boolean13 = range7.intersects(0.0d, (double) (byte) 0);
        boolean boolean14 = borderArrangement0.equals((java.lang.Object) (byte) 0);
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double18 = range17.getLength();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range17, (double) (short) 10);
        double double21 = range20.getLowerBound();
        double double22 = range20.getLength();
        double double24 = range20.constrain((double) 10);
        boolean boolean25 = borderArrangement0.equals((java.lang.Object) range20);
        java.lang.Object obj26 = null;
        boolean boolean27 = range20.equals(obj26);
        java.lang.String str28 = range20.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[0.0,10.0]" + "'", str28, "Range[0.0,10.0]");
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        double double10 = range2.constrain((double) 10L);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range2, 38.0d);
        double double14 = range12.constrain(0.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 39.0d + "'", double14 == 39.0d);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double8 = range7.getLowerBound();
        java.lang.String str9 = range7.toString();
        java.lang.Class<?> wildcardClass10 = range7.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[0.0,10.0]" + "'", str9, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        double double5 = range2.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (-24106.5d), false);
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range8, 45.5d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean9 = range2.equals((java.lang.Object) 10);
        boolean boolean11 = range2.contains((double) 1.0f);
        double double12 = range2.getUpperBound();
        double double13 = range2.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        double double28 = range27.getLowerBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) 100L);
        boolean boolean31 = range16.equals((java.lang.Object) 100L);
        boolean boolean33 = range16.contains(35.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range2, range16);
        double double35 = range16.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 5.0d + "'", double35 == 5.0d);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, 50.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range7, (-6400.0d), 107.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, 67.5d);
        double double14 = range12.constrain(5.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5.5d + "'", double14 == 5.5d);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range24, (double) (short) -1, false);
        double double42 = range24.getLowerBound();
        java.lang.String str43 = range24.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Range[0.0,100.0]" + "'", str43, "Range[0.0,100.0]");
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, 10.0d);
        double double3 = range2.getLength();
        double double5 = range2.constrain((double) (-1));
        double double7 = range2.constrain((double) 0.0f);
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range2, 19899.0d);
        double double10 = range9.getUpperBound();
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range9, 30.0d);
        double double13 = range9.getCentralValue();
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 19899.0d + "'", double10 == 19899.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 9954.5d + "'", double13 == 9954.5d);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        org.jfree.data.Range range2 = new org.jfree.data.Range(67.5d, 4.5d);
        double double3 = range2.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 67.5d + "'", double3 == 67.5d);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range3 = org.jfree.data.Range.shift(range0, 54.0d, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        boolean boolean37 = range32.contains((-1.0d));
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range32, 0.0d);
        org.jfree.data.Range range42 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range42);
        double double44 = range43.getUpperBound();
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range43, (-1.9898E8d));
        double double47 = range46.getCentralValue();
        double double48 = range46.getLength();
        double double49 = range46.getCentralValue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 200.0d + "'", double44 == 200.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-9.94899E7d) + "'", double47 == (-9.94899E7d));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.989802E8d + "'", double48 == 1.989802E8d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-9.94899E7d) + "'", double49 == (-9.94899E7d));
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-746.0d), 136.0d);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        double double5 = range2.getLowerBound();
        boolean boolean8 = range2.intersects((double) (byte) 0, 0.0d);
        double double10 = range2.constrain((double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range2, 630.0d);
        boolean boolean15 = range12.intersects(0.0d, 1.0d);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, 48845.0d);
        double double18 = range17.getUpperBound();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 48845.0d + "'", double18 == 48845.0d);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        org.jfree.data.Range range2 = new org.jfree.data.Range(5048.5d, (-9790.0d));
        double double3 = range2.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5048.5d + "'", double3 == 5048.5d);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        boolean boolean10 = borderArrangement0.equals((java.lang.Object) '#');
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 100.0d, (double) 100);
        double double18 = range16.constrain((double) (short) 1);
        boolean boolean19 = borderArrangement0.equals((java.lang.Object) (short) 1);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1.0f, false);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        double double8 = range7.getLowerBound();
        double double9 = range7.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range13, 49.0d);
        double double35 = range13.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        borderArrangement0.clear();
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj9 = new java.lang.Object();
        boolean boolean10 = range8.equals(obj9);
        boolean boolean13 = range8.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double18 = range16.constrain(10.0d);
        org.jfree.data.Range range19 = org.jfree.data.Range.combine(range8, range16);
        double double21 = range16.constrain((double) 10);
        boolean boolean22 = borderArrangement0.equals((java.lang.Object) 10);
        org.jfree.chart.block.BlockContainer blockContainer23 = null;
        java.awt.Graphics2D graphics2D24 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D26 = borderArrangement0.arrange(blockContainer23, graphics2D24, rectangleConstraint25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-6400.0d));
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 100.0d, false);
        java.lang.String str7 = range2.toString();
        double double9 = range2.constrain(5097.5d);
        double double10 = range2.getUpperBound();
        double double11 = range2.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-6500.0d) + "'", double3 == (-6500.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Range[100.0,-6400.0]" + "'", str7, "Range[100.0,-6400.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-6400.0d) + "'", double9 == (-6400.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-6400.0d) + "'", double10 == (-6400.0d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-6500.0d) + "'", double11 == (-6500.0d));
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        double double37 = range33.getUpperBound();
        org.jfree.data.Range range40 = new org.jfree.data.Range((double) (byte) 100, (double) '#');
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range33, range40);
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range41, 488.0d, false);
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range41, (-6400.0d));
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range41, 154.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 11.0d + "'", double37 == 11.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range48);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        double double27 = range26.getLowerBound();
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj31 = new java.lang.Object();
        boolean boolean32 = range30.equals(obj31);
        boolean boolean35 = range30.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range38.constrain(10.0d);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range30, range38);
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj45 = new java.lang.Object();
        boolean boolean46 = range44.equals(obj45);
        boolean boolean49 = range44.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double54 = range52.constrain(10.0d);
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range44, range52);
        org.jfree.data.Range range56 = org.jfree.data.Range.combine(range30, range44);
        double double57 = range44.getLowerBound();
        double double58 = range44.getUpperBound();
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range26, range44);
        double double60 = range44.getLength();
        double double61 = range44.getCentralValue();
        double double62 = range44.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9899.0d) + "'", double27 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 10.0d + "'", double60 == 10.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 5.0d + "'", double61 == 5.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 5.0d + "'", double62 == 5.0d);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-495.0d), (-1003.0d));
        double double3 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-749.0d) + "'", double3 == (-749.0d));
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        java.lang.String str36 = range32.toString();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) 1L);
        double double39 = range32.getLowerBound();
        org.jfree.data.Range range40 = null;
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range40, 10.0d);
        double double43 = range42.getLength();
        double double45 = range42.constrain((double) (-1));
        boolean boolean47 = range42.contains(55.0d);
        boolean boolean50 = range42.intersects((double) (byte) 100, 630.0d);
        boolean boolean51 = range32.equals((java.lang.Object) (byte) 100);
        double double52 = range32.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Range[0.0,200.0]" + "'", str36, "Range[0.0,200.0]");
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 200.0d + "'", double52 == 200.0d);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100, 635.0d);
        org.jfree.data.Range range5 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj6 = new java.lang.Object();
        boolean boolean7 = range5.equals(obj6);
        boolean boolean10 = range5.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double14 = range13.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) (short) 10);
        double double17 = range16.getLowerBound();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) 100L);
        boolean boolean20 = range5.equals((java.lang.Object) 100L);
        double double21 = range5.getCentralValue();
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        double double27 = range24.constrain(0.0d);
        java.lang.String str28 = range24.toString();
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range24, (double) (short) 1, true);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range24, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range34, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range5, range34);
        double double40 = range5.constrain((double) 1L);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range5, (double) 'a');
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range45.getCentralValue();
        org.jfree.data.Range range48 = org.jfree.data.Range.shift(range45, (double) 1);
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range45, 50.0d);
        org.jfree.data.Range range53 = org.jfree.data.Range.expand(range50, (-6400.0d), 107.0d);
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range50, 67.5d);
        org.jfree.data.Range range56 = org.jfree.data.Range.combine(range5, range55);
        boolean boolean58 = range5.contains(1.0d);
        boolean boolean59 = range2.equals((java.lang.Object) range5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[0.0,10.0]" + "'", str28, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 5.0d + "'", double46 == 5.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        boolean boolean13 = range11.contains((double) (short) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, 48845.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(range15);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range12, (double) (byte) 1, (double) (-1));
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range18, (double) (-1L), true);
        boolean boolean23 = range18.contains(41.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }
}


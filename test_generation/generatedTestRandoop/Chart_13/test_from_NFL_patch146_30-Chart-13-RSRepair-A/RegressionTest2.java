import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 265.0d);
        boolean boolean12 = range9.intersects((double) (short) 10, 101.0d);
        double double13 = range9.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, 1011.0d, false);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, 100.0d, (double) 100);
        double double24 = range22.constrain((double) (short) 1);
        boolean boolean26 = range22.contains((double) '4');
        org.jfree.data.Range range29 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range29, (double) 0);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range22, range29);
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range16, range22);
        java.lang.Class<?> wildcardClass34 = range16.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 42.0d + "'", double13 == 42.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range34, 100.0d, (double) 100);
        boolean boolean38 = borderArrangement0.equals((java.lang.Object) range37);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range43 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range43, 100.0d, (double) 100);
        boolean boolean49 = range43.intersects((double) 'a', (-9899.0d));
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range43, (double) (byte) -1, true);
        org.jfree.data.Range range54 = org.jfree.data.Range.shift(range43, 37.0d);
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range54, 26.0d, 1011.0d);
        boolean boolean58 = borderArrangement0.equals((java.lang.Object) 1011.0d);
        org.jfree.chart.block.Block block59 = null;
        org.jfree.data.Range range62 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double63 = range62.getCentralValue();
        org.jfree.data.Range range66 = org.jfree.data.Range.expand(range62, (double) 0L, (double) '4');
        org.jfree.data.Range range69 = org.jfree.data.Range.shift(range66, (-2006.0d), false);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block59, (java.lang.Object) range69);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 5.0d + "'", double63 == 5.0d);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range69);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range5, (double) (byte) -1, (double) 100L);
        double double10 = range9.getLowerBound();
        boolean boolean12 = range9.contains(5048.5d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9899.0d) + "'", double6 == (-9899.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10000.0d + "'", double10 == 10000.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range13, (double) '#', false);
        double double17 = range16.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement18 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement18.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean23 = borderArrangement18.equals((java.lang.Object) range22);
        boolean boolean25 = borderArrangement18.equals((java.lang.Object) 1.0f);
        java.lang.Object obj26 = null;
        boolean boolean27 = borderArrangement18.equals(obj26);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj31 = new java.lang.Object();
        boolean boolean32 = range30.equals(obj31);
        boolean boolean35 = range30.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range38.constrain(10.0d);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range30, range38);
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double45 = range44.getLength();
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range44, (double) (short) 10);
        double double48 = range47.getLowerBound();
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range47, (double) 100L);
        org.jfree.data.Range range53 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range56 = org.jfree.data.Range.expand(range53, 100.0d, (double) 100);
        boolean boolean57 = range50.equals((java.lang.Object) range53);
        org.jfree.data.Range range59 = org.jfree.data.Range.shift(range50, (double) 100);
        org.jfree.data.Range range60 = org.jfree.data.Range.combine(range41, range59);
        boolean boolean61 = borderArrangement18.equals((java.lang.Object) range41);
        java.lang.Object obj62 = new java.lang.Object();
        boolean boolean63 = borderArrangement18.equals(obj62);
        boolean boolean64 = range16.equals((java.lang.Object) borderArrangement18);
        org.jfree.chart.block.Block block65 = null;
        org.jfree.data.Range range68 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean70 = range68.contains((double) 1L);
        boolean boolean73 = range68.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range75 = org.jfree.data.Range.shift(range68, 265.0d);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement18.add(block65, (java.lang.Object) range68);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(range75);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) ' ', 26.0d);
        double double3 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 26.0d + "'", double3 == 26.0d);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.jfree.data.Range range2 = new org.jfree.data.Range(35.0d, (double) 0.0f);
        org.jfree.data.Range range5 = new org.jfree.data.Range(1.0d, (double) 10.0f);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, 265.0d, (double) '4');
        org.jfree.data.Range range9 = org.jfree.data.Range.combine(range2, range5);
        boolean boolean11 = range5.contains(340.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        boolean boolean10 = borderArrangement0.equals((java.lang.Object) '#');
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 100.0d, (double) 100);
        double double18 = range16.constrain((double) (short) 1);
        boolean boolean19 = borderArrangement0.equals((java.lang.Object) (short) 1);
        borderArrangement0.clear();
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj24 = new java.lang.Object();
        boolean boolean25 = range23.equals(obj24);
        boolean boolean28 = range23.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range31.constrain(10.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range23, range31);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range23, (double) (short) 100, false);
        java.lang.String str38 = range23.toString();
        double double40 = range23.constrain(99.0d);
        boolean boolean41 = borderArrangement0.equals((java.lang.Object) range23);
        double double42 = range23.getLength();
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range45.getLength();
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) (short) 10);
        double double49 = range48.getLowerBound();
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range48, (double) 100L);
        org.jfree.data.Range range54 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range54, 100.0d, (double) 100);
        boolean boolean58 = range51.equals((java.lang.Object) range54);
        org.jfree.data.Range range61 = org.jfree.data.Range.expand(range51, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range63 = org.jfree.data.Range.expandToInclude(range51, (double) 100.0f);
        double double64 = range51.getCentralValue();
        org.jfree.data.Range range67 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double68 = range67.getLength();
        double double70 = range67.constrain(0.0d);
        java.lang.String str71 = range67.toString();
        org.jfree.data.Range range74 = org.jfree.data.Range.shift(range67, (double) (short) 1, true);
        double double75 = range74.getLowerBound();
        boolean boolean78 = range74.intersects((double) 0, (double) 10);
        org.jfree.data.Range range79 = org.jfree.data.Range.combine(range51, range74);
        org.jfree.data.Range range80 = org.jfree.data.Range.combine(range23, range74);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Range[0.0,10.0]" + "'", str38, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 50.0d + "'", double64 == 50.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 10.0d + "'", double68 == 10.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Range[0.0,10.0]" + "'", str71, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertNotNull(range80);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean9 = range2.equals((java.lang.Object) 10);
        boolean boolean11 = range2.contains((double) 1.0f);
        double double12 = range2.getUpperBound();
        double double13 = range2.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        double double28 = range27.getLowerBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) 100L);
        boolean boolean31 = range16.equals((java.lang.Object) 100L);
        boolean boolean33 = range16.contains(35.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range2, range16);
        boolean boolean36 = range2.contains((-670.0d));
        double double37 = range2.getUpperBound();
        double double38 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5.0d + "'", double38 == 5.0d);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        java.lang.String str36 = range32.toString();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) 1L);
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range32, (-100.0d));
        org.jfree.data.Range range43 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range43, (double) 1.0f, false);
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range43, 0.0d);
        double double49 = range43.getUpperBound();
        boolean boolean50 = range40.equals((java.lang.Object) range43);
        java.lang.String str51 = range43.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Range[0.0,200.0]" + "'", str36, "Range[0.0,200.0]");
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 52.0d + "'", double49 == 52.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Range[10.0,52.0]" + "'", str51, "Range[10.0,52.0]");
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) ' ');
        boolean boolean11 = range2.intersects(530.0d, (double) 10.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range2, 275.0d);
        boolean boolean16 = range2.intersects(3310.0d, 101.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double26 = range24.constrain(10.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range16, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range2, range16);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj32 = new java.lang.Object();
        boolean boolean33 = range31.equals(obj32);
        boolean boolean36 = range31.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double41 = range39.constrain(10.0d);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range31, range39);
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range31, (double) (short) 100, false);
        boolean boolean48 = range31.intersects((double) '#', (double) 0.0f);
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range31, (double) 0, 26.5d);
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range51, (-100.0d));
        boolean boolean54 = range16.equals((java.lang.Object) range53);
        double double55 = range53.getLength();
        org.jfree.data.Range range58 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double59 = range58.getCentralValue();
        org.jfree.data.Range range62 = org.jfree.data.Range.expand(range58, (double) 0L, (double) '4');
        double double63 = range62.getCentralValue();
        org.jfree.data.Range range65 = org.jfree.data.Range.expandToInclude(range62, 90.0d);
        double double66 = range65.getCentralValue();
        org.jfree.data.Range range67 = org.jfree.data.Range.combine(range53, range65);
        double double68 = range65.getUpperBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 375.0d + "'", double55 == 375.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 5.0d + "'", double59 == 5.0d);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 265.0d + "'", double63 == 265.0d);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 265.0d + "'", double66 == 265.0d);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 530.0d + "'", double68 == 530.0d);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 0);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj8 = new java.lang.Object();
        boolean boolean9 = range7.equals(obj8);
        boolean boolean12 = range7.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range15.constrain(10.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range15);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) (short) 10);
        double double25 = range24.getLowerBound();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) 100L);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range30, 100.0d, (double) 100);
        boolean boolean34 = range27.equals((java.lang.Object) range30);
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range27, (double) 100);
        org.jfree.data.Range range37 = org.jfree.data.Range.combine(range18, range36);
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range37, (double) ' ', 1.0d);
        boolean boolean42 = range37.contains((-1.0d));
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range37, 0.0d);
        org.jfree.data.Range range47 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range37, range47);
        boolean boolean49 = range2.equals((java.lang.Object) range37);
        java.lang.String str50 = range37.toString();
        java.lang.Class<?> wildcardClass51 = range37.getClass();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,200.0]" + "'", str50, "Range[0.0,200.0]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        boolean boolean8 = range5.intersects(142.0d, 50.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, 1.0d, true);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range11, (double) (byte) 0, true);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 100, 121.0d);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.Range.shift(range0, 340.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getLength();
        boolean boolean21 = range2.intersects(100.0d, (double) (short) 100);
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range2, 35.0d);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, 48845.0d, 165.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        double double6 = range2.getLength();
        double double7 = range2.getUpperBound();
        double double8 = range2.getLowerBound();
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, 6.0d, false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(range11);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (double) (short) 1);
        double double3 = range2.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-99.0d) + "'", double3 == (-99.0d));
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range5, (double) (-1));
        double double8 = range5.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, 330.0d);
        double double12 = range5.constrain((double) (short) 10);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.jfree.data.Range range2 = new org.jfree.data.Range(530.0d, (double) '#');
        org.jfree.data.Range range5 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj6 = new java.lang.Object();
        boolean boolean7 = range5.equals(obj6);
        boolean boolean10 = range5.intersects(5.0d, (double) 100L);
        double double12 = range5.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range5);
        boolean boolean16 = range2.intersects(5346.0d, 52.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range2, 9904.0d);
        double double19 = range18.getLength();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-495.0d) + "'", double19 == (-495.0d));
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        boolean boolean5 = range2.contains((double) (byte) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) 10.0f);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, (-6500.0d));
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range8, 110.0d, true);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range13, 300.0d);
        java.lang.Class<?> wildcardClass16 = range15.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range3 = org.jfree.data.Range.expand(range0, 5.5d, (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'range' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double26 = range24.constrain(10.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range16, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range2, range16);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj32 = new java.lang.Object();
        boolean boolean33 = range31.equals(obj32);
        boolean boolean36 = range31.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double41 = range39.constrain(10.0d);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range31, range39);
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range31, (double) (short) 100, false);
        boolean boolean48 = range31.intersects((double) '#', (double) 0.0f);
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range31, (double) 0, 26.5d);
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range51, (-100.0d));
        boolean boolean54 = range16.equals((java.lang.Object) range53);
        java.lang.String str55 = range53.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Range[-100.0,275.0]" + "'", str55, "Range[-100.0,275.0]");
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1.0d, (double) 10.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 265.0d, (double) '4');
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) (byte) 1);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, (-6500.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        java.lang.String str4 = range2.toString();
        double double5 = range2.getCentralValue();
        boolean boolean7 = range2.contains((double) (-1));
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        double double15 = range13.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range2, range13);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (double) 0L, 330.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) 1L, (double) '4');
        double double23 = range19.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Range[100.0,1.0]" + "'", str4, "Range[100.0,1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 50.5d + "'", double5 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3310.0d + "'", double23 == 3310.0d);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range10, (double) 0L, (double) '4');
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range10, (double) ' ');
        boolean boolean17 = borderArrangement0.equals((java.lang.Object) ' ');
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj21 = new java.lang.Object();
        boolean boolean22 = range20.equals(obj21);
        boolean boolean25 = range20.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        boolean boolean35 = range20.equals((java.lang.Object) 100L);
        double double36 = range20.getLength();
        boolean boolean37 = borderArrangement0.equals((java.lang.Object) range20);
        java.lang.Object obj38 = null;
        boolean boolean39 = borderArrangement0.equals(obj38);
        borderArrangement0.clear();
        org.jfree.data.Range range43 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range43, (double) 1.0f, false);
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range43, 0.0d);
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range43, (double) 100L, (double) (byte) 10);
        double double53 = range51.constrain(10.0d);
        boolean boolean54 = borderArrangement0.equals((java.lang.Object) range51);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        boolean boolean5 = range2.contains((double) (byte) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) 10.0f);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, 90.0d, (double) 10);
        double double12 = range2.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getCentralValue();
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        double double24 = range21.constrain(0.0d);
        java.lang.String str25 = range21.toString();
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range21, (double) (short) 1, true);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range21, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range2, range31);
        double double37 = range2.constrain((double) 1L);
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range2, (double) 'a');
        double double41 = range2.constrain(6.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Range[0.0,10.0]" + "'", str25, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 6.0d + "'", double41 == 6.0d);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-6400.0d), 35.0d);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        double double8 = range2.getLength();
        java.lang.String str9 = range2.toString();
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (double) 0);
        boolean boolean13 = range2.contains(51.0d);
        boolean boolean15 = range2.equals((java.lang.Object) (short) 100);
        boolean boolean17 = range2.contains(43.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[0.0,10.0]" + "'", str9, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.Range.shift(range0, 330.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (-1.0f));
        borderArrangement0.clear();
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj9 = new java.lang.Object();
        boolean boolean10 = range8.equals(obj9);
        boolean boolean13 = range8.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        boolean boolean23 = range8.equals((java.lang.Object) 100L);
        double double24 = range8.getCentralValue();
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double28 = range27.getLength();
        double double30 = range27.constrain(0.0d);
        java.lang.String str31 = range27.toString();
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range27, (double) (short) 1, true);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range27, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range37, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range8, range37);
        boolean boolean42 = borderArrangement0.equals((java.lang.Object) range8);
        org.jfree.data.Range range45 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range45, (double) (-1));
        double double48 = range47.getUpperBound();
        boolean boolean51 = range47.intersects(50.0d, 5.0d);
        org.jfree.data.Range range54 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double55 = range54.getLength();
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range54, (double) (short) 10);
        org.jfree.data.Range range58 = org.jfree.data.Range.combine(range47, range54);
        org.jfree.data.Range range61 = org.jfree.data.Range.shift(range54, 1.0d, false);
        boolean boolean62 = borderArrangement0.equals((java.lang.Object) false);
        org.jfree.chart.block.Block block63 = null;
        org.jfree.data.Range range66 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj67 = new java.lang.Object();
        boolean boolean68 = range66.equals(obj67);
        boolean boolean71 = range66.intersects(5.0d, (double) 100L);
        double double72 = range66.getLength();
        java.lang.String str73 = range66.toString();
        boolean boolean76 = range66.intersects(0.0d, (double) 10.0f);
        org.jfree.data.Range range78 = org.jfree.data.Range.shift(range66, 3310.0d);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block63, (java.lang.Object) range78);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5.0d + "'", double24 == 5.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Range[0.0,10.0]" + "'", str31, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 99.0d + "'", double48 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 10.0d + "'", double72 == 10.0d);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Range[0.0,10.0]" + "'", str73, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(range78);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        boolean boolean12 = range7.intersects((double) 1L, 1.0d);
        boolean boolean14 = range7.contains(340.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        double double8 = range2.getLength();
        java.lang.String str9 = range2.toString();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getLength();
        double double15 = range12.constrain(0.0d);
        java.lang.String str16 = range12.toString();
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, (double) (short) 1, true);
        boolean boolean21 = range19.contains((double) 0L);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range2, range19);
        java.lang.String str23 = range2.toString();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range2, (double) 'a', false);
        double double28 = range2.constrain(0.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[0.0,10.0]" + "'", str9, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Range[0.0,10.0]" + "'", str16, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Range[0.0,10.0]" + "'", str23, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range15, (double) (-1));
        boolean boolean20 = range15.contains(1265.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) (short) 100, false);
        double double17 = range16.getLowerBound();
        double double19 = range16.constrain(6800.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 110.0d + "'", double19 == 110.0d);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getLength();
        double double12 = range9.constrain(0.0d);
        java.lang.String str13 = range9.toString();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, (double) (short) 1, true);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range9, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range19, (double) (byte) 1, (double) (-1));
        boolean boolean26 = borderArrangement0.equals((java.lang.Object) range25);
        java.lang.Object obj27 = null;
        boolean boolean28 = borderArrangement0.equals(obj27);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range31.getCentralValue();
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range31, (double) 0L, (double) '4');
        boolean boolean38 = range35.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean40 = range35.contains((double) 0.0f);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range35, 10.0d);
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) range35);
        org.jfree.data.Range range46 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double47 = range46.getLength();
        org.jfree.data.Range range49 = org.jfree.data.Range.expandToInclude(range46, (double) (short) 10);
        double double50 = range49.getLowerBound();
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range49, (double) 100L);
        org.jfree.data.Range range55 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range55, 100.0d, (double) 100);
        boolean boolean59 = range52.equals((java.lang.Object) range55);
        org.jfree.data.Range range62 = org.jfree.data.Range.expand(range52, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range64 = org.jfree.data.Range.expandToInclude(range52, (double) 100.0f);
        double double65 = range52.getCentralValue();
        boolean boolean67 = range52.equals((java.lang.Object) 0);
        org.jfree.data.Range range70 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double71 = range70.getLength();
        double double73 = range70.constrain(0.0d);
        java.lang.String str74 = range70.toString();
        org.jfree.data.Range range77 = org.jfree.data.Range.shift(range70, (double) (short) 1, true);
        org.jfree.data.Range range79 = org.jfree.data.Range.expandToInclude(range77, (double) '4');
        org.jfree.data.Range range80 = org.jfree.data.Range.combine(range52, range77);
        java.lang.String str81 = range80.toString();
        org.jfree.data.Range range84 = org.jfree.data.Range.shift(range80, 330.0d, false);
        org.jfree.data.Range range85 = org.jfree.data.Range.combine(range35, range80);
        boolean boolean88 = range35.intersects((-420.0d), 100.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,10.0]" + "'", str13, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5.0d + "'", double32 == 5.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Range[0.0,10.0]" + "'", str74, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Range[0.0,100.0]" + "'", str81, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range84);
        org.junit.Assert.assertNotNull(range85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str8 = range2.toString();
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, (double) (-1));
        double double14 = range13.getUpperBound();
        boolean boolean17 = range13.intersects(50.0d, 5.0d);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double21 = range20.getLength();
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range20, (double) (short) 10);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range20);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range2, range24);
        double double26 = range25.getUpperBound();
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range25, 530.0d, 42.0d);
        double double30 = range29.getCentralValue();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[0.0,10.0]" + "'", str8, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 99.0d + "'", double14 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 99.0d + "'", double26 == 99.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-24106.5d) + "'", double30 == (-24106.5d));
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-9899.0d), 51.0d);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement3.clear();
        org.jfree.data.Range range7 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean8 = borderArrangement3.equals((java.lang.Object) range7);
        borderArrangement3.clear();
        borderArrangement3.clear();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double14 = range13.getCentralValue();
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range13, (double) 0L, (double) '4');
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range13, (double) ' ');
        boolean boolean20 = borderArrangement3.equals((java.lang.Object) ' ');
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj24 = new java.lang.Object();
        boolean boolean25 = range23.equals(obj24);
        boolean boolean28 = range23.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range31.getLength();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) (short) 10);
        double double35 = range34.getLowerBound();
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range34, (double) 100L);
        boolean boolean38 = range23.equals((java.lang.Object) 100L);
        double double39 = range23.getLength();
        boolean boolean40 = borderArrangement3.equals((java.lang.Object) range23);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range2, range23);
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range23, 0.0d);
        double double45 = range23.constrain((double) (short) 1);
        double double46 = range23.getCentralValue();
        double double47 = range23.getLength();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5.0d + "'", double14 == 5.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 5.0d + "'", double46 == 5.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((-9.0d), 2010.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        boolean boolean19 = range2.contains(35.0d);
        double double20 = range2.getLowerBound();
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double24 = range23.getCentralValue();
        double double25 = range23.getLowerBound();
        double double26 = range23.getLowerBound();
        double double27 = range23.getLength();
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range23, 330.0d, true);
        java.lang.String str31 = range30.toString();
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range2, range30);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, 100.0d, (double) 100);
        double double39 = range38.getLowerBound();
        double double41 = range38.constrain((double) 10.0f);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range38, 51.0d, 6676165.0d);
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range32, range38);
        java.lang.Class<?> wildcardClass46 = range38.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5.0d + "'", double24 == 5.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Range[330.0,340.0]" + "'", str31, "Range[330.0,340.0]");
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-9899.0d) + "'", double39 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = range4.equals((java.lang.Object) (byte) 100);
        double double8 = range4.getCentralValue();
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) (short) 1, (double) (-1));
        boolean boolean12 = range4.equals((java.lang.Object) range11);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range11, (double) (byte) 10);
        double double15 = range14.getUpperBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, 136.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 50.5d + "'", double8 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double33 = range32.getUpperBound();
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getCentralValue();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range36, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range39, (double) '4');
        boolean boolean46 = borderArrangement3.equals((java.lang.Object) '4');
        borderArrangement3.clear();
        org.jfree.chart.block.Block block48 = null;
        org.jfree.data.Range range51 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj52 = new java.lang.Object();
        boolean boolean53 = range51.equals(obj52);
        boolean boolean56 = range51.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range59 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double61 = range59.constrain(10.0d);
        org.jfree.data.Range range62 = org.jfree.data.Range.combine(range51, range59);
        org.jfree.data.Range range65 = org.jfree.data.Range.shift(range51, (double) (short) 100, false);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement3.add(block48, (java.lang.Object) range65);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5.0d + "'", double37 == 5.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertNotNull(range65);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = borderArrangement0.equals((java.lang.Object) 1.0f);
        java.lang.Object obj8 = null;
        boolean boolean9 = borderArrangement0.equals(obj8);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj13 = new java.lang.Object();
        boolean boolean14 = range12.equals(obj13);
        boolean boolean17 = range12.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range20.constrain(10.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range12, range20);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, 100.0d, (double) 100);
        boolean boolean39 = range32.equals((java.lang.Object) range35);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, (double) 100);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range23, range41);
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) range23);
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range23, 0.0d);
        org.jfree.data.Range range48 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double49 = range48.getLength();
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range48, (double) (short) 10);
        double double52 = range51.getLowerBound();
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range51, (double) 100L);
        org.jfree.data.Range range57 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range60 = org.jfree.data.Range.expand(range57, 100.0d, (double) 100);
        boolean boolean61 = range54.equals((java.lang.Object) range57);
        org.jfree.data.Range range64 = org.jfree.data.Range.expand(range54, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range66 = org.jfree.data.Range.expandToInclude(range54, (double) 100.0f);
        double double67 = range54.getCentralValue();
        boolean boolean69 = range54.equals((java.lang.Object) 0);
        org.jfree.data.Range range72 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double73 = range72.getLength();
        double double75 = range72.constrain(0.0d);
        java.lang.String str76 = range72.toString();
        org.jfree.data.Range range79 = org.jfree.data.Range.shift(range72, (double) (short) 1, true);
        org.jfree.data.Range range81 = org.jfree.data.Range.expandToInclude(range79, (double) '4');
        org.jfree.data.Range range82 = org.jfree.data.Range.combine(range54, range79);
        double double83 = range79.getUpperBound();
        org.jfree.data.Range range86 = new org.jfree.data.Range((double) (byte) 100, (double) '#');
        org.jfree.data.Range range87 = org.jfree.data.Range.combine(range79, range86);
        org.jfree.data.Range range90 = org.jfree.data.Range.shift(range87, 488.0d, false);
        org.jfree.data.Range range92 = org.jfree.data.Range.shift(range87, (-6400.0d));
        org.jfree.data.Range range93 = org.jfree.data.Range.combine(range45, range92);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 50.0d + "'", double67 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Range[0.0,10.0]" + "'", str76, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertNotNull(range81);
        org.junit.Assert.assertNotNull(range82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 11.0d + "'", double83 == 11.0d);
        org.junit.Assert.assertNotNull(range87);
        org.junit.Assert.assertNotNull(range90);
        org.junit.Assert.assertNotNull(range92);
        org.junit.Assert.assertNotNull(range93);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (byte) 0, (double) (-1L));
        double double6 = range2.getUpperBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) 10);
        org.jfree.chart.block.BorderArrangement borderArrangement9 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement9.clear();
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean14 = borderArrangement9.equals((java.lang.Object) range13);
        borderArrangement9.clear();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj19 = new java.lang.Object();
        boolean boolean20 = range18.equals(obj19);
        boolean boolean21 = borderArrangement9.equals(obj19);
        boolean boolean22 = range8.equals(obj19);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range8, 1.5955855E7d);
        double double25 = range8.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, (double) 100.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range10, 0.0d, 0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range13);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (byte) 0, (double) (-1L));
        double double6 = range2.getUpperBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) 10);
        boolean boolean11 = range2.intersects((double) 1L, 26.5d);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range2, 0.0d, false);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(range14);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        double double8 = range2.getLength();
        java.lang.String str9 = range2.toString();
        boolean boolean12 = range2.intersects(0.0d, (double) 10.0f);
        double double13 = range2.getCentralValue();
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range2, (-6400.0d), (-1908.0d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[0.0,10.0]" + "'", str9, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range16);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 0, 0.0d);
        java.lang.Class<?> wildcardClass3 = range2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        boolean boolean28 = borderArrangement7.equals((java.lang.Object) 50.0d);
        borderArrangement7.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range32.constrain(10.0d);
        boolean boolean37 = range32.intersects((double) 10.0f, (double) (-1.0f));
        double double39 = range32.constrain(0.0d);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range32, (double) 0.0f, (double) ' ');
        double double43 = range42.getUpperBound();
        org.jfree.data.Range range46 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean47 = range42.equals((java.lang.Object) range46);
        boolean boolean48 = borderArrangement7.equals((java.lang.Object) boolean47);
        boolean boolean50 = borderArrangement7.equals((java.lang.Object) "");
        borderArrangement7.clear();
        org.jfree.data.Range range54 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double55 = range54.getLength();
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range54, (double) (short) 10);
        double double58 = range57.getLowerBound();
        org.jfree.data.Range range60 = org.jfree.data.Range.expandToInclude(range57, (double) 100L);
        org.jfree.data.Range range63 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range66 = org.jfree.data.Range.expand(range63, 100.0d, (double) 100);
        boolean boolean67 = range60.equals((java.lang.Object) range63);
        org.jfree.data.Range range70 = org.jfree.data.Range.expand(range60, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range72 = org.jfree.data.Range.expandToInclude(range60, (double) 100.0f);
        double double73 = range60.getCentralValue();
        boolean boolean75 = range60.equals((java.lang.Object) 0);
        org.jfree.data.Range range78 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double79 = range78.getLength();
        double double81 = range78.constrain(0.0d);
        java.lang.String str82 = range78.toString();
        org.jfree.data.Range range85 = org.jfree.data.Range.shift(range78, (double) (short) 1, true);
        org.jfree.data.Range range87 = org.jfree.data.Range.expandToInclude(range85, (double) '4');
        org.jfree.data.Range range89 = org.jfree.data.Range.expandToInclude(range87, (double) 1L);
        org.jfree.data.Range range90 = org.jfree.data.Range.combine(range60, range87);
        org.jfree.data.Range range93 = org.jfree.data.Range.expand(range87, 107.0d, 0.0d);
        double double94 = range87.getLength();
        boolean boolean95 = borderArrangement7.equals((java.lang.Object) double94);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 330.0d + "'", double43 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 10.0d + "'", double79 == 10.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Range[0.0,10.0]" + "'", str82, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range85);
        org.junit.Assert.assertNotNull(range87);
        org.junit.Assert.assertNotNull(range89);
        org.junit.Assert.assertNotNull(range90);
        org.junit.Assert.assertNotNull(range93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 51.0d + "'", double94 == 51.0d);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double6 = range2.constrain((double) 0L);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range5, (double) '4', false);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, 150.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getUpperBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        double double9 = range8.getCentralValue();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range12, (double) 'a');
        java.lang.String str18 = range17.toString();
        double double19 = range17.getUpperBound();
        boolean boolean22 = range17.intersects(90.0d, 42.0d);
        boolean boolean23 = range8.equals((java.lang.Object) range17);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5.0d + "'", double9 == 5.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[97.0,107.0]" + "'", str18, "Range[97.0,107.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 107.0d + "'", double19 == 107.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean9 = range2.equals((java.lang.Object) 10);
        boolean boolean11 = range2.contains((double) 1.0f);
        double double12 = range2.getUpperBound();
        double double13 = range2.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        double double28 = range27.getLowerBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) 100L);
        boolean boolean31 = range16.equals((java.lang.Object) 100L);
        boolean boolean33 = range16.contains(35.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range2, range16);
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj38 = new java.lang.Object();
        boolean boolean39 = range37.equals(obj38);
        boolean boolean42 = range37.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range45.getLength();
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) (short) 10);
        double double49 = range48.getLowerBound();
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range48, (double) 100L);
        boolean boolean52 = range37.equals((java.lang.Object) 100L);
        boolean boolean54 = range37.contains((double) (byte) 100);
        double double55 = range37.getUpperBound();
        org.jfree.data.Range range56 = org.jfree.data.Range.combine(range34, range37);
        double double57 = range34.getLength();
        org.jfree.data.Range range60 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj61 = new java.lang.Object();
        boolean boolean62 = range60.equals(obj61);
        boolean boolean65 = range60.intersects(1.0d, (double) (short) 10);
        double double66 = range60.getUpperBound();
        double double68 = range60.constrain(10.0d);
        org.jfree.data.Range range69 = org.jfree.data.Range.combine(range34, range60);
        double double71 = range34.constrain(15.0d);
        double double72 = range34.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 10.0d + "'", double68 == 10.0d);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 5.0d + "'", double72 == 5.0d);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1.0d, (double) 100L);
        java.lang.Class<?> wildcardClass3 = range2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        boolean boolean37 = range32.contains((-1.0d));
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range32, 0.0d);
        boolean boolean42 = range32.intersects((double) (-1.0f), 530.0d);
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range32, 54.0d);
        double double45 = range44.getCentralValue();
        double double46 = range44.getUpperBound();
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range44, 11.0d, false);
        double double50 = range44.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 154.0d + "'", double45 == 154.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 254.0d + "'", double46 == 254.0d);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 54.0d + "'", double50 == 54.0d);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        org.jfree.data.Range range6 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range6, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range9);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) '4', false);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range2, 150.5d, false);
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range19, (double) 100L);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.0d + "'", double7 == 5.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range21);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range13, (double) '#', false);
        double double17 = range16.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement18 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement18.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean23 = borderArrangement18.equals((java.lang.Object) range22);
        boolean boolean25 = borderArrangement18.equals((java.lang.Object) 1.0f);
        java.lang.Object obj26 = null;
        boolean boolean27 = borderArrangement18.equals(obj26);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj31 = new java.lang.Object();
        boolean boolean32 = range30.equals(obj31);
        boolean boolean35 = range30.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range38.constrain(10.0d);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range30, range38);
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double45 = range44.getLength();
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range44, (double) (short) 10);
        double double48 = range47.getLowerBound();
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range47, (double) 100L);
        org.jfree.data.Range range53 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range56 = org.jfree.data.Range.expand(range53, 100.0d, (double) 100);
        boolean boolean57 = range50.equals((java.lang.Object) range53);
        org.jfree.data.Range range59 = org.jfree.data.Range.shift(range50, (double) 100);
        org.jfree.data.Range range60 = org.jfree.data.Range.combine(range41, range59);
        boolean boolean61 = borderArrangement18.equals((java.lang.Object) range41);
        java.lang.Object obj62 = new java.lang.Object();
        boolean boolean63 = borderArrangement18.equals(obj62);
        boolean boolean64 = range16.equals((java.lang.Object) borderArrangement18);
        borderArrangement18.clear();
        borderArrangement18.clear();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range35, (double) 1L);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range8, range35);
        boolean boolean40 = range35.contains(55.0d);
        java.lang.Class<?> wildcardClass41 = range35.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range5, (double) (byte) -1, (double) 100L);
        double double11 = range5.constrain(265.0d);
        java.lang.String str12 = range5.toString();
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range5, 133.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9899.0d) + "'", double6 == (-9899.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 265.0d + "'", double11 == 265.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Range[-9899.0,10000.0]" + "'", str12, "Range[-9899.0,10000.0]");
        org.junit.Assert.assertNotNull(range14);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (byte) 0, (double) (-1L));
        double double15 = range11.getUpperBound();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean27 = range24.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        double double41 = range40.getLength();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        boolean boolean49 = range44.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str50 = range44.toString();
        boolean boolean51 = range40.equals((java.lang.Object) range44);
        boolean boolean52 = range11.equals((java.lang.Object) range44);
        boolean boolean53 = range5.equals((java.lang.Object) range44);
        double double54 = range44.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,10.0]" + "'", str50, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        double double9 = range2.getUpperBound();
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, 110.0d, (double) 1);
        java.lang.String str13 = range2.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[1.0,100.0]" + "'", str13, "Range[1.0,100.0]");
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) ' ');
        double double9 = range8.getCentralValue();
        double double11 = range8.constrain((-164.5d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 16.0d + "'", double9 == 16.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        double double39 = range38.getUpperBound();
        boolean boolean40 = borderArrangement0.equals((java.lang.Object) range38);
        borderArrangement0.clear();
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) 26.5d);
        org.jfree.chart.block.BorderArrangement borderArrangement44 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean46 = borderArrangement44.equals((java.lang.Object) (-1L));
        boolean boolean48 = borderArrangement44.equals((java.lang.Object) (byte) 10);
        org.jfree.chart.block.Block block49 = null;
        org.jfree.data.Range range50 = null;
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range50, 10.0d);
        borderArrangement44.add(block49, (java.lang.Object) range50);
        org.jfree.data.Range range56 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean58 = range56.contains((double) 1L);
        boolean boolean61 = range56.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range63 = org.jfree.data.Range.shift(range56, 265.0d);
        boolean boolean64 = borderArrangement44.equals((java.lang.Object) 265.0d);
        org.jfree.data.Range range67 = new org.jfree.data.Range((double) (byte) 100, 101.0d);
        boolean boolean68 = borderArrangement44.equals((java.lang.Object) (byte) 100);
        boolean boolean69 = borderArrangement0.equals((java.lang.Object) borderArrangement44);
        org.jfree.chart.block.BlockContainer blockContainer70 = null;
        java.awt.Graphics2D graphics2D71 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D73 = borderArrangement0.arrange(blockContainer70, graphics2D71, rectangleConstraint72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        boolean boolean11 = range9.contains((double) 0L);
        double double13 = range9.constrain(50.5d);
        java.lang.String str14 = range9.toString();
        java.lang.Class<?> wildcardClass15 = range9.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 11.0d + "'", double13 == 11.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[1.0,11.0]" + "'", str14, "Range[1.0,11.0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 265.0d);
        boolean boolean12 = range9.intersects((double) (short) 10, 101.0d);
        double double13 = range9.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, 1011.0d, false);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, 100.0d, (double) 100);
        double double24 = range22.constrain((double) (short) 1);
        boolean boolean26 = range22.contains((double) '4');
        org.jfree.data.Range range29 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range29, (double) 0);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range22, range29);
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range16, range22);
        org.jfree.data.Range range34 = null;
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range22, range34);
        java.lang.Class<?> wildcardClass36 = range35.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 42.0d + "'", double13 == 42.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        boolean boolean5 = range2.contains((double) (byte) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) 10.0f);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, 11.0d);
        java.lang.String str11 = range10.toString();
        double double12 = range10.getUpperBound();
        org.jfree.data.Range range15 = new org.jfree.data.Range((double) (-1.0f), (double) '#');
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range10, range15);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, 45.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[-989.0,121.0]" + "'", str11, "Range[-989.0,121.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 121.0d + "'", double12 == 121.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range18);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (byte) 0, (double) (-1L));
        double double15 = range11.getUpperBound();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean27 = range24.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        double double41 = range40.getLength();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        boolean boolean49 = range44.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str50 = range44.toString();
        boolean boolean51 = range40.equals((java.lang.Object) range44);
        boolean boolean52 = range11.equals((java.lang.Object) range44);
        boolean boolean53 = range5.equals((java.lang.Object) range44);
        org.jfree.data.Range range54 = null;
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range44, range54);
        boolean boolean57 = range55.equals((java.lang.Object) 0L);
        org.jfree.data.Range range59 = org.jfree.data.Range.expandToInclude(range55, 330.0d);
        org.jfree.data.Range range62 = org.jfree.data.Range.shift(range59, 630.0d, false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,10.0]" + "'", str50, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range62);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        double double5 = range2.getLowerBound();
        boolean boolean8 = range2.intersects((double) (byte) 0, 0.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (double) 0, true);
        double double13 = range11.constrain(102.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range11, (double) 10.0f);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range15);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, (double) 100.0f);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 10);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range15, (double) 0L, (double) '4');
        boolean boolean22 = range19.intersects((double) (short) 1, (double) 0.0f);
        double double23 = range19.getLowerBound();
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj27 = new java.lang.Object();
        boolean boolean28 = range26.equals(obj27);
        boolean boolean31 = range26.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range34 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double36 = range34.constrain(10.0d);
        org.jfree.data.Range range37 = org.jfree.data.Range.combine(range26, range34);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range19, range37);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range19, (double) (short) 10);
        boolean boolean41 = range12.equals((java.lang.Object) (short) 10);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getUpperBound();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj10 = new java.lang.Object();
        boolean boolean11 = range9.equals(obj10);
        boolean boolean14 = range9.intersects(5.0d, (double) 100L);
        double double15 = range9.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range9, 0.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range2, range17);
        double double20 = range18.constrain(154.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        borderArrangement0.clear();
        java.lang.Object obj31 = null;
        boolean boolean32 = borderArrangement0.equals(obj31);
        org.jfree.data.Range range35 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double36 = range35.getLength();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) (short) 10);
        double double39 = range38.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement40 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean42 = borderArrangement40.equals((java.lang.Object) (-1L));
        boolean boolean44 = borderArrangement40.equals((java.lang.Object) (-1.0f));
        boolean boolean45 = range38.equals((java.lang.Object) borderArrangement40);
        org.jfree.chart.block.BorderArrangement borderArrangement46 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement46.clear();
        org.jfree.data.Range range50 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean51 = borderArrangement46.equals((java.lang.Object) range50);
        borderArrangement46.clear();
        org.jfree.data.Range range55 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj56 = new java.lang.Object();
        boolean boolean57 = range55.equals(obj56);
        boolean boolean58 = borderArrangement46.equals(obj56);
        boolean boolean59 = borderArrangement40.equals((java.lang.Object) borderArrangement46);
        boolean boolean61 = borderArrangement40.equals((java.lang.Object) 50.0d);
        borderArrangement40.clear();
        org.jfree.data.Range range65 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double67 = range65.constrain(10.0d);
        boolean boolean70 = range65.intersects((double) 10.0f, (double) (-1.0f));
        double double72 = range65.constrain(0.0d);
        org.jfree.data.Range range75 = org.jfree.data.Range.expand(range65, (double) 0.0f, (double) ' ');
        double double76 = range75.getUpperBound();
        org.jfree.data.Range range79 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean80 = range75.equals((java.lang.Object) range79);
        boolean boolean81 = borderArrangement40.equals((java.lang.Object) boolean80);
        borderArrangement40.clear();
        boolean boolean83 = borderArrangement0.equals((java.lang.Object) borderArrangement40);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 330.0d + "'", double76 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getUpperBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range8, 71.0d, 264.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, 265.0d);
        org.jfree.data.Range range3 = null;
        org.jfree.data.Range range4 = org.jfree.data.Range.combine(range2, range3);
        double double5 = range2.getLowerBound();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 11.0d + "'", double5 == 11.0d);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        double double9 = range7.getLowerBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range12);
        double double20 = range7.constrain((double) (byte) 1);
        double double21 = range7.getCentralValue();
        double double22 = range7.getCentralValue();
        boolean boolean23 = borderArrangement0.equals((java.lang.Object) double22);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range32, (double) 100L, true);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range32, (double) 100, false);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, 35.0d, true);
        boolean boolean42 = borderArrangement0.equals((java.lang.Object) range41);
        double double43 = range41.getLength();
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range41, (double) (byte) 1);
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range45, (-3000.0d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-9899.0d), 51.0d);
        org.jfree.data.Range range5 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double6 = range5.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range5, (double) 0L, (double) '4');
        boolean boolean12 = range9.intersects((double) (short) 1, (double) 0.0f);
        double double13 = range9.getLowerBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double26 = range24.constrain(10.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range16, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range9, range27);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range9, 10.0d, false);
        double double32 = range9.getCentralValue();
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range2, range9);
        org.jfree.data.Range range36 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, (double) (byte) 0, (double) (-1L));
        double double40 = range36.getUpperBound();
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getLength();
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range43, (double) (short) 10);
        double double47 = range46.getLowerBound();
        org.jfree.data.Range range49 = org.jfree.data.Range.expandToInclude(range46, (double) 100L);
        boolean boolean52 = range49.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range55 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double56 = range55.getLength();
        org.jfree.data.Range range58 = org.jfree.data.Range.expandToInclude(range55, (double) (short) 10);
        double double59 = range58.getLowerBound();
        boolean boolean61 = range58.contains((double) (byte) 0);
        org.jfree.data.Range range64 = org.jfree.data.Range.shift(range58, (double) 1.0f, false);
        org.jfree.data.Range range65 = org.jfree.data.Range.combine(range49, range64);
        double double66 = range65.getLength();
        org.jfree.data.Range range69 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double71 = range69.constrain(10.0d);
        boolean boolean74 = range69.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str75 = range69.toString();
        boolean boolean76 = range65.equals((java.lang.Object) range69);
        boolean boolean77 = range36.equals((java.lang.Object) range69);
        org.jfree.data.Range range78 = org.jfree.data.Range.combine(range9, range69);
        java.lang.Class<?> wildcardClass79 = range78.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 265.0d + "'", double32 == 265.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 10.0d + "'", double56 == 10.0d);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 100.0d + "'", double66 == 100.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Range[0.0,10.0]" + "'", str75, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getUpperBound();
        boolean boolean8 = range4.intersects(50.0d, 5.0d);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        org.jfree.data.Range range15 = org.jfree.data.Range.combine(range4, range11);
        java.lang.String str16 = range15.toString();
        java.lang.String str17 = range15.toString();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 99.0d + "'", double5 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Range[0.0,99.0]" + "'", str16, "Range[0.0,99.0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[0.0,99.0]" + "'", str17, "Range[0.0,99.0]");
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, 100.0d, (double) 100);
        boolean boolean15 = range9.intersects((double) 'a', (-9899.0d));
        boolean boolean16 = range6.equals((java.lang.Object) (-9899.0d));
        double double18 = range6.constrain((-4924.0d));
        boolean boolean21 = range6.intersects(3310.0d, (-2.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj10 = new java.lang.Object();
        boolean boolean11 = range9.equals(obj10);
        boolean boolean12 = borderArrangement0.equals(obj10);
        java.lang.Class<?> wildcardClass13 = obj10.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        borderArrangement0.clear();
        java.lang.Object obj31 = null;
        boolean boolean32 = borderArrangement0.equals(obj31);
        org.jfree.data.Range range35 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range35.constrain(10.0d);
        boolean boolean40 = range35.intersects((double) 10.0f, (double) (-1.0f));
        double double42 = range35.constrain(0.0d);
        org.jfree.data.Range range45 = org.jfree.data.Range.expand(range35, (double) 0.0f, (double) ' ');
        double double46 = range45.getUpperBound();
        double double47 = range45.getCentralValue();
        boolean boolean48 = borderArrangement0.equals((java.lang.Object) range45);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 330.0d + "'", double46 == 330.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 165.0d + "'", double47 == 165.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.Range.shift(range0, (double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-420.0d), (-12.0d));
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.jfree.data.Range range2 = new org.jfree.data.Range(275.0d, 0.0d);
        org.jfree.data.Range range5 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double6 = range5.getLength();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) (short) 10);
        double double9 = range8.getLowerBound();
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range8, (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range11, (double) 100L, true);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range14, (double) (-1L));
        boolean boolean17 = range2.equals((java.lang.Object) range14);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        java.lang.String str37 = range36.toString();
        org.jfree.data.Range range40 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range40, 100.0d, (double) 100);
        double double44 = range43.getLowerBound();
        double double45 = range43.getLowerBound();
        org.jfree.data.Range range46 = org.jfree.data.Range.combine(range36, range43);
        boolean boolean49 = range36.intersects(135.0d, 19757.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Range[0.0,100.0]" + "'", str37, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-9899.0d) + "'", double44 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-9899.0d) + "'", double45 == (-9899.0d));
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.jfree.data.Range range2 = new org.jfree.data.Range(49.5d, 35.0d);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(1.0d, (double) (short) 10);
        double double8 = range2.getCentralValue();
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, 49.0d, 50.0d);
        boolean boolean13 = range11.contains((double) (byte) 0);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(range15);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        org.jfree.data.Range range12 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1.0f, false);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, 0.0d);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range12, (double) 100L, (double) (byte) 10);
        double double21 = range12.getCentralValue();
        boolean boolean22 = range7.equals((java.lang.Object) double21);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 31.0d + "'", double21 == 31.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, 265.0d);
        org.jfree.data.Range range3 = null;
        org.jfree.data.Range range4 = org.jfree.data.Range.combine(range2, range3);
        org.jfree.data.Range range7 = org.jfree.data.Range.expand(range2, 19899.0d, 19757.0d);
        double double8 = range7.getUpperBound();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5018543.0d + "'", double8 == 5018543.0d);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        double double5 = range2.getLowerBound();
        boolean boolean8 = range2.intersects((double) (byte) 0, 0.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (double) 0, true);
        double double13 = range11.constrain(5097.5d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1.0f, 10000.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 0);
        double double5 = range2.getLength();
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 'a', false);
        double double9 = range8.getCentralValue();
        boolean boolean11 = range8.contains((double) 0);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range8, 97.0d);
        double double14 = range13.getLowerBound();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 9999.0d + "'", double5 == 9999.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5097.5d + "'", double9 == 5097.5d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 195.0d + "'", double14 == 195.0d);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range5 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        double double6 = range5.getCentralValue();
        org.jfree.data.Range range7 = org.jfree.data.Range.combine(range2, range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.5d + "'", double6 == 50.5d);
        org.junit.Assert.assertNotNull(range7);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        double double16 = range8.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range8, 19899.0d, (double) (short) 10);
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range8, 530.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range21);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = range4.equals((java.lang.Object) (byte) 100);
        double double8 = range4.getCentralValue();
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) (short) 1, (double) (-1));
        boolean boolean12 = range4.equals((java.lang.Object) range11);
        double double13 = range11.getCentralValue();
        java.lang.String str14 = range11.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 50.5d + "'", double8 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[1.0,-1.0]" + "'", str14, "Range[1.0,-1.0]");
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range12, (double) 0L, false);
        boolean boolean21 = range18.intersects(9.0d, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range18, 35.0d, false);
        double double25 = range18.getLength();
        boolean boolean28 = range18.intersects(132.0d, 102.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2010.0d + "'", double25 == 2010.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        double double13 = range12.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean17 = range12.equals((java.lang.Object) range16);
        org.jfree.data.Range range20 = new org.jfree.data.Range(11.0d, (-1.0d));
        double double21 = range20.getCentralValue();
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range12, range20);
        org.jfree.data.Range range25 = new org.jfree.data.Range(99.0d, (double) (byte) -1);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range20, range25);
        double double27 = range25.getLength();
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range33, (double) '4', false);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range25, range42);
        double double44 = range25.getUpperBound();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 330.0d + "'", double13 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-100.0d) + "'", double27 == (-100.0d));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (-1), (double) (-1L));
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        double double10 = range2.constrain((double) 10L);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range2, 38.0d);
        double double14 = range12.constrain((double) 1);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 39.0d + "'", double14 == 39.0d);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.jfree.data.Range range2 = new org.jfree.data.Range(6676165.0d, 11.0d);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        java.lang.String str4 = range2.toString();
        double double5 = range2.getCentralValue();
        boolean boolean7 = range2.contains((double) (-1));
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        double double15 = range13.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range2, range13);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (double) 0L, 330.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(275.0d, 97.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range19, range22);
        boolean boolean25 = range22.contains(5048.5d);
        boolean boolean27 = range22.contains(148.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Range[100.0,1.0]" + "'", str4, "Range[100.0,1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 50.5d + "'", double5 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, (double) 100L, true);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range8, (double) 100, false);
        double double16 = range8.constrain((double) 1.0f);
        double double17 = range8.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 50.0d + "'", double17 == 50.0d);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) ' ');
        double double9 = range8.getUpperBound();
        double double10 = range8.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 32.0d + "'", double9 == 32.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 16.0d + "'", double10 == 16.0d);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        double double9 = range7.getLowerBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range12);
        double double20 = range7.constrain((double) (byte) 1);
        double double21 = range7.getCentralValue();
        double double22 = range7.getCentralValue();
        boolean boolean23 = borderArrangement0.equals((java.lang.Object) double22);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, (double) (byte) 0, (double) (-1L));
        double double39 = range35.getUpperBound();
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range42.getLength();
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range42, (double) (short) 10);
        double double46 = range45.getLowerBound();
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) 100L);
        boolean boolean51 = range48.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range54 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double55 = range54.getLength();
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range54, (double) (short) 10);
        double double58 = range57.getLowerBound();
        boolean boolean60 = range57.contains((double) (byte) 0);
        org.jfree.data.Range range63 = org.jfree.data.Range.shift(range57, (double) 1.0f, false);
        org.jfree.data.Range range64 = org.jfree.data.Range.combine(range48, range63);
        double double65 = range64.getLength();
        org.jfree.data.Range range68 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double70 = range68.constrain(10.0d);
        boolean boolean73 = range68.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str74 = range68.toString();
        boolean boolean75 = range64.equals((java.lang.Object) range68);
        boolean boolean76 = range35.equals((java.lang.Object) range68);
        boolean boolean77 = range29.equals((java.lang.Object) range68);
        org.jfree.data.Range range78 = null;
        org.jfree.data.Range range79 = org.jfree.data.Range.combine(range68, range78);
        boolean boolean81 = range79.equals((java.lang.Object) 0L);
        boolean boolean82 = borderArrangement0.equals((java.lang.Object) range79);
        boolean boolean84 = range79.contains(335.0d);
        double double85 = range79.getLowerBound();
        org.jfree.data.Range range88 = new org.jfree.data.Range(100.0d, (-6400.0d));
        double double89 = range88.getLength();
        org.jfree.data.Range range92 = org.jfree.data.Range.shift(range88, 100.0d, false);
        java.lang.String str93 = range88.toString();
        org.jfree.data.Range range95 = org.jfree.data.Range.shift(range88, 0.0d);
        org.jfree.data.Range range96 = org.jfree.data.Range.combine(range79, range95);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 100.0d + "'", double65 == 100.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Range[0.0,10.0]" + "'", str74, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-6500.0d) + "'", double89 == (-6500.0d));
        org.junit.Assert.assertNotNull(range92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Range[100.0,-6400.0]" + "'", str93, "Range[100.0,-6400.0]");
        org.junit.Assert.assertNotNull(range95);
        org.junit.Assert.assertNotNull(range96);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        java.lang.String str4 = range2.toString();
        org.jfree.data.Range range6 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, 1340.0d);
        java.lang.Class<?> wildcardClass9 = range2.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Range[100.0,1.0]" + "'", str4, "Range[100.0,1.0]");
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        double double6 = range5.getLength();
        double double7 = range5.getUpperBound();
        boolean boolean10 = range5.intersects((-100.0d), 19.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range5, 15.0d, true);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 11.0d + "'", double7 == 11.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(range13);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        boolean boolean11 = range9.contains((double) 0L);
        java.lang.String str12 = range9.toString();
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range9, (double) '4', (double) (short) 100);
        java.lang.Class<?> wildcardClass16 = range15.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Range[1.0,11.0]" + "'", str12, "Range[1.0,11.0]");
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        java.lang.Object obj6 = null;
        boolean boolean7 = borderArrangement0.equals(obj6);
        org.jfree.chart.block.Block block8 = null;
        org.jfree.chart.block.BorderArrangement borderArrangement9 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean11 = borderArrangement9.equals((java.lang.Object) (-1L));
        boolean boolean13 = borderArrangement9.equals((java.lang.Object) (byte) 10);
        org.jfree.chart.block.Block block14 = null;
        org.jfree.data.Range range15 = null;
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range15, 10.0d);
        borderArrangement9.add(block14, (java.lang.Object) range15);
        org.jfree.data.Range range21 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean23 = range21.contains((double) 1L);
        boolean boolean26 = range21.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range21, 265.0d);
        boolean boolean29 = borderArrangement9.equals((java.lang.Object) 265.0d);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) 1L, (double) (byte) 0);
        java.lang.String str33 = range32.toString();
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range32, 0.0d);
        boolean boolean36 = borderArrangement9.equals((java.lang.Object) range32);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) (byte) 10, 0.0d);
        boolean boolean40 = borderArrangement9.equals((java.lang.Object) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block8, (java.lang.Object) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Byte cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Range[1.0,0.0]" + "'", str33, "Range[1.0,0.0]");
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean9 = range2.equals((java.lang.Object) 10);
        boolean boolean11 = range2.contains((double) 1.0f);
        double double12 = range2.getUpperBound();
        double double13 = range2.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        double double28 = range27.getLowerBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) 100L);
        boolean boolean31 = range16.equals((java.lang.Object) 100L);
        boolean boolean33 = range16.contains(35.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range2, range16);
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj38 = new java.lang.Object();
        boolean boolean39 = range37.equals(obj38);
        boolean boolean42 = range37.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range45.getLength();
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) (short) 10);
        double double49 = range48.getLowerBound();
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range48, (double) 100L);
        boolean boolean52 = range37.equals((java.lang.Object) 100L);
        boolean boolean54 = range37.contains((double) (byte) 100);
        double double55 = range37.getUpperBound();
        org.jfree.data.Range range56 = org.jfree.data.Range.combine(range34, range37);
        double double58 = range56.constrain((-11.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean9 = range2.equals((java.lang.Object) 10);
        boolean boolean11 = range2.contains((double) 1.0f);
        double double12 = range2.getUpperBound();
        double double13 = range2.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        double double28 = range27.getLowerBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) 100L);
        boolean boolean31 = range16.equals((java.lang.Object) 100L);
        boolean boolean33 = range16.contains(35.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range2, range16);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, 10000.0d, false);
        double double39 = range34.constrain((double) (short) -1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (double) (byte) 0, 100.0d);
        double double9 = range8.getUpperBound();
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range8, 165.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1011.0d + "'", double9 == 1011.0d);
        org.junit.Assert.assertNotNull(range11);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        boolean boolean5 = range2.contains((double) (byte) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) 10.0f);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, 11.0d);
        boolean boolean12 = range8.contains((double) (byte) 10);
        double double13 = range8.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-445.0d) + "'", double13 == (-445.0d));
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = borderArrangement0.equals((java.lang.Object) 1.0f);
        java.lang.Object obj8 = null;
        boolean boolean9 = borderArrangement0.equals(obj8);
        borderArrangement0.clear();
        org.jfree.chart.block.Block block11 = null;
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, (double) (byte) 0, (double) (-1L));
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double21 = range20.getCentralValue();
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range20, (double) 0L, (double) '4');
        boolean boolean27 = range24.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean29 = range24.contains((double) 0.0f);
        double double31 = range24.constrain((double) (byte) 100);
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range24, (double) (-1.0f));
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range14, range33);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block11, (java.lang.Object) range34);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range34);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range5, 100.0d);
        boolean boolean14 = range5.contains((-1.0d));
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range5, 54.0d);
        double double17 = range5.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9899.0d) + "'", double17 == (-9899.0d));
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getCentralValue();
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        double double24 = range21.constrain(0.0d);
        java.lang.String str25 = range21.toString();
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range21, (double) (short) 1, true);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range21, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range2, range31);
        double double37 = range2.constrain((double) 1L);
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range2, (double) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Range[0.0,10.0]" + "'", str25, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(range39);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        java.lang.Object obj6 = null;
        boolean boolean7 = borderArrangement0.equals(obj6);
        borderArrangement0.clear();
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range11, (double) 0L, (double) '4');
        boolean boolean18 = range15.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean20 = range15.contains((double) 0.0f);
        double double22 = range15.constrain((double) (byte) 100);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range15, (double) (-1.0f));
        double double25 = range24.getCentralValue();
        boolean boolean26 = borderArrangement0.equals((java.lang.Object) range24);
        org.jfree.chart.block.BlockContainer blockContainer27 = null;
        java.awt.Graphics2D graphics2D28 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D30 = borderArrangement0.arrange(blockContainer27, graphics2D28, rectangleConstraint29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5.0d + "'", double12 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 264.5d + "'", double25 == 264.5d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean11 = range6.contains((double) 0.0f);
        double double13 = range6.constrain((double) (byte) 100);
        double double14 = range6.getCentralValue();
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double18 = range17.getCentralValue();
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getCentralValue();
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range21, (double) 1);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range24, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range24, (double) 100.0f);
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range29, (double) 10);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range17, range31);
        double double33 = range31.getLowerBound();
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range31, (double) 100L, true);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range31, 275.0d, 340.0d);
        boolean boolean40 = range6.equals((java.lang.Object) range31);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 265.0d + "'", double14 == 265.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double9 = range8.getLength();
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range8, (double) (short) 10);
        double double12 = range11.getLowerBound();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) 100L);
        boolean boolean15 = borderArrangement0.equals((java.lang.Object) 100L);
        boolean boolean17 = borderArrangement0.equals((java.lang.Object) 15.0d);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double21 = range20.getLength();
        double double23 = range20.constrain(0.0d);
        java.lang.String str24 = range20.toString();
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range20, (double) (short) 1, true);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range20, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) ' ');
        double double34 = range32.constrain((double) (short) -1);
        boolean boolean35 = borderArrangement0.equals((java.lang.Object) (short) -1);
        org.jfree.chart.block.BlockContainer blockContainer36 = null;
        java.awt.Graphics2D graphics2D37 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D39 = borderArrangement0.arrange(blockContainer36, graphics2D37, rectangleConstraint38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Range[0.0,10.0]" + "'", str24, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.jfree.data.Range range2 = new org.jfree.data.Range(142.0d, 630.0d);
        boolean boolean4 = range2.contains((double) 100L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range24, (double) (short) -1, false);
        double double42 = range24.getLength();
        double double43 = range24.getLength();
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range24, 26.0d);
        java.lang.Class<?> wildcardClass46 = range24.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double6 = range5.getLowerBound();
        double double7 = range5.getLowerBound();
        double double8 = range5.getUpperBound();
        boolean boolean10 = range5.contains((double) 10);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9899.0d) + "'", double6 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9899.0d) + "'", double7 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10000.0d + "'", double8 == 10000.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, (double) ' ');
        double double16 = range12.constrain((double) (byte) 10);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, 330.0d, false);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range19, 211.0d, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range19, 37.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1.0d, (double) 10L);
        double double3 = range2.getUpperBound();
        double double4 = range2.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range34, (double) '4');
        java.lang.String str41 = range40.toString();
        java.lang.Class<?> wildcardClass42 = range40.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Range[52.0,152.0]" + "'", str41, "Range[52.0,152.0]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, (double) 100.0f);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 10);
        org.jfree.data.Range range15 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range15, (double) (-1));
        double double18 = range17.getUpperBound();
        boolean boolean21 = range17.intersects(50.0d, 5.0d);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range17, range24);
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range10, range24);
        java.lang.Class<?> wildcardClass30 = range10.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 99.0d + "'", double18 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 0);
        double double5 = range4.getUpperBound();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        double double8 = range2.getLength();
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range17, (-1.0d), 100.0d);
        java.lang.String str31 = range30.toString();
        boolean boolean32 = range2.equals((java.lang.Object) range30);
        boolean boolean35 = range30.intersects((-100.0d), 132.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 99.0d + "'", double8 == 99.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Range[100.0,10100.0]" + "'", str31, "Range[100.0,10100.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double7 = range2.constrain((double) (-1.0f));
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range2, 3310.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(range9);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        double double5 = range2.getLowerBound();
        boolean boolean8 = range2.intersects((double) (byte) 0, 0.0d);
        double double10 = range2.constrain((double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range2, (double) 100);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getLength();
        double double18 = range15.constrain(0.0d);
        java.lang.String str19 = range15.toString();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range15, (double) (short) 1, true);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range15, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range25, (double) (byte) 1, (double) (-1));
        org.jfree.data.Range range34 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double35 = range34.getLength();
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range34, (double) (short) 10);
        double double38 = range37.getLowerBound();
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range37, (double) 100L);
        boolean boolean43 = range40.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range46 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double47 = range46.getLength();
        org.jfree.data.Range range49 = org.jfree.data.Range.expandToInclude(range46, (double) (short) 10);
        double double50 = range49.getLowerBound();
        boolean boolean52 = range49.contains((double) (byte) 0);
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range49, (double) 1.0f, false);
        org.jfree.data.Range range56 = org.jfree.data.Range.combine(range40, range55);
        double double57 = range56.getLength();
        org.jfree.data.Range range60 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double61 = range60.getLength();
        org.jfree.data.Range range63 = org.jfree.data.Range.expandToInclude(range60, (double) (short) 10);
        double double64 = range63.getLowerBound();
        org.jfree.data.Range range66 = org.jfree.data.Range.expandToInclude(range63, (double) 100L);
        org.jfree.data.Range range69 = org.jfree.data.Range.shift(range66, (double) 100L, true);
        boolean boolean70 = range56.equals((java.lang.Object) range66);
        double double71 = range66.getCentralValue();
        org.jfree.data.Range range72 = org.jfree.data.Range.combine(range31, range66);
        org.jfree.data.Range range75 = new org.jfree.data.Range((double) 10.0f, 0.0d);
        org.jfree.data.Range range76 = org.jfree.data.Range.combine(range72, range75);
        boolean boolean77 = range2.equals((java.lang.Object) range75);
        org.jfree.data.Range range80 = org.jfree.data.Range.expand(range75, (-9790.0d), (-9790.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Range[0.0,10.0]" + "'", str19, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 100.0d + "'", double57 == 100.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 50.0d + "'", double71 == 50.0d);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(range80);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        boolean boolean10 = borderArrangement0.equals((java.lang.Object) '#');
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 100.0d, (double) 100);
        double double18 = range16.constrain((double) (short) 1);
        boolean boolean19 = borderArrangement0.equals((java.lang.Object) (short) 1);
        borderArrangement0.clear();
        org.jfree.data.Range range23 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean25 = range23.contains((double) 1L);
        boolean boolean28 = range23.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range23, 265.0d);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range23, 9999.0d, (double) 0.0f);
        boolean boolean34 = borderArrangement0.equals((java.lang.Object) range33);
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double39 = range37.constrain(10.0d);
        double double40 = range37.getLowerBound();
        boolean boolean43 = range37.intersects((double) (byte) 0, 0.0d);
        double double45 = range37.constrain((double) (byte) -1);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range37, (double) 100);
        double double48 = range37.getUpperBound();
        boolean boolean49 = borderArrangement0.equals((java.lang.Object) double48);
        java.lang.Class<?> wildcardClass50 = borderArrangement0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) -1, 142.0d);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 82.5d, 9999.0d);
        java.lang.String str6 = range2.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[-1.0,142.0]" + "'", str6, "Range[-1.0,142.0]");
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getLength();
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        double double16 = range15.getLowerBound();
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range15, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, 100.0d, (double) 100);
        boolean boolean25 = range18.equals((java.lang.Object) range21);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range18, (double) 1.0f, (double) 'a');
        boolean boolean29 = range9.equals((java.lang.Object) 1.0f);
        java.lang.String str30 = range9.toString();
        double double32 = range9.constrain((-4949.0d));
        org.jfree.data.Range range35 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double36 = range35.getLength();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) (short) 10);
        double double39 = range38.getLowerBound();
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range38, (double) 100L);
        boolean boolean44 = range41.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range47 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double48 = range47.getLength();
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range47, (double) (short) 10);
        double double51 = range50.getLowerBound();
        boolean boolean53 = range50.contains((double) (byte) 0);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range50, (double) 1.0f, false);
        org.jfree.data.Range range57 = org.jfree.data.Range.combine(range41, range56);
        double double58 = range57.getLength();
        org.jfree.data.Range range61 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double62 = range61.getLength();
        org.jfree.data.Range range64 = org.jfree.data.Range.expandToInclude(range61, (double) (short) 10);
        double double65 = range64.getLowerBound();
        org.jfree.data.Range range67 = org.jfree.data.Range.expandToInclude(range64, (double) 100L);
        org.jfree.data.Range range70 = org.jfree.data.Range.shift(range67, (double) 100L, true);
        boolean boolean71 = range57.equals((java.lang.Object) range67);
        org.jfree.data.Range range74 = org.jfree.data.Range.shift(range57, (double) (short) -1, false);
        double double75 = range57.getLength();
        double double76 = range57.getLength();
        double double77 = range57.getLength();
        double double78 = range57.getLength();
        boolean boolean79 = range9.equals((java.lang.Object) double78);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[43.0,142.0]" + "'", str30, "Range[43.0,142.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 43.0d + "'", double32 == 43.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 100.0d + "'", double58 == 100.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 100.0d + "'", double75 == 100.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 100.0d + "'", double76 == 100.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 100.0d + "'", double77 == 100.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getCentralValue();
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        double double24 = range21.constrain(0.0d);
        java.lang.String str25 = range21.toString();
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range21, (double) (short) 1, true);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range21, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range2, range31);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range31, 16.0d);
        double double38 = range37.getUpperBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Range[0.0,10.0]" + "'", str25, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1026.0d + "'", double38 == 1026.0d);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range3 = org.jfree.data.Range.shift(range0, (double) 100L, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, 50.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range7, (-6400.0d), 107.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, 67.5d);
        double double13 = range12.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 33.75d + "'", double13 == 33.75d);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 265.0d);
        double double11 = range2.constrain(15.0d);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range2, 110.0d, true);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, 10000.0d, 195.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 15.0d + "'", double11 == 15.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range10, (double) 0L, (double) '4');
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range10, (double) ' ');
        boolean boolean17 = borderArrangement0.equals((java.lang.Object) ' ');
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj21 = new java.lang.Object();
        boolean boolean22 = range20.equals(obj21);
        boolean boolean25 = range20.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        boolean boolean35 = range20.equals((java.lang.Object) 100L);
        double double36 = range20.getLength();
        boolean boolean37 = borderArrangement0.equals((java.lang.Object) range20);
        org.jfree.data.Range range40 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement41 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean43 = borderArrangement41.equals((java.lang.Object) (-1L));
        borderArrangement41.clear();
        boolean boolean45 = range40.equals((java.lang.Object) borderArrangement41);
        org.jfree.chart.block.Block block46 = null;
        java.lang.Object obj47 = null;
        borderArrangement41.add(block46, obj47);
        org.jfree.data.Range range51 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double52 = range51.getLength();
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range51, (double) (short) 10);
        double double55 = range54.getLowerBound();
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range54, (double) 100L);
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range57, (double) 100L, true);
        boolean boolean61 = borderArrangement41.equals((java.lang.Object) 100L);
        boolean boolean62 = borderArrangement0.equals((java.lang.Object) boolean61);
        org.jfree.data.Range range65 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        boolean boolean68 = range65.intersects((double) (byte) 0, (double) (byte) 100);
        boolean boolean69 = borderArrangement0.equals((java.lang.Object) (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        boolean boolean37 = range32.contains((-1.0d));
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range32, 0.0d);
        org.jfree.data.Range range42 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range42);
        double double44 = range43.getUpperBound();
        java.lang.String str45 = range43.toString();
        double double47 = range43.constrain(510.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 200.0d + "'", double44 == 200.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Range[0.0,200.0]" + "'", str45, "Range[0.0,200.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 200.0d + "'", double47 == 200.0d);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range12, (double) (byte) 1, (double) (-1));
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range18, (double) (-1L), true);
        double double22 = range21.getLowerBound();
        double double23 = range21.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-3011.0d) + "'", double22 == (-3011.0d));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-2006.0d) + "'", double23 == (-2006.0d));
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range2, (double) (byte) 10);
        org.jfree.data.Range range15 = new org.jfree.data.Range(100.0d, (double) (byte) 100);
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range2, range15);
        java.lang.String str17 = range15.toString();
        double double18 = range15.getCentralValue();
        double double19 = range15.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[100.0,100.0]" + "'", str17, "Range[100.0,100.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double8 = range2.getUpperBound();
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (-9899.0d), true);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 0.0f);
        boolean boolean15 = range11.contains(1265.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj10 = new java.lang.Object();
        boolean boolean11 = range9.equals(obj10);
        boolean boolean12 = borderArrangement0.equals(obj10);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.Block block16 = null;
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double20 = range19.getLength();
        double double22 = range19.constrain(0.0d);
        java.lang.String str23 = range19.toString();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range19, (double) (short) 1, true);
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range26, (double) '4');
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range28, (double) 1L);
        double double31 = range28.getCentralValue();
        org.jfree.data.Range range34 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double35 = range34.getCentralValue();
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double39 = range38.getCentralValue();
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range38, (double) 1);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range41, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range41, (double) 100.0f);
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range46, (double) 10);
        org.jfree.data.Range range49 = org.jfree.data.Range.combine(range34, range48);
        double double50 = range48.getLowerBound();
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range48, (double) 100L, true);
        org.jfree.data.Range range56 = org.jfree.data.Range.expand(range48, 275.0d, 340.0d);
        org.jfree.data.Range range57 = org.jfree.data.Range.combine(range28, range56);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block16, (java.lang.Object) range56);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Range[0.0,10.0]" + "'", str23, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 26.5d + "'", double31 == 26.5d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 5.0d + "'", double35 == 5.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 5.0d + "'", double39 == 5.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range57);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement10 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean12 = borderArrangement10.equals((java.lang.Object) (-1L));
        borderArrangement10.clear();
        boolean boolean14 = range9.equals((java.lang.Object) borderArrangement10);
        org.jfree.chart.block.Block block15 = null;
        java.lang.Object obj16 = null;
        borderArrangement10.add(block15, obj16);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range20, (double) (-1));
        double double23 = range22.getUpperBound();
        boolean boolean26 = range22.intersects(50.0d, 5.0d);
        org.jfree.data.Range range29 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range29.getLength();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) (short) 10);
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range22, range29);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range22, (double) (byte) 10);
        boolean boolean36 = borderArrangement10.equals((java.lang.Object) range22);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double40 = range39.getUpperBound();
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getCentralValue();
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range43, (double) 1);
        org.jfree.data.Range range49 = org.jfree.data.Range.expand(range46, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range50 = org.jfree.data.Range.combine(range39, range46);
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range46, (double) '4');
        boolean boolean53 = borderArrangement10.equals((java.lang.Object) '4');
        boolean boolean54 = borderArrangement0.equals((java.lang.Object) borderArrangement10);
        org.jfree.data.Range range57 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double58 = range57.getCentralValue();
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range57, (double) 1);
        org.jfree.data.Range range62 = org.jfree.data.Range.expandToInclude(range57, (double) (short) 10);
        org.jfree.data.Range range65 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range68 = org.jfree.data.Range.expand(range65, 100.0d, (double) 100);
        boolean boolean71 = range65.intersects((double) 'a', (-9899.0d));
        double double72 = range65.getUpperBound();
        org.jfree.data.Range range75 = org.jfree.data.Range.expand(range65, 110.0d, (double) 1);
        org.jfree.data.Range range76 = org.jfree.data.Range.combine(range57, range75);
        boolean boolean77 = borderArrangement0.equals((java.lang.Object) range57);
        org.jfree.chart.block.BlockContainer blockContainer78 = null;
        java.awt.Graphics2D graphics2D79 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D81 = borderArrangement0.arrange(blockContainer78, graphics2D79, rectangleConstraint80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 99.0d + "'", double23 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 5.0d + "'", double44 == 5.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 5.0d + "'", double58 == 5.0d);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 100.0d + "'", double72 == 100.0d);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-9899.0d), 51.0d);
        org.jfree.data.Range range5 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double6 = range5.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range5, (double) 0L, (double) '4');
        boolean boolean12 = range9.intersects((double) (short) 1, (double) 0.0f);
        double double13 = range9.getLowerBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double26 = range24.constrain(10.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range16, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range9, range27);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range9, 10.0d, false);
        double double32 = range9.getCentralValue();
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range2, range9);
        java.lang.String str34 = range9.toString();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 265.0d + "'", double32 == 265.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Range[0.0,530.0]" + "'", str34, "Range[0.0,530.0]");
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getLength();
        double double12 = range9.constrain(0.0d);
        java.lang.String str13 = range9.toString();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, (double) (short) 1, true);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range9, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range19, (double) (byte) 1, (double) (-1));
        boolean boolean26 = borderArrangement0.equals((java.lang.Object) range25);
        java.lang.Object obj27 = null;
        boolean boolean28 = borderArrangement0.equals(obj27);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range31.getCentralValue();
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range31, (double) 0L, (double) '4');
        boolean boolean38 = range35.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean40 = range35.contains((double) 0.0f);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range35, 10.0d);
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) range35);
        borderArrangement0.clear();
        org.jfree.chart.block.BlockContainer blockContainer45 = null;
        java.awt.Graphics2D graphics2D46 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D48 = borderArrangement0.arrange(blockContainer45, graphics2D46, rectangleConstraint47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,10.0]" + "'", str13, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5.0d + "'", double32 == 5.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 0.0d, (double) (-1L));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range5, 0.0d);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 5018543.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1.0d, 20.0d);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        double double34 = range31.constrain((double) 100L);
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double38 = range37.getLength();
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range37, (double) (short) 10);
        double double41 = range40.getLowerBound();
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range40, (double) 100L);
        org.jfree.data.Range range46 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range49 = org.jfree.data.Range.expand(range46, 100.0d, (double) 100);
        boolean boolean50 = range43.equals((java.lang.Object) range46);
        org.jfree.data.Range range53 = org.jfree.data.Range.expand(range43, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range43, (double) 100.0f);
        double double56 = range43.getCentralValue();
        org.jfree.data.Range range59 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double60 = range59.getLength();
        org.jfree.data.Range range62 = org.jfree.data.Range.expandToInclude(range59, (double) (short) 10);
        double double63 = range62.getLowerBound();
        org.jfree.data.Range range65 = org.jfree.data.Range.expandToInclude(range62, (double) 100L);
        org.jfree.data.Range range68 = org.jfree.data.Range.shift(range65, (double) 100L, true);
        org.jfree.data.Range range71 = org.jfree.data.Range.shift(range65, (double) 100, false);
        org.jfree.data.Range range72 = org.jfree.data.Range.combine(range43, range65);
        double double73 = range43.getUpperBound();
        org.jfree.data.Range range74 = org.jfree.data.Range.combine(range31, range43);
        boolean boolean76 = range31.contains((-9790.0d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 50.0d + "'", double56 == 50.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 10.0d + "'", double60 == 10.0d);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range35, (double) 1L);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range8, range35);
        org.jfree.data.Range range41 = org.jfree.data.Range.expand(range35, 107.0d, 0.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range41, (double) (short) 100);
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range43, (double) 100L);
        boolean boolean48 = range45.intersects(54.0d, 9904.0d);
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range45, (-209948.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(range50);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        boolean boolean10 = borderArrangement0.equals((java.lang.Object) '#');
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 100.0d, (double) 100);
        double double18 = range16.constrain((double) (short) 1);
        boolean boolean19 = borderArrangement0.equals((java.lang.Object) (short) 1);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.Block block22 = null;
        java.lang.Object obj23 = null;
        borderArrangement0.add(block22, obj23);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        boolean boolean13 = range7.intersects(0.0d, (double) (byte) 0);
        boolean boolean14 = borderArrangement0.equals((java.lang.Object) (byte) 0);
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double18 = range17.getLength();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range17, (double) (short) 10);
        double double21 = range20.getLowerBound();
        double double22 = range20.getLength();
        double double24 = range20.constrain((double) 10);
        boolean boolean25 = borderArrangement0.equals((java.lang.Object) range20);
        org.jfree.data.Range range28 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range28, (double) (byte) 0, (double) (-1L));
        double double32 = range28.getUpperBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range28, (-1.0d));
        double double35 = range28.getLength();
        double double36 = range28.getLowerBound();
        boolean boolean37 = borderArrangement0.equals((java.lang.Object) double36);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 99.0d + "'", double35 == 99.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.Block block13 = null;
        java.lang.Object obj14 = null;
        borderArrangement7.add(block13, obj14);
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, 100.0d, (double) 100);
        boolean boolean31 = range24.equals((java.lang.Object) range27);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range24, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range24, (double) 100.0f);
        double double37 = range24.getCentralValue();
        boolean boolean39 = range24.equals((java.lang.Object) 0);
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range42.getLength();
        double double45 = range42.constrain(0.0d);
        java.lang.String str46 = range42.toString();
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range42, (double) (short) 1, true);
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range49, (double) '4');
        org.jfree.data.Range range52 = org.jfree.data.Range.combine(range24, range49);
        java.lang.Class<?> wildcardClass53 = range24.getClass();
        boolean boolean54 = borderArrangement7.equals((java.lang.Object) wildcardClass53);
        org.jfree.chart.block.BlockContainer blockContainer55 = null;
        java.awt.Graphics2D graphics2D56 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D58 = borderArrangement7.arrange(blockContainer55, graphics2D56, rectangleConstraint57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Range[0.0,10.0]" + "'", str46, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.Range.shift(range0, (-1000.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        boolean boolean14 = range12.contains(0.0d);
        java.lang.Class<?> wildcardClass15 = range12.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        boolean boolean37 = range32.contains((-1.0d));
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range32, 0.0d);
        double double40 = range39.getCentralValue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) (-1L));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 49.0d, 10.0d);
        java.lang.Class<?> wildcardClass6 = range5.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        double double8 = range2.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range10, (double) 1L);
        java.lang.Class<?> wildcardClass13 = range12.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getUpperBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range4, (double) 1, true);
        double double9 = range4.getLowerBound();
        double double11 = range4.constrain((double) ' ');
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 99.0d + "'", double5 == 99.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 9.0d + "'", double9 == 9.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 32.0d + "'", double11 == 32.0d);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        boolean boolean13 = range7.intersects(0.0d, (double) (byte) 0);
        boolean boolean14 = borderArrangement0.equals((java.lang.Object) (byte) 0);
        borderArrangement0.clear();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement19 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean21 = borderArrangement19.equals((java.lang.Object) (-1L));
        borderArrangement19.clear();
        boolean boolean23 = range18.equals((java.lang.Object) borderArrangement19);
        boolean boolean24 = borderArrangement0.equals((java.lang.Object) borderArrangement19);
        borderArrangement19.clear();
        borderArrangement19.clear();
        org.jfree.chart.block.Block block27 = null;
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 1L, 11.0d);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement19.add(block27, (java.lang.Object) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Long cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double33 = range32.getUpperBound();
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getCentralValue();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range36, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range39, (double) '4');
        boolean boolean46 = borderArrangement3.equals((java.lang.Object) '4');
        borderArrangement3.clear();
        org.jfree.chart.block.Block block48 = null;
        org.jfree.data.Range range51 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double52 = range51.getCentralValue();
        org.jfree.data.Range range55 = org.jfree.data.Range.expand(range51, (double) 0L, (double) '4');
        boolean boolean58 = range55.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean60 = range55.contains((double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement3.add(block48, (java.lang.Object) range55);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5.0d + "'", double37 == 5.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5.0d + "'", double52 == 5.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        double double10 = range9.getLowerBound();
        boolean boolean13 = range9.intersects((double) 0, (double) 10);
        double double14 = range9.getUpperBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean18 = range16.contains((double) 1L);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 11.0d + "'", double14 == 11.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) (-1L));
        java.lang.Class<?> wildcardClass3 = range2.getClass();
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range7);
        double double14 = range13.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (double) (byte) -1, true);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range2, 37.0d);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 9.0d, 50.0d);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range16, 97.0d, false);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean27 = range22.intersects(1.0d, (double) (short) 10);
        double double28 = range22.getCentralValue();
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range22, 49.0d, 50.0d);
        boolean boolean33 = range31.contains((double) (byte) 0);
        boolean boolean34 = range16.equals((java.lang.Object) range31);
        double double35 = range31.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 5.0d + "'", double28 == 5.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str8 = range2.toString();
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, (double) (-1));
        double double14 = range13.getUpperBound();
        boolean boolean17 = range13.intersects(50.0d, 5.0d);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double21 = range20.getLength();
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range20, (double) (short) 10);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range20);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range2, range24);
        boolean boolean28 = range24.intersects((double) 0.0f, 15.0d);
        java.lang.String str29 = range24.toString();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[0.0,10.0]" + "'", str8, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 99.0d + "'", double14 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Range[0.0,99.0]" + "'", str29, "Range[0.0,99.0]");
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100.0f, 51.0d);
        double double3 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 51.0d + "'", double3 == 51.0d);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        java.lang.String str36 = range32.toString();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) 1L);
        double double39 = range32.getLowerBound();
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range32, (double) 1L);
        java.lang.Class<?> wildcardClass42 = range41.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Range[0.0,200.0]" + "'", str36, "Range[0.0,200.0]");
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        double double9 = range7.getLowerBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range12);
        double double20 = range7.constrain((double) (byte) 1);
        double double21 = range7.getCentralValue();
        double double22 = range7.getCentralValue();
        boolean boolean23 = borderArrangement0.equals((java.lang.Object) double22);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range32, (double) 100L, true);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range32, (double) 100, false);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, 35.0d, true);
        boolean boolean42 = borderArrangement0.equals((java.lang.Object) range41);
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range45.getLength();
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) (short) 10);
        double double49 = range48.getLowerBound();
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range48, (double) 100L);
        org.jfree.data.Range range54 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range54, 100.0d, (double) 100);
        boolean boolean58 = range51.equals((java.lang.Object) range54);
        org.jfree.data.Range range61 = org.jfree.data.Range.expand(range51, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range63 = org.jfree.data.Range.expandToInclude(range51, (double) 100.0f);
        java.lang.String str64 = range63.toString();
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range63, (double) (-1.0f));
        double double67 = range63.getLowerBound();
        boolean boolean68 = borderArrangement0.equals((java.lang.Object) double67);
        org.jfree.chart.block.Block block69 = null;
        org.jfree.data.Range range72 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double73 = range72.getCentralValue();
        org.jfree.data.Range range76 = org.jfree.data.Range.expand(range72, (double) 0L, (double) '4');
        double double77 = range72.getLength();
        org.jfree.data.Range range79 = org.jfree.data.Range.shift(range72, (double) 0);
        org.jfree.data.Range range81 = org.jfree.data.Range.shift(range72, (double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block69, (java.lang.Object) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Byte cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Range[0.0,100.0]" + "'", str64, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 5.0d + "'", double73 == 5.0d);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 10.0d + "'", double77 == 10.0d);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertNotNull(range81);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range35, (double) 1L);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range8, range35);
        org.jfree.data.Range range41 = org.jfree.data.Range.expand(range8, 0.0d, (double) 1L);
        double double42 = range41.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 200.0d + "'", double42 == 200.0d);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range2, (double) (short) -1);
        double double14 = range12.constrain(50.5d);
        double double16 = range12.constrain((double) (short) 10);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, (double) 1.0f, false);
        double double20 = range12.getLowerBound();
        org.jfree.data.Range range23 = new org.jfree.data.Range(1.0d, (double) 10.0f);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, 265.0d, (double) '4');
        double double27 = range23.getCentralValue();
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range23, 42.0d, 132.0d);
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range12, range23);
        double double32 = range31.getCentralValue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5.5d + "'", double27 == 5.5d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4.5d + "'", double32 == 4.5d);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        java.lang.String str36 = range32.toString();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) 1L);
        double double39 = range32.getLowerBound();
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range32, (double) 1L);
        boolean boolean43 = range41.contains(92.5d);
        double double44 = range41.getCentralValue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Range[0.0,200.0]" + "'", str36, "Range[0.0,200.0]");
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(1.0d, (double) (short) 10);
        double double8 = range2.getCentralValue();
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, 49.0d, 50.0d);
        double double12 = range11.getUpperBound();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, 275.0d);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range14, 92.5d, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 510.0d + "'", double12 == 510.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) (short) 100, false);
        java.lang.String str17 = range2.toString();
        double double18 = range2.getCentralValue();
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, 100.0d, (double) 100);
        double double26 = range24.constrain((double) (short) 1);
        boolean boolean28 = range24.contains((double) '4');
        double double29 = range24.getLowerBound();
        double double31 = range24.constrain(54.0d);
        org.jfree.data.Range range34 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double35 = range34.getCentralValue();
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 1);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range34, (double) 'a');
        boolean boolean41 = range34.equals((java.lang.Object) 10);
        boolean boolean43 = range34.contains((double) 1.0f);
        double double44 = range34.getUpperBound();
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range24, range34);
        boolean boolean46 = range2.equals((java.lang.Object) range45);
        double double47 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[0.0,10.0]" + "'", str17, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-9899.0d) + "'", double29 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 54.0d + "'", double31 == 54.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 5.0d + "'", double35 == 5.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 5.0d + "'", double47 == 5.0d);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, (double) ' ');
        double double16 = range12.constrain((double) (byte) 10);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, 330.0d, false);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range19, 211.0d, false);
        double double23 = range22.getUpperBound();
        java.lang.Class<?> wildcardClass24 = range22.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1551.0d + "'", double23 == 1551.0d);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range7);
        boolean boolean15 = range13.contains((double) (short) 10);
        double double17 = range13.constrain((double) 0.0f);
        boolean boolean19 = range13.contains((double) (short) 1);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range13, (double) 0.0f, (double) '4');
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range22, (double) 100L);
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range22, (-2.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range26);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 265.0d);
        boolean boolean12 = range9.intersects((double) (short) 10, 101.0d);
        boolean boolean15 = range9.intersects(92.5d, (-2.0d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        double double39 = range34.getCentralValue();
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range42.constrain(10.0d);
        double double45 = range42.getLowerBound();
        boolean boolean48 = range42.intersects((double) (byte) 0, 0.0d);
        double double50 = range42.constrain((double) (byte) -1);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range42, (double) 100);
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range34, range52);
        java.lang.String str54 = range52.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Range[100.0,110.0]" + "'", str54, "Range[100.0,110.0]");
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        boolean boolean5 = range2.contains((double) (byte) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) 10.0f);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, 11.0d);
        java.lang.String str11 = range10.toString();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, 264.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[-989.0,121.0]" + "'", str11, "Range[-989.0,121.0]");
        org.junit.Assert.assertNotNull(range13);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.jfree.data.Range range2 = new org.jfree.data.Range(410.5d, 4.5d);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 0, (-989.0d));
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        borderArrangement3.clear();
        borderArrangement3.clear();
        borderArrangement3.clear();
        org.jfree.chart.block.Block block11 = null;
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj15 = new java.lang.Object();
        boolean boolean16 = range14.equals(obj15);
        boolean boolean19 = range14.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double24 = range22.constrain(10.0d);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range14, range22);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range37, 100.0d, (double) 100);
        boolean boolean41 = range34.equals((java.lang.Object) range37);
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range34, (double) 100);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range25, range43);
        org.jfree.data.Range range47 = org.jfree.data.Range.expand(range44, (double) ' ', 1.0d);
        java.lang.String str48 = range44.toString();
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range44, (double) 1L);
        double double51 = range44.getLowerBound();
        org.jfree.data.Range range52 = null;
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range52, 10.0d);
        double double55 = range54.getLength();
        double double57 = range54.constrain((double) (-1));
        boolean boolean59 = range54.contains(55.0d);
        boolean boolean62 = range54.intersects((double) (byte) 100, 630.0d);
        boolean boolean63 = range44.equals((java.lang.Object) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement3.add(block11, (java.lang.Object) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Byte cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Range[0.0,200.0]" + "'", str48, "Range[0.0,200.0]");
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = range4.equals((java.lang.Object) (byte) 100);
        double double8 = range4.getCentralValue();
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) (short) 1, (double) (-1));
        boolean boolean12 = range4.equals((java.lang.Object) range11);
        double double14 = range11.constrain((double) (short) 0);
        java.lang.String str15 = range11.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 50.5d + "'", double8 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Range[1.0,-1.0]" + "'", str15, "Range[1.0,-1.0]");
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.jfree.data.Range range2 = new org.jfree.data.Range(38.0d, (-209948.0d));
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.Block block7 = null;
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean19 = range16.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        double double26 = range25.getLowerBound();
        boolean boolean28 = range25.contains((double) (byte) 0);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range25, (double) 1.0f, false);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range16, range31);
        double double33 = range32.getLength();
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getLength();
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range36, (double) (short) 10);
        double double40 = range39.getLowerBound();
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range39, (double) 100L);
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range42, (double) 100L, true);
        boolean boolean46 = range32.equals((java.lang.Object) range42);
        org.jfree.data.Range range48 = org.jfree.data.Range.shift(range42, (double) '4');
        org.jfree.data.Range range51 = org.jfree.data.Range.shift(range42, (double) 1, true);
        org.jfree.data.Range range54 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range54, 0.0d, (double) (-1L));
        org.jfree.data.Range range58 = org.jfree.data.Range.combine(range51, range57);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block7, (java.lang.Object) range51);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range58);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.jfree.data.Range range2 = new org.jfree.data.Range(540.0d, 110.0d);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        boolean boolean6 = borderArrangement0.equals((java.lang.Object) 'a');
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj11 = new java.lang.Object();
        boolean boolean12 = range10.equals(obj11);
        boolean boolean15 = range10.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean25 = range10.equals((java.lang.Object) 100L);
        boolean boolean27 = range10.contains((double) (byte) 100);
        double double28 = range10.getLowerBound();
        boolean boolean29 = borderArrangement0.equals((java.lang.Object) double28);
        org.jfree.chart.block.BorderArrangement borderArrangement30 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement30.clear();
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean35 = borderArrangement30.equals((java.lang.Object) range34);
        borderArrangement30.clear();
        borderArrangement30.clear();
        org.jfree.data.Range range40 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double41 = range40.getCentralValue();
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range40, (double) 1);
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range40, (double) 'a');
        boolean boolean46 = borderArrangement30.equals((java.lang.Object) range45);
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) (-1));
        boolean boolean49 = borderArrangement0.equals((java.lang.Object) (-1));
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj53 = new java.lang.Object();
        boolean boolean54 = range52.equals(obj53);
        boolean boolean57 = range52.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range60 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double62 = range60.constrain(10.0d);
        org.jfree.data.Range range63 = org.jfree.data.Range.combine(range52, range60);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range52, (double) 100L, true);
        boolean boolean67 = borderArrangement0.equals((java.lang.Object) true);
        org.jfree.chart.block.Block block68 = null;
        org.jfree.chart.block.BorderArrangement borderArrangement69 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean71 = borderArrangement69.equals((java.lang.Object) (-1L));
        boolean boolean73 = borderArrangement69.equals((java.lang.Object) (byte) 10);
        org.jfree.data.Range range76 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double77 = range76.getLength();
        org.jfree.data.Range range79 = org.jfree.data.Range.expandToInclude(range76, (double) (short) 10);
        boolean boolean82 = range76.intersects(0.0d, (double) (byte) 0);
        boolean boolean83 = borderArrangement69.equals((java.lang.Object) (byte) 0);
        org.jfree.data.Range range86 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double87 = range86.getLength();
        org.jfree.data.Range range89 = org.jfree.data.Range.expandToInclude(range86, (double) (short) 10);
        double double90 = range89.getLowerBound();
        double double91 = range89.getLength();
        double double93 = range89.constrain((double) 10);
        boolean boolean94 = borderArrangement69.equals((java.lang.Object) range89);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block68, (java.lang.Object) boolean94);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Boolean cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 5.0d + "'", double41 == 5.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 10.0d + "'", double77 == 10.0d);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 10.0d + "'", double87 == 10.0d);
        org.junit.Assert.assertNotNull(range89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        boolean boolean13 = range7.intersects(0.0d, (double) (byte) 0);
        boolean boolean14 = borderArrangement0.equals((java.lang.Object) (byte) 0);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.BlockContainer blockContainer17 = null;
        java.awt.Graphics2D graphics2D18 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D20 = borderArrangement0.arrange(blockContainer17, graphics2D18, rectangleConstraint19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range2, (double) (short) -1);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getLength();
        double double18 = range15.constrain(0.0d);
        java.lang.String str19 = range15.toString();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range15, (double) (short) 1, true);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) '4');
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range2, range24);
        double double26 = range2.getLowerBound();
        double double27 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Range[0.0,10.0]" + "'", str19, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5.0d + "'", double27 == 5.0d);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) (byte) 0);
        double double4 = range2.constrain(488.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) (byte) 0);
        java.lang.String str3 = range2.toString();
        boolean boolean6 = range2.intersects((double) 0.0f, 200.0d);
        double double7 = range2.getLowerBound();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Range[1.0,0.0]" + "'", str3, "Range[1.0,0.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.jfree.data.Range range2 = new org.jfree.data.Range(300.0d, 31.0d);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.Block block13 = null;
        java.lang.Object obj14 = null;
        borderArrangement7.add(block13, obj14);
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement19 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean21 = borderArrangement19.equals((java.lang.Object) (-1L));
        borderArrangement19.clear();
        boolean boolean23 = range18.equals((java.lang.Object) borderArrangement19);
        org.jfree.chart.block.Block block24 = null;
        java.lang.Object obj25 = null;
        borderArrangement19.add(block24, obj25);
        org.jfree.data.Range range29 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range29.getLength();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) (short) 10);
        double double33 = range32.getLowerBound();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) 100L);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range35, (double) 100L, true);
        boolean boolean39 = borderArrangement19.equals((java.lang.Object) 100L);
        borderArrangement19.clear();
        boolean boolean41 = borderArrangement7.equals((java.lang.Object) borderArrangement19);
        org.jfree.chart.block.BlockContainer blockContainer42 = null;
        java.awt.Graphics2D graphics2D43 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D45 = borderArrangement7.arrange(blockContainer42, graphics2D43, rectangleConstraint44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.jfree.data.Range range2 = new org.jfree.data.Range(51.0d, 55.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, 19757.0d);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double9 = range7.constrain(10.0d);
        boolean boolean12 = range7.intersects((double) 10.0f, (double) (-1.0f));
        double double14 = range7.constrain(0.0d);
        double double16 = range7.constrain((double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range7, (-6400.0d));
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range7, 52.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range7, 97.0d);
        boolean boolean23 = range4.equals((java.lang.Object) 97.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.jfree.data.Range range2 = new org.jfree.data.Range(9999.0d, (double) (byte) 1);
        java.lang.Class<?> wildcardClass3 = range2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean11 = range6.contains((double) 0.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        boolean boolean25 = range22.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        boolean boolean34 = range31.contains((double) (byte) 0);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range31, (double) 1.0f, false);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range22, range37);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range22, (double) 0.0f, false);
        java.lang.String str42 = range22.toString();
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range22, 530.0d, false);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range45, (double) 10L);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range6, range45);
        double double49 = range6.getCentralValue();
        org.jfree.data.Range range52 = org.jfree.data.Range.expand(range6, (double) (-1L), 19899.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Range[0.0,100.0]" + "'", str42, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 265.0d + "'", double49 == 265.0d);
        org.junit.Assert.assertNotNull(range52);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = borderArrangement0.equals((java.lang.Object) 1.0f);
        java.lang.Object obj8 = null;
        boolean boolean9 = borderArrangement0.equals(obj8);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj13 = new java.lang.Object();
        boolean boolean14 = range12.equals(obj13);
        boolean boolean17 = range12.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range20.constrain(10.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range12, range20);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, 100.0d, (double) 100);
        boolean boolean39 = range32.equals((java.lang.Object) range35);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, (double) 100);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range23, range41);
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) range23);
        org.jfree.chart.block.BlockContainer blockContainer44 = null;
        java.awt.Graphics2D graphics2D45 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D47 = borderArrangement0.arrange(blockContainer44, graphics2D45, rectangleConstraint46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range12, (double) 0L, false);
        boolean boolean21 = range18.intersects(9.0d, (double) 100.0f);
        boolean boolean23 = range18.contains((-6400.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        boolean boolean6 = borderArrangement0.equals((java.lang.Object) 'a');
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj11 = new java.lang.Object();
        boolean boolean12 = range10.equals(obj11);
        boolean boolean15 = range10.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean25 = range10.equals((java.lang.Object) 100L);
        boolean boolean27 = range10.contains((double) (byte) 100);
        double double28 = range10.getLowerBound();
        boolean boolean29 = borderArrangement0.equals((java.lang.Object) double28);
        org.jfree.chart.block.BorderArrangement borderArrangement30 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement30.clear();
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean35 = borderArrangement30.equals((java.lang.Object) range34);
        borderArrangement30.clear();
        borderArrangement30.clear();
        org.jfree.data.Range range40 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double41 = range40.getCentralValue();
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range40, (double) 1);
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range40, (double) 'a');
        boolean boolean46 = borderArrangement30.equals((java.lang.Object) range45);
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) (-1));
        boolean boolean49 = borderArrangement0.equals((java.lang.Object) (-1));
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj53 = new java.lang.Object();
        boolean boolean54 = range52.equals(obj53);
        boolean boolean57 = range52.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range60 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double62 = range60.constrain(10.0d);
        org.jfree.data.Range range63 = org.jfree.data.Range.combine(range52, range60);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range52, (double) 100L, true);
        boolean boolean67 = borderArrangement0.equals((java.lang.Object) true);
        org.jfree.data.Range range70 = new org.jfree.data.Range((-9899.0d), 5.0d);
        boolean boolean71 = borderArrangement0.equals((java.lang.Object) 5.0d);
        org.jfree.chart.block.Block block72 = null;
        org.jfree.data.Range range75 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double76 = range75.getCentralValue();
        org.jfree.data.Range range78 = org.jfree.data.Range.shift(range75, (double) 1);
        org.jfree.data.Range range80 = org.jfree.data.Range.shift(range75, (double) 'a');
        java.lang.String str81 = range80.toString();
        double double82 = range80.getUpperBound();
        boolean boolean85 = range80.intersects(90.0d, 42.0d);
        double double86 = range80.getUpperBound();
        double double87 = range80.getCentralValue();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block72, (java.lang.Object) double87);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 5.0d + "'", double41 == 5.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 5.0d + "'", double76 == 5.0d);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Range[97.0,107.0]" + "'", str81, "Range[97.0,107.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 107.0d + "'", double82 == 107.0d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 107.0d + "'", double86 == 107.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 102.0d + "'", double87 == 102.0d);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range8, (double) 1, true);
        boolean boolean27 = range24.intersects((-2005.0d), 20.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10L);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        double double27 = range26.getLowerBound();
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj31 = new java.lang.Object();
        boolean boolean32 = range30.equals(obj31);
        boolean boolean35 = range30.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range38.constrain(10.0d);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range30, range38);
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj45 = new java.lang.Object();
        boolean boolean46 = range44.equals(obj45);
        boolean boolean49 = range44.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double54 = range52.constrain(10.0d);
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range44, range52);
        org.jfree.data.Range range56 = org.jfree.data.Range.combine(range30, range44);
        double double57 = range44.getLowerBound();
        double double58 = range44.getUpperBound();
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range26, range44);
        double double60 = range44.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9899.0d) + "'", double27 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 5.0d + "'", double60 == 5.0d);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        boolean boolean16 = range13.intersects(265.0d, (double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range13, 6676165.0d);
        double double19 = range18.getUpperBound();
        org.jfree.data.Range range22 = new org.jfree.data.Range(11.0d, 265.0d);
        org.jfree.data.Range range23 = null;
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range22, range23);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range22, 19899.0d, 19757.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range30.constrain(10.0d);
        boolean boolean35 = range30.intersects((double) 10.0f, (double) (-1.0f));
        double double37 = range30.constrain(0.0d);
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range30, (double) 0.0f, (double) ' ');
        double double41 = range40.getUpperBound();
        org.jfree.data.Range range44 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean45 = range40.equals((java.lang.Object) range44);
        org.jfree.data.Range range48 = new org.jfree.data.Range(11.0d, (-1.0d));
        double double49 = range48.getCentralValue();
        org.jfree.data.Range range50 = org.jfree.data.Range.combine(range40, range48);
        org.jfree.data.Range range53 = new org.jfree.data.Range(99.0d, (double) (byte) -1);
        org.jfree.data.Range range54 = org.jfree.data.Range.combine(range48, range53);
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range27, range54);
        org.jfree.data.Range range56 = org.jfree.data.Range.combine(range18, range55);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 6676175.0d + "'", double19 == 6676175.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 330.0d + "'", double41 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 5.0d + "'", double49 == 5.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range56);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getUpperBound();
        double double6 = range4.getCentralValue();
        double double7 = range4.getLowerBound();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        double double13 = range10.getUpperBound();
        java.lang.String str14 = range10.toString();
        boolean boolean15 = range4.equals((java.lang.Object) str14);
        double double16 = range4.getLowerBound();
        double double17 = range4.getUpperBound();
        boolean boolean20 = range4.intersects((-24106.5d), 530.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 99.0d + "'", double5 == 99.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 54.0d + "'", double6 == 54.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 9.0d + "'", double7 == 9.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[0.0,10.0]" + "'", str14, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 9.0d + "'", double16 == 9.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 99.0d + "'", double17 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        java.lang.String str4 = range2.toString();
        double double5 = range2.getCentralValue();
        boolean boolean7 = range2.contains((double) (-1));
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        double double15 = range13.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range2, range13);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (double) 0L, 330.0d);
        double double20 = range19.getUpperBound();
        double double21 = range19.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Range[100.0,1.0]" + "'", str4, "Range[100.0,1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 50.5d + "'", double5 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3310.0d + "'", double20 == 3310.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3310.0d + "'", double21 == 3310.0d);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        double double7 = range5.getLength();
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double11 = range10.getUpperBound();
        java.lang.String str12 = range10.toString();
        double double13 = range10.getCentralValue();
        java.lang.Class<?> wildcardClass14 = range10.getClass();
        boolean boolean15 = range5.equals((java.lang.Object) range10);
        double double16 = range10.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Range[100.0,1.0]" + "'", str12, "Range[100.0,1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.5d + "'", double13 == 50.5d);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj40 = new java.lang.Object();
        boolean boolean41 = range39.equals(obj40);
        boolean boolean44 = range39.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range47 = org.jfree.data.Range.expand(range39, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range39, (double) (byte) 10);
        org.jfree.data.Range range52 = new org.jfree.data.Range(100.0d, (double) (byte) 100);
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range39, range52);
        org.jfree.data.Range range54 = org.jfree.data.Range.combine(range33, range52);
        double double55 = range33.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 6.0d + "'", double55 == 6.0d);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        borderArrangement3.clear();
        org.jfree.data.Range range33 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.expand(range33, 0.0d, (double) (-1L));
        double double37 = range36.getLength();
        java.lang.String str38 = range36.toString();
        boolean boolean39 = borderArrangement3.equals((java.lang.Object) range36);
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range42.getLength();
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range42, (double) (short) 10);
        double double46 = range45.getLowerBound();
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) 100L);
        org.jfree.data.Range range51 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range54 = org.jfree.data.Range.expand(range51, 100.0d, (double) 100);
        boolean boolean55 = range48.equals((java.lang.Object) range51);
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range48, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range60 = org.jfree.data.Range.expandToInclude(range48, (double) 100.0f);
        double double61 = range48.getCentralValue();
        boolean boolean63 = range48.equals((java.lang.Object) 0);
        org.jfree.data.Range range66 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double67 = range66.getLength();
        double double69 = range66.constrain(0.0d);
        java.lang.String str70 = range66.toString();
        org.jfree.data.Range range73 = org.jfree.data.Range.shift(range66, (double) (short) 1, true);
        org.jfree.data.Range range75 = org.jfree.data.Range.expandToInclude(range73, (double) '4');
        org.jfree.data.Range range76 = org.jfree.data.Range.combine(range48, range73);
        java.lang.String str77 = range76.toString();
        org.jfree.data.Range range80 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range83 = org.jfree.data.Range.expand(range80, 100.0d, (double) 100);
        double double84 = range83.getLowerBound();
        double double85 = range83.getLowerBound();
        org.jfree.data.Range range86 = org.jfree.data.Range.combine(range76, range83);
        boolean boolean87 = borderArrangement3.equals((java.lang.Object) range86);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Range[10.0,10.0]" + "'", str38, "Range[10.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Range[0.0,10.0]" + "'", str70, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Range[0.0,100.0]" + "'", str77, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + (-9899.0d) + "'", double84 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + (-9899.0d) + "'", double85 == (-9899.0d));
        org.junit.Assert.assertNotNull(range86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range34, 100.0d, (double) 100);
        boolean boolean38 = borderArrangement0.equals((java.lang.Object) range37);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range43 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range43, 100.0d, (double) 100);
        boolean boolean49 = range43.intersects((double) 'a', (-9899.0d));
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range43, (double) (byte) -1, true);
        org.jfree.data.Range range54 = org.jfree.data.Range.shift(range43, 37.0d);
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range54, 26.0d, 1011.0d);
        boolean boolean58 = borderArrangement0.equals((java.lang.Object) 1011.0d);
        org.jfree.chart.block.Block block59 = null;
        org.jfree.data.Range range62 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double63 = range62.getUpperBound();
        java.lang.String str64 = range62.toString();
        double double65 = range62.getCentralValue();
        boolean boolean67 = range62.contains((double) (-1));
        org.jfree.data.Range range70 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double71 = range70.getLength();
        org.jfree.data.Range range73 = org.jfree.data.Range.expandToInclude(range70, (double) (short) 10);
        double double74 = range73.getLowerBound();
        double double75 = range73.getLength();
        org.jfree.data.Range range76 = org.jfree.data.Range.combine(range62, range73);
        org.jfree.data.Range range79 = org.jfree.data.Range.expand(range76, (double) 0L, 330.0d);
        org.jfree.data.Range range82 = new org.jfree.data.Range(275.0d, 97.0d);
        org.jfree.data.Range range83 = org.jfree.data.Range.combine(range79, range82);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block59, (java.lang.Object) range79);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Range[100.0,1.0]" + "'", str64, "Range[100.0,1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.5d + "'", double65 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 10.0d + "'", double75 == 10.0d);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertNotNull(range83);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range5, (double) (byte) -1, (double) 100L);
        boolean boolean11 = range5.contains(99.0d);
        double double12 = range5.getUpperBound();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range5, (double) '4', true);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range5, 0.0d, true);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9899.0d) + "'", double6 == (-9899.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10000.0d + "'", double12 == 10000.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        java.lang.Class<?> wildcardClass26 = range24.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 0.0d, (double) (short) 1);
        org.junit.Assert.assertNotNull(range5);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj9 = new java.lang.Object();
        boolean boolean10 = range8.equals(obj9);
        boolean boolean13 = range8.intersects(5.0d, (double) 100L);
        double double14 = range8.getLength();
        java.lang.String str15 = range8.toString();
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range8, (double) 0);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double21 = range20.getLength();
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range20, (double) (short) 10);
        double double24 = range23.getLowerBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range23, (double) 100L);
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range26, (double) 100L, true);
        org.jfree.data.Range range32 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range32, (double) 1.0f, false);
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range32, 0.0d);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range26, range37);
        org.jfree.data.Range range39 = org.jfree.data.Range.combine(range17, range38);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range17, 82.5d, (double) 100.0f);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range5, range17);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Range[0.0,10.0]" + "'", str15, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getCentralValue();
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range2, (-4949.0d), false);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range2, 10097.0d, 42.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range24);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = range2.intersects((double) (byte) 1, 5.0d);
        double double6 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean9 = range2.equals((java.lang.Object) 10);
        boolean boolean11 = range2.contains((double) 1.0f);
        double double12 = range2.getUpperBound();
        double double13 = range2.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        double double28 = range27.getLowerBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) 100L);
        boolean boolean31 = range16.equals((java.lang.Object) 100L);
        boolean boolean33 = range16.contains(35.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range2, range16);
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj38 = new java.lang.Object();
        boolean boolean39 = range37.equals(obj38);
        boolean boolean42 = range37.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range45.getLength();
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) (short) 10);
        double double49 = range48.getLowerBound();
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range48, (double) 100L);
        boolean boolean52 = range37.equals((java.lang.Object) 100L);
        boolean boolean54 = range37.contains((double) (byte) 100);
        double double55 = range37.getUpperBound();
        org.jfree.data.Range range56 = org.jfree.data.Range.combine(range34, range37);
        double double57 = range37.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (-1.0f));
        org.jfree.chart.block.Block block5 = null;
        org.jfree.data.Range range8 = new org.jfree.data.Range(16.0d, 110.0d);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block5, (java.lang.Object) 110.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        java.lang.String str37 = range36.toString();
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range36, 330.0d, false);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range40, 50.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Range[0.0,100.0]" + "'", str37, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, (double) (short) -1, 82.5d);
        boolean boolean14 = range9.contains(16.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        double double3 = range2.getCentralValue();
        java.lang.String str4 = range2.toString();
        org.jfree.data.Range range7 = org.jfree.data.Range.expand(range2, (double) (-1), (-10.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 50.5d + "'", double3 == 50.5d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Range[1.0,100.0]" + "'", str4, "Range[1.0,100.0]");
        org.junit.Assert.assertNotNull(range7);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        double double9 = range7.getLowerBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range12);
        double double20 = range7.constrain((double) (byte) 1);
        double double21 = range7.getCentralValue();
        double double22 = range7.getCentralValue();
        boolean boolean23 = borderArrangement0.equals((java.lang.Object) double22);
        borderArrangement0.clear();
        org.jfree.chart.block.Block block25 = null;
        org.jfree.data.Range range28 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range28, (double) (-1));
        double double31 = range30.getUpperBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range30, (double) 1, true);
        double double35 = range30.getLowerBound();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block25, (java.lang.Object) double35);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 99.0d + "'", double31 == 99.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 9.0d + "'", double35 == 9.0d);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range5, (double) (-1));
        double double8 = range5.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, 330.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range10, 5048.5d, 102.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range13);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double9 = range8.getLength();
        double double11 = range8.constrain(0.0d);
        java.lang.String str12 = range8.toString();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range8, (double) (short) 1, true);
        double double16 = range15.getLowerBound();
        boolean boolean19 = range15.intersects((double) 0, (double) 10);
        org.jfree.data.Range range20 = org.jfree.data.Range.combine(range2, range15);
        java.lang.Class<?> wildcardClass21 = range15.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Range[0.0,10.0]" + "'", str12, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        boolean boolean13 = range7.intersects(0.0d, (double) (byte) 0);
        boolean boolean14 = borderArrangement0.equals((java.lang.Object) (byte) 0);
        borderArrangement0.clear();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj19 = new java.lang.Object();
        boolean boolean20 = range18.equals(obj19);
        boolean boolean23 = range18.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double28 = range26.constrain(10.0d);
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range18, range26);
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        org.jfree.data.Range range41 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range41, 100.0d, (double) 100);
        boolean boolean45 = range38.equals((java.lang.Object) range41);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range38, (double) 100);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range29, range47);
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range48, (double) ' ', 1.0d);
        double double52 = range51.getLowerBound();
        boolean boolean53 = borderArrangement0.equals((java.lang.Object) double52);
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-6400.0d) + "'", double52 == (-6400.0d));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, (double) ' ');
        boolean boolean16 = range14.contains((double) 1);
        java.lang.String str17 = range14.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[-968.0,1042.0]" + "'", str17, "Range[-968.0,1042.0]");
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        double double5 = range2.getLowerBound();
        boolean boolean8 = range2.intersects((double) (byte) 0, 0.0d);
        double double10 = range2.constrain((double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range2, 630.0d);
        boolean boolean15 = range12.intersects(0.0d, 1.0d);
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getCentralValue();
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range18, (double) 1);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range18, (double) 'a');
        double double24 = range18.getLowerBound();
        double double25 = range18.getLowerBound();
        boolean boolean26 = range12.equals((java.lang.Object) double25);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5.0d + "'", double19 == 5.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        double double13 = range12.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean17 = range12.equals((java.lang.Object) range16);
        org.jfree.data.Range range20 = new org.jfree.data.Range(11.0d, (-1.0d));
        double double21 = range20.getCentralValue();
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range12, range20);
        org.jfree.data.Range range25 = new org.jfree.data.Range(99.0d, (double) (byte) -1);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range20, range25);
        double double27 = range25.getLength();
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range33, (double) '4', false);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range25, range42);
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range43, 19899.0d);
        double double46 = range43.getCentralValue();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 330.0d + "'", double13 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-100.0d) + "'", double27 == (-100.0d));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 57.0d + "'", double46 == 57.0d);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-9899.0d), 51.0d);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement3.clear();
        org.jfree.data.Range range7 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean8 = borderArrangement3.equals((java.lang.Object) range7);
        borderArrangement3.clear();
        borderArrangement3.clear();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double14 = range13.getCentralValue();
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range13, (double) 0L, (double) '4');
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range13, (double) ' ');
        boolean boolean20 = borderArrangement3.equals((java.lang.Object) ' ');
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj24 = new java.lang.Object();
        boolean boolean25 = range23.equals(obj24);
        boolean boolean28 = range23.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range31.getLength();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) (short) 10);
        double double35 = range34.getLowerBound();
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range34, (double) 100L);
        boolean boolean38 = range23.equals((java.lang.Object) 100L);
        double double39 = range23.getLength();
        boolean boolean40 = borderArrangement3.equals((java.lang.Object) range23);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range2, range23);
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range23, 0.0d);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range43, 26.0d, 90.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5.0d + "'", double14 == 5.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range46);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        boolean boolean13 = range11.contains((double) (short) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double17 = range16.getUpperBound();
        java.lang.String str18 = range16.toString();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range16, 0.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range16, 1340.0d);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, (double) (byte) -1, 630.0d);
        boolean boolean26 = range11.equals((java.lang.Object) range25);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[100.0,1.0]" + "'", str18, "Range[100.0,1.0]");
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double20 = range19.getLength();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) (short) 10);
        double double23 = range22.getLowerBound();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) 100L);
        org.jfree.data.Range range28 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range28, 100.0d, (double) 100);
        boolean boolean32 = range25.equals((java.lang.Object) range28);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range25, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range25, (double) 100.0f);
        double double38 = range25.getCentralValue();
        boolean boolean40 = range25.equals((java.lang.Object) 0);
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getLength();
        double double46 = range43.constrain(0.0d);
        java.lang.String str47 = range43.toString();
        org.jfree.data.Range range50 = org.jfree.data.Range.shift(range43, (double) (short) 1, true);
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range50, (double) '4');
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range52, (double) 1L);
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range25, range52);
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range52, 107.0d, 0.0d);
        boolean boolean59 = borderArrangement0.equals((java.lang.Object) 107.0d);
        java.lang.Class<?> wildcardClass60 = borderArrangement0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Range[0.0,10.0]" + "'", str47, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getUpperBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        double double9 = range8.getCentralValue();
        double double10 = range8.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range8, 67.5d, (double) '4');
        boolean boolean16 = range13.intersects((-9.0d), (-1.9898E8d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5.0d + "'", double9 == 5.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        boolean boolean6 = range2.intersects(195.0d, 0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.Block block32 = null;
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range35, (double) (-1));
        double double38 = range37.getUpperBound();
        boolean boolean41 = range37.intersects(50.0d, 5.0d);
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double45 = range44.getLength();
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range44, (double) (short) 10);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range37, range44);
        boolean boolean50 = range37.contains((-1.0d));
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range37, 150.0d);
        java.lang.Class<?> wildcardClass53 = range52.getClass();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block32, (java.lang.Object) wildcardClass53);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Class cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 99.0d + "'", double38 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 100L, (double) (short) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, 1026.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(range11);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double5 = range4.getLength();
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range4, (double) (short) 10);
        double double8 = range7.getLowerBound();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range7, (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 100L, true);
        java.lang.Class<?> wildcardClass14 = range13.getClass();
        boolean boolean15 = borderArrangement0.equals((java.lang.Object) range13);
        org.jfree.chart.block.Block block16 = null;
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, 100.0d, (double) 100);
        double double23 = range22.getLowerBound();
        double double24 = range22.getLowerBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range22, 1.0d);
        org.jfree.data.Range range29 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj30 = new java.lang.Object();
        boolean boolean31 = range29.equals(obj30);
        boolean boolean34 = range29.intersects(5.0d, (double) 100L);
        double double35 = range29.getLength();
        java.lang.String str36 = range29.toString();
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range29, (double) 0);
        org.jfree.data.Range range41 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double42 = range41.getLength();
        org.jfree.data.Range range44 = org.jfree.data.Range.expandToInclude(range41, (double) (short) 10);
        double double45 = range44.getLowerBound();
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range44, (double) 100L);
        org.jfree.data.Range range50 = org.jfree.data.Range.shift(range47, (double) 100L, true);
        org.jfree.data.Range range53 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range53, (double) 1.0f, false);
        org.jfree.data.Range range58 = org.jfree.data.Range.expandToInclude(range53, 0.0d);
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range47, range58);
        org.jfree.data.Range range60 = org.jfree.data.Range.combine(range38, range59);
        org.jfree.data.Range range61 = org.jfree.data.Range.combine(range22, range59);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block16, (java.lang.Object) range22);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-9899.0d) + "'", double23 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-9899.0d) + "'", double24 == (-9899.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Range[0.0,10.0]" + "'", str36, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range61);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range5, 100.0d);
        boolean boolean15 = range5.intersects((double) 100.0f, 1.0d);
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, 100.0d, (double) 100);
        boolean boolean31 = range24.equals((java.lang.Object) range27);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range24, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range24, (double) 100.0f);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        boolean boolean41 = range5.equals((java.lang.Object) range40);
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range40, 1010.0d);
        java.lang.String str44 = range43.toString();
        double double45 = range43.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Range[0.0,1010.0]" + "'", str44, "Range[0.0,1010.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1010.0d + "'", double45 == 1010.0d);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (byte) 0, (double) (-1L));
        double double15 = range11.getUpperBound();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean27 = range24.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        double double41 = range40.getLength();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        boolean boolean49 = range44.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str50 = range44.toString();
        boolean boolean51 = range40.equals((java.lang.Object) range44);
        boolean boolean52 = range11.equals((java.lang.Object) range44);
        boolean boolean53 = range5.equals((java.lang.Object) range44);
        org.jfree.data.Range range54 = null;
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range44, range54);
        boolean boolean57 = range55.equals((java.lang.Object) 0L);
        org.jfree.data.Range range59 = org.jfree.data.Range.expandToInclude(range55, 330.0d);
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range55, 4.5d);
        boolean boolean63 = range61.contains((double) (short) 10);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,10.0]" + "'", str50, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) (short) 100, false);
        java.lang.String str17 = range2.toString();
        double double19 = range2.constrain(99.0d);
        boolean boolean21 = range2.contains(0.0d);
        java.lang.Class<?> wildcardClass22 = range2.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[0.0,10.0]" + "'", str17, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.jfree.data.Range range2 = new org.jfree.data.Range(142.0d, (double) 10);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        double double7 = range2.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (double) (byte) 0);
        java.lang.String str12 = range11.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Range[0.0,10.0]" + "'", str12, "Range[0.0,10.0]");
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.chart.block.Block block5 = null;
        org.jfree.data.Range range6 = null;
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        borderArrangement0.add(block5, (java.lang.Object) range6);
        org.jfree.chart.block.BlockContainer blockContainer10 = null;
        java.awt.Graphics2D graphics2D11 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D13 = borderArrangement0.arrange(blockContainer10, graphics2D11, rectangleConstraint12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range8);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        java.lang.String str4 = range2.toString();
        double double5 = range2.getCentralValue();
        boolean boolean7 = range2.contains((double) (-1));
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        double double15 = range13.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range2, range13);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (double) 0L, 330.0d);
        double double20 = range19.getUpperBound();
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double24 = range23.getLength();
        double double26 = range23.constrain(0.0d);
        java.lang.String str27 = range23.toString();
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range23, (double) (short) 1, true);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range23, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range33, (double) ' ');
        double double37 = range33.constrain((double) (byte) 10);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range33, 330.0d, false);
        double double41 = range40.getLowerBound();
        double double42 = range40.getLength();
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range19, range40);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Range[100.0,1.0]" + "'", str4, "Range[100.0,1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 50.5d + "'", double5 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3310.0d + "'", double20 == 3310.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Range[0.0,10.0]" + "'", str27, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-670.0d) + "'", double41 == (-670.0d));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2010.0d + "'", double42 == 2010.0d);
        org.junit.Assert.assertNotNull(range43);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getUpperBound();
        double double6 = range4.getCentralValue();
        double double7 = range4.getLowerBound();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        double double13 = range10.getUpperBound();
        java.lang.String str14 = range10.toString();
        boolean boolean15 = range4.equals((java.lang.Object) str14);
        double double16 = range4.getUpperBound();
        boolean boolean19 = range4.intersects(101.0d, 55.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 99.0d + "'", double5 == 99.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 54.0d + "'", double6 == 54.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 9.0d + "'", double7 == 9.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[0.0,10.0]" + "'", str14, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) '4', 1010.0d);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range2, 5100.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 0.0f);
        double double3 = range2.getUpperBound();
        boolean boolean5 = range2.contains(0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) 1L);
        java.lang.Class<?> wildcardClass5 = borderArrangement0.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        borderArrangement0.clear();
        java.lang.Object obj31 = null;
        boolean boolean32 = borderArrangement0.equals(obj31);
        org.jfree.data.Range range35 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double36 = range35.getLength();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) (short) 10);
        double double39 = range38.getLowerBound();
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range38, (double) 100L);
        org.jfree.data.Range range44 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range47 = org.jfree.data.Range.expand(range44, 100.0d, (double) 100);
        boolean boolean48 = range41.equals((java.lang.Object) range44);
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range41, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range41, (double) 100.0f);
        double double54 = range41.getCentralValue();
        boolean boolean56 = range41.equals((java.lang.Object) 0);
        org.jfree.data.Range range59 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double60 = range59.getLength();
        double double62 = range59.constrain(0.0d);
        java.lang.String str63 = range59.toString();
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range59, (double) (short) 1, true);
        org.jfree.data.Range range68 = org.jfree.data.Range.expandToInclude(range66, (double) '4');
        org.jfree.data.Range range70 = org.jfree.data.Range.expandToInclude(range68, (double) 1L);
        org.jfree.data.Range range71 = org.jfree.data.Range.combine(range41, range68);
        boolean boolean72 = borderArrangement0.equals((java.lang.Object) range71);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 50.0d + "'", double54 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 10.0d + "'", double60 == 10.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Range[0.0,10.0]" + "'", str63, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        double double8 = range2.getLength();
        java.lang.String str9 = range2.toString();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getLength();
        double double15 = range12.constrain(0.0d);
        java.lang.String str16 = range12.toString();
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, (double) (short) 1, true);
        boolean boolean21 = range19.contains((double) 0L);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range2, range19);
        double double23 = range19.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[0.0,10.0]" + "'", str9, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Range[0.0,10.0]" + "'", str16, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 0.0d, (double) (-1L));
        double double6 = range5.getLength();
        java.lang.String str7 = range5.toString();
        boolean boolean9 = range5.contains((double) (-1L));
        java.lang.String str10 = range5.toString();
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range5, 92.5d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Range[10.0,10.0]" + "'", str7, "Range[10.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Range[10.0,10.0]" + "'", str10, "Range[10.0,10.0]");
        org.junit.Assert.assertNotNull(range12);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        boolean boolean13 = range7.intersects(0.0d, (double) (byte) 0);
        boolean boolean14 = borderArrangement0.equals((java.lang.Object) (byte) 0);
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double18 = range17.getLength();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range17, (double) (short) 10);
        double double21 = range20.getLowerBound();
        double double22 = range20.getLength();
        double double24 = range20.constrain((double) 10);
        boolean boolean25 = borderArrangement0.equals((java.lang.Object) range20);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range20, 9999.0d, (-3011.0d));
        double double29 = range28.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-99990.0d) + "'", double29 == (-99990.0d));
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(1.0d, (double) (short) 10);
        double double8 = range2.getUpperBound();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        double double11 = range10.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        double double13 = range12.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean17 = range12.equals((java.lang.Object) range16);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range20, (double) (-1));
        double double23 = range22.getUpperBound();
        double double24 = range22.getCentralValue();
        double double25 = range22.getLowerBound();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range28.constrain(10.0d);
        double double31 = range28.getUpperBound();
        java.lang.String str32 = range28.toString();
        boolean boolean33 = range22.equals((java.lang.Object) str32);
        double double34 = range22.getLowerBound();
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range16, range22);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range22, (-1000.0d));
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range37, (-3000.0d), false);
        double double42 = range37.constrain((-495.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 330.0d + "'", double13 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 99.0d + "'", double23 == 99.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 54.0d + "'", double24 == 54.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 9.0d + "'", double25 == 9.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Range[0.0,10.0]" + "'", str32, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 9.0d + "'", double34 == 9.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double20 = range19.getLength();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) (short) 10);
        double double23 = range22.getLowerBound();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) 100L);
        org.jfree.data.Range range28 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range28, 100.0d, (double) 100);
        boolean boolean32 = range25.equals((java.lang.Object) range28);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range25, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range25, (double) 100.0f);
        double double38 = range25.getCentralValue();
        boolean boolean40 = range25.equals((java.lang.Object) 0);
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getLength();
        double double46 = range43.constrain(0.0d);
        java.lang.String str47 = range43.toString();
        org.jfree.data.Range range50 = org.jfree.data.Range.shift(range43, (double) (short) 1, true);
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range50, (double) '4');
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range52, (double) 1L);
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range25, range52);
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range52, 107.0d, 0.0d);
        boolean boolean59 = borderArrangement0.equals((java.lang.Object) 107.0d);
        borderArrangement0.clear();
        org.jfree.chart.block.BlockContainer blockContainer61 = null;
        java.awt.Graphics2D graphics2D62 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D64 = borderArrangement0.arrange(blockContainer61, graphics2D62, rectangleConstraint63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Range[0.0,10.0]" + "'", str47, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.jfree.data.Range range2 = new org.jfree.data.Range(48845.0d, 19.0d);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        java.lang.String str37 = range36.toString();
        org.jfree.data.Range range40 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range40, 100.0d, (double) 100);
        double double44 = range43.getLowerBound();
        double double45 = range43.getLowerBound();
        org.jfree.data.Range range46 = org.jfree.data.Range.combine(range36, range43);
        double double48 = range46.constrain(211.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Range[0.0,100.0]" + "'", str37, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-9899.0d) + "'", double44 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-9899.0d) + "'", double45 == (-9899.0d));
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 211.0d + "'", double48 == 211.0d);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        java.lang.Class<?> wildcardClass13 = range2.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (-1L), 137.0d);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range34, (double) '4');
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range34, (double) 1, true);
        org.jfree.data.Range range46 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range49 = org.jfree.data.Range.expand(range46, 0.0d, (double) (-1L));
        org.jfree.data.Range range50 = org.jfree.data.Range.combine(range43, range49);
        double double51 = range49.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        double double39 = range38.getUpperBound();
        boolean boolean40 = borderArrangement0.equals((java.lang.Object) range38);
        double double41 = range38.getCentralValue();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double45 = range44.getCentralValue();
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range44, (double) 0L, (double) '4');
        boolean boolean51 = range48.intersects((double) (short) 1, (double) 0.0f);
        double double52 = range48.getLowerBound();
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range38, range48);
        java.lang.Class<?> wildcardClass54 = range48.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 5.0d + "'", double45 == 5.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range15, (double) (-1));
        boolean boolean20 = range15.contains((double) (byte) 1);
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double24 = range23.getLength();
        double double26 = range23.constrain(0.0d);
        java.lang.String str27 = range23.toString();
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range23, (double) (short) 1, true);
        boolean boolean32 = range30.contains((double) 0L);
        double double34 = range30.constrain(50.5d);
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range30, (double) 1.0f);
        org.jfree.data.Range range37 = org.jfree.data.Range.combine(range15, range36);
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range36, 0.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Range[0.0,10.0]" + "'", str27, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 11.0d + "'", double34 == 11.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range39);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = borderArrangement0.equals((java.lang.Object) 1.0f);
        java.lang.Object obj8 = null;
        boolean boolean9 = borderArrangement0.equals(obj8);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj13 = new java.lang.Object();
        boolean boolean14 = range12.equals(obj13);
        boolean boolean17 = range12.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range20.constrain(10.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range12, range20);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, 100.0d, (double) 100);
        boolean boolean39 = range32.equals((java.lang.Object) range35);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, (double) 100);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range23, range41);
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) range23);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range49 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double50 = range49.getLength();
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range49, (double) (short) 10);
        double double53 = range52.getLowerBound();
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range52, (double) 100L);
        org.jfree.data.Range range58 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range61 = org.jfree.data.Range.expand(range58, 100.0d, (double) 100);
        boolean boolean62 = range55.equals((java.lang.Object) range58);
        org.jfree.data.Range range65 = org.jfree.data.Range.expand(range55, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range67 = org.jfree.data.Range.expandToInclude(range55, (double) 100.0f);
        double double68 = range55.getCentralValue();
        boolean boolean70 = range55.equals((java.lang.Object) 0);
        double double72 = range55.constrain((double) (byte) -1);
        org.jfree.data.Range range75 = org.jfree.data.Range.expand(range55, (-670.0d), (-99.0d));
        boolean boolean76 = borderArrangement0.equals((java.lang.Object) (-99.0d));
        org.jfree.data.Range range79 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double80 = range79.getCentralValue();
        double double81 = range79.getLowerBound();
        org.jfree.data.Range range84 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double85 = range84.getCentralValue();
        org.jfree.data.Range range87 = org.jfree.data.Range.shift(range84, (double) 1);
        org.jfree.data.Range range89 = org.jfree.data.Range.expandToInclude(range84, (double) (short) 10);
        org.jfree.data.Range range90 = org.jfree.data.Range.combine(range79, range84);
        double double92 = range79.constrain((double) (byte) 1);
        double double93 = range79.getCentralValue();
        double double94 = range79.getLength();
        org.jfree.data.Range range97 = org.jfree.data.Range.shift(range79, 0.0d, false);
        boolean boolean98 = borderArrangement0.equals((java.lang.Object) false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 50.0d + "'", double68 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 5.0d + "'", double80 == 5.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 5.0d + "'", double85 == 5.0d);
        org.junit.Assert.assertNotNull(range87);
        org.junit.Assert.assertNotNull(range89);
        org.junit.Assert.assertNotNull(range90);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 5.0d + "'", double93 == 5.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 10.0d + "'", double94 == 10.0d);
        org.junit.Assert.assertNotNull(range97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.jfree.data.Range range2 = new org.jfree.data.Range(33.0d, 43.0d);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double20 = range19.getLength();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) (short) 10);
        double double23 = range22.getLowerBound();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) 100L);
        org.jfree.data.Range range28 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range28, 100.0d, (double) 100);
        boolean boolean32 = range25.equals((java.lang.Object) range28);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range25, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range25, (double) 100.0f);
        double double38 = range25.getCentralValue();
        boolean boolean40 = range25.equals((java.lang.Object) 0);
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getLength();
        double double46 = range43.constrain(0.0d);
        java.lang.String str47 = range43.toString();
        org.jfree.data.Range range50 = org.jfree.data.Range.shift(range43, (double) (short) 1, true);
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range50, (double) '4');
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range52, (double) 1L);
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range25, range52);
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range52, 107.0d, 0.0d);
        boolean boolean59 = borderArrangement0.equals((java.lang.Object) 107.0d);
        borderArrangement0.clear();
        org.jfree.chart.block.Block block61 = null;
        org.jfree.chart.block.BorderArrangement borderArrangement62 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement62.clear();
        org.jfree.data.Range range66 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean67 = borderArrangement62.equals((java.lang.Object) range66);
        borderArrangement62.clear();
        boolean boolean70 = borderArrangement62.equals((java.lang.Object) (short) 0);
        boolean boolean72 = borderArrangement62.equals((java.lang.Object) '#');
        org.jfree.data.Range range75 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range78 = org.jfree.data.Range.expand(range75, 100.0d, (double) 100);
        double double80 = range78.constrain((double) (short) 1);
        boolean boolean81 = borderArrangement62.equals((java.lang.Object) (short) 1);
        borderArrangement62.clear();
        org.jfree.data.Range range85 = new org.jfree.data.Range(1.0d, (double) 10.0f);
        boolean boolean86 = borderArrangement62.equals((java.lang.Object) 10.0f);
        borderArrangement62.clear();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block61, (java.lang.Object) borderArrangement62);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.chart.block.BorderArrangement cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Range[0.0,10.0]" + "'", str47, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double6 = range5.getLowerBound();
        double double7 = range5.getLowerBound();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, 10000.0d, true);
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range13, 0.0d, (double) (byte) -1);
        boolean boolean24 = range13.intersects((double) 100, (double) 10L);
        boolean boolean27 = range13.intersects(19899.0d, 9999.0d);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range5, range13);
        org.jfree.chart.block.BorderArrangement borderArrangement29 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement29.clear();
        org.jfree.data.Range range33 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean34 = borderArrangement29.equals((java.lang.Object) range33);
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double38 = range37.getLength();
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range37, (double) (short) 10);
        double double41 = range40.getLowerBound();
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range40, (double) 100L);
        boolean boolean44 = borderArrangement29.equals((java.lang.Object) 100L);
        boolean boolean46 = borderArrangement29.equals((java.lang.Object) 15.0d);
        boolean boolean47 = range5.equals((java.lang.Object) borderArrangement29);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9899.0d) + "'", double6 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9899.0d) + "'", double7 == (-9899.0d));
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean11 = range6.contains((double) 0.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        boolean boolean25 = range22.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        boolean boolean34 = range31.contains((double) (byte) 0);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range31, (double) 1.0f, false);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range22, range37);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range22, (double) 0.0f, false);
        java.lang.String str42 = range22.toString();
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range22, 530.0d, false);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range45, (double) 10L);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range6, range45);
        double double49 = range48.getLength();
        double double51 = range48.constrain(2010.0d);
        org.jfree.data.Range range54 = new org.jfree.data.Range(10.0d, (double) '4');
        double double55 = range54.getUpperBound();
        org.jfree.data.Range range58 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double59 = range58.getLength();
        double double61 = range58.constrain(0.0d);
        java.lang.String str62 = range58.toString();
        org.jfree.data.Range range65 = org.jfree.data.Range.shift(range58, (double) (short) 1, true);
        org.jfree.data.Range range67 = org.jfree.data.Range.expandToInclude(range65, (double) '4');
        org.jfree.data.Range range68 = org.jfree.data.Range.combine(range54, range65);
        org.jfree.data.Range range69 = org.jfree.data.Range.combine(range48, range68);
        org.jfree.data.Range range71 = org.jfree.data.Range.expandToInclude(range48, 19899.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Range[0.0,100.0]" + "'", str42, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 630.0d + "'", double49 == 630.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 630.0d + "'", double51 == 630.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 52.0d + "'", double55 == 52.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Range[0.0,10.0]" + "'", str62, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertNotNull(range71);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        boolean boolean37 = range32.contains((-1.0d));
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range32, 0.0d);
        boolean boolean42 = range32.intersects((double) (-1.0f), 530.0d);
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range32, 54.0d);
        org.jfree.data.Range range47 = org.jfree.data.Range.expand(range44, 107.0d, 67.5d);
        org.jfree.data.Range range50 = new org.jfree.data.Range((double) 10.0f, 0.0d);
        org.jfree.data.Range range53 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range56 = org.jfree.data.Range.expand(range53, 100.0d, (double) 100);
        boolean boolean59 = range53.intersects((double) 'a', (-9899.0d));
        org.jfree.data.Range range62 = org.jfree.data.Range.shift(range53, (double) (-1.0f), true);
        org.jfree.data.Range range65 = org.jfree.data.Range.expand(range62, 121.0d, 49.0d);
        org.jfree.data.Range range66 = org.jfree.data.Range.combine(range50, range65);
        org.jfree.data.Range range68 = org.jfree.data.Range.expandToInclude(range65, (-209948.0d));
        org.jfree.data.Range range69 = org.jfree.data.Range.combine(range44, range65);
        org.jfree.data.Range range72 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double73 = range72.getLength();
        org.jfree.data.Range range75 = org.jfree.data.Range.expandToInclude(range72, (double) (short) 10);
        org.jfree.data.Range range77 = org.jfree.data.Range.expandToInclude(range75, (double) (-1));
        double double78 = range75.getLength();
        boolean boolean79 = range65.equals((java.lang.Object) double78);
        org.jfree.data.Range range82 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double83 = range82.getLength();
        org.jfree.data.Range range85 = org.jfree.data.Range.expandToInclude(range82, (double) (short) 10);
        double double86 = range85.getLowerBound();
        org.jfree.data.Range range88 = org.jfree.data.Range.expandToInclude(range85, (double) 100L);
        boolean boolean91 = range88.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range92 = org.jfree.data.Range.combine(range65, range88);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 10.0d + "'", double78 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 10.0d + "'", double83 == 10.0d);
        org.junit.Assert.assertNotNull(range85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(range88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(range92);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.chart.block.Block block5 = null;
        org.jfree.data.Range range6 = null;
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        borderArrangement0.add(block5, (java.lang.Object) range6);
        org.jfree.data.Range range12 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean14 = range12.contains((double) 1L);
        boolean boolean17 = range12.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, 265.0d);
        boolean boolean20 = borderArrangement0.equals((java.lang.Object) 265.0d);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) (byte) 100, 101.0d);
        boolean boolean24 = borderArrangement0.equals((java.lang.Object) (byte) 100);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100.0f, 51.0d);
        double double3 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 75.5d + "'", double3 == 75.5d);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        boolean boolean19 = range2.contains((double) (byte) 100);
        java.lang.Class<?> wildcardClass20 = range2.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        boolean boolean4 = range2.contains(132.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100.0f, (double) (byte) 10);
        double double4 = range2.constrain((double) 100L);
        boolean boolean7 = range2.intersects((double) (short) 1, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, 16.0d, false);
        org.jfree.data.Range range13 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range13, (double) 1.0f, false);
        double double17 = range13.getCentralValue();
        boolean boolean20 = range13.intersects(26.5d, (double) ' ');
        boolean boolean21 = range10.equals((java.lang.Object) 26.5d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 31.0d + "'", double17 == 31.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double26 = range24.constrain(10.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range16, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range2, range16);
        double double29 = range16.getLowerBound();
        double double30 = range16.getCentralValue();
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range33.getLength();
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range33, (double) (short) 10);
        double double37 = range36.getLowerBound();
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range36, (double) 100L);
        boolean boolean42 = range39.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range45.getLength();
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) (short) 10);
        double double49 = range48.getLowerBound();
        boolean boolean51 = range48.contains((double) (byte) 0);
        org.jfree.data.Range range54 = org.jfree.data.Range.shift(range48, (double) 1.0f, false);
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range39, range54);
        org.jfree.data.Range range58 = org.jfree.data.Range.shift(range39, (double) 0.0f, false);
        java.lang.String str59 = range39.toString();
        double double60 = range39.getLowerBound();
        boolean boolean61 = range16.equals((java.lang.Object) double60);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5.0d + "'", double30 == 5.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Range[0.0,100.0]" + "'", str59, "Range[0.0,100.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range5, (double) (byte) -1);
        boolean boolean9 = range5.contains(1010.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) (short) 100, false);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, 200.0d);
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range16, 75.5d, false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, (double) ' ');
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range12, (double) '4');
        double double17 = range16.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1010.0d + "'", double17 == 1010.0d);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        org.jfree.chart.block.Block block30 = null;
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range33.getLength();
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range33, (double) (short) 10);
        double double37 = range36.getLowerBound();
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range36, (double) 100L);
        org.jfree.data.Range range42 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range45 = org.jfree.data.Range.expand(range42, 100.0d, (double) 100);
        boolean boolean46 = range39.equals((java.lang.Object) range42);
        org.jfree.data.Range range49 = org.jfree.data.Range.expand(range39, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range39, (double) 100.0f);
        double double52 = range39.getCentralValue();
        boolean boolean54 = range39.equals((java.lang.Object) 0);
        org.jfree.data.Range range57 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double58 = range57.getLength();
        double double60 = range57.constrain(0.0d);
        java.lang.String str61 = range57.toString();
        org.jfree.data.Range range64 = org.jfree.data.Range.shift(range57, (double) (short) 1, true);
        org.jfree.data.Range range66 = org.jfree.data.Range.expandToInclude(range64, (double) '4');
        org.jfree.data.Range range68 = org.jfree.data.Range.expandToInclude(range66, (double) 1L);
        org.jfree.data.Range range69 = org.jfree.data.Range.combine(range39, range66);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block30, (java.lang.Object) range69);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 50.0d + "'", double52 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Range[0.0,10.0]" + "'", str61, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range69);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        boolean boolean5 = range2.contains((double) (byte) 0);
        boolean boolean7 = range2.contains(154.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, 0.0d, false);
        double double11 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 100L, (double) (short) 0);
        boolean boolean11 = range2.contains((double) (short) 1);
        double double12 = range2.getUpperBound();
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj16 = new java.lang.Object();
        boolean boolean17 = range15.equals(obj16);
        boolean boolean20 = range15.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range23.constrain(10.0d);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range23);
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range15, (double) (short) 100, false);
        boolean boolean32 = range15.intersects((double) '#', (double) 0.0f);
        double double33 = range15.getUpperBound();
        org.jfree.data.Range range36 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, 100.0d, (double) 100);
        double double41 = range39.constrain((double) (short) 1);
        boolean boolean43 = range39.contains((double) '4');
        double double44 = range39.getLowerBound();
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range39, 100.0d);
        boolean boolean48 = range46.contains((double) (byte) -1);
        boolean boolean49 = range15.equals((java.lang.Object) boolean48);
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double53 = range52.getLength();
        double double55 = range52.constrain(0.0d);
        java.lang.String str56 = range52.toString();
        org.jfree.data.Range range59 = org.jfree.data.Range.shift(range52, (double) (short) 1, true);
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range59, (double) '4');
        org.jfree.data.Range range64 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double65 = range64.getCentralValue();
        org.jfree.data.Range range68 = org.jfree.data.Range.expand(range64, (double) 0L, (double) '4');
        boolean boolean71 = range68.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean73 = range68.contains((double) 0.0f);
        boolean boolean75 = range68.equals((java.lang.Object) (-1));
        boolean boolean76 = range61.equals((java.lang.Object) boolean75);
        org.jfree.data.Range range77 = org.jfree.data.Range.combine(range15, range61);
        org.jfree.data.Range range78 = org.jfree.data.Range.combine(range2, range15);
        double double79 = range2.getLowerBound();
        boolean boolean82 = range2.intersects(55.0d, 49.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-9899.0d) + "'", double44 == (-9899.0d));
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Range[0.0,10.0]" + "'", str56, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 5.0d + "'", double65 == 5.0d);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        boolean boolean19 = range2.contains((double) (byte) 100);
        double double20 = range2.getLowerBound();
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double24 = range23.getCentralValue();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range23, (double) 1);
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range23, (double) (short) 10);
        double double29 = range23.getCentralValue();
        double double30 = range23.getLength();
        double double31 = range23.getCentralValue();
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range2, range23);
        boolean boolean34 = range2.contains(19757.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5.0d + "'", double24 == 5.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5.0d + "'", double29 == 5.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5.0d + "'", double31 == 5.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getCentralValue();
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range14, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range17, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) 10);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range10, range24);
        boolean boolean28 = range10.intersects(150.0d, (double) 'a');
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range10, (double) 100, 19.0d);
        boolean boolean32 = borderArrangement0.equals((java.lang.Object) range10);
        borderArrangement0.clear();
        java.lang.Object obj34 = null;
        boolean boolean35 = borderArrangement0.equals(obj34);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5.0d + "'", double15 == 5.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getUpperBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        double double9 = range8.getCentralValue();
        double double10 = range8.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range8, 67.5d, (double) '4');
        double double15 = range8.constrain(55.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5.0d + "'", double9 == 5.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        java.lang.String str8 = range7.toString();
        double double9 = range7.getUpperBound();
        boolean boolean12 = range7.intersects(90.0d, 42.0d);
        double double13 = range7.getUpperBound();
        double double14 = range7.getCentralValue();
        double double15 = range7.getLength();
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range7, 11.0d, 510.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[97.0,107.0]" + "'", str8, "Range[97.0,107.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 107.0d + "'", double9 == 107.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 107.0d + "'", double13 == 107.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 102.0d + "'", double14 == 102.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range18);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        java.lang.String str8 = range2.toString();
        double double9 = range2.getCentralValue();
        double double11 = range2.constrain(0.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range2, (double) (-1L));
        double double14 = range13.getCentralValue();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, 20.0d);
        double double17 = range13.getLength();
        boolean boolean20 = range13.intersects((double) (-1), (-39.5d));
        boolean boolean22 = range13.contains((double) 100.0f);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[1.0,100.0]" + "'", str8, "Range[1.0,100.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.5d + "'", double9 == 50.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 49.5d + "'", double14 == 49.5d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 99.0d + "'", double17 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range6, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range9, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) 10);
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range2, range16);
        double double18 = range16.getLowerBound();
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range16, (double) 100L, true);
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range16, 37.0d);
        boolean boolean25 = range16.contains((-209948.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.0d + "'", double7 == 5.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getCentralValue();
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range14, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range17, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) 10);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range10, range24);
        boolean boolean28 = range10.intersects(150.0d, (double) 'a');
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range10, (double) 100, 19.0d);
        boolean boolean32 = borderArrangement0.equals((java.lang.Object) range10);
        borderArrangement0.clear();
        boolean boolean35 = borderArrangement0.equals((java.lang.Object) 67.5d);
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double39 = range38.getCentralValue();
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range38, (double) 1);
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range38, (double) 'a');
        boolean boolean45 = range38.equals((java.lang.Object) 10);
        boolean boolean47 = range38.contains((double) 1.0f);
        double double48 = range38.getUpperBound();
        double double49 = range38.getUpperBound();
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj53 = new java.lang.Object();
        boolean boolean54 = range52.equals(obj53);
        boolean boolean57 = range52.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range60 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double61 = range60.getLength();
        org.jfree.data.Range range63 = org.jfree.data.Range.expandToInclude(range60, (double) (short) 10);
        double double64 = range63.getLowerBound();
        org.jfree.data.Range range66 = org.jfree.data.Range.expandToInclude(range63, (double) 100L);
        boolean boolean67 = range52.equals((java.lang.Object) 100L);
        boolean boolean69 = range52.contains(35.0d);
        org.jfree.data.Range range70 = org.jfree.data.Range.combine(range38, range52);
        org.jfree.data.Range range73 = org.jfree.data.Range.shift(range70, 10000.0d, false);
        org.jfree.data.Range range76 = org.jfree.data.Range.shift(range70, 1011.0d, true);
        org.jfree.data.Range range78 = org.jfree.data.Range.expandToInclude(range70, 2010.0d);
        boolean boolean79 = borderArrangement0.equals((java.lang.Object) range78);
        org.jfree.chart.block.BlockContainer blockContainer80 = null;
        java.awt.Graphics2D graphics2D81 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D83 = borderArrangement0.arrange(blockContainer80, graphics2D81, rectangleConstraint82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5.0d + "'", double15 == 5.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 5.0d + "'", double39 == 5.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (double) (byte) -1, true);
        double double12 = range11.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.jfree.data.Range range2 = new org.jfree.data.Range(2010.0d, 102.0d);
        boolean boolean4 = range2.contains(43.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        double double37 = range33.getLowerBound();
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range33, 6676165.0d, 136.0d);
        double double41 = range40.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-3.3380139E7d) + "'", double41 == (-3.3380139E7d));
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getLength();
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        double double16 = range15.getLowerBound();
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range15, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, 100.0d, (double) 100);
        boolean boolean25 = range18.equals((java.lang.Object) range21);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range18, (double) 1.0f, (double) 'a');
        boolean boolean29 = range9.equals((java.lang.Object) 1.0f);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range9, 43.0d, (double) (short) 10);
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range32, 9999.0d);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range34, (double) 1, 9999.0d);
        org.jfree.data.Range range40 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range40, (double) (byte) 0, (double) (-1L));
        double double44 = range40.getUpperBound();
        boolean boolean45 = range37.equals((java.lang.Object) double44);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        java.lang.String str4 = range2.toString();
        double double5 = range2.getCentralValue();
        boolean boolean7 = range2.contains((double) (-1));
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        double double15 = range13.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range2, range13);
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) (-1L));
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, 49.0d, 10.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range2, range19);
        boolean boolean25 = range2.contains((-6500.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Range[100.0,1.0]" + "'", str4, "Range[100.0,1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 50.5d + "'", double5 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100.0f, (double) (byte) 10);
        double double4 = range2.constrain((double) 100L);
        boolean boolean7 = range2.intersects((double) (short) 1, (double) 100L);
        java.lang.String str8 = range2.toString();
        boolean boolean11 = range2.intersects(42.0d, 100.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[100.0,10.0]" + "'", str8, "Range[100.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (byte) 0, (double) (-1L));
        double double15 = range11.getUpperBound();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean27 = range24.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        double double41 = range40.getLength();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        boolean boolean49 = range44.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str50 = range44.toString();
        boolean boolean51 = range40.equals((java.lang.Object) range44);
        boolean boolean52 = range11.equals((java.lang.Object) range44);
        boolean boolean53 = range5.equals((java.lang.Object) range44);
        org.jfree.data.Range range54 = null;
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range44, range54);
        boolean boolean57 = range55.equals((java.lang.Object) 0L);
        org.jfree.data.Range range59 = org.jfree.data.Range.expandToInclude(range55, 330.0d);
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range55, 4.5d);
        org.jfree.data.Range range64 = org.jfree.data.Range.shift(range55, (double) (byte) 1, false);
        org.jfree.data.Range range66 = org.jfree.data.Range.expandToInclude(range64, (-2.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,10.0]" + "'", str50, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertNotNull(range66);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range8, (double) 0.0f, false);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range27, 51.0d, false);
        double double31 = range27.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, 330.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range13, 51.0d, 1.0d);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) (short) 10);
        double double25 = range21.getCentralValue();
        boolean boolean28 = range21.intersects((double) 100L, (double) (short) 0);
        boolean boolean30 = range21.contains((double) (short) 1);
        double double31 = range21.getUpperBound();
        boolean boolean34 = range21.intersects(107.0d, (double) 100.0f);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range18, range21);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5.0d + "'", double25 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(range35);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getLength();
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        double double16 = range15.getLowerBound();
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range15, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, 100.0d, (double) 100);
        boolean boolean25 = range18.equals((java.lang.Object) range21);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range18, (double) 1.0f, (double) 'a');
        boolean boolean29 = range9.equals((java.lang.Object) 1.0f);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range9, 43.0d, (double) (short) 10);
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range32, 9999.0d);
        double double35 = range32.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 5346.0d + "'", double35 == 5346.0d);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (double) (-1.0f), true);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 121.0d, 49.0d);
        double double15 = range11.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 49.5d + "'", double15 == 49.5d);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, (double) 100.0f);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 10);
        org.jfree.data.Range range15 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range15, (double) (-1));
        double double18 = range17.getUpperBound();
        boolean boolean21 = range17.intersects(50.0d, 5.0d);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range17, range24);
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range10, range24);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range10, 0.0d, 49.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 99.0d + "'", double18 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range32);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double9 = range8.getLength();
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range8, (double) (short) 10);
        double double12 = range11.getLowerBound();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) 100L);
        boolean boolean15 = borderArrangement0.equals((java.lang.Object) 100L);
        boolean boolean17 = borderArrangement0.equals((java.lang.Object) 15.0d);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        double double25 = range23.constrain((double) (short) 1);
        boolean boolean27 = range23.contains((double) '4');
        double double28 = range23.getLowerBound();
        double double30 = range23.constrain(54.0d);
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range33.getCentralValue();
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range33, (double) 1);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range33, (double) 'a');
        boolean boolean40 = range33.equals((java.lang.Object) 10);
        boolean boolean42 = range33.contains((double) 1.0f);
        double double43 = range33.getUpperBound();
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range23, range33);
        double double45 = range44.getLowerBound();
        double double46 = range44.getLength();
        boolean boolean49 = range44.intersects(42.0d, 19.0d);
        boolean boolean50 = borderArrangement0.equals((java.lang.Object) 19.0d);
        org.jfree.chart.block.Block block51 = null;
        org.jfree.data.Range range54 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double56 = range54.constrain(10.0d);
        double double57 = range54.getLowerBound();
        boolean boolean60 = range54.intersects((double) (byte) 0, 0.0d);
        org.jfree.data.Range range63 = org.jfree.data.Range.shift(range54, (double) 0, true);
        boolean boolean66 = range63.intersects(1286.0d, 131.0d);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block51, (java.lang.Object) boolean66);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Boolean cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-9899.0d) + "'", double28 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 54.0d + "'", double30 == 54.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5.0d + "'", double34 == 5.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-9899.0d) + "'", double45 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 19899.0d + "'", double46 == 19899.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 10.0d + "'", double56 == 10.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range2, (double) (short) -1);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getLength();
        double double18 = range15.constrain(0.0d);
        java.lang.String str19 = range15.toString();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range15, (double) (short) 1, true);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) '4');
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range2, range24);
        java.lang.String str26 = range24.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Range[0.0,10.0]" + "'", str19, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Range[1.0,52.0]" + "'", str26, "Range[1.0,52.0]");
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range5, (double) (byte) -1, (double) 100L);
        boolean boolean11 = range5.contains(99.0d);
        double double12 = range5.getUpperBound();
        double double14 = range5.constrain(5.5d);
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double18 = range17.getLength();
        double double20 = range17.constrain(0.0d);
        java.lang.String str21 = range17.toString();
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range17, (double) (short) 1, true);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range27, (double) (byte) 1, (double) (-1));
        java.lang.String str34 = range33.toString();
        double double35 = range33.getUpperBound();
        java.lang.Class<?> wildcardClass36 = range33.getClass();
        boolean boolean37 = range5.equals((java.lang.Object) wildcardClass36);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9899.0d) + "'", double6 == (-9899.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10000.0d + "'", double12 == 10000.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5.5d + "'", double14 == 5.5d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Range[0.0,10.0]" + "'", str21, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Range[-3010.0,-1000.0]" + "'", str34, "Range[-3010.0,-1000.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1000.0d) + "'", double35 == (-1000.0d));
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        double double8 = range2.getLength();
        java.lang.String str9 = range2.toString();
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (double) 0);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range17, (double) 100L);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range20, (double) 100L, true);
        org.jfree.data.Range range26 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range26, (double) 1.0f, false);
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range26, 0.0d);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range20, range31);
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range11, range32);
        org.jfree.data.Range range36 = org.jfree.data.Range.expand(range11, 82.5d, (double) 100.0f);
        java.lang.String str37 = range36.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[0.0,10.0]" + "'", str9, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Range[-825.0,1010.0]" + "'", str37, "Range[-825.0,1010.0]");
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range15, (double) (-1));
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) (short) 10);
        double double25 = range24.getLowerBound();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) 100L);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range30, 100.0d, (double) 100);
        boolean boolean34 = range27.equals((java.lang.Object) range30);
        double double35 = range27.getLength();
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range15, range27);
        double double37 = range15.getUpperBound();
        boolean boolean39 = range15.contains(131.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 107.0d + "'", double37 == 107.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range6, 10.0d, false);
        java.lang.String str29 = range6.toString();
        double double31 = range6.constrain(5346.0d);
        double double32 = range6.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Range[0.0,530.0]" + "'", str29, "Range[0.0,530.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 530.0d + "'", double31 == 530.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 530.0d + "'", double32 == 530.0d);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getLength();
        double double12 = range9.constrain(0.0d);
        java.lang.String str13 = range9.toString();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, (double) (short) 1, true);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range9, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range19, (double) (byte) 1, (double) (-1));
        boolean boolean26 = borderArrangement0.equals((java.lang.Object) range25);
        java.lang.Object obj27 = null;
        boolean boolean28 = borderArrangement0.equals(obj27);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range31.getCentralValue();
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range31, (double) 0L, (double) '4');
        boolean boolean38 = range35.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean40 = range35.contains((double) 0.0f);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range35, 10.0d);
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) range35);
        org.jfree.data.Range range46 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double47 = range46.getLength();
        org.jfree.data.Range range49 = org.jfree.data.Range.expandToInclude(range46, (double) (short) 10);
        double double50 = range49.getLowerBound();
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range49, (double) 100L);
        org.jfree.data.Range range55 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range55, 100.0d, (double) 100);
        boolean boolean59 = range52.equals((java.lang.Object) range55);
        org.jfree.data.Range range62 = org.jfree.data.Range.expand(range52, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range64 = org.jfree.data.Range.expandToInclude(range52, (double) 100.0f);
        double double65 = range52.getCentralValue();
        boolean boolean67 = range52.equals((java.lang.Object) 0);
        org.jfree.data.Range range70 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double71 = range70.getLength();
        double double73 = range70.constrain(0.0d);
        java.lang.String str74 = range70.toString();
        org.jfree.data.Range range77 = org.jfree.data.Range.shift(range70, (double) (short) 1, true);
        org.jfree.data.Range range79 = org.jfree.data.Range.expandToInclude(range77, (double) '4');
        org.jfree.data.Range range80 = org.jfree.data.Range.combine(range52, range77);
        java.lang.String str81 = range80.toString();
        org.jfree.data.Range range84 = org.jfree.data.Range.shift(range80, 330.0d, false);
        org.jfree.data.Range range85 = org.jfree.data.Range.combine(range35, range80);
        boolean boolean87 = range35.contains(26.0d);
        org.jfree.data.Range range90 = org.jfree.data.Range.shift(range35, 35.0d, false);
        org.jfree.data.Range range93 = org.jfree.data.Range.expand(range90, (double) 0L, (double) 0.0f);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,10.0]" + "'", str13, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5.0d + "'", double32 == 5.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Range[0.0,10.0]" + "'", str74, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Range[0.0,100.0]" + "'", str81, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range84);
        org.junit.Assert.assertNotNull(range85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(range90);
        org.junit.Assert.assertNotNull(range93);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (double) (byte) -1, true);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range2, 37.0d);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 26.0d, 1011.0d);
        org.jfree.chart.block.BorderArrangement borderArrangement17 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement17.clear();
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean22 = borderArrangement17.equals((java.lang.Object) range21);
        boolean boolean24 = range21.equals((java.lang.Object) (byte) 100);
        double double25 = range21.getCentralValue();
        boolean boolean26 = range13.equals((java.lang.Object) double25);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 50.5d + "'", double25 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        java.lang.String str4 = range2.toString();
        double double5 = range2.getCentralValue();
        boolean boolean8 = range2.intersects((-6400.0d), 1011.0d);
        boolean boolean10 = range2.contains(488.0d);
        double double12 = range2.constrain(254.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Range[100.0,1.0]" + "'", str4, "Range[100.0,1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 50.5d + "'", double5 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100, 133.0d);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range6, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range9, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) 10);
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range2, range16);
        double double18 = range16.getLowerBound();
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range16, (double) 100L, true);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range16, 275.0d, 340.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range16, 54.0d, (-12.0d));
        boolean boolean29 = range27.contains((-6500.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.0d + "'", double7 == 5.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str8 = range2.toString();
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, (double) (-1));
        double double14 = range13.getUpperBound();
        boolean boolean17 = range13.intersects(50.0d, 5.0d);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double21 = range20.getLength();
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range20, (double) (short) 10);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range20);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range2, range24);
        double double26 = range25.getUpperBound();
        double double27 = range25.getLength();
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range30.getUpperBound();
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj38 = new java.lang.Object();
        boolean boolean39 = range37.equals(obj38);
        boolean boolean42 = range37.intersects(5.0d, (double) 100L);
        double double43 = range37.getLength();
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range37, 0.0d);
        org.jfree.data.Range range46 = org.jfree.data.Range.combine(range30, range45);
        boolean boolean47 = range25.equals((java.lang.Object) range30);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[0.0,10.0]" + "'", str8, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 99.0d + "'", double14 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 99.0d + "'", double26 == 99.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 99.0d + "'", double27 == 99.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range2, (double) (short) -1);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range15.constrain(10.0d);
        boolean boolean20 = range15.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str21 = range15.toString();
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range15, (double) 100L);
        boolean boolean24 = range2.equals((java.lang.Object) range15);
        double double25 = range2.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Range[0.0,10.0]" + "'", str21, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range10, (double) 0L, (double) '4');
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range10, (double) ' ');
        boolean boolean17 = borderArrangement0.equals((java.lang.Object) ' ');
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj21 = new java.lang.Object();
        boolean boolean22 = range20.equals(obj21);
        boolean boolean25 = range20.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        boolean boolean35 = range20.equals((java.lang.Object) 100L);
        double double36 = range20.getLength();
        boolean boolean37 = borderArrangement0.equals((java.lang.Object) range20);
        org.jfree.data.Range range40 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double41 = range40.getCentralValue();
        double double42 = range40.getLowerBound();
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range45.getCentralValue();
        org.jfree.data.Range range48 = org.jfree.data.Range.shift(range45, (double) 1);
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range45, (double) (short) 10);
        org.jfree.data.Range range51 = org.jfree.data.Range.combine(range40, range45);
        double double53 = range40.constrain((double) (byte) 1);
        double double54 = range40.getCentralValue();
        boolean boolean55 = borderArrangement0.equals((java.lang.Object) double54);
        org.jfree.chart.block.Block block56 = null;
        java.lang.Object obj57 = null;
        borderArrangement0.add(block56, obj57);
        java.lang.Class<?> wildcardClass59 = borderArrangement0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 5.0d + "'", double41 == 5.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 5.0d + "'", double46 == 5.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 5.0d + "'", double54 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        double double6 = range5.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range5, 82.5d, 43.0d);
        java.lang.String str10 = range9.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Range[-824.0,441.0]" + "'", str10, "Range[-824.0,441.0]");
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100.0f, 51.0d);
        double double3 = range2.getLowerBound();
        org.jfree.data.Range range6 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range6, 100.0d, (double) 100);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range6, (double) ' ');
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, 10.0d);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range22, (double) 1.0f, (double) 'a');
        boolean boolean33 = range13.equals((java.lang.Object) 1.0f);
        java.lang.String str34 = range13.toString();
        double double36 = range13.constrain((-4949.0d));
        org.jfree.data.Range range37 = null;
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range37, 10.0d);
        double double40 = range39.getLength();
        double double42 = range39.constrain((double) (-1));
        double double43 = range39.getCentralValue();
        java.lang.String str44 = range39.toString();
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range13, range39);
        boolean boolean46 = range2.equals((java.lang.Object) range13);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Range[43.0,142.0]" + "'", str34, "Range[43.0,142.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 43.0d + "'", double36 == 43.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Range[10.0,10.0]" + "'", str44, "Range[10.0,10.0]");
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range6, 10.0d, false);
        java.lang.String str29 = range6.toString();
        double double31 = range6.constrain(5346.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range6, 11.0d, false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Range[0.0,530.0]" + "'", str29, "Range[0.0,530.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 530.0d + "'", double31 == 530.0d);
        org.junit.Assert.assertNotNull(range34);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-445.0d), (-445.0d));
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range2, (double) (short) -1);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getLength();
        double double18 = range15.constrain(0.0d);
        java.lang.String str19 = range15.toString();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range15, (double) (short) 1, true);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) '4');
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range2, range24);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj29 = new java.lang.Object();
        boolean boolean30 = range28.equals(obj29);
        boolean boolean33 = range28.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getLength();
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range36, (double) (short) 10);
        double double40 = range39.getLowerBound();
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range39, (double) 100L);
        boolean boolean43 = range28.equals((java.lang.Object) 100L);
        double double44 = range28.getCentralValue();
        org.jfree.data.Range range47 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double48 = range47.getLength();
        double double50 = range47.constrain(0.0d);
        java.lang.String str51 = range47.toString();
        org.jfree.data.Range range54 = org.jfree.data.Range.shift(range47, (double) (short) 1, true);
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range47, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range60 = org.jfree.data.Range.expand(range57, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range61 = org.jfree.data.Range.combine(range28, range57);
        double double63 = range28.constrain((double) 1L);
        org.jfree.data.Range range64 = org.jfree.data.Range.combine(range25, range28);
        org.jfree.data.Range range67 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double68 = range67.getLength();
        org.jfree.data.Range range70 = org.jfree.data.Range.expandToInclude(range67, (double) (short) 10);
        double double71 = range70.getLowerBound();
        org.jfree.data.Range range73 = org.jfree.data.Range.expandToInclude(range70, (double) 100L);
        org.jfree.data.Range range76 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range79 = org.jfree.data.Range.expand(range76, 100.0d, (double) 100);
        boolean boolean80 = range73.equals((java.lang.Object) range76);
        org.jfree.data.Range range83 = org.jfree.data.Range.expand(range73, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range86 = org.jfree.data.Range.expand(range73, (-1.0d), 100.0d);
        java.lang.String str87 = range86.toString();
        double double88 = range86.getUpperBound();
        boolean boolean89 = range64.equals((java.lang.Object) double88);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Range[0.0,10.0]" + "'", str19, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 5.0d + "'", double44 == 5.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Range[0.0,10.0]" + "'", str51, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 10.0d + "'", double68 == 10.0d);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(range83);
        org.junit.Assert.assertNotNull(range86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Range[100.0,10100.0]" + "'", str87, "Range[100.0,10100.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 10100.0d + "'", double88 == 10100.0d);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.jfree.data.Range range2 = new org.jfree.data.Range(136.0d, (-3011.0d));
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        boolean boolean5 = range2.contains((double) (byte) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) 10.0f);
        boolean boolean11 = range2.intersects((double) '4', (double) (short) -1);
        org.jfree.data.Range range12 = null;
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range12);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(range13);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement10 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean12 = borderArrangement10.equals((java.lang.Object) (-1L));
        borderArrangement10.clear();
        boolean boolean14 = range9.equals((java.lang.Object) borderArrangement10);
        org.jfree.chart.block.Block block15 = null;
        java.lang.Object obj16 = null;
        borderArrangement10.add(block15, obj16);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range20, (double) (-1));
        double double23 = range22.getUpperBound();
        boolean boolean26 = range22.intersects(50.0d, 5.0d);
        org.jfree.data.Range range29 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range29.getLength();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) (short) 10);
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range22, range29);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range22, (double) (byte) 10);
        boolean boolean36 = borderArrangement10.equals((java.lang.Object) range22);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double40 = range39.getUpperBound();
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getCentralValue();
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range43, (double) 1);
        org.jfree.data.Range range49 = org.jfree.data.Range.expand(range46, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range50 = org.jfree.data.Range.combine(range39, range46);
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range46, (double) '4');
        boolean boolean53 = borderArrangement10.equals((java.lang.Object) '4');
        boolean boolean54 = borderArrangement0.equals((java.lang.Object) borderArrangement10);
        org.jfree.chart.block.Block block55 = null;
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement10.add(block55, (java.lang.Object) (-100.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 99.0d + "'", double23 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 5.0d + "'", double44 == 5.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) (short) 10);
        org.junit.Assert.assertNotNull(range2);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, 142.0d, false);
        boolean boolean10 = range8.contains(33.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean11 = range6.contains((double) 0.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        boolean boolean25 = range22.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        boolean boolean34 = range31.contains((double) (byte) 0);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range31, (double) 1.0f, false);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range22, range37);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range22, (double) 0.0f, false);
        java.lang.String str42 = range22.toString();
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range22, 530.0d, false);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range45, (double) 10L);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range6, range45);
        double double49 = range48.getLength();
        double double51 = range48.constrain(2010.0d);
        org.jfree.data.Range range54 = new org.jfree.data.Range(10.0d, (double) '4');
        double double55 = range54.getUpperBound();
        org.jfree.data.Range range58 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double59 = range58.getLength();
        double double61 = range58.constrain(0.0d);
        java.lang.String str62 = range58.toString();
        org.jfree.data.Range range65 = org.jfree.data.Range.shift(range58, (double) (short) 1, true);
        org.jfree.data.Range range67 = org.jfree.data.Range.expandToInclude(range65, (double) '4');
        org.jfree.data.Range range68 = org.jfree.data.Range.combine(range54, range65);
        org.jfree.data.Range range69 = org.jfree.data.Range.combine(range48, range68);
        java.lang.Class<?> wildcardClass70 = range68.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Range[0.0,100.0]" + "'", str42, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 630.0d + "'", double49 == 630.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 630.0d + "'", double51 == 630.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 52.0d + "'", double55 == 52.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Range[0.0,10.0]" + "'", str62, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        double double5 = range2.getLowerBound();
        boolean boolean8 = range2.intersects((double) (byte) 0, 0.0d);
        double double10 = range2.constrain((double) (byte) -1);
        double double11 = range2.getUpperBound();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range2, 1011.0d);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (double) (byte) 0, (double) (-1L));
        double double20 = range16.getUpperBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range16, (-1.0d));
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        double double29 = range28.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range28, (double) (byte) -1, (double) 100L);
        double double34 = range28.constrain(265.0d);
        java.lang.String str35 = range28.toString();
        boolean boolean38 = range28.intersects(101.0d, (double) (byte) 100);
        org.jfree.data.Range range39 = org.jfree.data.Range.combine(range22, range28);
        boolean boolean40 = range2.equals((java.lang.Object) range22);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range22, 97.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-9899.0d) + "'", double29 == (-9899.0d));
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 265.0d + "'", double34 == 265.0d);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Range[-9899.0,10000.0]" + "'", str35, "Range[-9899.0,10000.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range42);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        double double5 = range2.getLowerBound();
        boolean boolean8 = range2.intersects((double) (byte) 0, 0.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (double) 0, true);
        double double12 = range2.getCentralValue();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range2, 67.5d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5.0d + "'", double12 == 5.0d);
        org.junit.Assert.assertNotNull(range14);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        double double27 = range26.getLowerBound();
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (-1));
        double double33 = range32.getUpperBound();
        boolean boolean36 = range32.intersects(50.0d, 5.0d);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range39.getLength();
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range39, (double) (short) 10);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range26, range39);
        org.jfree.data.Range range47 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double48 = range47.getLength();
        double double50 = range47.constrain(0.0d);
        java.lang.String str51 = range47.toString();
        org.jfree.data.Range range54 = org.jfree.data.Range.shift(range47, (double) (short) 1, true);
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range47, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range60 = org.jfree.data.Range.expand(range57, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range63 = org.jfree.data.Range.expand(range57, (double) (byte) 1, (double) (-1));
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range63, (double) (-1L), true);
        org.jfree.data.Range range67 = org.jfree.data.Range.combine(range44, range66);
        org.jfree.data.Range range70 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj71 = new java.lang.Object();
        boolean boolean72 = range70.equals(obj71);
        boolean boolean75 = range70.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range78 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double80 = range78.constrain(10.0d);
        org.jfree.data.Range range81 = org.jfree.data.Range.combine(range70, range78);
        org.jfree.data.Range range84 = org.jfree.data.Range.shift(range70, (double) (short) 100, false);
        java.lang.String str85 = range70.toString();
        boolean boolean86 = range66.equals((java.lang.Object) str85);
        org.jfree.data.Range range89 = org.jfree.data.Range.shift(range66, 0.0d, true);
        org.jfree.data.Range range92 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range95 = org.jfree.data.Range.expand(range92, 100.0d, (double) 100);
        double double96 = range92.getLength();
        org.jfree.data.Range range97 = org.jfree.data.Range.combine(range66, range92);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9899.0d) + "'", double27 == (-9899.0d));
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 99.0d + "'", double33 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Range[0.0,10.0]" + "'", str51, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 10.0d + "'", double80 == 10.0d);
        org.junit.Assert.assertNotNull(range81);
        org.junit.Assert.assertNotNull(range84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Range[0.0,10.0]" + "'", str85, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(range89);
        org.junit.Assert.assertNotNull(range95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 99.0d + "'", double96 == 99.0d);
        org.junit.Assert.assertNotNull(range97);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (short) 1, (double) (-1L));
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, 97.0d);
        boolean boolean19 = range17.contains(137.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-670.0d), (double) 0.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 100, false);
        double double6 = range5.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-235.0d) + "'", double6 == (-235.0d));
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.BlockContainer blockContainer32 = null;
        java.awt.Graphics2D graphics2D33 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D35 = borderArrangement0.arrange(blockContainer32, graphics2D33, rectangleConstraint34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        java.lang.String str36 = range32.toString();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) 1L);
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range32, (-100.0d));
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range32, 43.0d);
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range32, 100.0d);
        java.lang.Class<?> wildcardClass45 = range32.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Range[0.0,200.0]" + "'", str36, "Range[0.0,200.0]");
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, 50.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range7, (-6400.0d), 107.0d);
        double double11 = range10.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-314600.0d) + "'", double11 == (-314600.0d));
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        double double16 = range11.getCentralValue();
        double double17 = range11.getUpperBound();
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range11, (-670.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.5d + "'", double16 == 50.5d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(range19);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range10, (double) 0L, (double) '4');
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range10, (double) ' ');
        boolean boolean17 = borderArrangement0.equals((java.lang.Object) ' ');
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj21 = new java.lang.Object();
        boolean boolean22 = range20.equals(obj21);
        boolean boolean25 = range20.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        boolean boolean35 = range20.equals((java.lang.Object) 100L);
        double double36 = range20.getLength();
        boolean boolean37 = borderArrangement0.equals((java.lang.Object) range20);
        org.jfree.data.Range range40 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement41 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean43 = borderArrangement41.equals((java.lang.Object) (-1L));
        borderArrangement41.clear();
        boolean boolean45 = range40.equals((java.lang.Object) borderArrangement41);
        org.jfree.chart.block.Block block46 = null;
        java.lang.Object obj47 = null;
        borderArrangement41.add(block46, obj47);
        org.jfree.data.Range range51 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double52 = range51.getLength();
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range51, (double) (short) 10);
        double double55 = range54.getLowerBound();
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range54, (double) 100L);
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range57, (double) 100L, true);
        boolean boolean61 = borderArrangement41.equals((java.lang.Object) 100L);
        boolean boolean62 = borderArrangement0.equals((java.lang.Object) boolean61);
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        double double39 = range38.getUpperBound();
        boolean boolean40 = borderArrangement0.equals((java.lang.Object) range38);
        borderArrangement0.clear();
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) 26.5d);
        org.jfree.chart.block.BorderArrangement borderArrangement44 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement44.clear();
        org.jfree.data.Range range48 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean49 = borderArrangement44.equals((java.lang.Object) range48);
        borderArrangement44.clear();
        boolean boolean52 = borderArrangement44.equals((java.lang.Object) (short) 0);
        boolean boolean54 = borderArrangement44.equals((java.lang.Object) '#');
        org.jfree.data.Range range57 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range60 = org.jfree.data.Range.expand(range57, 100.0d, (double) 100);
        double double62 = range60.constrain((double) (short) 1);
        boolean boolean63 = borderArrangement44.equals((java.lang.Object) (short) 1);
        borderArrangement44.clear();
        borderArrangement44.clear();
        boolean boolean66 = borderArrangement0.equals((java.lang.Object) borderArrangement44);
        java.lang.Class<?> wildcardClass67 = borderArrangement0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (byte) 0, (double) (-1L));
        double double15 = range11.getUpperBound();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean27 = range24.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        double double41 = range40.getLength();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        boolean boolean49 = range44.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str50 = range44.toString();
        boolean boolean51 = range40.equals((java.lang.Object) range44);
        boolean boolean52 = range11.equals((java.lang.Object) range44);
        boolean boolean53 = range5.equals((java.lang.Object) range44);
        double double54 = range5.getLowerBound();
        double double56 = range5.constrain(108.0d);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range5, 0.0d, 3310.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,10.0]" + "'", str50, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 10.0d + "'", double56 == 10.0d);
        org.junit.Assert.assertNotNull(range59);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range8, (-1.0d), 100.0d);
        java.lang.String str22 = range21.toString();
        double double23 = range21.getCentralValue();
        double double24 = range21.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Range[100.0,10100.0]" + "'", str22, "Range[100.0,10100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10000.0d + "'", double24 == 10000.0d);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        org.jfree.chart.block.BorderArrangement borderArrangement6 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement6.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean11 = borderArrangement6.equals((java.lang.Object) range10);
        boolean boolean13 = borderArrangement6.equals((java.lang.Object) 1.0f);
        boolean boolean14 = borderArrangement0.equals((java.lang.Object) 1.0f);
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, 100.0d, (double) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range17, (double) ' ');
        java.lang.String str23 = range17.toString();
        java.lang.String str24 = range17.toString();
        boolean boolean25 = borderArrangement0.equals((java.lang.Object) str24);
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Range[1.0,100.0]" + "'", str23, "Range[1.0,100.0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Range[1.0,100.0]" + "'", str24, "Range[1.0,100.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range5, (double) '4', false);
        org.jfree.data.Range range17 = new org.jfree.data.Range(50.5d, (double) ' ');
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range14, range17);
        double double19 = range18.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 11.5d + "'", double19 == 11.5d);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) ' ', 26.0d);
        java.lang.Object obj3 = null;
        boolean boolean4 = range2.equals(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 0.0d, 10.0d);
        org.junit.Assert.assertNotNull(range5);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getLength();
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range15, (double) (short) 10);
        double double19 = range18.getLowerBound();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range24, 100.0d, (double) 100);
        boolean boolean28 = range21.equals((java.lang.Object) range24);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range21, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range21, (double) 100.0f);
        double double34 = range21.getCentralValue();
        org.jfree.data.Range range37 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range37, (double) (byte) 0, (double) (-1L));
        double double41 = range37.getUpperBound();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double45 = range44.getLength();
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range44, (double) (short) 10);
        double double48 = range47.getLowerBound();
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range47, (double) 100L);
        boolean boolean53 = range50.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range56 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double57 = range56.getLength();
        org.jfree.data.Range range59 = org.jfree.data.Range.expandToInclude(range56, (double) (short) 10);
        double double60 = range59.getLowerBound();
        boolean boolean62 = range59.contains((double) (byte) 0);
        org.jfree.data.Range range65 = org.jfree.data.Range.shift(range59, (double) 1.0f, false);
        org.jfree.data.Range range66 = org.jfree.data.Range.combine(range50, range65);
        double double67 = range66.getLength();
        org.jfree.data.Range range70 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double72 = range70.constrain(10.0d);
        boolean boolean75 = range70.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str76 = range70.toString();
        boolean boolean77 = range66.equals((java.lang.Object) range70);
        boolean boolean78 = range37.equals((java.lang.Object) range70);
        boolean boolean79 = range21.equals((java.lang.Object) range37);
        boolean boolean80 = borderArrangement7.equals((java.lang.Object) range37);
        borderArrangement7.clear();
        org.jfree.chart.block.Block block82 = null;
        org.jfree.chart.block.BorderArrangement borderArrangement83 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement83.clear();
        org.jfree.data.Range range87 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean88 = borderArrangement83.equals((java.lang.Object) range87);
        boolean boolean90 = range87.equals((java.lang.Object) (byte) 100);
        org.jfree.data.Range range93 = new org.jfree.data.Range((double) 1.0f, 10000.0d);
        org.jfree.data.Range range94 = org.jfree.data.Range.combine(range87, range93);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement7.add(block82, (java.lang.Object) range94);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 50.0d + "'", double34 == 50.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 100.0d + "'", double67 == 100.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 10.0d + "'", double72 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Range[0.0,10.0]" + "'", str76, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(range94);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double33 = range32.getUpperBound();
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getCentralValue();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range36, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range39, (double) '4');
        boolean boolean46 = borderArrangement3.equals((java.lang.Object) '4');
        org.jfree.data.Range range49 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double50 = range49.getLength();
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range49, (double) (short) 10);
        double double53 = range49.getUpperBound();
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range49, 0.0d);
        double double56 = range55.getCentralValue();
        double double57 = range55.getLength();
        boolean boolean58 = borderArrangement3.equals((java.lang.Object) range55);
        org.jfree.data.Range range59 = null;
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range59, 10.0d);
        double double62 = range61.getLength();
        double double64 = range61.constrain((double) (-1));
        double double65 = range61.getCentralValue();
        boolean boolean66 = borderArrangement3.equals((java.lang.Object) range61);
        org.jfree.chart.block.Block block67 = null;
        org.jfree.data.Range range70 = new org.jfree.data.Range((double) 100.0f, (double) (byte) 10);
        double double72 = range70.constrain((double) 100L);
        double double73 = range70.getUpperBound();
        boolean boolean76 = range70.intersects((-2.0d), (-1.9898E8d));
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement3.add(block67, (java.lang.Object) range70);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5.0d + "'", double37 == 5.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5.0d + "'", double56 == 5.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.0d + "'", double65 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 10.0d + "'", double72 == 10.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getLength();
        double double12 = range9.constrain(0.0d);
        java.lang.String str13 = range9.toString();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, (double) (short) 1, true);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range9, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range19, (double) (byte) 1, (double) (-1));
        boolean boolean26 = borderArrangement0.equals((java.lang.Object) range25);
        java.lang.Object obj27 = null;
        boolean boolean28 = borderArrangement0.equals(obj27);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range31.getCentralValue();
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range31, (double) 0L, (double) '4');
        boolean boolean38 = range35.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean40 = range35.contains((double) 0.0f);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range35, 10.0d);
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) range35);
        borderArrangement0.clear();
        org.jfree.chart.block.Block block45 = null;
        org.jfree.data.Range range48 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double49 = range48.getLength();
        double double51 = range48.constrain(0.0d);
        java.lang.String str52 = range48.toString();
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range48, (double) (short) 1, true);
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range48, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range58, (double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block45, (java.lang.Object) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Character cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,10.0]" + "'", str13, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5.0d + "'", double32 == 5.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Range[0.0,10.0]" + "'", str52, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range60);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range15, (double) (-1));
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) (short) 10);
        double double25 = range24.getLowerBound();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) 100L);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range30, 100.0d, (double) 100);
        boolean boolean34 = range27.equals((java.lang.Object) range30);
        double double35 = range27.getLength();
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range15, range27);
        java.lang.Class<?> wildcardClass37 = range36.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range10, (double) 0L, (double) '4');
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range10, (double) ' ');
        boolean boolean17 = borderArrangement0.equals((java.lang.Object) ' ');
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj21 = new java.lang.Object();
        boolean boolean22 = range20.equals(obj21);
        boolean boolean25 = range20.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        boolean boolean35 = range20.equals((java.lang.Object) 100L);
        double double36 = range20.getLength();
        boolean boolean37 = borderArrangement0.equals((java.lang.Object) range20);
        java.lang.Object obj38 = null;
        boolean boolean39 = borderArrangement0.equals(obj38);
        borderArrangement0.clear();
        org.jfree.data.Range range43 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range43, 100.0d, (double) 100);
        double double47 = range46.getLowerBound();
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range46, (double) (byte) -1, (double) 100L);
        boolean boolean52 = range46.contains(99.0d);
        double double53 = range46.getUpperBound();
        org.jfree.data.Range range56 = org.jfree.data.Range.expand(range46, 9999.0d, 335.0d);
        org.jfree.data.Range range58 = org.jfree.data.Range.expandToInclude(range46, 510.0d);
        boolean boolean59 = borderArrangement0.equals((java.lang.Object) range46);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-9899.0d) + "'", double47 == (-9899.0d));
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10000.0d + "'", double53 == 10000.0d);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        boolean boolean7 = range2.contains(6676175.0d);
        org.jfree.data.Range range10 = new org.jfree.data.Range(200.0d, 51.0d);
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range13, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range13, (double) (byte) 10);
        org.jfree.data.Range range26 = new org.jfree.data.Range(100.0d, (double) (byte) 100);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range13, range26);
        java.lang.String str28 = range26.toString();
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range26, 52.0d);
        boolean boolean31 = range10.equals((java.lang.Object) 52.0d);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range2, range10);
        double double34 = range2.constrain((double) (byte) 1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[100.0,100.0]" + "'", str28, "Range[100.0,100.0]");
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double9 = range8.getLength();
        double double11 = range8.constrain(0.0d);
        java.lang.String str12 = range8.toString();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range8, (double) (short) 1, true);
        double double16 = range15.getLowerBound();
        boolean boolean19 = range15.intersects((double) 0, (double) 10);
        org.jfree.data.Range range20 = org.jfree.data.Range.combine(range2, range15);
        double double21 = range20.getLength();
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range20, (double) 1L);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Range[0.0,10.0]" + "'", str12, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 11.0d + "'", double21 == 11.0d);
        org.junit.Assert.assertNotNull(range23);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getCentralValue();
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range2, 50.5d, 26.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range21, 55.0d);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range21, 5100.0d, (-420.0d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range28.constrain(10.0d);
        boolean boolean33 = range28.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str34 = range28.toString();
        boolean boolean35 = range24.equals((java.lang.Object) range28);
        double double36 = range24.getLength();
        java.lang.String str37 = range24.toString();
        boolean boolean40 = range24.intersects(1340.0d, 52.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Range[0.0,10.0]" + "'", str34, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Range[0.0,100.0]" + "'", str37, "Range[0.0,100.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range6, 10.0d, false);
        double double29 = range6.getCentralValue();
        double double30 = range6.getCentralValue();
        boolean boolean32 = range6.contains(0.0d);
        double double33 = range6.getLength();
        org.jfree.data.Range range36 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, 100.0d, (double) 100);
        double double40 = range39.getLowerBound();
        double double41 = range39.getLowerBound();
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range39, 1.0d);
        org.jfree.data.Range range46 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj47 = new java.lang.Object();
        boolean boolean48 = range46.equals(obj47);
        boolean boolean51 = range46.intersects(5.0d, (double) 100L);
        double double52 = range46.getLength();
        java.lang.String str53 = range46.toString();
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range46, (double) 0);
        org.jfree.data.Range range58 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double59 = range58.getLength();
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range58, (double) (short) 10);
        double double62 = range61.getLowerBound();
        org.jfree.data.Range range64 = org.jfree.data.Range.expandToInclude(range61, (double) 100L);
        org.jfree.data.Range range67 = org.jfree.data.Range.shift(range64, (double) 100L, true);
        org.jfree.data.Range range70 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range73 = org.jfree.data.Range.shift(range70, (double) 1.0f, false);
        org.jfree.data.Range range75 = org.jfree.data.Range.expandToInclude(range70, 0.0d);
        org.jfree.data.Range range76 = org.jfree.data.Range.combine(range64, range75);
        org.jfree.data.Range range77 = org.jfree.data.Range.combine(range55, range76);
        org.jfree.data.Range range78 = org.jfree.data.Range.combine(range39, range76);
        org.jfree.data.Range range79 = org.jfree.data.Range.combine(range6, range78);
        java.lang.Class<?> wildcardClass80 = range79.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 265.0d + "'", double29 == 265.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 265.0d + "'", double30 == 265.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 530.0d + "'", double33 == 530.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-9899.0d) + "'", double40 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-9899.0d) + "'", double41 == (-9899.0d));
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Range[0.0,10.0]" + "'", str53, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-39.5d), 330.0d);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, 10000.0d, true);
        org.junit.Assert.assertNotNull(range5);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 37.0d);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        boolean boolean13 = range7.intersects(0.0d, (double) (byte) 0);
        boolean boolean14 = borderArrangement0.equals((java.lang.Object) (byte) 0);
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double18 = range17.getLength();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range17, (double) (short) 10);
        double double21 = range20.getLowerBound();
        double double22 = range20.getLength();
        double double24 = range20.constrain((double) 10);
        boolean boolean25 = borderArrangement0.equals((java.lang.Object) range20);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getCentralValue();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getCentralValue();
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range32, (double) 1);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range35, (double) 100.0f);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range40, (double) 10);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range28, range42);
        boolean boolean44 = borderArrangement0.equals((java.lang.Object) range28);
        org.jfree.chart.block.BlockContainer blockContainer45 = null;
        java.awt.Graphics2D graphics2D46 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D48 = borderArrangement0.arrange(blockContainer45, graphics2D46, rectangleConstraint47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5.0d + "'", double29 == 5.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5.0d + "'", double33 == 5.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (-2005.0d));
        boolean boolean6 = range4.contains(6.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) -1, 142.0d);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 82.5d, 9999.0d);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, (-9790.0d));
        org.jfree.chart.block.BorderArrangement borderArrangement8 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean10 = borderArrangement8.equals((java.lang.Object) (-1L));
        boolean boolean12 = borderArrangement8.equals((java.lang.Object) (byte) 10);
        borderArrangement8.clear();
        boolean boolean14 = range2.equals((java.lang.Object) borderArrangement8);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) (short) 100, false);
        java.lang.String str17 = range2.toString();
        double double19 = range2.constrain(99.0d);
        boolean boolean21 = range2.contains(0.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range2, (double) (byte) 1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range2, (double) (short) -1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[0.0,10.0]" + "'", str17, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        double double14 = range2.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range2, 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(range16);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, 1340.0d);
        double double4 = range2.constrain(16.0d);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 99.0d, false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 16.0d + "'", double4 == 16.0d);
        org.junit.Assert.assertNotNull(range7);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range5, (double) (-1));
        double double8 = range5.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, 330.0d);
        double double12 = range5.constrain((double) 10);
        double double13 = range5.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range5, (double) (-1L), false);
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range5, 5048.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range18);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        double double13 = range12.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean17 = range12.equals((java.lang.Object) range16);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range20, (double) (-1));
        double double23 = range22.getUpperBound();
        double double24 = range22.getCentralValue();
        double double25 = range22.getLowerBound();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range28.constrain(10.0d);
        double double31 = range28.getUpperBound();
        java.lang.String str32 = range28.toString();
        boolean boolean33 = range22.equals((java.lang.Object) str32);
        double double34 = range22.getLowerBound();
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range16, range22);
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range16, 19899.0d);
        double double39 = range37.constrain((-6500.0d));
        java.lang.String str40 = range37.toString();
        double double41 = range37.getLength();
        double double42 = range37.getLength();
        org.jfree.data.Range range44 = org.jfree.data.Range.expandToInclude(range37, 26.5d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 330.0d + "'", double13 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 99.0d + "'", double23 == 99.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 54.0d + "'", double24 == 54.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 9.0d + "'", double25 == 9.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Range[0.0,10.0]" + "'", str32, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 9.0d + "'", double34 == 9.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 142.0d + "'", double39 == 142.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Range[142.0,19899.0]" + "'", str40, "Range[142.0,19899.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 19757.0d + "'", double41 == 19757.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 19757.0d + "'", double42 == 19757.0d);
        org.junit.Assert.assertNotNull(range44);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) (byte) 0);
        org.jfree.data.Range range5 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj6 = new java.lang.Object();
        boolean boolean7 = range5.equals(obj6);
        boolean boolean10 = range5.intersects(5.0d, (double) 100L);
        double double11 = range5.getLength();
        java.lang.String str12 = range5.toString();
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getLength();
        double double18 = range15.constrain(0.0d);
        java.lang.String str19 = range15.toString();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range15, (double) (short) 1, true);
        boolean boolean24 = range22.contains((double) 0L);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range5, range22);
        java.lang.String str26 = range5.toString();
        double double27 = range5.getLength();
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range2, range5);
        java.lang.String str29 = range5.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Range[0.0,10.0]" + "'", str12, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Range[0.0,10.0]" + "'", str19, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Range[0.0,10.0]" + "'", str26, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Range[0.0,10.0]" + "'", str29, "Range[0.0,10.0]");
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        double double39 = range38.getUpperBound();
        boolean boolean40 = borderArrangement0.equals((java.lang.Object) range38);
        borderArrangement0.clear();
        java.lang.Object obj42 = null;
        boolean boolean43 = borderArrangement0.equals(obj42);
        org.jfree.chart.block.BlockContainer blockContainer44 = null;
        java.awt.Graphics2D graphics2D45 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D47 = borderArrangement0.arrange(blockContainer44, graphics2D45, rectangleConstraint46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (byte) 0, (double) (-1L));
        double double15 = range11.getUpperBound();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean27 = range24.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        double double41 = range40.getLength();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        boolean boolean49 = range44.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str50 = range44.toString();
        boolean boolean51 = range40.equals((java.lang.Object) range44);
        boolean boolean52 = range11.equals((java.lang.Object) range44);
        boolean boolean53 = range5.equals((java.lang.Object) range44);
        org.jfree.data.Range range54 = null;
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range44, range54);
        boolean boolean57 = range55.equals((java.lang.Object) 0L);
        org.jfree.data.Range range59 = org.jfree.data.Range.expandToInclude(range55, 330.0d);
        java.lang.Class<?> wildcardClass60 = range59.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,10.0]" + "'", str50, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range35, (double) 1L);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range8, range35);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range38, 150.0d, false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(1.0d, (double) (short) 10);
        double double8 = range2.getCentralValue();
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, 49.0d, 50.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, 6800.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range13, 4.5d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (-1003.0d), true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double33 = range32.getUpperBound();
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getCentralValue();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range36, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range39, (double) '4');
        boolean boolean46 = borderArrangement3.equals((java.lang.Object) '4');
        org.jfree.chart.block.Block block47 = null;
        org.jfree.data.Range range50 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj51 = new java.lang.Object();
        boolean boolean52 = range50.equals(obj51);
        boolean boolean55 = range50.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range58 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double60 = range58.constrain(10.0d);
        org.jfree.data.Range range61 = org.jfree.data.Range.combine(range50, range58);
        org.jfree.data.Range range64 = org.jfree.data.Range.shift(range50, (double) (short) 100, false);
        boolean boolean67 = range50.intersects((double) '#', (double) 0.0f);
        org.jfree.data.Range range70 = org.jfree.data.Range.expand(range50, 10000.0d, 1011.0d);
        org.jfree.data.Range range73 = org.jfree.data.Range.expand(range50, (-6500.0d), 6676165.0d);
        java.lang.Class<?> wildcardClass74 = range50.getClass();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement3.add(block47, (java.lang.Object) wildcardClass74);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Class cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5.0d + "'", double37 == 5.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 10.0d + "'", double60 == 10.0d);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range8, (double) 0.0f, false);
        double double29 = range8.constrain(2010.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getUpperBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, 54.0d);
        double double11 = range10.getLowerBound();
        boolean boolean14 = range10.intersects(254.0d, (double) 0.0f);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 54.0d + "'", double11 == 54.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range10, (double) 0L, (double) '4');
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range10, (double) ' ');
        boolean boolean17 = borderArrangement0.equals((java.lang.Object) ' ');
        org.jfree.chart.block.Block block18 = null;
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement22 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean24 = borderArrangement22.equals((java.lang.Object) (-1L));
        borderArrangement22.clear();
        boolean boolean26 = range21.equals((java.lang.Object) borderArrangement22);
        org.jfree.chart.block.Block block27 = null;
        java.lang.Object obj28 = null;
        borderArrangement22.add(block27, obj28);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range32, (double) (-1));
        double double35 = range34.getUpperBound();
        boolean boolean38 = range34.intersects(50.0d, 5.0d);
        org.jfree.data.Range range41 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double42 = range41.getLength();
        org.jfree.data.Range range44 = org.jfree.data.Range.expandToInclude(range41, (double) (short) 10);
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range34, range41);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range34, (double) (byte) 10);
        boolean boolean48 = borderArrangement22.equals((java.lang.Object) range34);
        org.jfree.data.Range range51 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range54 = org.jfree.data.Range.expand(range51, 100.0d, (double) 100);
        double double55 = range54.getLowerBound();
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range54, (double) (byte) -1, (double) 100L);
        double double60 = range54.constrain(265.0d);
        boolean boolean61 = range34.equals((java.lang.Object) range54);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block18, (java.lang.Object) boolean61);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Boolean cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 99.0d + "'", double35 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-9899.0d) + "'", double55 == (-9899.0d));
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 265.0d + "'", double60 == 265.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.jfree.data.Range range2 = new org.jfree.data.Range(275.0d, 97.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 0L);
        org.jfree.data.Range range7 = new org.jfree.data.Range(31.0d, (double) '4');
        org.jfree.data.Range range8 = org.jfree.data.Range.combine(range4, range7);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range8);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getCentralValue();
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        double double24 = range21.constrain(0.0d);
        java.lang.String str25 = range21.toString();
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range21, (double) (short) 1, true);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range21, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range2, range31);
        double double37 = range2.constrain((double) 1L);
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range2, (double) 'a');
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range42.getCentralValue();
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range42, (double) 1);
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range42, 50.0d);
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range47, (-6400.0d), 107.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range47, 67.5d);
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range2, range52);
        boolean boolean56 = range53.intersects(264.5d, (double) (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Range[0.0,10.0]" + "'", str25, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5.0d + "'", double43 == 5.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        org.jfree.data.Range range24 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range24, (double) (byte) 0, (double) (-1L));
        double double28 = range24.getUpperBound();
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range31.getLength();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) (short) 10);
        double double35 = range34.getLowerBound();
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range34, (double) 100L);
        boolean boolean40 = range37.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getLength();
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range43, (double) (short) 10);
        double double47 = range46.getLowerBound();
        boolean boolean49 = range46.contains((double) (byte) 0);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range46, (double) 1.0f, false);
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range37, range52);
        double double54 = range53.getLength();
        org.jfree.data.Range range57 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double59 = range57.constrain(10.0d);
        boolean boolean62 = range57.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str63 = range57.toString();
        boolean boolean64 = range53.equals((java.lang.Object) range57);
        boolean boolean65 = range24.equals((java.lang.Object) range57);
        boolean boolean66 = range8.equals((java.lang.Object) range24);
        org.jfree.data.Range range69 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double70 = range69.getUpperBound();
        org.jfree.data.Range range71 = org.jfree.data.Range.combine(range8, range69);
        double double73 = range69.constrain((double) (short) -1);
        double double75 = range69.constrain(26.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Range[0.0,10.0]" + "'", str63, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        java.lang.String str4 = range2.toString();
        double double5 = range2.getCentralValue();
        boolean boolean7 = range2.contains((double) (-1));
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        double double15 = range13.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range2, range13);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range13, (double) 1.0f);
        double double19 = range13.getLowerBound();
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range13, 10000.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Range[100.0,1.0]" + "'", str4, "Range[100.0,1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 50.5d + "'", double5 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(range21);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range3 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range3.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.expandToInclude(range3, (double) (short) 10);
        double double7 = range6.getLowerBound();
        boolean boolean9 = range6.contains((double) (byte) 0);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range6, (double) 1.0f, false);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (double) (short) 1, (double) (-1L));
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double20 = range18.constrain(10.0d);
        boolean boolean23 = range18.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str24 = range18.toString();
        double double26 = range18.constrain((double) 100L);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range15, range18);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range27, 52.0d, false);
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range0, range27);
        double double32 = range27.getUpperBound();
        double double33 = range27.getUpperBound();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Range[0.0,10.0]" + "'", str24, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        double double39 = range38.getUpperBound();
        boolean boolean40 = borderArrangement0.equals((java.lang.Object) range38);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range38, (double) (-1));
        org.jfree.data.Range range45 = org.jfree.data.Range.expand(range38, (double) 0.0f, (double) (-1L));
        double double46 = range38.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        boolean boolean5 = range2.contains((double) (byte) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) 10.0f);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, 11.0d);
        double double11 = range8.getUpperBound();
        java.lang.Class<?> wildcardClass12 = range8.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 110.0d + "'", double11 == 110.0d);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (-1.0f), (double) '#');
        double double3 = range2.getLowerBound();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 265.0d, false);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, 100.0d, (double) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range9, (double) ' ');
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range14, 10.0d);
        boolean boolean19 = range14.intersects((double) 1L, 1.0d);
        boolean boolean20 = range2.equals((java.lang.Object) 1.0d);
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double24 = range23.getCentralValue();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range23, (double) 1);
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range23, (double) (short) 10);
        double double29 = range28.getUpperBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.combine(range2, range28);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range30, 6676165.0d, false);
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double38 = range36.constrain(10.0d);
        double double39 = range36.getLowerBound();
        boolean boolean42 = range36.intersects((double) (byte) 0, 0.0d);
        double double44 = range36.constrain((double) (byte) -1);
        double double45 = range36.getUpperBound();
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range36, 1011.0d);
        boolean boolean49 = range36.contains(42.0d);
        double double50 = range36.getUpperBound();
        org.jfree.data.Range range53 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double55 = range53.constrain(10.0d);
        boolean boolean58 = range53.intersects((double) 10.0f, (double) (-1.0f));
        double double60 = range53.constrain(0.0d);
        org.jfree.data.Range range63 = org.jfree.data.Range.expand(range53, (double) 0.0f, (double) ' ');
        double double64 = range63.getUpperBound();
        org.jfree.data.Range range67 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean68 = range63.equals((java.lang.Object) range67);
        org.jfree.data.Range range71 = new org.jfree.data.Range(11.0d, (-1.0d));
        double double72 = range71.getCentralValue();
        org.jfree.data.Range range73 = org.jfree.data.Range.combine(range63, range71);
        org.jfree.data.Range range76 = new org.jfree.data.Range(99.0d, (double) (byte) -1);
        org.jfree.data.Range range77 = org.jfree.data.Range.combine(range71, range76);
        org.jfree.data.Range range79 = org.jfree.data.Range.shift(range76, (double) (byte) 10);
        boolean boolean80 = range36.equals((java.lang.Object) range79);
        boolean boolean81 = range33.equals((java.lang.Object) range79);
        org.jfree.data.Range range83 = org.jfree.data.Range.expandToInclude(range33, 20.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5.0d + "'", double24 == 5.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 330.0d + "'", double64 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 5.0d + "'", double72 == 5.0d);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(range83);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range5, (double) '4', false);
        org.jfree.data.Range range17 = new org.jfree.data.Range(50.5d, (double) ' ');
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range14, range17);
        double double19 = range17.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-18.5d) + "'", double19 == (-18.5d));
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        double double39 = range38.getUpperBound();
        boolean boolean40 = borderArrangement0.equals((java.lang.Object) range38);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range5, 100.0d);
        boolean boolean15 = range5.intersects((double) 100.0f, 1.0d);
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, 100.0d, (double) 100);
        boolean boolean31 = range24.equals((java.lang.Object) range27);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range24, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range24, (double) 100.0f);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        boolean boolean41 = range5.equals((java.lang.Object) range40);
        double double42 = range40.getLowerBound();
        boolean boolean44 = range40.contains(9904.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, 135.0d);
        org.junit.Assert.assertNotNull(range2);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean6 = range2.contains((double) 1L);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (-9.0d), true);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(range9);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.jfree.data.Range range2 = new org.jfree.data.Range(42.0d, 0.0d);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1.0f, false);
        boolean boolean7 = range5.contains((double) 0L);
        double double8 = range5.getLowerBound();
        java.lang.String str9 = range5.toString();
        double double10 = range5.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 11.0d + "'", double8 == 11.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[11.0,53.0]" + "'", str9, "Range[11.0,53.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 32.0d + "'", double10 == 32.0d);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.Range.shift(range0, 10009.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range8, (double) 0.0f, false);
        java.lang.String str28 = range8.toString();
        double double29 = range8.getLowerBound();
        double double30 = range8.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[0.0,100.0]" + "'", str28, "Range[0.0,100.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        boolean boolean13 = range7.intersects(0.0d, (double) (byte) 0);
        boolean boolean14 = borderArrangement0.equals((java.lang.Object) (byte) 0);
        borderArrangement0.clear();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement19 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean21 = borderArrangement19.equals((java.lang.Object) (-1L));
        borderArrangement19.clear();
        boolean boolean23 = range18.equals((java.lang.Object) borderArrangement19);
        boolean boolean24 = borderArrangement0.equals((java.lang.Object) borderArrangement19);
        borderArrangement19.clear();
        borderArrangement19.clear();
        org.jfree.chart.block.Block block27 = null;
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range33, (double) 100L);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, 100.0d, (double) 100);
        boolean boolean43 = range36.equals((java.lang.Object) range39);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range36, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range49 = org.jfree.data.Range.expand(range36, (-1.0d), 100.0d);
        boolean boolean52 = range49.intersects((double) (short) 0, 50.0d);
        boolean boolean55 = range49.intersects(82.5d, (double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement19.add(block27, (java.lang.Object) range49);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) (-1.0f));
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj12 = new java.lang.Object();
        boolean boolean13 = range11.equals(obj12);
        boolean boolean16 = range11.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range11, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range11, (double) (short) -1);
        double double23 = range21.constrain(50.5d);
        double double25 = range21.constrain((double) (short) 10);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range21, (double) 1.0f, false);
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range5, range21);
        double double31 = range5.constrain(300.0d);
        org.jfree.data.Range range34 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double35 = range34.getLength();
        double double37 = range34.constrain(0.0d);
        org.jfree.data.Range range40 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double41 = range40.getLength();
        double double43 = range40.constrain(0.0d);
        java.lang.String str44 = range40.toString();
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range40, (double) (short) 1, true);
        double double48 = range47.getLowerBound();
        boolean boolean51 = range47.intersects((double) 0, (double) 10);
        org.jfree.data.Range range52 = org.jfree.data.Range.combine(range34, range47);
        double double54 = range47.constrain(2010.0d);
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range5, range47);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Range[0.0,10.0]" + "'", str44, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 11.0d + "'", double54 == 11.0d);
        org.junit.Assert.assertNotNull(range55);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1001.0d), (-4924.0d));
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean11 = range6.contains((double) 0.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        boolean boolean25 = range22.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        boolean boolean34 = range31.contains((double) (byte) 0);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range31, (double) 1.0f, false);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range22, range37);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range22, (double) 0.0f, false);
        java.lang.String str42 = range22.toString();
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range22, 530.0d, false);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range45, (double) 10L);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range6, range45);
        double double49 = range6.getCentralValue();
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double53 = range52.getLength();
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range52, (double) (short) 10);
        double double56 = range55.getLowerBound();
        org.jfree.data.Range range58 = org.jfree.data.Range.expandToInclude(range55, (double) 100L);
        org.jfree.data.Range range61 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range64 = org.jfree.data.Range.expand(range61, 100.0d, (double) 100);
        boolean boolean65 = range58.equals((java.lang.Object) range61);
        org.jfree.data.Range range67 = org.jfree.data.Range.shift(range58, (double) 100);
        boolean boolean68 = range6.equals((java.lang.Object) range58);
        org.jfree.data.Range range71 = org.jfree.data.Range.expand(range6, 375.0d, 6800.0d);
        java.lang.String str72 = range71.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Range[0.0,100.0]" + "'", str42, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 265.0d + "'", double49 == 265.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Range[-198750.0,3604530.0]" + "'", str72, "Range[-198750.0,3604530.0]");
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (-1.0f));
        borderArrangement0.clear();
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj9 = new java.lang.Object();
        boolean boolean10 = range8.equals(obj9);
        boolean boolean13 = range8.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        boolean boolean23 = range8.equals((java.lang.Object) 100L);
        double double24 = range8.getCentralValue();
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double28 = range27.getLength();
        double double30 = range27.constrain(0.0d);
        java.lang.String str31 = range27.toString();
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range27, (double) (short) 1, true);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range27, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range37, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range8, range37);
        boolean boolean42 = borderArrangement0.equals((java.lang.Object) range8);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5.0d + "'", double24 == 5.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Range[0.0,10.0]" + "'", str31, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100.0f, (double) (byte) 10);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, 0.0d, false);
        double double6 = range2.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 55.0d + "'", double6 == 55.0d);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        double double9 = range7.getLowerBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range12);
        double double20 = range7.constrain((double) (byte) 1);
        double double21 = range7.getCentralValue();
        double double22 = range7.getCentralValue();
        boolean boolean23 = borderArrangement0.equals((java.lang.Object) double22);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range32, (double) 100L, true);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range32, (double) 100, false);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, 35.0d, true);
        boolean boolean42 = borderArrangement0.equals((java.lang.Object) range41);
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double47 = range45.constrain(10.0d);
        boolean boolean50 = range45.intersects((double) 10.0f, (double) (-1.0f));
        double double52 = range45.constrain(0.0d);
        double double54 = range45.constrain((double) (short) 10);
        org.jfree.data.Range range56 = org.jfree.data.Range.expandToInclude(range45, (-6400.0d));
        org.jfree.data.Range range58 = org.jfree.data.Range.expandToInclude(range45, 52.0d);
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range41, range45);
        org.jfree.data.Range range62 = org.jfree.data.Range.expand(range41, 3310.0d, (-1.9898E8d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range62);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range2, (double) (byte) 10);
        org.jfree.data.Range range15 = new org.jfree.data.Range(100.0d, (double) (byte) 100);
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range2, range15);
        java.lang.String str17 = range15.toString();
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) ' ', false);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range15, (double) 1);
        double double23 = range15.getUpperBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[100.0,100.0]" + "'", str17, "Range[100.0,100.0]");
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        double double12 = range5.getLength();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range5, 131.0d, true);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range15);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.jfree.data.Range range2 = new org.jfree.data.Range(99.0d, (double) (byte) -1);
        org.jfree.data.Range range5 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double6 = range5.getLength();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) (short) 10);
        double double9 = range8.getLowerBound();
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range8, (double) 100L);
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, 100.0d, (double) 100);
        boolean boolean18 = range11.equals((java.lang.Object) range14);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range11, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range11, (double) 100.0f);
        double double24 = range11.getCentralValue();
        boolean boolean26 = range11.equals((java.lang.Object) 0);
        org.jfree.data.Range range29 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range29.getLength();
        double double32 = range29.constrain(0.0d);
        java.lang.String str33 = range29.toString();
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range29, (double) (short) 1, true);
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range36, (double) '4');
        org.jfree.data.Range range39 = org.jfree.data.Range.combine(range11, range36);
        boolean boolean40 = range2.equals((java.lang.Object) range39);
        org.jfree.data.Range range43 = new org.jfree.data.Range((-670.0d), (double) 0.0f);
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range43, (double) 100, false);
        org.jfree.data.Range range47 = org.jfree.data.Range.combine(range39, range46);
        boolean boolean49 = range46.contains(10009.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Range[0.0,10.0]" + "'", str33, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        org.jfree.data.Range range6 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range6, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range9);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range9, (double) '4');
        double double16 = range15.getLowerBound();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1.0f);
        double double19 = range18.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.0d + "'", double7 == 5.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 27.5d + "'", double19 == 27.5d);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        boolean boolean37 = range32.contains((-1.0d));
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range32, 0.0d);
        boolean boolean42 = range32.intersects((double) (-1.0f), 530.0d);
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range32, 54.0d);
        org.jfree.data.Range range47 = org.jfree.data.Range.expand(range44, 107.0d, 67.5d);
        boolean boolean50 = range47.intersects(1286.0d, (-1003.0d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        double double39 = range38.getUpperBound();
        boolean boolean40 = borderArrangement0.equals((java.lang.Object) range38);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range38, (double) 100);
        java.lang.String str43 = range38.toString();
        double double44 = range38.getCentralValue();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Range[0.0,100.0]" + "'", str43, "Range[0.0,100.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 265.0d);
        boolean boolean12 = range9.intersects((double) (short) 10, 101.0d);
        double double13 = range9.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, 1011.0d, false);
        double double17 = range9.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 42.0d + "'", double13 == 42.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 42.0d + "'", double17 == 42.0d);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (double) (-1.0f), true);
        double double13 = range2.constrain(150.0d);
        boolean boolean16 = range2.intersects(52.0d, 2010.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.9898E8d), 264.5d);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = borderArrangement0.equals((java.lang.Object) 1.0f);
        java.lang.Object obj8 = null;
        boolean boolean9 = borderArrangement0.equals(obj8);
        borderArrangement0.clear();
        org.jfree.data.Range range13 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 0.0d, (double) (-1L));
        double double17 = range13.getUpperBound();
        boolean boolean18 = borderArrangement0.equals((java.lang.Object) range13);
        org.jfree.chart.block.BlockContainer blockContainer19 = null;
        java.awt.Graphics2D graphics2D20 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D22 = borderArrangement0.arrange(blockContainer19, graphics2D20, rectangleConstraint21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        java.lang.String str33 = range13.toString();
        double double35 = range13.constrain((double) 0);
        double double36 = range13.getUpperBound();
        double double37 = range13.getCentralValue();
        double double38 = range13.getUpperBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Range[0.0,10.0]" + "'", str33, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5.0d + "'", double37 == 5.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range8, (-1.0d), 100.0d);
        boolean boolean24 = range21.intersects((double) (short) 0, 50.0d);
        double double25 = range21.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10100.0d + "'", double25 == 10100.0d);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        double double8 = range2.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (byte) 0, (double) (-1L));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 19757.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getUpperBound();
        boolean boolean8 = range4.intersects(50.0d, 5.0d);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        org.jfree.data.Range range15 = org.jfree.data.Range.combine(range4, range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range11, 1.0d, false);
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range18, (double) (byte) 0);
        double double21 = range18.getCentralValue();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 99.0d + "'", double5 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 6.0d + "'", double21 == 6.0d);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        borderArrangement3.clear();
        borderArrangement3.clear();
        boolean boolean33 = borderArrangement3.equals((java.lang.Object) 148.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        boolean boolean5 = range2.contains((double) (-1L));
        org.jfree.data.Range range6 = null;
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range6, 11.0d);
        org.jfree.data.Range range9 = org.jfree.data.Range.combine(range2, range6);
        double double10 = range9.getUpperBound();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range9, 9999.0d, false);
        boolean boolean16 = range13.intersects(0.0d, (-2.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range5, (double) '4', false);
        org.jfree.data.Range range17 = new org.jfree.data.Range(50.5d, (double) ' ');
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range14, range17);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) (short) 10);
        double double25 = range24.getLowerBound();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) 100L);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range30, (double) (byte) 0, (double) (-1L));
        double double34 = range30.getUpperBound();
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double38 = range37.getLength();
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range37, (double) (short) 10);
        double double41 = range40.getLowerBound();
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range40, (double) 100L);
        boolean boolean46 = range43.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range49 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double50 = range49.getLength();
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range49, (double) (short) 10);
        double double53 = range52.getLowerBound();
        boolean boolean55 = range52.contains((double) (byte) 0);
        org.jfree.data.Range range58 = org.jfree.data.Range.shift(range52, (double) 1.0f, false);
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range43, range58);
        double double60 = range59.getLength();
        org.jfree.data.Range range63 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double65 = range63.constrain(10.0d);
        boolean boolean68 = range63.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str69 = range63.toString();
        boolean boolean70 = range59.equals((java.lang.Object) range63);
        boolean boolean71 = range30.equals((java.lang.Object) range63);
        boolean boolean72 = range24.equals((java.lang.Object) range63);
        org.jfree.data.Range range73 = null;
        org.jfree.data.Range range74 = org.jfree.data.Range.combine(range63, range73);
        double double76 = range63.constrain((double) (short) 1);
        boolean boolean78 = range63.contains((-9790.0d));
        double double80 = range63.constrain(9.0d);
        boolean boolean81 = range17.equals((java.lang.Object) double80);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 100.0d + "'", double60 == 100.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.0d + "'", double65 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Range[0.0,10.0]" + "'", str69, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 9.0d + "'", double80 == 9.0d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.chart.block.Block block11 = null;
        java.lang.Object obj12 = null;
        borderArrangement3.add(block11, obj12);
        org.jfree.chart.block.BlockContainer blockContainer14 = null;
        java.awt.Graphics2D graphics2D15 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D17 = borderArrangement3.arrange(blockContainer14, graphics2D15, rectangleConstraint16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range10, (double) (short) 0);
        double double13 = range10.getLowerBound();
        org.jfree.data.Range range14 = null;
        org.jfree.data.Range range15 = org.jfree.data.Range.combine(range10, range14);
        double double16 = range15.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = range4.equals((java.lang.Object) (byte) 100);
        double double8 = range4.getCentralValue();
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) (short) 1, (double) (-1));
        boolean boolean12 = range4.equals((java.lang.Object) range11);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range11, (double) (byte) 10);
        boolean boolean17 = range14.intersects(0.0d, (double) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 50.5d + "'", double8 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1.0f, false);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        double double8 = range7.getLowerBound();
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj12 = new java.lang.Object();
        boolean boolean13 = range11.equals(obj12);
        boolean boolean16 = range11.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double20 = range19.getLength();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) (short) 10);
        double double23 = range22.getLowerBound();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) 100L);
        boolean boolean26 = range11.equals((java.lang.Object) 100L);
        double double27 = range11.getCentralValue();
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range11, 50.5d, 26.0d);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, 55.0d);
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range7, range32);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5.0d + "'", double27 == 5.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range33);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (byte) 0, (double) (-1L));
        double double15 = range11.getUpperBound();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean27 = range24.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        double double41 = range40.getLength();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        boolean boolean49 = range44.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str50 = range44.toString();
        boolean boolean51 = range40.equals((java.lang.Object) range44);
        boolean boolean52 = range11.equals((java.lang.Object) range44);
        boolean boolean53 = range5.equals((java.lang.Object) range44);
        double double55 = range5.constrain((double) 'a');
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,10.0]" + "'", str50, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        double double8 = range2.constrain((-11.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        double double5 = range2.getLowerBound();
        boolean boolean8 = range2.intersects((double) (byte) 0, 0.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (double) 0, true);
        boolean boolean14 = range11.intersects(1286.0d, 131.0d);
        double double15 = range11.getCentralValue();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5.0d + "'", double15 == 5.0d);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        double double6 = range2.getLength();
        double double7 = range2.getUpperBound();
        double double8 = range2.getLowerBound();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, 510.0d);
        boolean boolean12 = range10.contains((double) 1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-9899.0d), 51.0d);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement3.clear();
        org.jfree.data.Range range7 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean8 = borderArrangement3.equals((java.lang.Object) range7);
        borderArrangement3.clear();
        borderArrangement3.clear();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double14 = range13.getCentralValue();
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range13, (double) 0L, (double) '4');
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range13, (double) ' ');
        boolean boolean20 = borderArrangement3.equals((java.lang.Object) ' ');
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj24 = new java.lang.Object();
        boolean boolean25 = range23.equals(obj24);
        boolean boolean28 = range23.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range31.getLength();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) (short) 10);
        double double35 = range34.getLowerBound();
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range34, (double) 100L);
        boolean boolean38 = range23.equals((java.lang.Object) 100L);
        double double39 = range23.getLength();
        boolean boolean40 = borderArrangement3.equals((java.lang.Object) range23);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range2, range23);
        double double42 = range41.getCentralValue();
        boolean boolean45 = range41.intersects(0.0d, 6800.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5.0d + "'", double14 == 5.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-4924.0d) + "'", double42 == (-4924.0d));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        boolean boolean19 = range2.contains((double) (byte) 100);
        double double20 = range2.getUpperBound();
        double double21 = range2.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (byte) 0, (double) (-1L));
        double double15 = range11.getUpperBound();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean27 = range24.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        double double41 = range40.getLength();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        boolean boolean49 = range44.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str50 = range44.toString();
        boolean boolean51 = range40.equals((java.lang.Object) range44);
        boolean boolean52 = range11.equals((java.lang.Object) range44);
        boolean boolean53 = range5.equals((java.lang.Object) range44);
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range44, (double) (byte) 0);
        double double56 = range55.getCentralValue();
        java.lang.String str57 = range55.toString();
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range55, 0.0d, true);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,10.0]" + "'", str50, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5.0d + "'", double56 == 5.0d);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Range[0.0,10.0]" + "'", str57, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range60);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range10, (double) 10.0f);
        org.jfree.data.Range range18 = new org.jfree.data.Range((double) 1.0f, 10000.0d);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range18, (double) 0);
        double double21 = range18.getLength();
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range18, (double) 'a', false);
        double double25 = range24.getCentralValue();
        boolean boolean27 = range24.contains((double) 0);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range15, range24);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range24, (-6500.0d), 200.0d);
        java.lang.Class<?> wildcardClass32 = range31.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 9999.0d + "'", double21 == 9999.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5097.5d + "'", double25 == 5097.5d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 265.0d);
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range14 = new org.jfree.data.Range(43.0d, (-1.0d));
        boolean boolean15 = range2.equals((java.lang.Object) 43.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.jfree.data.Range range2 = new org.jfree.data.Range(99.0d, (double) (byte) -1);
        org.jfree.data.Range range5 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double6 = range5.getLength();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) (short) 10);
        double double9 = range8.getLowerBound();
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range8, (double) 100L);
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, 100.0d, (double) 100);
        boolean boolean18 = range11.equals((java.lang.Object) range14);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range11, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range11, (double) 100.0f);
        double double24 = range11.getCentralValue();
        boolean boolean26 = range11.equals((java.lang.Object) 0);
        org.jfree.data.Range range29 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range29.getLength();
        double double32 = range29.constrain(0.0d);
        java.lang.String str33 = range29.toString();
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range29, (double) (short) 1, true);
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range36, (double) '4');
        org.jfree.data.Range range39 = org.jfree.data.Range.combine(range11, range36);
        boolean boolean40 = range2.equals((java.lang.Object) range39);
        org.jfree.data.Range range43 = new org.jfree.data.Range((-670.0d), (double) 0.0f);
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range43, (double) 100, false);
        org.jfree.data.Range range47 = org.jfree.data.Range.combine(range39, range46);
        org.jfree.data.Range range50 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range53 = org.jfree.data.Range.expand(range50, 100.0d, (double) 100);
        boolean boolean54 = range47.equals((java.lang.Object) 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Range[0.0,10.0]" + "'", str33, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        double double27 = range26.getLowerBound();
        double double28 = range26.getLength();
        boolean boolean31 = range26.intersects(42.0d, 19.0d);
        java.lang.Class<?> wildcardClass32 = range26.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9899.0d) + "'", double27 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 19899.0d + "'", double28 == 19899.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getCentralValue();
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range2, 50.5d, 26.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range21, 55.0d);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range21, (-2005.0d), (double) 100);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        double double27 = range26.getLowerBound();
        double double28 = range26.getLength();
        boolean boolean31 = range26.intersects(42.0d, 19.0d);
        double double32 = range26.getLowerBound();
        double double33 = range26.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9899.0d) + "'", double27 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 19899.0d + "'", double28 == 19899.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-9899.0d) + "'", double32 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-9899.0d) + "'", double33 == (-9899.0d));
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.jfree.data.Range range2 = new org.jfree.data.Range(45.5d, (double) '#');
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        double double6 = range2.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 330.0d, true);
        double double10 = range9.getLength();
        double double12 = range9.constrain((double) 10.0f);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 330.0d + "'", double12 == 330.0d);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        double double5 = range2.getLowerBound();
        boolean boolean8 = range2.intersects((double) (byte) 0, 0.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (double) 0, true);
        double double13 = range11.constrain(102.0d);
        java.lang.String str14 = range11.toString();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[0.0,10.0]" + "'", str14, "Range[0.0,10.0]");
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        double double17 = range11.constrain(108.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = range4.equals((java.lang.Object) (byte) 100);
        double double8 = range4.getCentralValue();
        java.lang.String str9 = range4.toString();
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range4, 540.0d);
        java.lang.Class<?> wildcardClass12 = range4.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 50.5d + "'", double8 == 50.5d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[1.0,100.0]" + "'", str9, "Range[1.0,100.0]");
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range15, (double) (-1));
        double double19 = range18.getLength();
        boolean boolean22 = range18.intersects(35.0d, 375.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 108.0d + "'", double19 == 108.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.jfree.data.Range range2 = new org.jfree.data.Range(75.5d, 50.5d);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range3 = org.jfree.data.Range.expand(range0, (double) '#', (-420.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'range' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        boolean boolean28 = borderArrangement7.equals((java.lang.Object) 50.0d);
        borderArrangement7.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range32.constrain(10.0d);
        boolean boolean37 = range32.intersects((double) 10.0f, (double) (-1.0f));
        double double39 = range32.constrain(0.0d);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range32, (double) 0.0f, (double) ' ');
        double double43 = range42.getUpperBound();
        org.jfree.data.Range range46 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean47 = range42.equals((java.lang.Object) range46);
        boolean boolean48 = borderArrangement7.equals((java.lang.Object) boolean47);
        org.jfree.data.Range range51 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double52 = range51.getLength();
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range51, (double) (short) 10);
        double double55 = range54.getLowerBound();
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range54, (double) 100L);
        org.jfree.data.Range range60 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range63 = org.jfree.data.Range.expand(range60, 100.0d, (double) 100);
        boolean boolean64 = range57.equals((java.lang.Object) range60);
        org.jfree.data.Range range67 = org.jfree.data.Range.expand(range57, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range69 = org.jfree.data.Range.expandToInclude(range57, (double) 100.0f);
        double double70 = range57.getCentralValue();
        org.jfree.data.Range range73 = org.jfree.data.Range.shift(range57, (double) 1, true);
        org.jfree.data.Range range76 = org.jfree.data.Range.shift(range57, (-6400.0d), true);
        boolean boolean77 = borderArrangement7.equals((java.lang.Object) true);
        org.jfree.data.Range range80 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double81 = range80.getLength();
        org.jfree.data.Range range83 = org.jfree.data.Range.expandToInclude(range80, (double) (short) 10);
        double double84 = range83.getLowerBound();
        boolean boolean86 = range83.contains((double) (byte) 0);
        org.jfree.data.Range range89 = org.jfree.data.Range.shift(range83, (double) 1.0f, false);
        org.jfree.data.Range range92 = org.jfree.data.Range.expand(range89, (double) (short) 1, (double) (-1L));
        double double93 = range89.getLength();
        boolean boolean94 = borderArrangement7.equals((java.lang.Object) double93);
        org.jfree.chart.block.BlockContainer blockContainer95 = null;
        java.awt.Graphics2D graphics2D96 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D98 = borderArrangement7.arrange(blockContainer95, graphics2D96, rectangleConstraint97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 330.0d + "'", double43 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 10.0d + "'", double81 == 10.0d);
        org.junit.Assert.assertNotNull(range83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(range89);
        org.junit.Assert.assertNotNull(range92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 10.0d + "'", double93 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range6, 10.0d, false);
        java.lang.String str29 = range6.toString();
        double double31 = range6.constrain(5346.0d);
        java.lang.String str32 = range6.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Range[0.0,530.0]" + "'", str29, "Range[0.0,530.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 530.0d + "'", double31 == 530.0d);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Range[0.0,530.0]" + "'", str32, "Range[0.0,530.0]");
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = borderArrangement0.equals((java.lang.Object) 1.0f);
        java.lang.Object obj8 = null;
        boolean boolean9 = borderArrangement0.equals(obj8);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj13 = new java.lang.Object();
        boolean boolean14 = range12.equals(obj13);
        boolean boolean17 = range12.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range20.constrain(10.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range12, range20);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, 100.0d, (double) 100);
        boolean boolean39 = range32.equals((java.lang.Object) range35);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, (double) 100);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range23, range41);
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) range23);
        borderArrangement0.clear();
        boolean boolean46 = borderArrangement0.equals((java.lang.Object) (byte) -1);
        borderArrangement0.clear();
        org.jfree.chart.block.BlockContainer blockContainer48 = null;
        java.awt.Graphics2D graphics2D49 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D51 = borderArrangement0.arrange(blockContainer48, graphics2D49, rectangleConstraint50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.jfree.data.Range range2 = new org.jfree.data.Range(38.0d, 0.0d);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        double double9 = range2.constrain(10.0d);
        double double10 = range2.getLength();
        double double11 = range2.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range32, 19899.0d);
        double double38 = range37.getLowerBound();
        double double39 = range37.getLength();
        boolean boolean42 = range37.intersects(50.0d, 330.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 19899.0d + "'", double38 == 19899.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 200.0d + "'", double39 == 200.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        double double5 = range2.getLength();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1.0f, false);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 100L, true);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, 0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range10, 0.0d);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, 5048.5d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.chart.block.Block block5 = null;
        org.jfree.data.Range range6 = null;
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        borderArrangement0.add(block5, (java.lang.Object) range6);
        org.jfree.chart.block.Block block10 = null;
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double28 = range27.getLength();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) (short) 10);
        double double31 = range30.getLowerBound();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) 100L);
        org.jfree.data.Range range36 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, 100.0d, (double) 100);
        boolean boolean40 = range33.equals((java.lang.Object) range36);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range33, (double) 100);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range24, range42);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range43, (double) ' ', 1.0d);
        boolean boolean49 = range43.intersects((double) 1L, (double) (byte) 1);
        org.jfree.data.Range range52 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range54 = org.jfree.data.Range.shift(range52, (double) 0);
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range43, range54);
        org.jfree.data.Range range58 = org.jfree.data.Range.shift(range54, 15.0d, false);
        org.jfree.data.Range range61 = new org.jfree.data.Range(43.0d, (-1.0d));
        org.jfree.data.Range range64 = org.jfree.data.Range.expand(range61, 19757.0d, 5346.0d);
        org.jfree.data.Range range65 = org.jfree.data.Range.combine(range58, range64);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block10, (java.lang.Object) range58);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertNotNull(range65);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        org.jfree.data.Range range7 = org.jfree.data.Range.expand(range2, (double) 1L, 0.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, 410.5d, true);
        boolean boolean12 = range7.contains(101.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        double double6 = range2.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 330.0d, true);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        boolean boolean15 = range12.contains((double) (byte) 0);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range12, (double) 100.0f, (double) 10.0f);
        boolean boolean19 = range2.equals((java.lang.Object) range12);
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range2, (-164.5d));
        double double22 = range21.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-77.25d) + "'", double22 == (-77.25d));
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 100L, (double) (short) 0);
        boolean boolean11 = range2.contains((double) (short) 1);
        double double12 = range2.getUpperBound();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range2, 38.0d, true);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range15);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range5, 100.0d);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, 5097.5d);
        double double15 = range14.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5248.0d + "'", double15 == 5248.0d);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1.0d, (double) 10.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 265.0d, (double) '4');
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range5, 55.0d, true);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.jfree.data.Range range2 = new org.jfree.data.Range(110.0d, 82.5d);
        java.lang.String str3 = range2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Range[110.0,82.5]" + "'", str3, "Range[110.0,82.5]");
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 5.0d + "'", double4 == 5.0d);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range12, (double) (byte) 1, (double) (-1));
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range18, (double) (-1L), true);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range21, (double) (-1));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-3011.0d) + "'", double22 == (-3011.0d));
        org.junit.Assert.assertNotNull(range24);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range35, (double) 1L);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range8, range35);
        org.jfree.data.Range range41 = org.jfree.data.Range.expand(range8, 0.0d, (double) 1L);
        java.lang.Class<?> wildcardClass42 = range41.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, 265.0d);
        org.jfree.data.Range range3 = null;
        org.jfree.data.Range range4 = org.jfree.data.Range.combine(range2, range3);
        org.jfree.data.Range range7 = org.jfree.data.Range.expand(range2, 19899.0d, 19757.0d);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        boolean boolean15 = range10.intersects((double) 10.0f, (double) (-1.0f));
        double double17 = range10.constrain(0.0d);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range10, (double) 0.0f, (double) ' ');
        double double21 = range20.getUpperBound();
        org.jfree.data.Range range24 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean25 = range20.equals((java.lang.Object) range24);
        org.jfree.data.Range range28 = new org.jfree.data.Range(11.0d, (-1.0d));
        double double29 = range28.getCentralValue();
        org.jfree.data.Range range30 = org.jfree.data.Range.combine(range20, range28);
        org.jfree.data.Range range33 = new org.jfree.data.Range(99.0d, (double) (byte) -1);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range28, range33);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range7, range34);
        boolean boolean38 = range34.intersects(31.0d, (-3011.0d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 330.0d + "'", double21 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5.0d + "'", double29 == 5.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        boolean boolean6 = borderArrangement0.equals((java.lang.Object) 'a');
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getLength();
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range9, (double) (short) 10);
        double double13 = range12.getLowerBound();
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range12, (double) 100L);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 100L, true);
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range15, (double) 100, false);
        double double23 = range15.constrain((double) 1.0f);
        boolean boolean24 = borderArrangement0.equals((java.lang.Object) double23);
        org.jfree.chart.block.BlockContainer blockContainer25 = null;
        java.awt.Graphics2D graphics2D26 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D28 = borderArrangement0.arrange(blockContainer25, graphics2D26, rectangleConstraint27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        boolean boolean8 = range5.intersects(142.0d, 50.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range5, (-4949.0d), 0.0d);
        double double12 = range5.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double20 = range19.getLength();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) (short) 10);
        double double23 = range22.getLowerBound();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) 100L);
        org.jfree.data.Range range28 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range28, 100.0d, (double) 100);
        boolean boolean32 = range25.equals((java.lang.Object) range28);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range25, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range25, (double) 100.0f);
        double double38 = range25.getCentralValue();
        boolean boolean40 = range25.equals((java.lang.Object) 0);
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getLength();
        double double46 = range43.constrain(0.0d);
        java.lang.String str47 = range43.toString();
        org.jfree.data.Range range50 = org.jfree.data.Range.shift(range43, (double) (short) 1, true);
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range50, (double) '4');
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range52, (double) 1L);
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range25, range52);
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range52, 107.0d, 0.0d);
        boolean boolean59 = borderArrangement0.equals((java.lang.Object) 107.0d);
        org.jfree.chart.block.BorderArrangement borderArrangement60 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean62 = borderArrangement60.equals((java.lang.Object) (-1L));
        boolean boolean64 = borderArrangement60.equals((java.lang.Object) (byte) 10);
        borderArrangement60.clear();
        boolean boolean66 = borderArrangement0.equals((java.lang.Object) borderArrangement60);
        org.jfree.chart.block.Block block67 = null;
        org.jfree.data.Range range70 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double71 = range70.getLength();
        double double73 = range70.constrain(0.0d);
        java.lang.String str74 = range70.toString();
        org.jfree.data.Range range77 = org.jfree.data.Range.shift(range70, (double) (short) 1, true);
        org.jfree.data.Range range80 = org.jfree.data.Range.expand(range70, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range82 = org.jfree.data.Range.shift(range80, (double) ' ');
        double double84 = range80.constrain((double) (byte) 10);
        org.jfree.data.Range range87 = org.jfree.data.Range.shift(range80, 330.0d, false);
        double double88 = range87.getLowerBound();
        double double89 = range87.getLength();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block67, (java.lang.Object) range87);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Range[0.0,10.0]" + "'", str47, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Range[0.0,10.0]" + "'", str74, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertNotNull(range82);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 10.0d + "'", double84 == 10.0d);
        org.junit.Assert.assertNotNull(range87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + (-670.0d) + "'", double88 == (-670.0d));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2010.0d + "'", double89 == 2010.0d);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        double double7 = range2.getLowerBound();
        boolean boolean9 = range2.contains(330.0d);
        boolean boolean11 = range2.contains((double) 0.0f);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        boolean boolean28 = borderArrangement7.equals((java.lang.Object) 50.0d);
        borderArrangement7.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range32.constrain(10.0d);
        boolean boolean37 = range32.intersects((double) 10.0f, (double) (-1.0f));
        double double39 = range32.constrain(0.0d);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range32, (double) 0.0f, (double) ' ');
        double double43 = range42.getUpperBound();
        org.jfree.data.Range range46 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean47 = range42.equals((java.lang.Object) range46);
        boolean boolean48 = borderArrangement7.equals((java.lang.Object) boolean47);
        boolean boolean50 = borderArrangement7.equals((java.lang.Object) "");
        org.jfree.chart.block.Block block51 = null;
        org.jfree.data.Range range54 = new org.jfree.data.Range((double) (short) 0, 43.0d);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement7.add(block51, (java.lang.Object) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Short cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 330.0d + "'", double43 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        boolean boolean11 = range9.contains((double) 0L);
        double double13 = range9.constrain(50.5d);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range9, (double) 1.0f);
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getCentralValue();
        org.jfree.data.Range range20 = org.jfree.data.Range.combine(range9, range18);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range20, 43.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 11.0d + "'", double13 == 11.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5.0d + "'", double19 == 5.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, (double) 100L, true);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range8, (double) 100, false);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range8, 35.0d, true);
        double double19 = range17.constrain(0.0d);
        java.lang.String str20 = range17.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Range[35.0,135.0]" + "'", str20, "Range[35.0,135.0]");
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        boolean boolean11 = range9.contains((double) 0L);
        double double13 = range9.constrain(50.5d);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range9, (double) 1.0f);
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getCentralValue();
        org.jfree.data.Range range20 = org.jfree.data.Range.combine(range9, range18);
        boolean boolean23 = range9.intersects((-989.0d), 10.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 11.0d + "'", double13 == 11.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5.0d + "'", double19 == 5.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.jfree.data.Range range2 = new org.jfree.data.Range(43.0d, 135.0d);
        java.lang.Class<?> wildcardClass3 = range2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        double double5 = range2.getLowerBound();
        boolean boolean8 = range2.intersects((double) (byte) 0, 0.0d);
        double double10 = range2.constrain((double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range2, 11.0d);
        boolean boolean15 = range2.intersects((double) (byte) 100, 540.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        boolean boolean10 = borderArrangement0.equals((java.lang.Object) '#');
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 100.0d, (double) 100);
        double double18 = range16.constrain((double) (short) 1);
        boolean boolean19 = borderArrangement0.equals((java.lang.Object) (short) 1);
        borderArrangement0.clear();
        org.jfree.data.Range range23 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean25 = range23.contains((double) 1L);
        boolean boolean28 = range23.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range23, 265.0d);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range23, 9999.0d, (double) 0.0f);
        boolean boolean34 = borderArrangement0.equals((java.lang.Object) range33);
        org.jfree.data.Range range37 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean39 = range37.contains((double) 1L);
        boolean boolean42 = range37.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range37, 265.0d);
        boolean boolean47 = range44.intersects((double) (short) 10, 101.0d);
        double double48 = range44.getLength();
        org.jfree.data.Range range51 = org.jfree.data.Range.shift(range44, 1011.0d, false);
        boolean boolean52 = borderArrangement0.equals((java.lang.Object) false);
        org.jfree.data.Range range55 = new org.jfree.data.Range(35.0d, (double) 0.0f);
        org.jfree.data.Range range58 = new org.jfree.data.Range(1.0d, (double) 10.0f);
        org.jfree.data.Range range61 = org.jfree.data.Range.expand(range58, 265.0d, (double) '4');
        org.jfree.data.Range range62 = org.jfree.data.Range.combine(range55, range58);
        boolean boolean65 = range58.intersects(275.0d, 5.0d);
        boolean boolean66 = borderArrangement0.equals((java.lang.Object) 275.0d);
        org.jfree.chart.block.BlockContainer blockContainer67 = null;
        java.awt.Graphics2D graphics2D68 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D70 = borderArrangement0.arrange(blockContainer67, graphics2D68, rectangleConstraint69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 42.0d + "'", double48 == 42.0d);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.Block block10 = null;
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double14 = range13.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) (short) 10);
        double double17 = range16.getLowerBound();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) 100L);
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range22, 100.0d, (double) 100);
        boolean boolean26 = range19.equals((java.lang.Object) range22);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range19, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range19, (double) 100.0f);
        double double32 = range19.getCentralValue();
        boolean boolean34 = range19.equals((java.lang.Object) 0);
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double38 = range37.getLength();
        double double40 = range37.constrain(0.0d);
        java.lang.String str41 = range37.toString();
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range37, (double) (short) 1, true);
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range44, (double) '4');
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range46, (double) 1L);
        org.jfree.data.Range range49 = org.jfree.data.Range.combine(range19, range46);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block10, (java.lang.Object) range46);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 50.0d + "'", double32 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Range[0.0,10.0]" + "'", str41, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range49);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double9 = range8.getLength();
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range8, (double) (short) 10);
        double double12 = range11.getLowerBound();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) 100L);
        boolean boolean15 = borderArrangement0.equals((java.lang.Object) 100L);
        org.jfree.chart.block.Block block16 = null;
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj20 = new java.lang.Object();
        boolean boolean21 = range19.equals(obj20);
        boolean boolean24 = range19.intersects(5.0d, (double) 100L);
        double double25 = range19.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range19, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block16, (java.lang.Object) range19);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) (short) 1);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        java.lang.String str21 = range20.toString();
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range20, (double) (-1.0f));
        double double24 = range20.getLowerBound();
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double28 = range27.getLength();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) (short) 10);
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range30, (double) (-1));
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, 100.0d, (double) 100);
        double double39 = range38.getLowerBound();
        double double40 = range38.getLowerBound();
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range38, 10000.0d, true);
        org.jfree.data.Range range46 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj47 = new java.lang.Object();
        boolean boolean48 = range46.equals(obj47);
        boolean boolean51 = range46.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range54 = org.jfree.data.Range.expand(range46, 0.0d, (double) (byte) -1);
        boolean boolean57 = range46.intersects((double) 100, (double) 10L);
        boolean boolean60 = range46.intersects(19899.0d, 9999.0d);
        org.jfree.data.Range range61 = org.jfree.data.Range.combine(range38, range46);
        boolean boolean62 = range32.equals((java.lang.Object) range46);
        boolean boolean63 = range20.equals((java.lang.Object) range46);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Range[0.0,100.0]" + "'", str21, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-9899.0d) + "'", double39 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-9899.0d) + "'", double40 == (-9899.0d));
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, (double) ' ');
        double double15 = range12.getLength();
        boolean boolean17 = range12.contains(0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2010.0d + "'", double15 == 2010.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) '#', 99.0d);
        double double4 = range2.constrain(42.0d);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double9 = range7.constrain(10.0d);
        boolean boolean12 = range7.intersects((double) 10.0f, (double) (-1.0f));
        double double14 = range7.constrain(0.0d);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range7, (double) 0.0f, (double) ' ');
        double double18 = range17.getUpperBound();
        org.jfree.data.Range range21 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean22 = range17.equals((java.lang.Object) range21);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range25, (double) (-1));
        double double28 = range27.getUpperBound();
        double double29 = range27.getCentralValue();
        double double30 = range27.getLowerBound();
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double35 = range33.constrain(10.0d);
        double double36 = range33.getUpperBound();
        java.lang.String str37 = range33.toString();
        boolean boolean38 = range27.equals((java.lang.Object) str37);
        double double39 = range27.getLowerBound();
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range21, range27);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range21, 19899.0d);
        double double44 = range42.constrain((-6500.0d));
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range2, range42);
        org.jfree.data.Range range48 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean50 = range48.contains((double) 1L);
        boolean boolean53 = range48.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range48, 265.0d);
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range48, 9999.0d, (double) 0.0f);
        boolean boolean59 = range42.equals((java.lang.Object) range58);
        double double61 = range42.constrain(1026.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 42.0d + "'", double4 == 42.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 330.0d + "'", double18 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 99.0d + "'", double28 == 99.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 54.0d + "'", double29 == 54.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 9.0d + "'", double30 == 9.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Range[0.0,10.0]" + "'", str37, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 9.0d + "'", double39 == 9.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 142.0d + "'", double44 == 142.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1026.0d + "'", double61 == 1026.0d);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range32, 19899.0d);
        double double38 = range37.getLowerBound();
        double double39 = range37.getLength();
        boolean boolean41 = range37.contains((-670.0d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 19899.0d + "'", double38 == 19899.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 200.0d + "'", double39 == 200.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        double double10 = range9.getLowerBound();
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range9, 31.0d);
        double double13 = range12.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 43.0d + "'", double10 == 43.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 31.0d + "'", double13 == 31.0d);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.Range.shift(range0, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 265.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, 9999.0d, (double) 0.0f);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range2, (double) 1.0f, 19.0d);
        boolean boolean18 = range2.intersects((-1000.0d), 165.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        boolean boolean30 = range17.contains(6676165.0d);
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj34 = new java.lang.Object();
        boolean boolean35 = range33.equals(obj34);
        boolean boolean38 = range33.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range41 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range41.constrain(10.0d);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range33, range41);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range33, (double) (short) 100, false);
        boolean boolean50 = range33.intersects((double) '#', (double) 0.0f);
        org.jfree.data.Range range53 = org.jfree.data.Range.expand(range33, (double) 0, 26.5d);
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range53, 4.5d);
        org.jfree.data.Range range56 = org.jfree.data.Range.combine(range17, range55);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range56);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 265.0d);
        double double11 = range9.constrain((-2006.0d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 275.0d + "'", double11 == 275.0d);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.chart.block.Block block5 = null;
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double9 = range8.getLength();
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range8, (double) (short) 10);
        double double12 = range11.getLowerBound();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) 100L);
        boolean boolean17 = range14.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double21 = range20.getLength();
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range20, (double) (short) 10);
        double double24 = range23.getLowerBound();
        boolean boolean26 = range23.contains((double) (byte) 0);
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range23, (double) 1.0f, false);
        org.jfree.data.Range range30 = org.jfree.data.Range.combine(range14, range29);
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range33.getLength();
        double double36 = range33.constrain(0.0d);
        java.lang.String str37 = range33.toString();
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range33, (double) (short) 1, true);
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range33, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range43, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range43, (double) 0L, false);
        org.jfree.data.Range range50 = org.jfree.data.Range.combine(range14, range49);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block5, (java.lang.Object) range50);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Range[0.0,10.0]" + "'", str37, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range50);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        borderArrangement0.clear();
        org.jfree.chart.block.Block block18 = null;
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range21, (double) (-1));
        double double24 = range23.getUpperBound();
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range23, (double) 1, true);
        double double29 = range27.constrain(49.5d);
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        org.jfree.data.Range range41 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range41, 100.0d, (double) 100);
        boolean boolean45 = range38.equals((java.lang.Object) range41);
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range38, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range38, (double) 100.0f);
        double double51 = range38.getCentralValue();
        org.jfree.data.Range range54 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double55 = range54.getLength();
        double double57 = range54.constrain(0.0d);
        java.lang.String str58 = range54.toString();
        org.jfree.data.Range range61 = org.jfree.data.Range.shift(range54, (double) (short) 1, true);
        double double62 = range61.getLowerBound();
        boolean boolean65 = range61.intersects((double) 0, (double) 10);
        org.jfree.data.Range range66 = org.jfree.data.Range.combine(range38, range61);
        org.jfree.data.Range range67 = org.jfree.data.Range.combine(range27, range38);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block18, (java.lang.Object) range67);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 99.0d + "'", double24 == 99.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 49.5d + "'", double29 == 49.5d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 50.0d + "'", double51 == 50.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Range[0.0,10.0]" + "'", str58, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range67);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range15, (double) (-1));
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range18, 19899.0d, 150.0d);
        double double22 = range18.getUpperBound();
        org.jfree.data.Range range25 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double26 = range25.getLength();
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range25, (double) (short) 10);
        double double29 = range28.getLowerBound();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) 100L);
        boolean boolean34 = range31.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double38 = range37.getLength();
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range37, (double) (short) 10);
        double double41 = range40.getLowerBound();
        boolean boolean43 = range40.contains((double) (byte) 0);
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range40, (double) 1.0f, false);
        org.jfree.data.Range range47 = org.jfree.data.Range.combine(range31, range46);
        org.jfree.data.Range range50 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double51 = range50.getLength();
        double double53 = range50.constrain(0.0d);
        java.lang.String str54 = range50.toString();
        org.jfree.data.Range range57 = org.jfree.data.Range.shift(range50, (double) (short) 1, true);
        org.jfree.data.Range range60 = org.jfree.data.Range.expand(range50, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range63 = org.jfree.data.Range.expand(range60, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range60, (double) 0L, false);
        org.jfree.data.Range range67 = org.jfree.data.Range.combine(range31, range66);
        org.jfree.data.Range range70 = org.jfree.data.Range.shift(range31, 1011.0d, false);
        boolean boolean71 = range18.equals((java.lang.Object) range70);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 107.0d + "'", double22 == 107.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Range[0.0,10.0]" + "'", str54, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double33 = range32.getUpperBound();
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getCentralValue();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range36, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range39, (double) '4');
        boolean boolean46 = borderArrangement3.equals((java.lang.Object) '4');
        org.jfree.chart.block.Block block47 = null;
        org.jfree.data.Range range50 = new org.jfree.data.Range((double) 1.0f, 10000.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range50, (double) 0);
        double double53 = range50.getLength();
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range50, (double) 'a', false);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement3.add(block47, (java.lang.Object) range56);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5.0d + "'", double37 == 5.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 9999.0d + "'", double53 == 9999.0d);
        org.junit.Assert.assertNotNull(range56);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 265.0d);
        boolean boolean12 = range9.intersects((double) (short) 10, 101.0d);
        double double13 = range9.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, 1011.0d, false);
        double double18 = range16.constrain(150.5d);
        java.lang.String str19 = range16.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 42.0d + "'", double13 == 42.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1286.0d + "'", double18 == 1286.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Range[1286.0,1328.0]" + "'", str19, "Range[1286.0,1328.0]");
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (byte) 0, (double) (-1L));
        boolean boolean7 = range5.contains((-1.0d));
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range5, 11.0d);
        double double10 = range9.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 12.0d + "'", double10 == 12.0d);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        boolean boolean19 = range2.contains(35.0d);
        double double20 = range2.getLowerBound();
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double24 = range23.getCentralValue();
        double double25 = range23.getLowerBound();
        double double26 = range23.getLowerBound();
        double double27 = range23.getLength();
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range23, 330.0d, true);
        java.lang.String str31 = range30.toString();
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range2, range30);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range2, (-9790.0d), 135.0d);
        boolean boolean38 = range2.intersects((double) (byte) 100, (-10.0d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5.0d + "'", double24 == 5.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Range[330.0,340.0]" + "'", str31, "Range[330.0,340.0]");
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (byte) 0, (double) (-1L));
        double double15 = range11.getUpperBound();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean27 = range24.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        double double41 = range40.getLength();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        boolean boolean49 = range44.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str50 = range44.toString();
        boolean boolean51 = range40.equals((java.lang.Object) range44);
        boolean boolean52 = range11.equals((java.lang.Object) range44);
        boolean boolean53 = range5.equals((java.lang.Object) range44);
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range44, (double) (byte) 0);
        double double56 = range55.getCentralValue();
        org.jfree.data.Range range59 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj60 = new java.lang.Object();
        boolean boolean61 = range59.equals(obj60);
        boolean boolean64 = range59.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range67 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double69 = range67.constrain(10.0d);
        org.jfree.data.Range range70 = org.jfree.data.Range.combine(range59, range67);
        org.jfree.data.Range range73 = org.jfree.data.Range.shift(range59, (double) (short) 100, false);
        org.jfree.data.Range range75 = org.jfree.data.Range.shift(range73, (double) 1);
        double double76 = range75.getLowerBound();
        org.jfree.data.Range range77 = org.jfree.data.Range.combine(range55, range75);
        double double78 = range55.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,10.0]" + "'", str50, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5.0d + "'", double56 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 10.0d + "'", double69 == 10.0d);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 101.0d + "'", double76 == 101.0d);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 265.0d);
        boolean boolean12 = range9.intersects((double) (short) 10, 101.0d);
        double double13 = range9.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, 1011.0d, false);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, 100.0d, (double) 100);
        double double24 = range22.constrain((double) (short) 1);
        boolean boolean26 = range22.contains((double) '4');
        org.jfree.data.Range range29 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range29, (double) 0);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range22, range29);
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range16, range22);
        org.jfree.data.Range range34 = null;
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range22, range34);
        double double36 = range22.getLength();
        java.lang.Class<?> wildcardClass37 = range22.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 42.0d + "'", double13 == 42.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 19899.0d + "'", double36 == 19899.0d);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (double) (short) 1);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (-12.0d));
        double double6 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 50.5d + "'", double3 == 50.5d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 50.5d + "'", double6 == 50.5d);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        org.jfree.chart.block.BlockContainer blockContainer27 = null;
        java.awt.Graphics2D graphics2D28 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D30 = borderArrangement7.arrange(blockContainer27, graphics2D28, rectangleConstraint29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10, (double) (byte) 10);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, 1265.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range5, (double) (byte) -1, (double) 100L);
        boolean boolean11 = range5.contains(99.0d);
        double double12 = range5.getUpperBound();
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range5, 9999.0d, 335.0d);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range5, 510.0d);
        java.lang.Class<?> wildcardClass18 = range5.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9899.0d) + "'", double6 == (-9899.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10000.0d + "'", double12 == 10000.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        java.lang.String str36 = range32.toString();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) 1L);
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range32, (-100.0d));
        java.lang.Class<?> wildcardClass41 = range40.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Range[0.0,200.0]" + "'", str36, "Range[0.0,200.0]");
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double6 = range5.getLowerBound();
        double double7 = range5.getLowerBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range5, 1.0d);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj13 = new java.lang.Object();
        boolean boolean14 = range12.equals(obj13);
        boolean boolean17 = range12.intersects(5.0d, (double) 100L);
        double double18 = range12.getLength();
        java.lang.String str19 = range12.toString();
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range12, (double) 0);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        double double28 = range27.getLowerBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) 100L);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range30, (double) 100L, true);
        org.jfree.data.Range range36 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range36, (double) 1.0f, false);
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range36, 0.0d);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range30, range41);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range21, range42);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range5, range42);
        boolean boolean46 = range44.contains((double) 10L);
        boolean boolean49 = range44.intersects((-4924.0d), (-10.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9899.0d) + "'", double6 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9899.0d) + "'", double7 == (-9899.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Range[0.0,10.0]" + "'", str19, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        boolean boolean13 = range7.intersects(0.0d, (double) (byte) 0);
        boolean boolean14 = borderArrangement0.equals((java.lang.Object) (byte) 0);
        org.jfree.chart.block.BorderArrangement borderArrangement15 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement15.clear();
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean20 = borderArrangement15.equals((java.lang.Object) range19);
        borderArrangement15.clear();
        boolean boolean23 = borderArrangement15.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, 100.0d, (double) 100);
        boolean boolean39 = range32.equals((java.lang.Object) range35);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range32, (double) 1.0f, (double) 'a');
        boolean boolean43 = borderArrangement15.equals((java.lang.Object) range32);
        borderArrangement15.clear();
        org.jfree.data.Range range47 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double48 = range47.getLength();
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range47, (double) (short) 10);
        double double51 = range50.getLowerBound();
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range50, (double) 100L);
        double double54 = range53.getUpperBound();
        boolean boolean55 = borderArrangement15.equals((java.lang.Object) range53);
        boolean boolean56 = borderArrangement0.equals((java.lang.Object) range53);
        org.jfree.chart.block.Block block57 = null;
        org.jfree.data.Range range60 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range63 = org.jfree.data.Range.expand(range60, 100.0d, (double) 100);
        boolean boolean66 = range60.intersects((double) 'a', (-9899.0d));
        org.jfree.data.Range range69 = org.jfree.data.Range.shift(range60, (double) (byte) -1, true);
        org.jfree.data.Range range71 = org.jfree.data.Range.shift(range60, 37.0d);
        org.jfree.data.Range range74 = org.jfree.data.Range.expand(range71, 9.0d, 50.0d);
        org.jfree.data.Range range77 = org.jfree.data.Range.shift(range74, 97.0d, false);
        org.jfree.data.Range range80 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj81 = new java.lang.Object();
        boolean boolean82 = range80.equals(obj81);
        boolean boolean85 = range80.intersects(1.0d, (double) (short) 10);
        double double86 = range80.getCentralValue();
        org.jfree.data.Range range89 = org.jfree.data.Range.expand(range80, 49.0d, 50.0d);
        boolean boolean91 = range89.contains((double) (byte) 0);
        boolean boolean92 = range74.equals((java.lang.Object) range89);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block57, (java.lang.Object) boolean92);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Boolean cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 5.0d + "'", double86 == 5.0d);
        org.junit.Assert.assertNotNull(range89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.chart.block.Block block5 = null;
        org.jfree.data.Range range6 = null;
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        borderArrangement0.add(block5, (java.lang.Object) range6);
        org.jfree.data.Range range12 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean14 = range12.contains((double) 1L);
        boolean boolean17 = range12.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, 265.0d);
        boolean boolean20 = borderArrangement0.equals((java.lang.Object) 265.0d);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) (byte) 100, 101.0d);
        boolean boolean24 = borderArrangement0.equals((java.lang.Object) (byte) 100);
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double28 = range27.getLength();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) (short) 10);
        double double31 = range27.getUpperBound();
        double double32 = range27.getLength();
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, 100.0d, (double) 100);
        double double39 = range38.getLowerBound();
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range38, (double) (byte) -1, (double) 100L);
        double double44 = range38.constrain(265.0d);
        java.lang.String str45 = range38.toString();
        double double46 = range38.getLength();
        boolean boolean47 = range27.equals((java.lang.Object) range38);
        boolean boolean48 = borderArrangement0.equals((java.lang.Object) boolean47);
        org.jfree.chart.block.Block block49 = null;
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double54 = range52.constrain(10.0d);
        boolean boolean57 = range52.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str58 = range52.toString();
        org.jfree.data.Range range61 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range63 = org.jfree.data.Range.shift(range61, (double) (-1));
        double double64 = range63.getUpperBound();
        boolean boolean67 = range63.intersects(50.0d, 5.0d);
        org.jfree.data.Range range70 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double71 = range70.getLength();
        org.jfree.data.Range range73 = org.jfree.data.Range.expandToInclude(range70, (double) (short) 10);
        org.jfree.data.Range range74 = org.jfree.data.Range.combine(range63, range70);
        org.jfree.data.Range range75 = org.jfree.data.Range.combine(range52, range74);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block49, (java.lang.Object) range75);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-9899.0d) + "'", double39 == (-9899.0d));
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 265.0d + "'", double44 == 265.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Range[-9899.0,10000.0]" + "'", str45, "Range[-9899.0,10000.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 19899.0d + "'", double46 == 19899.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Range[0.0,10.0]" + "'", str58, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 99.0d + "'", double64 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertNotNull(range75);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1.0d, (double) 10.0f);
        boolean boolean5 = range2.intersects((double) ' ', 330.0d);
        double double6 = range2.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, 154.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(range8);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range6, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range9, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) 10);
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range2, range16);
        boolean boolean20 = range2.intersects(150.0d, (double) 'a');
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range2, (double) 100, 19.0d);
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range2, (double) (byte) 0, false);
        java.lang.String str27 = range2.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.0d + "'", double7 == 5.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Range[0.0,10.0]" + "'", str27, "Range[0.0,10.0]");
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        java.lang.String str8 = range2.toString();
        double double9 = range2.getCentralValue();
        double double11 = range2.constrain(0.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range2, (double) (-1L));
        double double14 = range13.getCentralValue();
        double double15 = range13.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[1.0,100.0]" + "'", str8, "Range[1.0,100.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.5d + "'", double9 == 50.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 49.5d + "'", double14 == 49.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 99.0d + "'", double15 == 99.0d);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = borderArrangement0.equals((java.lang.Object) 1.0f);
        java.lang.Object obj8 = null;
        boolean boolean9 = borderArrangement0.equals(obj8);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj13 = new java.lang.Object();
        boolean boolean14 = range12.equals(obj13);
        boolean boolean17 = range12.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range20.constrain(10.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range12, range20);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, 100.0d, (double) 100);
        boolean boolean39 = range32.equals((java.lang.Object) range35);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, (double) 100);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range23, range41);
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) range23);
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range23, 0.0d);
        double double46 = range45.getUpperBound();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (-1.0f));
        org.jfree.data.Range range7 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) 0.0d);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, (double) (-1));
        double double14 = range13.getUpperBound();
        boolean boolean17 = range13.intersects(50.0d, 5.0d);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double21 = range20.getLength();
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range20, (double) (short) 10);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range20, 1.0d, false);
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) false);
        org.jfree.chart.block.BlockContainer blockContainer29 = null;
        java.awt.Graphics2D graphics2D30 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D32 = borderArrangement0.arrange(blockContainer29, graphics2D30, rectangleConstraint31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 99.0d + "'", double14 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (-1L), (double) (short) 100);
        boolean boolean4 = range2.contains((double) 1);
        org.jfree.data.Range range7 = new org.jfree.data.Range((double) (byte) 10, 82.5d);
        org.jfree.data.Range range8 = org.jfree.data.Range.combine(range2, range7);
        double double9 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        java.lang.Object obj30 = null;
        boolean boolean31 = borderArrangement3.equals(obj30);
        org.jfree.chart.block.Block block32 = null;
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, 100.0d, (double) 100);
        double double40 = range38.constrain((double) (short) 1);
        boolean boolean42 = range38.contains((double) '4');
        double double43 = range38.getLowerBound();
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range38, 100.0d);
        boolean boolean48 = range38.intersects((double) 100.0f, 1.0d);
        org.jfree.data.Range range51 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double52 = range51.getLength();
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range51, (double) (short) 10);
        double double55 = range54.getLowerBound();
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range54, (double) 100L);
        org.jfree.data.Range range60 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range63 = org.jfree.data.Range.expand(range60, 100.0d, (double) 100);
        boolean boolean64 = range57.equals((java.lang.Object) range60);
        org.jfree.data.Range range67 = org.jfree.data.Range.expand(range57, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range69 = org.jfree.data.Range.expandToInclude(range57, (double) 100.0f);
        org.jfree.data.Range range72 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range73 = org.jfree.data.Range.combine(range57, range72);
        boolean boolean74 = range38.equals((java.lang.Object) range73);
        org.jfree.data.Range range76 = org.jfree.data.Range.expandToInclude(range38, 5018543.0d);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement3.add(block32, (java.lang.Object) range38);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-9899.0d) + "'", double43 == (-9899.0d));
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(range76);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        boolean boolean30 = range17.contains(6676165.0d);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range17, (-100.0d));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(range32);
    }
}


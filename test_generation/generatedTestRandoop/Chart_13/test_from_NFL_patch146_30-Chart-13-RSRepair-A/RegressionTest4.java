import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        org.jfree.data.Range range2 = new org.jfree.data.Range(19757.0d, (-24106.5d));
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.chart.block.Block block5 = null;
        org.jfree.data.Range range6 = null;
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        borderArrangement0.add(block5, (java.lang.Object) range6);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj13 = new java.lang.Object();
        boolean boolean14 = range12.equals(obj13);
        boolean boolean17 = range12.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range12, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range12, (double) (byte) 10);
        double double23 = range22.getCentralValue();
        boolean boolean24 = borderArrangement0.equals((java.lang.Object) range22);
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 15.0d + "'", double23 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range5, (double) (byte) -1, (double) 100L);
        boolean boolean11 = range5.contains(99.0d);
        double double12 = range5.getUpperBound();
        org.jfree.data.Range range15 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range15, (double) (-1));
        double double18 = range17.getUpperBound();
        boolean boolean21 = range17.intersects(50.0d, 5.0d);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range17, range24);
        boolean boolean29 = range5.equals((java.lang.Object) range24);
        double double30 = range24.getCentralValue();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range24, 135.0d, true);
        boolean boolean36 = range33.intersects((-1003.5d), 101.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9899.0d) + "'", double6 == (-9899.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10000.0d + "'", double12 == 10000.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 99.0d + "'", double18 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5.0d + "'", double30 == 5.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double33 = range32.getUpperBound();
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getCentralValue();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range36, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range39, (double) '4');
        boolean boolean46 = borderArrangement3.equals((java.lang.Object) '4');
        borderArrangement3.clear();
        org.jfree.chart.block.Block block48 = null;
        org.jfree.chart.block.BorderArrangement borderArrangement49 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement49.clear();
        org.jfree.data.Range range53 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean54 = borderArrangement49.equals((java.lang.Object) range53);
        org.jfree.chart.block.BorderArrangement borderArrangement55 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement55.clear();
        org.jfree.data.Range range59 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean60 = borderArrangement55.equals((java.lang.Object) range59);
        boolean boolean62 = borderArrangement55.equals((java.lang.Object) 1.0f);
        boolean boolean63 = borderArrangement49.equals((java.lang.Object) 1.0f);
        borderArrangement49.clear();
        borderArrangement49.clear();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement3.add(block48, (java.lang.Object) borderArrangement49);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.chart.block.BorderArrangement cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5.0d + "'", double37 == 5.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, (double) 100L, true);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, (double) (-1L));
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range11, (-1002.5d), 19899.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean11 = range6.contains((double) 0.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        boolean boolean25 = range22.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        boolean boolean34 = range31.contains((double) (byte) 0);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range31, (double) 1.0f, false);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range22, range37);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range22, (double) 0.0f, false);
        java.lang.String str42 = range22.toString();
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range22, 530.0d, false);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range45, (double) 10L);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range6, range45);
        double double49 = range6.getCentralValue();
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double53 = range52.getLength();
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range52, (double) (short) 10);
        double double56 = range55.getLowerBound();
        org.jfree.data.Range range58 = org.jfree.data.Range.expandToInclude(range55, (double) 100L);
        org.jfree.data.Range range61 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range64 = org.jfree.data.Range.expand(range61, 100.0d, (double) 100);
        boolean boolean65 = range58.equals((java.lang.Object) range61);
        org.jfree.data.Range range67 = org.jfree.data.Range.shift(range58, (double) 100);
        boolean boolean68 = range6.equals((java.lang.Object) range58);
        org.jfree.data.Range range70 = org.jfree.data.Range.expandToInclude(range58, 131.0d);
        boolean boolean73 = range70.intersects(410.5d, 82.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Range[0.0,100.0]" + "'", str42, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 265.0d + "'", double49 == 265.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean11 = range6.contains((double) 0.0f);
        double double13 = range6.constrain((double) (byte) 100);
        double double15 = range6.constrain(135.0d);
        double double16 = range6.getCentralValue();
        java.lang.String str17 = range6.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 135.0d + "'", double15 == 135.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 265.0d + "'", double16 == 265.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[0.0,530.0]" + "'", str17, "Range[0.0,530.0]");
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (-1.0f));
        borderArrangement0.clear();
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj9 = new java.lang.Object();
        boolean boolean10 = range8.equals(obj9);
        boolean boolean13 = range8.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        boolean boolean23 = range8.equals((java.lang.Object) 100L);
        double double24 = range8.getCentralValue();
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double28 = range27.getLength();
        double double30 = range27.constrain(0.0d);
        java.lang.String str31 = range27.toString();
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range27, (double) (short) 1, true);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range27, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range37, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range8, range37);
        boolean boolean42 = borderArrangement0.equals((java.lang.Object) range8);
        org.jfree.chart.block.Block block43 = null;
        org.jfree.data.Range range46 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double47 = range46.getLength();
        double double49 = range46.constrain(0.0d);
        java.lang.String str50 = range46.toString();
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range46, (double) (short) 1, true);
        boolean boolean55 = range53.contains((double) 0L);
        double double57 = range53.constrain(50.5d);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block43, (java.lang.Object) range53);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5.0d + "'", double24 == 5.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Range[0.0,10.0]" + "'", str31, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,10.0]" + "'", str50, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 11.0d + "'", double57 == 11.0d);
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range8, (double) 0.0f, false);
        java.lang.String str28 = range8.toString();
        double double29 = range8.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range8, 92.5d, (-1000.0d));
        java.lang.Class<?> wildcardClass33 = range8.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[0.0,100.0]" + "'", str28, "Range[0.0,100.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean9 = range2.equals((java.lang.Object) 10);
        boolean boolean11 = range2.contains((double) 1.0f);
        double double12 = range2.getUpperBound();
        double double13 = range2.getUpperBound();
        boolean boolean16 = range2.intersects(1265.0d, 340.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        boolean boolean40 = range34.contains((double) 0.0f);
        boolean boolean43 = range34.intersects((double) (byte) 100, 165.0d);
        double double44 = range34.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 50.0d + "'", double44 == 50.0d);
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean11 = range6.contains((double) 0.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        double double15 = range13.constrain(0.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range13, (double) (byte) 0, false);
        double double19 = range18.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 265.0d + "'", double19 == 265.0d);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (-1.0f), (double) '#');
        double double4 = range3.getLowerBound();
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range3, 265.0d, false);
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range10, 100.0d, (double) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) ' ');
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range15, 10.0d);
        boolean boolean20 = range15.intersects((double) 1L, 1.0d);
        boolean boolean21 = range3.equals((java.lang.Object) 1.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range3, 43.0d, (-4949.0d));
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range0, range3);
        double double26 = range25.getUpperBound();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        org.jfree.data.Range range2 = new org.jfree.data.Range(150.5d, 19899.0d);
        org.jfree.data.Range range5 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double6 = range5.getCentralValue();
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range5, (double) 1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range8, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range8, (double) 100.0f);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range13, (double) 10);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range13, 265.0d);
        boolean boolean18 = range2.equals((java.lang.Object) range13);
        java.lang.String str19 = range2.toString();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Range[150.5,19899.0]" + "'", str19, "Range[150.5,19899.0]");
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean11 = range6.contains((double) 0.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        boolean boolean25 = range22.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        boolean boolean34 = range31.contains((double) (byte) 0);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range31, (double) 1.0f, false);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range22, range37);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range22, (double) 0.0f, false);
        java.lang.String str42 = range22.toString();
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range22, 530.0d, false);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range45, (double) 10L);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range6, range45);
        double double49 = range6.getCentralValue();
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double53 = range52.getLength();
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range52, (double) (short) 10);
        double double56 = range55.getLowerBound();
        org.jfree.data.Range range58 = org.jfree.data.Range.expandToInclude(range55, (double) 100L);
        org.jfree.data.Range range61 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range64 = org.jfree.data.Range.expand(range61, 100.0d, (double) 100);
        boolean boolean65 = range58.equals((java.lang.Object) range61);
        org.jfree.data.Range range67 = org.jfree.data.Range.shift(range58, (double) 100);
        boolean boolean68 = range6.equals((java.lang.Object) range58);
        org.jfree.data.Range range70 = org.jfree.data.Range.expandToInclude(range6, 0.0d);
        boolean boolean72 = range6.contains(3310.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Range[0.0,100.0]" + "'", str42, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 265.0d + "'", double49 == 265.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, 265.0d);
        org.jfree.data.Range range3 = null;
        org.jfree.data.Range range4 = org.jfree.data.Range.combine(range2, range3);
        org.jfree.data.Range range7 = org.jfree.data.Range.expand(range2, 19899.0d, 19757.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, 275.0d, true);
        double double11 = range10.getLowerBound();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 286.0d + "'", double11 == 286.0d);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range13, 5097.5d, false);
        boolean boolean38 = range35.intersects(37.0d, 254.0d);
        org.jfree.data.Range range41 = org.jfree.data.Range.expand(range35, 43.0d, 0.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range41);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        org.jfree.data.Range range2 = new org.jfree.data.Range(32.0d, 10100.0d);
        boolean boolean5 = range2.intersects(1.989802E8d, 57.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(1.0d, (double) (short) 10);
        double double8 = range2.getCentralValue();
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, 49.0d, 50.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, 6800.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range13, 4.5d);
        org.jfree.chart.block.BorderArrangement borderArrangement16 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement16.clear();
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean21 = borderArrangement16.equals((java.lang.Object) range20);
        borderArrangement16.clear();
        boolean boolean24 = borderArrangement16.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double28 = range27.getLength();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) (short) 10);
        double double31 = range30.getLowerBound();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) 100L);
        org.jfree.data.Range range36 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, 100.0d, (double) 100);
        boolean boolean40 = range33.equals((java.lang.Object) range36);
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range33, (double) 1.0f, (double) 'a');
        boolean boolean44 = borderArrangement16.equals((java.lang.Object) range33);
        borderArrangement16.clear();
        org.jfree.data.Range range48 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double49 = range48.getLength();
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range48, (double) (short) 10);
        double double52 = range51.getLowerBound();
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range51, (double) 100L);
        double double55 = range54.getUpperBound();
        boolean boolean56 = borderArrangement16.equals((java.lang.Object) range54);
        org.jfree.data.Range range58 = org.jfree.data.Range.shift(range54, (double) (-1));
        boolean boolean60 = range54.contains((double) 1);
        org.jfree.data.Range range61 = org.jfree.data.Range.combine(range13, range54);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(range61);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        java.lang.Class<?> wildcardClass8 = range2.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1340.0d, 16.0d);
        double double3 = range2.getUpperBound();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 6676165.0d, false);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range6, (-164.5d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 16.0d + "'", double3 == 16.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100.0f, (double) (byte) 10);
        boolean boolean4 = range2.contains((double) (short) 100);
        double double5 = range2.getUpperBound();
        double double7 = range2.constrain((-99.0d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        org.jfree.data.Range range2 = new org.jfree.data.Range(16.0d, 410.5d);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        java.lang.String str4 = range2.toString();
        org.jfree.data.Range range6 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range6, (double) 1L);
        double double9 = range8.getUpperBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj13 = new java.lang.Object();
        boolean boolean14 = range12.equals(obj13);
        boolean boolean17 = range12.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range12, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range12, (double) (byte) 10);
        org.jfree.data.Range range25 = new org.jfree.data.Range(100.0d, (double) (byte) 100);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range12, range25);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range8, range25);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Range[100.0,1.0]" + "'", str4, "Range[100.0,1.0]");
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        boolean boolean8 = range5.intersects(142.0d, 50.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range5, (-4949.0d), 0.0d);
        java.lang.String str12 = range5.toString();
        double double13 = range5.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Range[1.0,11.0]" + "'", str12, "Range[1.0,11.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 11.0d + "'", double13 == 11.0d);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range13, 49.0d);
        double double36 = range34.constrain(11.5d);
        double double37 = range34.getUpperBound();
        java.lang.String str38 = range34.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 11.5d + "'", double36 == 11.5d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 49.0d + "'", double37 == 49.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Range[0.0,49.0]" + "'", str38, "Range[0.0,49.0]");
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range3 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range3.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.expandToInclude(range3, (double) (short) 10);
        double double7 = range6.getLowerBound();
        boolean boolean9 = range6.contains((double) (byte) 0);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range6, (double) 1.0f, false);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (double) (short) 1, (double) (-1L));
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double20 = range18.constrain(10.0d);
        boolean boolean23 = range18.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str24 = range18.toString();
        double double26 = range18.constrain((double) 100L);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range15, range18);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range27, 52.0d, false);
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range0, range27);
        double double32 = range31.getUpperBound();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Range[0.0,10.0]" + "'", str24, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean11 = range6.contains((double) 1.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range6, 48845.0d, false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(range14);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        boolean boolean40 = range34.contains((double) 0.0f);
        org.jfree.data.Range range43 = new org.jfree.data.Range((double) (byte) 100, 101.0d);
        boolean boolean44 = range34.equals((java.lang.Object) range43);
        java.lang.String str45 = range43.toString();
        boolean boolean47 = range43.contains(136.0d);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range43, 49.0d);
        org.jfree.data.Range range51 = org.jfree.data.Range.shift(range43, (double) 1L);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Range[100.0,101.0]" + "'", str45, "Range[100.0,101.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range51);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        double double37 = range33.getUpperBound();
        org.jfree.data.Range range40 = new org.jfree.data.Range((double) (byte) 100, (double) '#');
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range33, range40);
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range33, (-1.9898E8d));
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range43, 50.0d, 19.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 11.0d + "'", double37 == 11.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range46);
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) (short) 1);
        boolean boolean4 = range2.contains((double) 1.0f);
        boolean boolean6 = range2.contains(10097.0d);
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) (short) 100, false);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) 1);
        org.jfree.data.Range range19 = null;
        org.jfree.data.Range range20 = org.jfree.data.Range.combine(range18, range19);
        org.jfree.data.Range range23 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, 0.0d, (double) (-1L));
        double double27 = range26.getLength();
        java.lang.String str28 = range26.toString();
        boolean boolean30 = range26.contains((double) (-1L));
        java.lang.String str31 = range26.toString();
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range19, range26);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[10.0,10.0]" + "'", str28, "Range[10.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Range[10.0,10.0]" + "'", str31, "Range[10.0,10.0]");
        org.junit.Assert.assertNotNull(range32);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getLength();
        boolean boolean7 = range4.contains((double) (short) 10);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 90.0d + "'", double5 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range8, 0.0d);
        double double28 = range26.constrain(275.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double26 = range24.constrain(10.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range16, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range2, range16);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj32 = new java.lang.Object();
        boolean boolean33 = range31.equals(obj32);
        boolean boolean36 = range31.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range39.getLength();
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range39, (double) (short) 10);
        double double43 = range42.getLowerBound();
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range42, (double) 100L);
        boolean boolean46 = range31.equals((java.lang.Object) 100L);
        org.jfree.data.Range range47 = org.jfree.data.Range.combine(range16, range31);
        boolean boolean50 = range31.intersects(6800.0d, (double) (short) 100);
        double double51 = range31.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) 0L, (double) 1);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getLength();
        double double15 = range12.constrain(0.0d);
        java.lang.String str16 = range12.toString();
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, (double) (short) 1, true);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range12, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range22, (double) ' ');
        double double26 = range24.constrain((double) (short) -1);
        org.jfree.data.Range range29 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range29.getCentralValue();
        double double31 = range29.getLowerBound();
        double double32 = range29.getLowerBound();
        double double33 = range29.getLength();
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range29, 330.0d, true);
        boolean boolean37 = range24.equals((java.lang.Object) 330.0d);
        boolean boolean38 = range6.equals((java.lang.Object) range24);
        double double40 = range6.constrain((-100.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Range[0.0,10.0]" + "'", str16, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5.0d + "'", double30 == 5.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        boolean boolean5 = range2.contains((double) (byte) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) 10.0f);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, 11.0d);
        java.lang.String str11 = range10.toString();
        double double12 = range10.getUpperBound();
        org.jfree.data.Range range15 = new org.jfree.data.Range((double) (-1.0f), (double) '#');
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range10, range15);
        boolean boolean19 = range15.intersects(0.0d, 57.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[-989.0,121.0]" + "'", str11, "Range[-989.0,121.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 121.0d + "'", double12 == 121.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean9 = range2.equals((java.lang.Object) 10);
        boolean boolean11 = range2.contains((double) 1.0f);
        double double12 = range2.getUpperBound();
        double double13 = range2.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        double double28 = range27.getLowerBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) 100L);
        boolean boolean31 = range16.equals((java.lang.Object) 100L);
        boolean boolean33 = range16.contains(35.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range2, range16);
        org.jfree.data.Range range37 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range37, 100.0d, (double) 100);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range37, (double) ' ');
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range42, 10.0d);
        org.jfree.data.Range range47 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double48 = range47.getLength();
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range47, (double) (short) 10);
        double double51 = range50.getLowerBound();
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range50, (double) 100L);
        org.jfree.data.Range range56 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range56, 100.0d, (double) 100);
        boolean boolean60 = range53.equals((java.lang.Object) range56);
        org.jfree.data.Range range63 = org.jfree.data.Range.expand(range53, (double) 1.0f, (double) 'a');
        boolean boolean64 = range44.equals((java.lang.Object) 1.0f);
        org.jfree.data.Range range65 = org.jfree.data.Range.combine(range34, range44);
        org.jfree.data.Range range67 = org.jfree.data.Range.shift(range65, 540.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range67);
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        java.lang.String str6 = range2.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[1.0,100.0]" + "'", str6, "Range[1.0,100.0]");
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        org.jfree.data.Range range2 = new org.jfree.data.Range(19.0d, (double) (byte) 1);
        boolean boolean4 = range2.contains((-209948.0d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        org.jfree.data.Range range31 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range31, (double) 0);
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj37 = new java.lang.Object();
        boolean boolean38 = range36.equals(obj37);
        boolean boolean41 = range36.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        org.jfree.data.Range range47 = org.jfree.data.Range.combine(range36, range44);
        org.jfree.data.Range range50 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double51 = range50.getLength();
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range50, (double) (short) 10);
        double double54 = range53.getLowerBound();
        org.jfree.data.Range range56 = org.jfree.data.Range.expandToInclude(range53, (double) 100L);
        org.jfree.data.Range range59 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range62 = org.jfree.data.Range.expand(range59, 100.0d, (double) 100);
        boolean boolean63 = range56.equals((java.lang.Object) range59);
        org.jfree.data.Range range65 = org.jfree.data.Range.shift(range56, (double) 100);
        org.jfree.data.Range range66 = org.jfree.data.Range.combine(range47, range65);
        org.jfree.data.Range range69 = org.jfree.data.Range.expand(range66, (double) ' ', 1.0d);
        boolean boolean71 = range66.contains((-1.0d));
        org.jfree.data.Range range73 = org.jfree.data.Range.shift(range66, 0.0d);
        org.jfree.data.Range range76 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range77 = org.jfree.data.Range.combine(range66, range76);
        boolean boolean78 = range31.equals((java.lang.Object) range66);
        boolean boolean79 = borderArrangement0.equals((java.lang.Object) range31);
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 'a', (double) '4');
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, 11.0d, true);
        org.junit.Assert.assertNotNull(range5);
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(1.0d, (double) (short) 10);
        double double8 = range2.getCentralValue();
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, 49.0d, 50.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) (-1.0f), (double) '#');
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range14, 265.0d, false);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, 11.0d);
        boolean boolean22 = range2.equals((java.lang.Object) range18);
        java.lang.Class<?> wildcardClass23 = range18.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 300.0d + "'", double19 == 300.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getLength();
        double double12 = range9.constrain(0.0d);
        java.lang.String str13 = range9.toString();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, (double) (short) 1, true);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range9, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range19, (double) (byte) 1, (double) (-1));
        boolean boolean26 = borderArrangement0.equals((java.lang.Object) range25);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double30 = range29.getUpperBound();
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range33.getCentralValue();
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range33, (double) 1);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range29, range36);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range25, range29);
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj45 = new java.lang.Object();
        boolean boolean46 = range44.equals(obj45);
        boolean boolean49 = range44.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double53 = range52.getLength();
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range52, (double) (short) 10);
        double double56 = range55.getLowerBound();
        org.jfree.data.Range range58 = org.jfree.data.Range.expandToInclude(range55, (double) 100L);
        boolean boolean59 = range44.equals((java.lang.Object) 100L);
        double double60 = range44.getLength();
        boolean boolean63 = range44.intersects(100.0d, (double) (short) 100);
        org.jfree.data.Range range64 = org.jfree.data.Range.combine(range29, range44);
        double double65 = range44.getCentralValue();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,10.0]" + "'", str13, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5.0d + "'", double34 == 5.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 10.0d + "'", double60 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 5.0d + "'", double65 == 5.0d);
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        double double9 = range2.getCentralValue();
        java.lang.Class<?> wildcardClass10 = range2.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.5d + "'", double9 == 50.5d);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range24, 1011.0d, false);
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range24, (-1.9898E8d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range43);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        double double13 = range12.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean17 = range12.equals((java.lang.Object) range16);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range20, (double) (-1));
        double double23 = range22.getUpperBound();
        double double24 = range22.getCentralValue();
        double double25 = range22.getLowerBound();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range28.constrain(10.0d);
        double double31 = range28.getUpperBound();
        java.lang.String str32 = range28.toString();
        boolean boolean33 = range22.equals((java.lang.Object) str32);
        double double34 = range22.getLowerBound();
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range16, range22);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range22, (-1000.0d));
        boolean boolean39 = range22.contains((-10.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 330.0d + "'", double13 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 99.0d + "'", double23 == 99.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 54.0d + "'", double24 == 54.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 9.0d + "'", double25 == 9.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Range[0.0,10.0]" + "'", str32, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 9.0d + "'", double34 == 9.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double33 = range32.getUpperBound();
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getCentralValue();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range36, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range39, (double) '4');
        boolean boolean46 = borderArrangement3.equals((java.lang.Object) '4');
        org.jfree.chart.block.Block block47 = null;
        org.jfree.data.Range range50 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range53 = org.jfree.data.Range.expand(range50, 100.0d, (double) 100);
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range50, (double) ' ');
        org.jfree.data.Range range57 = org.jfree.data.Range.shift(range55, 10.0d);
        org.jfree.data.Range range60 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double61 = range60.getLength();
        org.jfree.data.Range range63 = org.jfree.data.Range.expandToInclude(range60, (double) (short) 10);
        double double64 = range63.getLowerBound();
        org.jfree.data.Range range66 = org.jfree.data.Range.expandToInclude(range63, (double) 100L);
        org.jfree.data.Range range69 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range72 = org.jfree.data.Range.expand(range69, 100.0d, (double) 100);
        boolean boolean73 = range66.equals((java.lang.Object) range69);
        org.jfree.data.Range range76 = org.jfree.data.Range.expand(range66, (double) 1.0f, (double) 'a');
        boolean boolean77 = range57.equals((java.lang.Object) 1.0f);
        org.jfree.data.Range range80 = org.jfree.data.Range.expand(range57, 43.0d, (double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement3.add(block47, (java.lang.Object) range57);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5.0d + "'", double37 == 5.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(range80);
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-670.0d), (double) 0.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, 50.5d, false);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double9 = range8.getUpperBound();
        java.lang.String str10 = range8.toString();
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range2, range8);
        double double12 = range11.getLength();
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range15, (double) 0L, (double) '4');
        double double20 = range15.getLength();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range15, (double) 0);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range15, (double) (byte) 0);
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range24, 0.0d);
        boolean boolean27 = range11.equals((java.lang.Object) 0.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Range[100.0,1.0]" + "'", str10, "Range[100.0,1.0]");
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 671.0d + "'", double12 == 671.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        org.jfree.data.Range range2 = new org.jfree.data.Range(2504322.0d, (double) ' ');
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(1.0d, (double) (short) 10);
        double double8 = range2.getUpperBound();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range2, (double) (byte) 0);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range2, (double) 100);
        double double13 = range2.getLowerBound();
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range2, (-100.0d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(range15);
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        org.jfree.data.Range range2 = new org.jfree.data.Range(510.0d, (double) (short) 100);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (byte) 0, (double) (-1L));
        double double15 = range11.getUpperBound();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean27 = range24.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        double double41 = range40.getLength();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        boolean boolean49 = range44.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str50 = range44.toString();
        boolean boolean51 = range40.equals((java.lang.Object) range44);
        boolean boolean52 = range11.equals((java.lang.Object) range44);
        boolean boolean53 = range5.equals((java.lang.Object) range44);
        org.jfree.data.Range range54 = null;
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range44, range54);
        double double57 = range44.constrain((double) (short) 1);
        double double58 = range44.getLength();
        double double59 = range44.getUpperBound();
        double double60 = range44.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,10.0]" + "'", str50, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 5.0d + "'", double60 == 5.0d);
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, (-1.0d));
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range6, (double) 1);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range6, (double) 'a');
        boolean boolean13 = range6.equals((java.lang.Object) 10);
        boolean boolean15 = range6.contains((double) 1.0f);
        double double16 = range6.getUpperBound();
        double double17 = range6.getUpperBound();
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj21 = new java.lang.Object();
        boolean boolean22 = range20.equals(obj21);
        boolean boolean25 = range20.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        boolean boolean35 = range20.equals((java.lang.Object) 100L);
        boolean boolean37 = range20.contains(35.0d);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range6, range20);
        org.jfree.data.Range range41 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj42 = new java.lang.Object();
        boolean boolean43 = range41.equals(obj42);
        boolean boolean46 = range41.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range49 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double50 = range49.getLength();
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range49, (double) (short) 10);
        double double53 = range52.getLowerBound();
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range52, (double) 100L);
        boolean boolean56 = range41.equals((java.lang.Object) 100L);
        boolean boolean58 = range41.contains((double) (byte) 100);
        double double59 = range41.getUpperBound();
        org.jfree.data.Range range60 = org.jfree.data.Range.combine(range38, range41);
        org.jfree.data.Range range61 = org.jfree.data.Range.combine(range2, range38);
        java.lang.String str62 = range38.toString();
        double double64 = range38.constrain((-3.3380139E7d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.0d + "'", double7 == 5.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Range[0.0,10.0]" + "'", str62, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range2, (double) (byte) 10);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range2, (double) 10.0f, 15.0d);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range15, 0.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getUpperBound();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj10 = new java.lang.Object();
        boolean boolean11 = range9.equals(obj10);
        boolean boolean14 = range9.intersects(5.0d, (double) 100L);
        double double15 = range9.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range9, 0.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range2, range17);
        double double19 = range18.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range8, (double) 1, true);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range8, (-6400.0d), true);
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range8, 6676165.0d);
        double double30 = range8.getCentralValue();
        java.lang.Class<?> wildcardClass31 = range8.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 50.0d + "'", double30 == 50.0d);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (short) 1, (double) (-1L));
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (-9899.0d));
        java.lang.Class<?> wildcardClass18 = range17.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        org.jfree.data.Range range2 = new org.jfree.data.Range(275.0d, 50.5d);
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        org.jfree.data.Range range2 = new org.jfree.data.Range(635.0d, (-3011.0d));
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean9 = range2.equals((java.lang.Object) 10);
        boolean boolean11 = range2.contains((double) 1.0f);
        double double12 = range2.getUpperBound();
        double double13 = range2.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        double double28 = range27.getLowerBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) 100L);
        boolean boolean31 = range16.equals((java.lang.Object) 100L);
        boolean boolean33 = range16.contains(35.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range2, range16);
        double double35 = range2.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 100L, (double) (short) 0);
        boolean boolean11 = range2.contains((double) (short) 1);
        double double12 = range2.getUpperBound();
        boolean boolean15 = range2.intersects(107.0d, (double) 100.0f);
        boolean boolean18 = range2.intersects((double) (-1.0f), (-12.0d));
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range2, 99.0d, (-989.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(range21);
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        double double7 = range6.getCentralValue();
        double double8 = range6.getCentralValue();
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range6, 6.0d, (double) 10L);
        boolean boolean14 = range6.intersects(147.0d, 330.0d);
        org.jfree.chart.block.BorderArrangement borderArrangement15 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean17 = borderArrangement15.equals((java.lang.Object) (-1L));
        boolean boolean19 = borderArrangement15.equals((java.lang.Object) (byte) 10);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        boolean boolean28 = range22.intersects(0.0d, (double) (byte) 0);
        boolean boolean29 = borderArrangement15.equals((java.lang.Object) (byte) 0);
        borderArrangement15.clear();
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj34 = new java.lang.Object();
        boolean boolean35 = range33.equals(obj34);
        boolean boolean38 = range33.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range41 = org.jfree.data.Range.expand(range33, 0.0d, (double) (byte) -1);
        boolean boolean44 = range33.intersects((double) 100, (double) 10L);
        boolean boolean47 = range33.intersects(19899.0d, 9999.0d);
        boolean boolean48 = borderArrangement15.equals((java.lang.Object) 9999.0d);
        boolean boolean49 = range6.equals((java.lang.Object) boolean48);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 265.0d + "'", double7 == 265.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 265.0d + "'", double8 == 265.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, 1340.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 100, true);
        double double8 = range2.getLowerBound();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range5, (double) '4', false);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, 101.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertNotNull(range17);
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean9 = range2.equals((java.lang.Object) 10);
        boolean boolean11 = range2.contains((double) 1.0f);
        double double12 = range2.getUpperBound();
        double double13 = range2.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        double double28 = range27.getLowerBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) 100L);
        boolean boolean31 = range16.equals((java.lang.Object) 100L);
        boolean boolean33 = range16.contains(35.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range2, range16);
        org.jfree.data.Range range37 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range37, 100.0d, (double) 100);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range37, (double) ' ');
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range42, 10.0d);
        org.jfree.data.Range range47 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double48 = range47.getLength();
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range47, (double) (short) 10);
        double double51 = range50.getLowerBound();
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range50, (double) 100L);
        org.jfree.data.Range range56 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range56, 100.0d, (double) 100);
        boolean boolean60 = range53.equals((java.lang.Object) range56);
        org.jfree.data.Range range63 = org.jfree.data.Range.expand(range53, (double) 1.0f, (double) 'a');
        boolean boolean64 = range44.equals((java.lang.Object) 1.0f);
        org.jfree.data.Range range65 = org.jfree.data.Range.combine(range34, range44);
        org.jfree.data.Range range67 = org.jfree.data.Range.expandToInclude(range65, (double) 10.0f);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range67);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        double double13 = range12.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean17 = range12.equals((java.lang.Object) range16);
        org.jfree.data.Range range20 = new org.jfree.data.Range(11.0d, (-1.0d));
        double double21 = range20.getCentralValue();
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range12, range20);
        org.jfree.data.Range range25 = new org.jfree.data.Range(99.0d, (double) (byte) -1);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range20, range25);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range25, (double) (byte) 10);
        java.lang.String str29 = range28.toString();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 330.0d + "'", double13 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Range[109.0,0.0]" + "'", str29, "Range[109.0,0.0]");
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double9 = range8.getLength();
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range8, (double) (short) 10);
        double double12 = range11.getLowerBound();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) 100L);
        boolean boolean15 = borderArrangement0.equals((java.lang.Object) 100L);
        borderArrangement0.clear();
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double21 = range19.constrain(10.0d);
        boolean boolean24 = range19.intersects((double) 10.0f, (double) (-1.0f));
        boolean boolean26 = range19.contains((double) 0);
        double double27 = range19.getCentralValue();
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range19);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5.0d + "'", double27 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, (double) 100L, true);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range8, (double) 100, false);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range8, 35.0d, true);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range17, (double) 'a');
        double double20 = range19.getLength();
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double24 = range23.getLength();
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range23, (double) (short) 10);
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range26, (double) (-1));
        org.jfree.data.Range range31 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, 100.0d, (double) 100);
        double double35 = range34.getLowerBound();
        double double36 = range34.getLowerBound();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range34, 10000.0d, true);
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj43 = new java.lang.Object();
        boolean boolean44 = range42.equals(obj43);
        boolean boolean47 = range42.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range42, 0.0d, (double) (byte) -1);
        boolean boolean53 = range42.intersects((double) 100, (double) 10L);
        boolean boolean56 = range42.intersects(19899.0d, 9999.0d);
        org.jfree.data.Range range57 = org.jfree.data.Range.combine(range34, range42);
        boolean boolean58 = range28.equals((java.lang.Object) range42);
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range19, range42);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-9899.0d) + "'", double35 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9899.0d) + "'", double36 == (-9899.0d));
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(range59);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range2, (double) (byte) 10);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range15.constrain(10.0d);
        boolean boolean20 = range15.intersects((double) 10.0f, (double) (-1.0f));
        double double22 = range15.constrain(0.0d);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range15, (double) 0.0f, (double) ' ');
        double double26 = range25.getUpperBound();
        double double27 = range25.getCentralValue();
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range2, range25);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 330.0d + "'", double26 == 330.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 165.0d + "'", double27 == 165.0d);
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getLength();
        double double12 = range9.constrain(0.0d);
        java.lang.String str13 = range9.toString();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, (double) (short) 1, true);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range9, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range19, (double) (byte) 1, (double) (-1));
        boolean boolean26 = borderArrangement0.equals((java.lang.Object) range25);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double30 = range29.getUpperBound();
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range33.getCentralValue();
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range33, (double) 1);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range29, range36);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range25, range29);
        boolean boolean44 = range29.intersects(121.0d, (-1003.5d));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,10.0]" + "'", str13, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5.0d + "'", double34 == 5.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 100L, (double) (short) 0);
        double double10 = range2.getUpperBound();
        double double11 = range2.getCentralValue();
        java.lang.String str12 = range2.toString();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range2, 0.0d, false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Range[0.0,10.0]" + "'", str12, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range15);
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1.0f, 10000.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 0);
        double double5 = range2.getLength();
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 'a', false);
        double double9 = range8.getCentralValue();
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, (-12797.0d));
        double double12 = range11.getUpperBound();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 9999.0d + "'", double5 == 9999.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5097.5d + "'", double9 == 5097.5d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        boolean boolean10 = borderArrangement0.equals((java.lang.Object) '#');
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 100.0d, (double) 100);
        double double18 = range16.constrain((double) (short) 1);
        boolean boolean19 = borderArrangement0.equals((java.lang.Object) (short) 1);
        borderArrangement0.clear();
        org.jfree.data.Range range23 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean25 = range23.contains((double) 1L);
        boolean boolean28 = range23.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range23, 265.0d);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range23, 9999.0d, (double) 0.0f);
        boolean boolean34 = borderArrangement0.equals((java.lang.Object) range33);
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double39 = range37.constrain(10.0d);
        double double40 = range37.getLowerBound();
        boolean boolean43 = range37.intersects((double) (byte) 0, 0.0d);
        double double45 = range37.constrain((double) (byte) -1);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range37, (double) 100);
        double double48 = range37.getUpperBound();
        boolean boolean49 = borderArrangement0.equals((java.lang.Object) double48);
        org.jfree.chart.block.BlockContainer blockContainer50 = null;
        java.awt.Graphics2D graphics2D51 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D53 = borderArrangement0.arrange(blockContainer50, graphics2D51, rectangleConstraint52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range8, 0.0d);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range26, (double) (-1.0f), 132.0d);
        double double30 = range29.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, 142.0d, false);
        java.lang.Object obj9 = null;
        boolean boolean10 = range2.equals(obj9);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, (double) 100.0f);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 10);
        org.jfree.data.Range range15 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range15, (double) (-1));
        double double18 = range17.getUpperBound();
        boolean boolean21 = range17.intersects(50.0d, 5.0d);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range17, range24);
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range10, range24);
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        org.jfree.data.Range range41 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range41, 100.0d, (double) 100);
        boolean boolean45 = range38.equals((java.lang.Object) range41);
        double double46 = range38.getLength();
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range38, 43.0d, false);
        boolean boolean50 = range24.equals((java.lang.Object) false);
        double double51 = range24.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 99.0d + "'", double18 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 254.0d, false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        org.jfree.data.Range range2 = new org.jfree.data.Range(108.0d, 90.0d);
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, (double) 10L);
        java.lang.String str15 = range12.toString();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Range[0.0,330.0]" + "'", str15, "Range[0.0,330.0]");
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getLength();
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        double double16 = range15.getLowerBound();
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range15, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, 100.0d, (double) 100);
        boolean boolean25 = range18.equals((java.lang.Object) range21);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range18, (double) 1.0f, (double) 'a');
        boolean boolean29 = range9.equals((java.lang.Object) 1.0f);
        java.lang.String str30 = range9.toString();
        java.lang.Class<?> wildcardClass31 = range9.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[43.0,142.0]" + "'", str30, "Range[43.0,142.0]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        double double6 = range2.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 330.0d, true);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        boolean boolean15 = range12.contains((double) (byte) 0);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range12, (double) 100.0f, (double) 10.0f);
        boolean boolean19 = range2.equals((java.lang.Object) range12);
        java.lang.String str20 = range12.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Range[0.0,10.0]" + "'", str20, "Range[0.0,10.0]");
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        double double13 = range12.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean17 = range12.equals((java.lang.Object) range16);
        org.jfree.data.Range range20 = new org.jfree.data.Range(11.0d, (-1.0d));
        double double21 = range20.getCentralValue();
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range12, range20);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range12, 1340.0d, true);
        double double26 = range25.getCentralValue();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 330.0d + "'", double13 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1505.0d + "'", double26 == 1505.0d);
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (-1L), (double) (short) 100);
        boolean boolean4 = range2.contains((double) 1);
        org.jfree.data.Range range7 = new org.jfree.data.Range((double) (byte) 10, 82.5d);
        org.jfree.data.Range range8 = org.jfree.data.Range.combine(range2, range7);
        boolean boolean10 = range2.contains(33.75d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 0.0d, (double) (byte) -1);
        double double11 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        borderArrangement3.clear();
        org.jfree.data.Range range33 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.expand(range33, 0.0d, (double) (-1L));
        double double37 = range36.getLength();
        java.lang.String str38 = range36.toString();
        boolean boolean39 = borderArrangement3.equals((java.lang.Object) range36);
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range42.getCentralValue();
        boolean boolean45 = range42.contains((double) (byte) 0);
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range42, (double) ' ', (-1000.0d));
        boolean boolean49 = borderArrangement3.equals((java.lang.Object) ' ');
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Range[10.0,10.0]" + "'", str38, "Range[10.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5.0d + "'", double43 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        double double6 = range2.getLength();
        double double7 = range2.getUpperBound();
        double double8 = range2.getLowerBound();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, 510.0d);
        java.lang.String str11 = range2.toString();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range2, 20.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[0.0,10.0]" + "'", str11, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range13);
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(1.0d, (double) (short) 10);
        double double8 = range2.getUpperBound();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range2, (double) (byte) 0);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) (short) -1, true);
        double double14 = range13.getCentralValue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 4.0d + "'", double14 == 4.0d);
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        org.jfree.data.Range range2 = new org.jfree.data.Range(82.5d, (double) 1.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 30.0d, 9904.0d);
        org.jfree.chart.block.BorderArrangement borderArrangement6 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement6.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean11 = borderArrangement6.equals((java.lang.Object) range10);
        boolean boolean13 = range10.equals((java.lang.Object) (byte) 100);
        double double14 = range10.getCentralValue();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) (short) 1, (double) (-1));
        boolean boolean18 = range10.equals((java.lang.Object) range17);
        boolean boolean19 = range2.equals((java.lang.Object) range10);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.5d + "'", double14 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        org.jfree.data.Range range41 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range41, 100.0d, (double) 100);
        boolean boolean45 = range38.equals((java.lang.Object) range41);
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range38, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range38, (double) 100.0f);
        org.jfree.data.Range range53 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range54 = org.jfree.data.Range.combine(range38, range53);
        boolean boolean55 = borderArrangement3.equals((java.lang.Object) range54);
        double double56 = range54.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, (double) 100L, true);
        double double12 = range11.getLength();
        org.jfree.data.Range range15 = new org.jfree.data.Range((double) 10.0f, 5346.0d);
        boolean boolean16 = range11.equals((java.lang.Object) range15);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range2, (double) (short) -1);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getLength();
        double double18 = range15.constrain(0.0d);
        java.lang.String str19 = range15.toString();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range15, (double) (short) 1, true);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) '4');
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range2, range24);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range2, 200.0d);
        boolean boolean29 = range27.contains((double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range27, (-100.0d), 0.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Range[0.0,10.0]" + "'", str19, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        java.lang.String str4 = range2.toString();
        double double5 = range2.getCentralValue();
        boolean boolean7 = range2.contains((double) (-1));
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        double double15 = range13.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range2, range13);
        boolean boolean18 = range2.contains(132.0d);
        org.jfree.chart.block.BorderArrangement borderArrangement19 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement19.clear();
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean24 = borderArrangement19.equals((java.lang.Object) range23);
        borderArrangement19.clear();
        boolean boolean27 = borderArrangement19.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range33, (double) 100L);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, 100.0d, (double) 100);
        boolean boolean43 = range36.equals((java.lang.Object) range39);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range36, (double) 1.0f, (double) 'a');
        boolean boolean47 = borderArrangement19.equals((java.lang.Object) range36);
        borderArrangement19.clear();
        org.jfree.data.Range range51 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double52 = range51.getLength();
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range51, (double) (short) 10);
        double double55 = range54.getLowerBound();
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range54, (double) 100L);
        double double58 = range57.getUpperBound();
        boolean boolean59 = borderArrangement19.equals((java.lang.Object) range57);
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range57, (double) 100);
        java.lang.String str62 = range57.toString();
        org.jfree.data.Range range63 = null;
        org.jfree.data.Range range64 = org.jfree.data.Range.combine(range57, range63);
        org.jfree.data.Range range65 = org.jfree.data.Range.combine(range2, range64);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Range[100.0,1.0]" + "'", str4, "Range[100.0,1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 50.5d + "'", double5 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 100.0d + "'", double58 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Range[0.0,100.0]" + "'", str62, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertNotNull(range65);
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range34, (double) '4');
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range34, (double) 1, true);
        org.jfree.data.Range range46 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range48 = org.jfree.data.Range.shift(range46, (double) (-1));
        double double49 = range48.getUpperBound();
        double double50 = range48.getCentralValue();
        double double51 = range48.getLowerBound();
        org.jfree.data.Range range54 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double56 = range54.constrain(10.0d);
        double double57 = range54.getUpperBound();
        java.lang.String str58 = range54.toString();
        boolean boolean59 = range48.equals((java.lang.Object) str58);
        double double60 = range48.getLength();
        org.jfree.data.Range range61 = org.jfree.data.Range.combine(range34, range48);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 99.0d + "'", double49 == 99.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 54.0d + "'", double50 == 54.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 9.0d + "'", double51 == 9.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 10.0d + "'", double56 == 10.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Range[0.0,10.0]" + "'", str58, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 90.0d + "'", double60 == 90.0d);
        org.junit.Assert.assertNotNull(range61);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        double double9 = range7.getLowerBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range12);
        double double20 = range7.constrain((double) (byte) 1);
        double double21 = range7.getCentralValue();
        double double22 = range7.getCentralValue();
        boolean boolean23 = borderArrangement0.equals((java.lang.Object) double22);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, (double) (byte) 0, (double) (-1L));
        double double39 = range35.getUpperBound();
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range42.getLength();
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range42, (double) (short) 10);
        double double46 = range45.getLowerBound();
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) 100L);
        boolean boolean51 = range48.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range54 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double55 = range54.getLength();
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range54, (double) (short) 10);
        double double58 = range57.getLowerBound();
        boolean boolean60 = range57.contains((double) (byte) 0);
        org.jfree.data.Range range63 = org.jfree.data.Range.shift(range57, (double) 1.0f, false);
        org.jfree.data.Range range64 = org.jfree.data.Range.combine(range48, range63);
        double double65 = range64.getLength();
        org.jfree.data.Range range68 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double70 = range68.constrain(10.0d);
        boolean boolean73 = range68.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str74 = range68.toString();
        boolean boolean75 = range64.equals((java.lang.Object) range68);
        boolean boolean76 = range35.equals((java.lang.Object) range68);
        boolean boolean77 = range29.equals((java.lang.Object) range68);
        org.jfree.data.Range range78 = null;
        org.jfree.data.Range range79 = org.jfree.data.Range.combine(range68, range78);
        boolean boolean81 = range79.equals((java.lang.Object) 0L);
        boolean boolean82 = borderArrangement0.equals((java.lang.Object) range79);
        org.jfree.chart.block.Block block83 = null;
        java.lang.Object obj84 = null;
        borderArrangement0.add(block83, obj84);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 100.0d + "'", double65 == 100.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Range[0.0,10.0]" + "'", str74, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        boolean boolean20 = range2.intersects(99.0d, (-4924.0d));
        double double21 = range2.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.9898E8d), 211.0d);
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = borderArrangement0.equals((java.lang.Object) 1.0f);
        java.lang.Object obj8 = null;
        boolean boolean9 = borderArrangement0.equals(obj8);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj13 = new java.lang.Object();
        boolean boolean14 = range12.equals(obj13);
        boolean boolean17 = range12.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range20.constrain(10.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range12, range20);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, 100.0d, (double) 100);
        boolean boolean39 = range32.equals((java.lang.Object) range35);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, (double) 100);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range23, range41);
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) range23);
        borderArrangement0.clear();
        boolean boolean46 = borderArrangement0.equals((java.lang.Object) (byte) -1);
        borderArrangement0.clear();
        org.jfree.chart.block.Block block48 = null;
        org.jfree.data.Range range51 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj52 = new java.lang.Object();
        boolean boolean53 = range51.equals(obj52);
        boolean boolean56 = range51.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range51, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range61 = org.jfree.data.Range.shift(range59, (double) (short) 0);
        double double62 = range59.getUpperBound();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block48, (java.lang.Object) range59);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        double double27 = range26.getLowerBound();
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (-1));
        double double33 = range32.getUpperBound();
        boolean boolean36 = range32.intersects(50.0d, 5.0d);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range39.getLength();
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range39, (double) (short) 10);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range26, range39);
        org.jfree.data.Range range47 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double48 = range47.getLength();
        double double50 = range47.constrain(0.0d);
        java.lang.String str51 = range47.toString();
        org.jfree.data.Range range54 = org.jfree.data.Range.shift(range47, (double) (short) 1, true);
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range47, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range60 = org.jfree.data.Range.expand(range57, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range63 = org.jfree.data.Range.expand(range57, (double) (byte) 1, (double) (-1));
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range63, (double) (-1L), true);
        org.jfree.data.Range range67 = org.jfree.data.Range.combine(range44, range66);
        org.jfree.data.Range range70 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj71 = new java.lang.Object();
        boolean boolean72 = range70.equals(obj71);
        boolean boolean75 = range70.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range78 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double80 = range78.constrain(10.0d);
        org.jfree.data.Range range81 = org.jfree.data.Range.combine(range70, range78);
        org.jfree.data.Range range84 = org.jfree.data.Range.shift(range70, (double) (short) 100, false);
        java.lang.String str85 = range70.toString();
        boolean boolean86 = range66.equals((java.lang.Object) str85);
        org.jfree.data.Range range89 = org.jfree.data.Range.shift(range66, 0.0d, true);
        double double90 = range66.getCentralValue();
        org.jfree.data.Range range92 = org.jfree.data.Range.shift(range66, 0.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9899.0d) + "'", double27 == (-9899.0d));
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 99.0d + "'", double33 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Range[0.0,10.0]" + "'", str51, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 10.0d + "'", double80 == 10.0d);
        org.junit.Assert.assertNotNull(range81);
        org.junit.Assert.assertNotNull(range84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Range[0.0,10.0]" + "'", str85, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(range89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-2006.0d) + "'", double90 == (-2006.0d));
        org.junit.Assert.assertNotNull(range92);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100.0f, (double) (byte) 10);
        double double4 = range2.constrain((double) 100L);
        boolean boolean7 = range2.intersects((double) (short) 1, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, 16.0d, false);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range2, (-670.0d), 1265.0d);
        double double14 = range13.getLowerBound();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-60200.0d) + "'", double14 == (-60200.0d));
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-209948.0d), (-209948.0d));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), 118.0d);
        org.junit.Assert.assertNotNull(range5);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-6400.0d));
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 100.0d, false);
        java.lang.String str7 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 0.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, 0.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 100);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range11, (-1908.0d), 340.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-6500.0d) + "'", double3 == (-6500.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Range[100.0,-6400.0]" + "'", str7, "Range[100.0,-6400.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        boolean boolean10 = borderArrangement0.equals((java.lang.Object) '#');
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 100.0d, (double) 100);
        double double18 = range16.constrain((double) (short) 1);
        boolean boolean19 = borderArrangement0.equals((java.lang.Object) (short) 1);
        borderArrangement0.clear();
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj24 = new java.lang.Object();
        boolean boolean25 = range23.equals(obj24);
        boolean boolean28 = range23.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range31.constrain(10.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range23, range31);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range23, (double) (short) 100, false);
        java.lang.String str38 = range23.toString();
        double double40 = range23.constrain(99.0d);
        boolean boolean41 = borderArrangement0.equals((java.lang.Object) range23);
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double45 = range44.getLength();
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range44, (double) (short) 10);
        double double48 = range47.getLowerBound();
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range47, (double) 100L);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range50, (double) 100L, true);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range50, (double) 100, false);
        org.jfree.data.Range range59 = org.jfree.data.Range.shift(range50, 35.0d, true);
        double double61 = range59.constrain(0.0d);
        boolean boolean62 = borderArrangement0.equals((java.lang.Object) range59);
        java.lang.Object obj63 = null;
        boolean boolean64 = borderArrangement0.equals(obj63);
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Range[0.0,10.0]" + "'", str38, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str8 = range2.toString();
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, (double) (-1));
        double double14 = range13.getUpperBound();
        boolean boolean17 = range13.intersects(50.0d, 5.0d);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double21 = range20.getLength();
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range20, (double) (short) 10);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range20);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range2, range24);
        boolean boolean28 = range24.intersects((double) 0.0f, 15.0d);
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range24, 32.0d);
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range24, (double) ' ');
        double double34 = range32.constrain(43.0d);
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range32, (double) (-1L));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[0.0,10.0]" + "'", str8, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 99.0d + "'", double14 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 43.0d + "'", double34 == 43.0d);
        org.junit.Assert.assertNotNull(range36);
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        double double9 = range7.getLowerBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range12);
        double double20 = range7.constrain((double) (byte) 1);
        double double21 = range7.getCentralValue();
        double double22 = range7.getCentralValue();
        boolean boolean23 = borderArrangement0.equals((java.lang.Object) double22);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, (double) (byte) 0, (double) (-1L));
        double double39 = range35.getUpperBound();
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range42.getLength();
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range42, (double) (short) 10);
        double double46 = range45.getLowerBound();
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) 100L);
        boolean boolean51 = range48.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range54 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double55 = range54.getLength();
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range54, (double) (short) 10);
        double double58 = range57.getLowerBound();
        boolean boolean60 = range57.contains((double) (byte) 0);
        org.jfree.data.Range range63 = org.jfree.data.Range.shift(range57, (double) 1.0f, false);
        org.jfree.data.Range range64 = org.jfree.data.Range.combine(range48, range63);
        double double65 = range64.getLength();
        org.jfree.data.Range range68 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double70 = range68.constrain(10.0d);
        boolean boolean73 = range68.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str74 = range68.toString();
        boolean boolean75 = range64.equals((java.lang.Object) range68);
        boolean boolean76 = range35.equals((java.lang.Object) range68);
        boolean boolean77 = range29.equals((java.lang.Object) range68);
        org.jfree.data.Range range78 = null;
        org.jfree.data.Range range79 = org.jfree.data.Range.combine(range68, range78);
        boolean boolean81 = range79.equals((java.lang.Object) 0L);
        boolean boolean82 = borderArrangement0.equals((java.lang.Object) range79);
        boolean boolean84 = range79.contains(60.5d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 100.0d + "'", double65 == 100.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Range[0.0,10.0]" + "'", str74, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range5, (double) (-1));
        double double8 = range5.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, 330.0d);
        boolean boolean13 = range10.intersects(5346.0d, 12.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getLength();
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        double double16 = range15.getLowerBound();
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range15, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, 100.0d, (double) 100);
        boolean boolean25 = range18.equals((java.lang.Object) range21);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range18, (double) 1.0f, (double) 'a');
        boolean boolean29 = range9.equals((java.lang.Object) 1.0f);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range9, 43.0d, (double) (short) 10);
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range32, 9999.0d);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range34, (double) 1, 9999.0d);
        org.jfree.data.Range range40 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range40, 100.0d, (double) 100);
        double double44 = range43.getLowerBound();
        org.jfree.data.Range range47 = org.jfree.data.Range.expand(range43, (double) (byte) -1, (double) 100L);
        boolean boolean49 = range43.contains(99.0d);
        double double50 = range43.getUpperBound();
        org.jfree.data.Range range53 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range53, (double) (-1));
        double double56 = range55.getUpperBound();
        boolean boolean59 = range55.intersects(50.0d, 5.0d);
        org.jfree.data.Range range62 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double63 = range62.getLength();
        org.jfree.data.Range range65 = org.jfree.data.Range.expandToInclude(range62, (double) (short) 10);
        org.jfree.data.Range range66 = org.jfree.data.Range.combine(range55, range62);
        boolean boolean67 = range43.equals((java.lang.Object) range62);
        double double68 = range62.getCentralValue();
        org.jfree.data.Range range69 = org.jfree.data.Range.combine(range37, range62);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-9899.0d) + "'", double44 == (-9899.0d));
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10000.0d + "'", double50 == 10000.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 99.0d + "'", double56 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 10.0d + "'", double63 == 10.0d);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5.0d + "'", double68 == 5.0d);
        org.junit.Assert.assertNotNull(range69);
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        boolean boolean38 = range32.intersects((double) 1L, (double) (byte) 1);
        org.jfree.data.Range range41 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range41, (double) 0);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range32, range43);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range43, 15.0d, false);
        org.jfree.data.Range range50 = new org.jfree.data.Range(43.0d, (-1.0d));
        org.jfree.data.Range range53 = org.jfree.data.Range.expand(range50, 19757.0d, 5346.0d);
        org.jfree.data.Range range54 = org.jfree.data.Range.combine(range47, range53);
        double double55 = range54.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 26.0d + "'", double55 == 26.0d);
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range13.constrain(10.0d);
        boolean boolean17 = range13.contains((double) 1L);
        double double19 = range13.constrain((double) (short) 0);
        boolean boolean20 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getLength();
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range15, (double) (-1));
        double double18 = range15.getLength();
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, 330.0d);
        double double22 = range15.constrain((double) 10);
        double double23 = range15.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range7, range15);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = range4.equals((java.lang.Object) (byte) 100);
        double double8 = range4.getCentralValue();
        double double9 = range4.getCentralValue();
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range4, 102.0d, 132.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 50.5d + "'", double8 == 50.5d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.5d + "'", double9 == 50.5d);
        org.junit.Assert.assertNotNull(range12);
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getUpperBound();
        double double6 = range4.getCentralValue();
        double double7 = range4.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement8 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement8.clear();
        org.jfree.data.Range range12 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean13 = borderArrangement8.equals((java.lang.Object) range12);
        borderArrangement8.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double18 = range17.getLength();
        double double20 = range17.constrain(0.0d);
        java.lang.String str21 = range17.toString();
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range17, (double) (short) 1, true);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range27, (double) (byte) 1, (double) (-1));
        boolean boolean34 = borderArrangement8.equals((java.lang.Object) range33);
        java.lang.Object obj35 = null;
        boolean boolean36 = borderArrangement8.equals(obj35);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range39.getCentralValue();
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range39, (double) 0L, (double) '4');
        boolean boolean46 = range43.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean48 = range43.contains((double) 0.0f);
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range43, 10.0d);
        boolean boolean51 = borderArrangement8.equals((java.lang.Object) range43);
        org.jfree.data.Range range54 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double55 = range54.getLength();
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range54, (double) (short) 10);
        double double58 = range57.getLowerBound();
        org.jfree.data.Range range60 = org.jfree.data.Range.expandToInclude(range57, (double) 100L);
        org.jfree.data.Range range63 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range66 = org.jfree.data.Range.expand(range63, 100.0d, (double) 100);
        boolean boolean67 = range60.equals((java.lang.Object) range63);
        org.jfree.data.Range range70 = org.jfree.data.Range.expand(range60, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range72 = org.jfree.data.Range.expandToInclude(range60, (double) 100.0f);
        double double73 = range60.getCentralValue();
        boolean boolean75 = range60.equals((java.lang.Object) 0);
        org.jfree.data.Range range78 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double79 = range78.getLength();
        double double81 = range78.constrain(0.0d);
        java.lang.String str82 = range78.toString();
        org.jfree.data.Range range85 = org.jfree.data.Range.shift(range78, (double) (short) 1, true);
        org.jfree.data.Range range87 = org.jfree.data.Range.expandToInclude(range85, (double) '4');
        org.jfree.data.Range range88 = org.jfree.data.Range.combine(range60, range85);
        java.lang.String str89 = range88.toString();
        org.jfree.data.Range range92 = org.jfree.data.Range.shift(range88, 330.0d, false);
        org.jfree.data.Range range93 = org.jfree.data.Range.combine(range43, range88);
        org.jfree.data.Range range94 = org.jfree.data.Range.combine(range4, range43);
        java.lang.String str95 = range43.toString();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 99.0d + "'", double5 == 99.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 54.0d + "'", double6 == 54.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 9.0d + "'", double7 == 9.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Range[0.0,10.0]" + "'", str21, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5.0d + "'", double40 == 5.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.0d + "'", double73 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 10.0d + "'", double79 == 10.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Range[0.0,10.0]" + "'", str82, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range85);
        org.junit.Assert.assertNotNull(range87);
        org.junit.Assert.assertNotNull(range88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Range[0.0,100.0]" + "'", str89, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range92);
        org.junit.Assert.assertNotNull(range93);
        org.junit.Assert.assertNotNull(range94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Range[0.0,530.0]" + "'", str95, "Range[0.0,530.0]");
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100, 6.0d);
        java.lang.Class<?> wildcardClass3 = range2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        boolean boolean28 = borderArrangement7.equals((java.lang.Object) 50.0d);
        borderArrangement7.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getCentralValue();
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getCentralValue();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range36, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range39, (double) 100.0f);
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range44, (double) 10);
        org.jfree.data.Range range47 = org.jfree.data.Range.combine(range32, range46);
        double double48 = range46.getLowerBound();
        org.jfree.data.Range range51 = org.jfree.data.Range.shift(range46, (double) 100L, true);
        boolean boolean52 = borderArrangement7.equals((java.lang.Object) range46);
        org.jfree.chart.block.BlockContainer blockContainer53 = null;
        java.awt.Graphics2D graphics2D54 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D56 = borderArrangement7.arrange(blockContainer53, graphics2D54, rectangleConstraint55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5.0d + "'", double33 == 5.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5.0d + "'", double37 == 5.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, 50.0d);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 630.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, 137.0d);
        double double12 = range11.getUpperBound();
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj16 = new java.lang.Object();
        boolean boolean17 = range15.equals(obj16);
        boolean boolean20 = range15.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double24 = range23.getLength();
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range23, (double) (short) 10);
        double double27 = range26.getLowerBound();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) 100L);
        boolean boolean30 = range15.equals((java.lang.Object) 100L);
        double double31 = range15.getCentralValue();
        org.jfree.data.Range range34 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double35 = range34.getLength();
        double double37 = range34.constrain(0.0d);
        java.lang.String str38 = range34.toString();
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range34, (double) (short) 1, true);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range34, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range47 = org.jfree.data.Range.expand(range44, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range15, range44);
        double double50 = range15.constrain((double) 1L);
        java.lang.String str51 = range15.toString();
        boolean boolean52 = range11.equals((java.lang.Object) range15);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 147.0d + "'", double12 == 147.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5.0d + "'", double31 == 5.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Range[0.0,10.0]" + "'", str38, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Range[0.0,10.0]" + "'", str51, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range5, (double) '4', false);
        java.lang.String str15 = range5.toString();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range5, (-10.0d));
        double double18 = range17.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Range[0.0,10.0]" + "'", str15, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        double double6 = range2.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 330.0d, true);
        java.lang.String str10 = range9.toString();
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range9, 110.0d);
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range12, (double) '#');
        double double15 = range12.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Range[330.0,340.0]" + "'", str10, "Range[330.0,340.0]");
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 450.0d + "'", double15 == 450.0d);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, 50.0d);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 630.0d);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getLength();
        double double15 = range12.constrain(0.0d);
        java.lang.String str16 = range12.toString();
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, (double) (short) 1, true);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range12, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range22, (double) ' ');
        double double26 = range24.constrain((double) (short) -1);
        boolean boolean27 = range2.equals((java.lang.Object) double26);
        double double28 = range2.getLowerBound();
        double double29 = range2.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Range[0.0,10.0]" + "'", str16, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getUpperBound();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj10 = new java.lang.Object();
        boolean boolean11 = range9.equals(obj10);
        boolean boolean14 = range9.intersects(5.0d, (double) 100L);
        double double15 = range9.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range9, 0.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range2, range17);
        double double19 = range17.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5.0d + "'", double19 == 5.0d);
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, (double) 100.0f);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 10);
        java.lang.String str13 = range10.toString();
        boolean boolean16 = range10.intersects(6800.0d, (-2.0d));
        double double17 = range10.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[101.0,111.0]" + "'", str13, "Range[101.0,111.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 101.0d + "'", double17 == 101.0d);
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 100L, (double) (short) 0);
        double double10 = range2.getUpperBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double14 = range13.getCentralValue();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range13, (double) 1);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range13, (double) 'a');
        boolean boolean20 = range13.equals((java.lang.Object) 10);
        boolean boolean22 = range13.contains((double) 1.0f);
        boolean boolean25 = range13.intersects(10.0d, (double) 0);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range2, range13);
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range26, 51.0d);
        double double29 = range26.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5.0d + "'", double14 == 5.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5.0d + "'", double29 == 5.0d);
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range34, (double) '4');
        java.lang.String str41 = range40.toString();
        java.lang.String str42 = range40.toString();
        org.jfree.data.Range range45 = org.jfree.data.Range.expand(range40, (double) 10L, (-164.5d));
        boolean boolean48 = range45.intersects(5048.5d, (double) (byte) -1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Range[52.0,152.0]" + "'", str41, "Range[52.0,152.0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Range[52.0,152.0]" + "'", str42, "Range[52.0,152.0]");
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        boolean boolean11 = range9.contains((double) 0L);
        double double13 = range9.constrain(50.5d);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range9, (double) 1.0f);
        boolean boolean17 = range15.contains((-235.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 11.0d + "'", double13 == 11.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        org.jfree.data.Range range2 = new org.jfree.data.Range(19757.0d, 1026.0d);
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        double double8 = range2.getUpperBound();
        boolean boolean10 = range2.contains(330.0d);
        java.lang.String str11 = range2.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[0.0,10.0]" + "'", str11, "Range[0.0,10.0]");
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range5, 100.0d);
        boolean boolean15 = range5.intersects((double) 100.0f, 1.0d);
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, 100.0d, (double) 100);
        boolean boolean31 = range24.equals((java.lang.Object) range27);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range24, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range24, (double) 100.0f);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        boolean boolean41 = range5.equals((java.lang.Object) range40);
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range5, 5018543.0d);
        double double44 = range43.getCentralValue();
        java.lang.Class<?> wildcardClass45 = range43.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2504322.0d + "'", double44 == 2504322.0d);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1340.0d, 16.0d);
        double double3 = range2.getUpperBound();
        double double4 = range2.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 16.0d + "'", double3 == 16.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1340.0d + "'", double4 == 1340.0d);
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, (double) 100L, true);
        double double12 = range11.getLength();
        double double13 = range11.getCentralValue();
        double double14 = range11.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range11, (double) (byte) -1);
        boolean boolean18 = range16.contains(6.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 150.0d + "'", double13 == 150.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        double double5 = range2.getLowerBound();
        boolean boolean8 = range2.intersects((double) (byte) 0, 0.0d);
        double double10 = range2.constrain((double) (byte) -1);
        double double11 = range2.getUpperBound();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range2, 1011.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range2, 10097.0d);
        boolean boolean17 = range15.contains((-3011.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (double) (byte) 0, 100.0d);
        double double9 = range8.getUpperBound();
        double double11 = range8.constrain(71.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range8, 10100.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1011.0d + "'", double9 == 1011.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 71.0d + "'", double11 == 71.0d);
        org.junit.Assert.assertNotNull(range13);
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        java.lang.String str4 = range2.toString();
        double double5 = range2.getCentralValue();
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 1.0d);
        double double9 = range2.constrain((double) (short) 1);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (double) (short) 0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Range[100.0,1.0]" + "'", str4, "Range[100.0,1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 50.5d + "'", double5 == 50.5d);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range11);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range8, (double) 0.0f, false);
        java.lang.String str28 = range8.toString();
        double double29 = range8.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range8, 92.5d, (-1000.0d));
        boolean boolean34 = range8.contains(3310.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[0.0,100.0]" + "'", str28, "Range[0.0,100.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, 10.0d);
        java.lang.String str3 = range2.toString();
        double double4 = range2.getLowerBound();
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Range[10.0,10.0]" + "'", str3, "Range[10.0,10.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1010.0d, 35.0d);
        java.lang.String str3 = range2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Range[1010.0,35.0]" + "'", str3, "Range[1010.0,35.0]");
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        boolean boolean10 = borderArrangement0.equals((java.lang.Object) '#');
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 100.0d, (double) 100);
        double double18 = range16.constrain((double) (short) 1);
        boolean boolean19 = borderArrangement0.equals((java.lang.Object) (short) 1);
        borderArrangement0.clear();
        java.lang.Object obj21 = null;
        boolean boolean22 = borderArrangement0.equals(obj21);
        org.jfree.data.Range range25 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj26 = new java.lang.Object();
        boolean boolean27 = range25.equals(obj26);
        boolean boolean30 = range25.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double35 = range33.constrain(10.0d);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range25, range33);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range39.getLength();
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range39, (double) (short) 10);
        double double43 = range42.getLowerBound();
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range42, (double) 100L);
        org.jfree.data.Range range48 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range48, 100.0d, (double) 100);
        boolean boolean52 = range45.equals((java.lang.Object) range48);
        org.jfree.data.Range range54 = org.jfree.data.Range.shift(range45, (double) 100);
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range36, range54);
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range55, (double) ' ', 1.0d);
        java.lang.String str59 = range55.toString();
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range55, (double) 1L);
        boolean boolean62 = borderArrangement0.equals((java.lang.Object) range61);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Range[0.0,200.0]" + "'", str59, "Range[0.0,200.0]");
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) (short) 100, false);
        java.lang.String str17 = range2.toString();
        double double19 = range2.constrain(99.0d);
        java.lang.String str20 = range2.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[0.0,10.0]" + "'", str17, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Range[0.0,10.0]" + "'", str20, "Range[0.0,10.0]");
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range5, (double) '4', false);
        org.jfree.data.Range range17 = new org.jfree.data.Range(50.5d, (double) ' ');
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range14, range17);
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range17, (double) (byte) 1, false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getLength();
        double double12 = range9.constrain(0.0d);
        java.lang.String str13 = range9.toString();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, (double) (short) 1, true);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range9, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range19, (double) (byte) 1, (double) (-1));
        boolean boolean26 = borderArrangement0.equals((java.lang.Object) range25);
        java.lang.Object obj27 = null;
        boolean boolean28 = borderArrangement0.equals(obj27);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range31.getCentralValue();
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range31, (double) 0L, (double) '4');
        boolean boolean38 = range35.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean40 = range35.contains((double) 0.0f);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range35, 10.0d);
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) range35);
        org.jfree.data.Range range46 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double47 = range46.getLength();
        org.jfree.data.Range range49 = org.jfree.data.Range.expandToInclude(range46, (double) (short) 10);
        double double50 = range49.getLowerBound();
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range49, (double) 100L);
        org.jfree.data.Range range55 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range55, 100.0d, (double) 100);
        boolean boolean59 = range52.equals((java.lang.Object) range55);
        org.jfree.data.Range range62 = org.jfree.data.Range.expand(range52, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range64 = org.jfree.data.Range.expandToInclude(range52, (double) 100.0f);
        double double65 = range52.getCentralValue();
        boolean boolean67 = range52.equals((java.lang.Object) 0);
        org.jfree.data.Range range70 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double71 = range70.getLength();
        double double73 = range70.constrain(0.0d);
        java.lang.String str74 = range70.toString();
        org.jfree.data.Range range77 = org.jfree.data.Range.shift(range70, (double) (short) 1, true);
        org.jfree.data.Range range79 = org.jfree.data.Range.expandToInclude(range77, (double) '4');
        org.jfree.data.Range range80 = org.jfree.data.Range.combine(range52, range77);
        java.lang.String str81 = range80.toString();
        org.jfree.data.Range range84 = org.jfree.data.Range.shift(range80, 330.0d, false);
        org.jfree.data.Range range85 = org.jfree.data.Range.combine(range35, range80);
        org.jfree.data.Range range88 = org.jfree.data.Range.shift(range85, 16.0d, true);
        boolean boolean90 = range85.contains(5346.0d);
        java.lang.Class<?> wildcardClass91 = range85.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,10.0]" + "'", str13, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5.0d + "'", double32 == 5.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 50.0d + "'", double65 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Range[0.0,10.0]" + "'", str74, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Range[0.0,100.0]" + "'", str81, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range84);
        org.junit.Assert.assertNotNull(range85);
        org.junit.Assert.assertNotNull(range88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        boolean boolean11 = range9.contains((double) 0L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range9, 20.0d, (-445.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(range14);
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        org.jfree.data.Range range29 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range29, (double) 0);
        java.lang.String str32 = range31.toString();
        boolean boolean33 = borderArrangement7.equals((java.lang.Object) range31);
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj37 = new java.lang.Object();
        boolean boolean38 = range36.equals(obj37);
        boolean boolean41 = range36.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range36, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range36, (double) (short) -1);
        boolean boolean47 = borderArrangement7.equals((java.lang.Object) range36);
        boolean boolean49 = borderArrangement7.equals((java.lang.Object) (-1001.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Range[11.0,-1.0]" + "'", str32, "Range[11.0,-1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        double double36 = range32.getCentralValue();
        double double38 = range32.constrain(71.0d);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, 6676175.0d, false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 71.0d + "'", double38 == 71.0d);
        org.junit.Assert.assertNotNull(range41);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range3 = org.jfree.data.Range.expand(range0, 165.0d, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'range' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 0);
        java.lang.String str3 = range2.toString();
        double double4 = range2.getUpperBound();
        double double5 = range2.getLength();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Range[0.0,0.0]" + "'", str3, "Range[0.0,0.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj10 = new java.lang.Object();
        boolean boolean11 = range9.equals(obj10);
        boolean boolean12 = borderArrangement0.equals(obj10);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.Block block16 = null;
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range19, (double) (-1));
        double double22 = range21.getUpperBound();
        boolean boolean25 = range21.intersects(50.0d, 5.0d);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range21, range28);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range28, 1.0d, false);
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range35, (double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range37, 71.0d);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block16, (java.lang.Object) range37);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 99.0d + "'", double22 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range39);
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        double double37 = range33.getUpperBound();
        org.jfree.data.Range range40 = new org.jfree.data.Range((double) (byte) 100, (double) '#');
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range33, range40);
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range41, 488.0d, false);
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range41, (-6400.0d));
        org.jfree.data.Range range49 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range52 = org.jfree.data.Range.expand(range49, 100.0d, (double) 100);
        double double54 = range52.constrain((double) (short) 1);
        boolean boolean56 = range52.contains((double) '4');
        double double57 = range52.getLowerBound();
        org.jfree.data.Range range59 = org.jfree.data.Range.shift(range52, 100.0d);
        boolean boolean61 = range59.contains((double) (byte) -1);
        org.jfree.data.Range range62 = org.jfree.data.Range.combine(range46, range59);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 11.0d + "'", double37 == 11.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-9899.0d) + "'", double57 == (-9899.0d));
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(range62);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str8 = range2.toString();
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) (-1));
        boolean boolean17 = range2.equals((java.lang.Object) range14);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range14, 6676165.0d, true);
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj24 = new java.lang.Object();
        boolean boolean25 = range23.equals(obj24);
        boolean boolean28 = range23.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range31.constrain(10.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range23, range31);
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double38 = range37.getLength();
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range37, (double) (short) 10);
        double double41 = range40.getLowerBound();
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range40, (double) 100L);
        org.jfree.data.Range range46 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range49 = org.jfree.data.Range.expand(range46, 100.0d, (double) 100);
        boolean boolean50 = range43.equals((java.lang.Object) range46);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range43, (double) 100);
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range34, range52);
        org.jfree.data.Range range56 = org.jfree.data.Range.expand(range53, (double) ' ', 1.0d);
        boolean boolean58 = range53.contains((-1.0d));
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range14, range53);
        org.jfree.data.Range range62 = org.jfree.data.Range.expand(range53, 33.0d, 57.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[0.0,10.0]" + "'", str8, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range62);
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        double double13 = range12.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean17 = range12.equals((java.lang.Object) range16);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range20, (double) (-1));
        double double23 = range22.getUpperBound();
        double double24 = range22.getCentralValue();
        double double25 = range22.getLowerBound();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range28.constrain(10.0d);
        double double31 = range28.getUpperBound();
        java.lang.String str32 = range28.toString();
        boolean boolean33 = range22.equals((java.lang.Object) str32);
        double double34 = range22.getLowerBound();
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range16, range22);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range22, (-1000.0d));
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range37, (-3000.0d), false);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range37, (double) '#');
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 330.0d + "'", double13 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 99.0d + "'", double23 == 99.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 54.0d + "'", double24 == 54.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 9.0d + "'", double25 == 9.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Range[0.0,10.0]" + "'", str32, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 9.0d + "'", double34 == 9.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        borderArrangement0.clear();
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj9 = new java.lang.Object();
        boolean boolean10 = range8.equals(obj9);
        boolean boolean13 = range8.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double18 = range16.constrain(10.0d);
        org.jfree.data.Range range19 = org.jfree.data.Range.combine(range8, range16);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        double double26 = range25.getLowerBound();
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range25, (double) 100L);
        org.jfree.data.Range range31 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, 100.0d, (double) 100);
        boolean boolean35 = range28.equals((java.lang.Object) range31);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range28, (double) 100);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range19, range37);
        org.jfree.data.Range range41 = org.jfree.data.Range.expand(range38, (double) ' ', 1.0d);
        boolean boolean43 = range38.contains((-1.0d));
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range38, 0.0d);
        boolean boolean48 = range38.intersects((double) (-1.0f), 530.0d);
        org.jfree.data.Range range50 = org.jfree.data.Range.shift(range38, 54.0d);
        org.jfree.data.Range range53 = org.jfree.data.Range.expand(range50, 107.0d, 67.5d);
        boolean boolean54 = borderArrangement0.equals((java.lang.Object) 107.0d);
        org.jfree.data.Range range57 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double58 = range57.getLength();
        double double60 = range57.constrain(0.0d);
        java.lang.String str61 = range57.toString();
        org.jfree.data.Range range64 = org.jfree.data.Range.shift(range57, (double) (short) 1, true);
        boolean boolean65 = borderArrangement0.equals((java.lang.Object) (short) 1);
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Range[0.0,10.0]" + "'", str61, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = borderArrangement0.equals((java.lang.Object) 1.0f);
        java.lang.Object obj8 = null;
        boolean boolean9 = borderArrangement0.equals(obj8);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj13 = new java.lang.Object();
        boolean boolean14 = range12.equals(obj13);
        boolean boolean17 = range12.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range20.constrain(10.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range12, range20);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, 100.0d, (double) 100);
        boolean boolean39 = range32.equals((java.lang.Object) range35);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, (double) 100);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range23, range41);
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) range23);
        java.lang.Object obj44 = new java.lang.Object();
        boolean boolean45 = borderArrangement0.equals(obj44);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (byte) 0, (double) (-1L));
        double double23 = range19.getUpperBound();
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        boolean boolean35 = range32.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double39 = range38.getLength();
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range38, (double) (short) 10);
        double double42 = range41.getLowerBound();
        boolean boolean44 = range41.contains((double) (byte) 0);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range41, (double) 1.0f, false);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range32, range47);
        double double49 = range48.getLength();
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double54 = range52.constrain(10.0d);
        boolean boolean57 = range52.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str58 = range52.toString();
        boolean boolean59 = range48.equals((java.lang.Object) range52);
        boolean boolean60 = range19.equals((java.lang.Object) range52);
        boolean boolean61 = range13.equals((java.lang.Object) range52);
        boolean boolean62 = borderArrangement3.equals((java.lang.Object) range13);
        borderArrangement3.clear();
        org.jfree.chart.block.Block block64 = null;
        org.jfree.data.Range range67 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double68 = range67.getUpperBound();
        java.lang.String str69 = range67.toString();
        org.jfree.data.Range range71 = org.jfree.data.Range.expandToInclude(range67, 0.0d);
        org.jfree.data.Range range73 = org.jfree.data.Range.expandToInclude(range71, (double) 1L);
        boolean boolean75 = range73.contains(0.0d);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement3.add(block64, (java.lang.Object) range73);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Range[0.0,10.0]" + "'", str58, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Range[100.0,1.0]" + "'", str69, "Range[100.0,1.0]");
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 254.0d);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), 148.0d);
        org.junit.Assert.assertNotNull(range5);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (byte) 0, (double) (-1L));
        double double15 = range11.getUpperBound();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean27 = range24.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        double double41 = range40.getLength();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        boolean boolean49 = range44.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str50 = range44.toString();
        boolean boolean51 = range40.equals((java.lang.Object) range44);
        boolean boolean52 = range11.equals((java.lang.Object) range44);
        boolean boolean53 = range5.equals((java.lang.Object) range44);
        org.jfree.data.Range range54 = null;
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range44, range54);
        double double57 = range44.constrain((double) (short) 1);
        double double58 = range44.getLength();
        double double59 = range44.getUpperBound();
        double double61 = range44.constrain(0.0d);
        double double63 = range44.constrain(10.0d);
        boolean boolean66 = range44.intersects(39.0d, 1551.0d);
        double double67 = range44.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,10.0]" + "'", str50, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 10.0d + "'", double63 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1, 19.0d);
        boolean boolean14 = borderArrangement0.equals((java.lang.Object) range13);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 265.0d);
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range2, range10);
        double double12 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean9 = range2.equals((java.lang.Object) 10);
        boolean boolean11 = range2.contains((double) 1.0f);
        double double12 = range2.getUpperBound();
        double double13 = range2.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        double double28 = range27.getLowerBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) 100L);
        boolean boolean31 = range16.equals((java.lang.Object) 100L);
        boolean boolean33 = range16.contains(35.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range2, range16);
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj38 = new java.lang.Object();
        boolean boolean39 = range37.equals(obj38);
        boolean boolean42 = range37.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range45.getLength();
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) (short) 10);
        double double49 = range48.getLowerBound();
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range48, (double) 100L);
        boolean boolean52 = range37.equals((java.lang.Object) 100L);
        boolean boolean54 = range37.contains((double) (byte) 100);
        double double55 = range37.getUpperBound();
        org.jfree.data.Range range56 = org.jfree.data.Range.combine(range34, range37);
        double double57 = range34.getLength();
        org.jfree.data.Range range60 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj61 = new java.lang.Object();
        boolean boolean62 = range60.equals(obj61);
        boolean boolean65 = range60.intersects(1.0d, (double) (short) 10);
        double double66 = range60.getUpperBound();
        double double68 = range60.constrain(10.0d);
        org.jfree.data.Range range69 = org.jfree.data.Range.combine(range34, range60);
        org.jfree.data.Range range72 = org.jfree.data.Range.expand(range60, 0.0d, (-1.0d));
        java.lang.String str73 = range60.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 10.0d + "'", double68 == 10.0d);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Range[0.0,10.0]" + "'", str73, "Range[0.0,10.0]");
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        boolean boolean28 = borderArrangement7.equals((java.lang.Object) 50.0d);
        borderArrangement7.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range32.constrain(10.0d);
        boolean boolean37 = range32.intersects((double) 10.0f, (double) (-1.0f));
        double double39 = range32.constrain(0.0d);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range32, (double) 0.0f, (double) ' ');
        double double43 = range42.getUpperBound();
        org.jfree.data.Range range46 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean47 = range42.equals((java.lang.Object) range46);
        boolean boolean48 = borderArrangement7.equals((java.lang.Object) boolean47);
        boolean boolean50 = borderArrangement7.equals((java.lang.Object) "");
        org.jfree.data.Range range53 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double54 = range53.getCentralValue();
        double double55 = range53.getLowerBound();
        org.jfree.data.Range range58 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double59 = range58.getCentralValue();
        org.jfree.data.Range range61 = org.jfree.data.Range.shift(range58, (double) 1);
        org.jfree.data.Range range63 = org.jfree.data.Range.expandToInclude(range58, (double) (short) 10);
        org.jfree.data.Range range64 = org.jfree.data.Range.combine(range53, range58);
        boolean boolean65 = borderArrangement7.equals((java.lang.Object) range53);
        org.jfree.data.Range range68 = new org.jfree.data.Range(300.0d, 136.0d);
        boolean boolean69 = borderArrangement7.equals((java.lang.Object) 136.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 330.0d + "'", double43 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 5.0d + "'", double54 == 5.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 5.0d + "'", double59 == 5.0d);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        double double9 = range7.getLowerBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range12);
        double double20 = range7.constrain((double) (byte) 1);
        double double21 = range7.getCentralValue();
        double double22 = range7.getCentralValue();
        boolean boolean23 = borderArrangement0.equals((java.lang.Object) double22);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range32, (double) 100L, true);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range32, (double) 100, false);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, 35.0d, true);
        boolean boolean42 = borderArrangement0.equals((java.lang.Object) range41);
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double47 = range45.constrain(10.0d);
        boolean boolean50 = range45.intersects((double) 10.0f, (double) (-1.0f));
        double double52 = range45.constrain(0.0d);
        double double54 = range45.constrain((double) (short) 10);
        org.jfree.data.Range range56 = org.jfree.data.Range.expandToInclude(range45, (-6400.0d));
        org.jfree.data.Range range58 = org.jfree.data.Range.expandToInclude(range45, 52.0d);
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range41, range45);
        boolean boolean61 = range59.contains(101.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        double double13 = range12.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean17 = range12.equals((java.lang.Object) range16);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range20, (double) (-1));
        double double23 = range22.getUpperBound();
        double double24 = range22.getCentralValue();
        double double25 = range22.getLowerBound();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range28.constrain(10.0d);
        double double31 = range28.getUpperBound();
        java.lang.String str32 = range28.toString();
        boolean boolean33 = range22.equals((java.lang.Object) str32);
        double double34 = range22.getLowerBound();
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range16, range22);
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range16, 19899.0d);
        double double39 = range37.constrain((-6500.0d));
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range37, (double) 100);
        double double42 = range37.getUpperBound();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 330.0d + "'", double13 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 99.0d + "'", double23 == 99.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 54.0d + "'", double24 == 54.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 9.0d + "'", double25 == 9.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Range[0.0,10.0]" + "'", str32, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 9.0d + "'", double34 == 9.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 142.0d + "'", double39 == 142.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 19899.0d + "'", double42 == 19899.0d);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1.0f, 10000.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 0);
        double double5 = range2.getLength();
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 'a', false);
        double double9 = range8.getCentralValue();
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range8, (double) 0.0f, 20.0d);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range8, (double) (short) 1);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, 20.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 9999.0d + "'", double5 == 9999.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5097.5d + "'", double9 == 5097.5d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        org.jfree.data.Range range6 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range6, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range9);
        java.lang.String str14 = range13.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.0d + "'", double7 == 5.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[1.0,11.0]" + "'", str14, "Range[1.0,11.0]");
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        org.jfree.data.Range range2 = new org.jfree.data.Range(20.0d, (-3.3380139E7d));
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        org.jfree.data.Range range29 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range29, (double) 0);
        java.lang.String str32 = range31.toString();
        boolean boolean33 = borderArrangement7.equals((java.lang.Object) range31);
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getLength();
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range36, (double) (short) 10);
        double double40 = range39.getLowerBound();
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range39, (double) 100L);
        org.jfree.data.Range range45 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range45, 100.0d, (double) 100);
        boolean boolean49 = range42.equals((java.lang.Object) range45);
        org.jfree.data.Range range52 = org.jfree.data.Range.expand(range42, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range42, (double) 100.0f);
        double double55 = range42.getCentralValue();
        boolean boolean57 = range42.equals((java.lang.Object) 0);
        org.jfree.data.Range range60 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double61 = range60.getLength();
        double double63 = range60.constrain(0.0d);
        java.lang.String str64 = range60.toString();
        org.jfree.data.Range range67 = org.jfree.data.Range.shift(range60, (double) (short) 1, true);
        org.jfree.data.Range range69 = org.jfree.data.Range.expandToInclude(range67, (double) '4');
        org.jfree.data.Range range70 = org.jfree.data.Range.combine(range42, range67);
        double double71 = range67.getLowerBound();
        org.jfree.data.Range range74 = org.jfree.data.Range.expand(range67, 6676165.0d, 136.0d);
        boolean boolean75 = borderArrangement7.equals((java.lang.Object) 6676165.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Range[11.0,-1.0]" + "'", str32, "Range[11.0,-1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 50.0d + "'", double55 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Range[0.0,10.0]" + "'", str64, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.chart.block.Block block5 = null;
        org.jfree.data.Range range6 = null;
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        borderArrangement0.add(block5, (java.lang.Object) range6);
        org.jfree.data.Range range12 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean14 = range12.contains((double) 1L);
        boolean boolean17 = range12.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, 265.0d);
        boolean boolean20 = borderArrangement0.equals((java.lang.Object) 265.0d);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) (byte) 100, 101.0d);
        boolean boolean24 = borderArrangement0.equals((java.lang.Object) (byte) 100);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.Block block27 = null;
        java.lang.Object obj28 = null;
        borderArrangement0.add(block27, obj28);
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj33 = new java.lang.Object();
        boolean boolean34 = range32.equals(obj33);
        boolean boolean37 = range32.intersects(5.0d, (double) 100L);
        double double38 = range32.getLength();
        java.lang.String str39 = range32.toString();
        double double40 = range32.getLength();
        boolean boolean41 = borderArrangement0.equals((java.lang.Object) double40);
        org.jfree.chart.block.Block block42 = null;
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 0);
        java.lang.String str46 = range45.toString();
        double double47 = range45.getUpperBound();
        double double48 = range45.getUpperBound();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block42, (java.lang.Object) double48);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Range[0.0,10.0]" + "'", str39, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Range[0.0,0.0]" + "'", str46, "Range[0.0,0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        boolean boolean40 = range34.contains((double) 0.0f);
        org.jfree.data.Range range43 = new org.jfree.data.Range((double) (byte) 100, 101.0d);
        boolean boolean44 = range34.equals((java.lang.Object) range43);
        double double45 = range34.getLength();
        java.lang.String str46 = range34.toString();
        double double47 = range34.getLowerBound();
        java.lang.String str48 = range34.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Range[0.0,100.0]" + "'", str46, "Range[0.0,100.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Range[0.0,100.0]" + "'", str48, "Range[0.0,100.0]");
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, (double) 100L, true);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range8, (double) 100, false);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range8, 35.0d, true);
        double double19 = range8.constrain(1286.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range24, 1011.0d, false);
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range41, (-12.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range43);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range34 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double35 = range34.getLength();
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range34, (double) (short) 10);
        double double38 = range37.getLowerBound();
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range37, (double) 100L);
        org.jfree.data.Range range43 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range43, 100.0d, (double) 100);
        boolean boolean47 = range40.equals((java.lang.Object) range43);
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range40, (double) 1.0f, (double) 'a');
        double double51 = range40.getLength();
        boolean boolean52 = borderArrangement0.equals((java.lang.Object) range40);
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 100.0d + "'", double51 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getCentralValue();
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        double double24 = range21.constrain(0.0d);
        java.lang.String str25 = range21.toString();
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range21, (double) (short) 1, true);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range21, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range2, range31);
        double double37 = range2.constrain((double) 1L);
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range2, (double) 'a');
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range42.getCentralValue();
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range42, (double) 1);
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range42, 50.0d);
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range47, (-6400.0d), 107.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range47, 67.5d);
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range2, range52);
        double double54 = range2.getLowerBound();
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range2, (double) (byte) 100, 0.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Range[0.0,10.0]" + "'", str25, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5.0d + "'", double43 == 5.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(range57);
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double9 = range8.getLength();
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range8, (double) (short) 10);
        double double12 = range11.getLowerBound();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) 100L);
        boolean boolean15 = borderArrangement0.equals((java.lang.Object) 100L);
        borderArrangement0.clear();
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double21 = range19.constrain(10.0d);
        boolean boolean24 = range19.intersects((double) 10.0f, (double) (-1.0f));
        boolean boolean26 = range19.contains((double) 0);
        double double27 = range19.getCentralValue();
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range19);
        borderArrangement0.clear();
        java.lang.Class<?> wildcardClass30 = borderArrangement0.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5.0d + "'", double27 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range5, (double) (byte) -1, (double) 100L);
        boolean boolean11 = range5.contains(99.0d);
        double double12 = range5.getUpperBound();
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range5, 9999.0d, 335.0d);
        double double16 = range5.getCentralValue();
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj20 = new java.lang.Object();
        boolean boolean21 = range19.equals(obj20);
        boolean boolean24 = range19.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range27.constrain(10.0d);
        org.jfree.data.Range range30 = org.jfree.data.Range.combine(range19, range27);
        double double31 = range19.getLength();
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range5, range19);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9899.0d) + "'", double6 == (-9899.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10000.0d + "'", double12 == 10000.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.5d + "'", double16 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range32);
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (double) (byte) 10, 6676175.0d);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range15, (-1001.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        boolean boolean28 = borderArrangement7.equals((java.lang.Object) 50.0d);
        borderArrangement7.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range32.constrain(10.0d);
        boolean boolean37 = range32.intersects((double) 10.0f, (double) (-1.0f));
        double double39 = range32.constrain(0.0d);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range32, (double) 0.0f, (double) ' ');
        double double43 = range42.getUpperBound();
        org.jfree.data.Range range46 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean47 = range42.equals((java.lang.Object) range46);
        boolean boolean48 = borderArrangement7.equals((java.lang.Object) boolean47);
        boolean boolean50 = borderArrangement7.equals((java.lang.Object) "");
        org.jfree.data.Range range53 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double54 = range53.getLength();
        double double56 = range53.constrain(0.0d);
        java.lang.String str57 = range53.toString();
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range53, (double) (short) 1, true);
        boolean boolean62 = range60.contains((double) 0L);
        java.lang.String str63 = range60.toString();
        org.jfree.data.Range range66 = org.jfree.data.Range.expand(range60, (double) '4', (double) (short) 100);
        boolean boolean67 = borderArrangement7.equals((java.lang.Object) '4');
        borderArrangement7.clear();
        borderArrangement7.clear();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 330.0d + "'", double43 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Range[0.0,10.0]" + "'", str57, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Range[1.0,11.0]" + "'", str63, "Range[1.0,11.0]");
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        double double27 = range26.getLowerBound();
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (-1));
        double double33 = range32.getUpperBound();
        boolean boolean36 = range32.intersects(50.0d, 5.0d);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range39.getLength();
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range39, (double) (short) 10);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range26, range39);
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range26, 132.0d);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range46, 107.0d, true);
        org.jfree.data.Range range52 = org.jfree.data.Range.expand(range49, 33.0d, (-9899.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9899.0d) + "'", double27 == (-9899.0d));
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 99.0d + "'", double33 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range52);
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double6 = range5.getLowerBound();
        double double7 = range5.getLowerBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range5, 1.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range9, (-11.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9899.0d) + "'", double6 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9899.0d) + "'", double7 == (-9899.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 0, (double) (byte) 10);
        boolean boolean5 = range2.intersects((double) (short) 10, (double) 10.0f);
        double double6 = range2.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        java.lang.String str36 = range32.toString();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) 1L);
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range32, (-100.0d));
        double double41 = range32.getLowerBound();
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range32, 0.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Range[0.0,200.0]" + "'", str36, "Range[0.0,200.0]");
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(range43);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1551.0d, 169192.0d);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean11 = range6.contains((double) 1.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range6, 15.0d);
        java.lang.String str14 = range13.toString();
        boolean boolean17 = range13.intersects(300.0d, (-235.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[15.0,545.0]" + "'", str14, "Range[15.0,545.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range6, 10.0d, false);
        double double29 = range6.getCentralValue();
        double double30 = range6.getCentralValue();
        double double31 = range6.getLength();
        double double33 = range6.constrain((-9899.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 265.0d + "'", double29 == 265.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 265.0d + "'", double30 == 265.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 530.0d + "'", double31 == 530.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        double double3 = range2.getUpperBound();
        org.jfree.data.Range range6 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range6.getLength();
        double double9 = range6.constrain(0.0d);
        java.lang.String str10 = range6.toString();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range6, (double) (short) 1, true);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range13, (double) '4');
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range2, range13);
        double double18 = range16.constrain(107.0d);
        double double20 = range16.constrain(10.0d);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, 100.0d, (double) 100);
        double double28 = range26.constrain((double) (short) 1);
        boolean boolean30 = range26.contains((double) '4');
        double double31 = range26.getLowerBound();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, 100.0d);
        boolean boolean36 = range26.intersects((double) 100.0f, 1.0d);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range39.getLength();
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range39, (double) (short) 10);
        double double43 = range42.getLowerBound();
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range42, (double) 100L);
        org.jfree.data.Range range48 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range48, 100.0d, (double) 100);
        boolean boolean52 = range45.equals((java.lang.Object) range48);
        org.jfree.data.Range range55 = org.jfree.data.Range.expand(range45, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range45, (double) 100.0f);
        org.jfree.data.Range range60 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range61 = org.jfree.data.Range.combine(range45, range60);
        boolean boolean62 = range26.equals((java.lang.Object) range61);
        org.jfree.data.Range range65 = org.jfree.data.Range.shift(range26, 0.0d, false);
        org.jfree.data.Range range68 = org.jfree.data.Range.expand(range65, (-164.5d), 5018543.0d);
        org.jfree.data.Range range69 = org.jfree.data.Range.combine(range16, range68);
        org.jfree.data.Range range72 = org.jfree.data.Range.shift(range68, 10009.0d, false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Range[0.0,10.0]" + "'", str10, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9899.0d) + "'", double31 == (-9899.0d));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertNotNull(range72);
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(1.0d, (double) (short) 10);
        double double8 = range2.getUpperBound();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range2, (double) (byte) 0);
        java.lang.String str11 = range2.toString();
        boolean boolean14 = range2.intersects(375.0d, 1286.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[0.0,10.0]" + "'", str11, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (-1.0f));
        org.jfree.chart.block.Block block5 = null;
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range8.constrain(10.0d);
        boolean boolean13 = range8.intersects((double) 10.0f, (double) (-1.0f));
        double double15 = range8.constrain(0.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 0.0f, (double) ' ');
        double double19 = range18.getUpperBound();
        org.jfree.data.Range range22 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean23 = range18.equals((java.lang.Object) range22);
        org.jfree.data.Range range26 = new org.jfree.data.Range(11.0d, (-1.0d));
        double double27 = range26.getCentralValue();
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range18, range26);
        org.jfree.data.Range range31 = new org.jfree.data.Range(99.0d, (double) (byte) -1);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range26, range31);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block5, (java.lang.Object) range32);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 330.0d + "'", double19 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5.0d + "'", double27 == 5.0d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range32);
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getLength();
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range9, (double) (short) 10);
        double double13 = range12.getLowerBound();
        boolean boolean15 = range12.contains((double) (byte) 0);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range12, (double) 1.0f, false);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range18, (double) (short) 1, (double) (-1L));
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, 55.0d, 254.0d);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, (double) 100L, true);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range8, (double) 100, false);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range8, 35.0d, true);
        double double19 = range17.constrain(0.0d);
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range17, 1011.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertNotNull(range21);
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) (-1L));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 49.0d, 10.0d);
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range8.constrain(10.0d);
        boolean boolean13 = range8.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str14 = range8.toString();
        double double16 = range8.constrain((double) 100L);
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range2, range8);
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range8, (double) (-1.0f));
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range8, 150.0d, 5.5d);
        double double23 = range8.getLength();
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range8, 110.0d, 1286.0d);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range26, 19757.0d, 195.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[0.0,10.0]" + "'", str14, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range29);
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1.0072878E7d, 195.0d);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double9 = range8.getLength();
        double double11 = range8.constrain(0.0d);
        java.lang.String str12 = range8.toString();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range8, (double) (short) 1, true);
        double double16 = range15.getLowerBound();
        boolean boolean19 = range15.intersects((double) 0, (double) 10);
        org.jfree.data.Range range20 = org.jfree.data.Range.combine(range2, range15);
        double double21 = range15.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Range[0.0,10.0]" + "'", str12, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 11.0d + "'", double21 == 11.0d);
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range6, 90.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range6, 10000.0d);
        double double12 = range6.getCentralValue();
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range6, 51.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 265.0d + "'", double7 == 265.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 265.0d + "'", double12 == 265.0d);
        org.junit.Assert.assertNotNull(range14);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (-1L), (double) (short) 100);
        boolean boolean4 = range2.contains((double) 1);
        org.jfree.data.Range range7 = new org.jfree.data.Range((double) (byte) 10, 82.5d);
        org.jfree.data.Range range8 = org.jfree.data.Range.combine(range2, range7);
        double double9 = range8.getUpperBound();
        double double10 = range8.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getCentralValue();
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range14, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range17, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) 10);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range10, range24);
        boolean boolean28 = range10.intersects(150.0d, (double) 'a');
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range10, (double) 100, 19.0d);
        boolean boolean32 = borderArrangement0.equals((java.lang.Object) range10);
        borderArrangement0.clear();
        org.jfree.chart.block.BlockContainer blockContainer34 = null;
        java.awt.Graphics2D graphics2D35 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D37 = borderArrangement0.arrange(blockContainer34, graphics2D35, rectangleConstraint36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5.0d + "'", double15 == 5.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        org.jfree.data.Range range2 = new org.jfree.data.Range(9999.0d, 90.0d);
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        borderArrangement3.clear();
        org.jfree.data.Range range33 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.expand(range33, 0.0d, (double) (-1L));
        double double37 = range36.getLength();
        java.lang.String str38 = range36.toString();
        boolean boolean39 = borderArrangement3.equals((java.lang.Object) range36);
        borderArrangement3.clear();
        borderArrangement3.clear();
        org.jfree.chart.block.BlockContainer blockContainer42 = null;
        java.awt.Graphics2D graphics2D43 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D45 = borderArrangement3.arrange(blockContainer42, graphics2D43, rectangleConstraint44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Range[10.0,10.0]" + "'", str38, "Range[10.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        double double6 = range5.getLength();
        double double7 = range5.getUpperBound();
        boolean boolean10 = range5.intersects((-100.0d), 19.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range5, (-4949.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 11.0d + "'", double7 == 11.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(range12);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range8, (-1.0d), 100.0d);
        java.lang.String str22 = range21.toString();
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range21, 92.5d, true);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Range[100.0,10100.0]" + "'", str22, "Range[100.0,10100.0]");
        org.junit.Assert.assertNotNull(range25);
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range8, (double) 10, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range21, (double) ' ', true);
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range21, (-2.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range26);
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, 11.0d);
        org.jfree.data.Range range5 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double6 = range5.getLength();
        double double8 = range5.constrain(0.0d);
        java.lang.String str9 = range5.toString();
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range5, (double) (short) 1, true);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range5, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range15, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range15, (double) (byte) 1, (double) (-1));
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        double double28 = range27.getLowerBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) 100L);
        boolean boolean33 = range30.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getLength();
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range36, (double) (short) 10);
        double double40 = range39.getLowerBound();
        boolean boolean42 = range39.contains((double) (byte) 0);
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range39, (double) 1.0f, false);
        org.jfree.data.Range range46 = org.jfree.data.Range.combine(range30, range45);
        double double47 = range46.getLength();
        org.jfree.data.Range range50 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double51 = range50.getLength();
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range50, (double) (short) 10);
        double double54 = range53.getLowerBound();
        org.jfree.data.Range range56 = org.jfree.data.Range.expandToInclude(range53, (double) 100L);
        org.jfree.data.Range range59 = org.jfree.data.Range.shift(range56, (double) 100L, true);
        boolean boolean60 = range46.equals((java.lang.Object) range56);
        double double61 = range56.getCentralValue();
        org.jfree.data.Range range62 = org.jfree.data.Range.combine(range21, range56);
        org.jfree.data.Range range65 = new org.jfree.data.Range((double) 10.0f, 0.0d);
        org.jfree.data.Range range66 = org.jfree.data.Range.combine(range62, range65);
        boolean boolean69 = range66.intersects((-1.0d), (double) (byte) 100);
        double double70 = range66.getUpperBound();
        boolean boolean73 = range66.intersects(340.0d, 2010.0d);
        org.jfree.data.Range range75 = org.jfree.data.Range.expandToInclude(range66, (double) 100L);
        boolean boolean76 = range2.equals((java.lang.Object) 100L);
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[0.0,10.0]" + "'", str9, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 50.0d + "'", double61 == 50.0d);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 100.0d + "'", double70 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        double double10 = range2.constrain((double) 10L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range2, (double) (byte) 10, (double) (byte) -1);
        org.jfree.data.Range range14 = null;
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double18 = range17.getUpperBound();
        java.lang.String str19 = range17.toString();
        double double20 = range17.getCentralValue();
        boolean boolean22 = range17.contains((double) (-1));
        org.jfree.data.Range range25 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double26 = range25.getLength();
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range25, (double) (short) 10);
        double double29 = range28.getLowerBound();
        double double30 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range17, range28);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, (double) 0L, 330.0d);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range14, range34);
        boolean boolean36 = range13.equals((java.lang.Object) range14);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range13, 100.0d, false);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Range[100.0,1.0]" + "'", str19, "Range[100.0,1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 50.5d + "'", double20 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(range39);
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getUpperBound();
        double double6 = range4.getCentralValue();
        double double7 = range4.getLowerBound();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        double double13 = range10.getUpperBound();
        java.lang.String str14 = range10.toString();
        boolean boolean15 = range4.equals((java.lang.Object) str14);
        double double16 = range4.getLowerBound();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range4, 4.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 99.0d + "'", double5 == 99.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 54.0d + "'", double6 == 54.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 9.0d + "'", double7 == 9.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[0.0,10.0]" + "'", str14, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 9.0d + "'", double16 == 9.0d);
        org.junit.Assert.assertNotNull(range18);
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        boolean boolean10 = borderArrangement0.equals((java.lang.Object) '#');
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 100.0d, (double) 100);
        double double18 = range16.constrain((double) (short) 1);
        boolean boolean19 = borderArrangement0.equals((java.lang.Object) (short) 1);
        borderArrangement0.clear();
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj24 = new java.lang.Object();
        boolean boolean25 = range23.equals(obj24);
        boolean boolean28 = range23.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range31.constrain(10.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range23, range31);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range23, (double) (short) 100, false);
        java.lang.String str38 = range23.toString();
        double double40 = range23.constrain(99.0d);
        boolean boolean41 = borderArrangement0.equals((java.lang.Object) range23);
        double double42 = range23.getLength();
        boolean boolean44 = range23.contains(31.0d);
        java.lang.String str45 = range23.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Range[0.0,10.0]" + "'", str38, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Range[0.0,10.0]" + "'", str45, "Range[0.0,10.0]");
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, 10.0d);
        double double3 = range2.getLength();
        double double5 = range2.constrain((double) (-1));
        double double7 = range2.constrain((double) 0.0f);
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range2, 19899.0d);
        double double10 = range2.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range2, (-164.5d), 48845.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, 52.0d);
        double double17 = range15.constrain((-495.0d));
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 62.0d + "'", double17 == 62.0d);
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double6 = range5.getLowerBound();
        double double7 = range5.getLowerBound();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, 10000.0d, true);
        double double11 = range10.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range10, 55.0d, (-11.0d));
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range10, 19.0d);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range10, (-209948.0d), true);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9899.0d) + "'", double6 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9899.0d) + "'", double7 == (-9899.0d));
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 19899.0d + "'", double11 == 19899.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range12, (double) (byte) 1, (double) (-1));
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) (short) 10);
        double double25 = range24.getLowerBound();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) 100L);
        boolean boolean30 = range27.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range33.getLength();
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range33, (double) (short) 10);
        double double37 = range36.getLowerBound();
        boolean boolean39 = range36.contains((double) (byte) 0);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range36, (double) 1.0f, false);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range27, range42);
        double double44 = range43.getLength();
        org.jfree.data.Range range47 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double48 = range47.getLength();
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range47, (double) (short) 10);
        double double51 = range50.getLowerBound();
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range50, (double) 100L);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range53, (double) 100L, true);
        boolean boolean57 = range43.equals((java.lang.Object) range53);
        double double58 = range53.getCentralValue();
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range18, range53);
        org.jfree.data.Range range62 = new org.jfree.data.Range((double) 10.0f, 0.0d);
        org.jfree.data.Range range63 = org.jfree.data.Range.combine(range59, range62);
        org.jfree.data.Range range66 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double67 = range66.getCentralValue();
        org.jfree.data.Range range69 = org.jfree.data.Range.shift(range66, (double) 1);
        double double70 = range69.getLength();
        boolean boolean71 = range62.equals((java.lang.Object) double70);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 50.0d + "'", double58 == 50.0d);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 5.0d + "'", double67 == 5.0d);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getCentralValue();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range36, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range39, (double) 100.0f);
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range44, (double) 10);
        boolean boolean47 = borderArrangement0.equals((java.lang.Object) range46);
        double double48 = range46.getLength();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5.0d + "'", double37 == 5.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 101.0d + "'", double48 == 101.0d);
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        double double13 = range12.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean17 = range12.equals((java.lang.Object) range16);
        double double18 = range16.getCentralValue();
        boolean boolean21 = range16.intersects((-275.0d), (double) 100);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 330.0d + "'", double13 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 71.0d + "'", double18 == 71.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        org.jfree.data.Range range2 = new org.jfree.data.Range(20.0d, 57.0d);
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double14 = range13.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) (short) 10);
        double double17 = range16.getLowerBound();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) 100L);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range19, (double) 100L, true);
        boolean boolean23 = borderArrangement3.equals((java.lang.Object) 100L);
        borderArrangement3.clear();
        org.jfree.chart.block.BlockContainer blockContainer25 = null;
        java.awt.Graphics2D graphics2D26 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D28 = borderArrangement3.arrange(blockContainer25, graphics2D26, rectangleConstraint27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        boolean boolean10 = borderArrangement0.equals((java.lang.Object) '#');
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 100.0d, (double) 100);
        double double18 = range16.constrain((double) (short) 1);
        boolean boolean19 = borderArrangement0.equals((java.lang.Object) (short) 1);
        borderArrangement0.clear();
        org.jfree.data.Range range23 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean25 = range23.contains((double) 1L);
        boolean boolean28 = range23.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range23, 265.0d);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range23, 9999.0d, (double) 0.0f);
        boolean boolean34 = borderArrangement0.equals((java.lang.Object) range33);
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double39 = range37.constrain(10.0d);
        double double40 = range37.getLowerBound();
        boolean boolean43 = range37.intersects((double) (byte) 0, 0.0d);
        double double45 = range37.constrain((double) (byte) -1);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range37, (double) 100);
        double double48 = range37.getUpperBound();
        boolean boolean49 = borderArrangement0.equals((java.lang.Object) double48);
        java.lang.Object obj50 = null;
        boolean boolean51 = borderArrangement0.equals(obj50);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, 10.0d);
        double double3 = range2.getLength();
        double double5 = range2.constrain((double) (-1));
        double double6 = range2.getCentralValue();
        double double7 = range2.getUpperBound();
        double double8 = range2.getCentralValue();
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        boolean boolean17 = range14.contains((double) (byte) 0);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range14, (double) 1.0f, false);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, (double) (short) 1, (double) (-1L));
        double double24 = range23.getLength();
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range23, (-9899.0d));
        double double27 = range26.getCentralValue();
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getCentralValue();
        org.jfree.data.Range range34 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double35 = range34.getCentralValue();
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 1);
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range37, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range37, (double) 100.0f);
        org.jfree.data.Range range44 = org.jfree.data.Range.expandToInclude(range42, (double) 10);
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range30, range44);
        boolean boolean48 = range30.intersects(150.0d, (double) 'a');
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range30, (double) 100, 19.0d);
        boolean boolean53 = range30.contains((double) 10);
        boolean boolean54 = range26.equals((java.lang.Object) range30);
        boolean boolean55 = range2.equals((java.lang.Object) boolean54);
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-4949.0d) + "'", double27 == (-4949.0d));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5.0d + "'", double31 == 5.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 5.0d + "'", double35 == 5.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range8, (-1.0d), 100.0d);
        java.lang.String str22 = range21.toString();
        double double23 = range21.getCentralValue();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range21, (-99990.0d));
        boolean boolean28 = range21.intersects(1026.0d, 0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Range[100.0,10100.0]" + "'", str22, "Range[100.0,10100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5100.0d + "'", double23 == 5100.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range3, 100.0d, (double) 100);
        double double8 = range6.constrain((double) (short) 1);
        boolean boolean10 = range6.contains((double) '4');
        double double11 = range6.getLowerBound();
        double double13 = range6.constrain(54.0d);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getCentralValue();
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range16, (double) 1);
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range16, (double) 'a');
        boolean boolean23 = range16.equals((java.lang.Object) 10);
        boolean boolean25 = range16.contains((double) 1.0f);
        double double26 = range16.getUpperBound();
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range6, range16);
        double double28 = range27.getLowerBound();
        org.jfree.data.Range range31 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range31, (double) (-1));
        double double34 = range33.getUpperBound();
        boolean boolean37 = range33.intersects(50.0d, 5.0d);
        org.jfree.data.Range range40 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double41 = range40.getLength();
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range40, (double) (short) 10);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range33, range40);
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range27, range40);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range27, 132.0d);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range0, range27);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range51 = org.jfree.data.Range.shift(range0, (-39155.0d), false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9899.0d) + "'", double11 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 54.0d + "'", double13 == 54.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.0d + "'", double17 == 5.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-9899.0d) + "'", double28 == (-9899.0d));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 99.0d + "'", double34 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range24, (double) (short) -1, false);
        double double42 = range24.getLowerBound();
        double double44 = range24.constrain((double) (short) 100);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        boolean boolean10 = borderArrangement0.equals((java.lang.Object) '#');
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 100.0d, (double) 100);
        double double18 = range16.constrain((double) (short) 1);
        boolean boolean19 = borderArrangement0.equals((java.lang.Object) (short) 1);
        borderArrangement0.clear();
        java.lang.Object obj21 = null;
        boolean boolean22 = borderArrangement0.equals(obj21);
        boolean boolean24 = borderArrangement0.equals((java.lang.Object) "Range[0.0,200.0]");
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double28 = range27.getLength();
        double double30 = range27.constrain(0.0d);
        java.lang.String str31 = range27.toString();
        boolean boolean32 = borderArrangement0.equals((java.lang.Object) str31);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Range[0.0,10.0]" + "'", str31, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, (double) 100.0f);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 10);
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range10, 265.0d);
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, 100.0d, (double) 100);
        double double22 = range20.constrain((double) (short) 1);
        boolean boolean24 = range20.contains((double) '4');
        double double25 = range20.getLowerBound();
        double double27 = range20.constrain(54.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getCentralValue();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range30, (double) 1);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range30, (double) 'a');
        boolean boolean37 = range30.equals((java.lang.Object) 10);
        boolean boolean39 = range30.contains((double) 1.0f);
        double double40 = range30.getUpperBound();
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range20, range30);
        double double42 = range41.getLowerBound();
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj46 = new java.lang.Object();
        boolean boolean47 = range45.equals(obj46);
        boolean boolean50 = range45.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range53 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double55 = range53.constrain(10.0d);
        org.jfree.data.Range range56 = org.jfree.data.Range.combine(range45, range53);
        org.jfree.data.Range range59 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj60 = new java.lang.Object();
        boolean boolean61 = range59.equals(obj60);
        boolean boolean64 = range59.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range67 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double69 = range67.constrain(10.0d);
        org.jfree.data.Range range70 = org.jfree.data.Range.combine(range59, range67);
        org.jfree.data.Range range71 = org.jfree.data.Range.combine(range45, range59);
        double double72 = range59.getLowerBound();
        double double73 = range59.getUpperBound();
        org.jfree.data.Range range74 = org.jfree.data.Range.combine(range41, range59);
        double double75 = range59.getLength();
        double double76 = range59.getCentralValue();
        boolean boolean77 = range14.equals((java.lang.Object) range59);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-9899.0d) + "'", double25 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 54.0d + "'", double27 == 54.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5.0d + "'", double31 == 5.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-9899.0d) + "'", double42 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 10.0d + "'", double69 == 10.0d);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 10.0d + "'", double75 == 10.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 5.0d + "'", double76 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) (short) 100, false);
        boolean boolean19 = range2.intersects((double) '#', (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range2, (double) 0, 26.5d);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (-100.0d));
        boolean boolean27 = range24.intersects(41.0d, 1.5955855E7d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.chart.block.Block block5 = null;
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double9 = range8.getLength();
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range8, (double) (short) 10);
        boolean boolean14 = range8.intersects(0.0d, (double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block5, (java.lang.Object) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Byte cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        double double27 = range26.getLowerBound();
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (-1));
        double double33 = range32.getUpperBound();
        boolean boolean36 = range32.intersects(50.0d, 5.0d);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range39.getLength();
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range39, (double) (short) 10);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range26, range39);
        org.jfree.data.Range range47 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double48 = range47.getLength();
        double double50 = range47.constrain(0.0d);
        java.lang.String str51 = range47.toString();
        org.jfree.data.Range range54 = org.jfree.data.Range.shift(range47, (double) (short) 1, true);
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range47, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range60 = org.jfree.data.Range.expand(range57, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range63 = org.jfree.data.Range.expand(range57, (double) (byte) 1, (double) (-1));
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range63, (double) (-1L), true);
        org.jfree.data.Range range67 = org.jfree.data.Range.combine(range44, range66);
        double double69 = range44.constrain(9954.5d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9899.0d) + "'", double27 == (-9899.0d));
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 99.0d + "'", double33 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Range[0.0,10.0]" + "'", str51, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 9954.5d + "'", double69 == 9954.5d);
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1026.0d, 5248.0d);
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        double double9 = range7.getLowerBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range12);
        double double20 = range7.constrain((double) (byte) 1);
        double double21 = range7.getCentralValue();
        double double22 = range7.getCentralValue();
        boolean boolean23 = borderArrangement0.equals((java.lang.Object) double22);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range32, (double) 100L, true);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range32, (double) 100, false);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, 35.0d, true);
        boolean boolean42 = borderArrangement0.equals((java.lang.Object) range41);
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range45.getLength();
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) (short) 10);
        double double49 = range48.getLowerBound();
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range48, (double) 100L);
        org.jfree.data.Range range54 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range54, 100.0d, (double) 100);
        boolean boolean58 = range51.equals((java.lang.Object) range54);
        org.jfree.data.Range range61 = org.jfree.data.Range.expand(range51, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range63 = org.jfree.data.Range.expandToInclude(range51, (double) 100.0f);
        java.lang.String str64 = range63.toString();
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range63, (double) (-1.0f));
        double double67 = range63.getLowerBound();
        boolean boolean68 = borderArrangement0.equals((java.lang.Object) double67);
        org.jfree.chart.block.Block block69 = null;
        java.lang.Object obj70 = null;
        borderArrangement0.add(block69, obj70);
        org.jfree.data.Range range74 = new org.jfree.data.Range((double) (byte) 10, 82.5d);
        org.jfree.data.Range range76 = org.jfree.data.Range.expandToInclude(range74, 0.0d);
        boolean boolean77 = borderArrangement0.equals((java.lang.Object) range76);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Range[0.0,100.0]" + "'", str64, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        double double9 = range7.getLowerBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range12);
        double double20 = range7.constrain((double) (byte) 1);
        double double21 = range7.getCentralValue();
        double double22 = range7.getCentralValue();
        boolean boolean23 = borderArrangement0.equals((java.lang.Object) double22);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range32, (double) 100L, true);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range32, (double) 100, false);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, 35.0d, true);
        boolean boolean42 = borderArrangement0.equals((java.lang.Object) range41);
        org.jfree.chart.block.BorderArrangement borderArrangement43 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement43.clear();
        org.jfree.data.Range range47 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean48 = borderArrangement43.equals((java.lang.Object) range47);
        borderArrangement43.clear();
        borderArrangement43.clear();
        org.jfree.data.Range range53 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double54 = range53.getCentralValue();
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range53, (double) 1);
        org.jfree.data.Range range58 = org.jfree.data.Range.shift(range53, (double) 'a');
        boolean boolean59 = borderArrangement43.equals((java.lang.Object) range58);
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range58, (double) (-1));
        boolean boolean62 = borderArrangement0.equals((java.lang.Object) range61);
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 5.0d + "'", double54 == 5.0d);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getLength();
        double double12 = range9.constrain(0.0d);
        java.lang.String str13 = range9.toString();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, (double) (short) 1, true);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range9, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range19, (double) (byte) 1, (double) (-1));
        boolean boolean26 = borderArrangement0.equals((java.lang.Object) range25);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double30 = range29.getUpperBound();
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range33.getCentralValue();
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range33, (double) 1);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range29, range36);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range25, range29);
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        double double47 = range44.getLowerBound();
        boolean boolean50 = range44.intersects((double) (byte) 0, 0.0d);
        double double52 = range44.constrain((double) (byte) -1);
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range44, 11.0d);
        double double55 = range54.getUpperBound();
        org.jfree.data.Range range57 = org.jfree.data.Range.shift(range54, 31.0d);
        org.jfree.data.Range range60 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range62 = org.jfree.data.Range.shift(range60, (double) (-1));
        double double63 = range62.getUpperBound();
        boolean boolean66 = range62.intersects(50.0d, 5.0d);
        org.jfree.data.Range range69 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double70 = range69.getLength();
        org.jfree.data.Range range72 = org.jfree.data.Range.expandToInclude(range69, (double) (short) 10);
        org.jfree.data.Range range73 = org.jfree.data.Range.combine(range62, range69);
        org.jfree.data.Range range75 = org.jfree.data.Range.shift(range62, (double) (byte) 10);
        double double77 = range75.constrain(11.0d);
        org.jfree.data.Range range78 = org.jfree.data.Range.combine(range54, range75);
        boolean boolean79 = range29.equals((java.lang.Object) range78);
        java.lang.String str80 = range78.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,10.0]" + "'", str13, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5.0d + "'", double34 == 5.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 11.0d + "'", double55 == 11.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 99.0d + "'", double63 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 19.0d + "'", double77 == 19.0d);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Range[0.0,109.0]" + "'", str80, "Range[0.0,109.0]");
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        double double39 = range34.getCentralValue();
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range42.constrain(10.0d);
        double double45 = range42.getLowerBound();
        boolean boolean48 = range42.intersects((double) (byte) 0, 0.0d);
        double double50 = range42.constrain((double) (byte) -1);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range42, (double) 100);
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range34, range52);
        double double54 = range34.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 50.0d + "'", double39 == 50.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double20 = range19.getLength();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) (short) 10);
        double double23 = range22.getLowerBound();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) 100L);
        org.jfree.data.Range range28 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range28, 100.0d, (double) 100);
        boolean boolean32 = range25.equals((java.lang.Object) range28);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range25, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range25, (double) 100.0f);
        double double38 = range25.getCentralValue();
        boolean boolean40 = range25.equals((java.lang.Object) 0);
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getLength();
        double double46 = range43.constrain(0.0d);
        java.lang.String str47 = range43.toString();
        org.jfree.data.Range range50 = org.jfree.data.Range.shift(range43, (double) (short) 1, true);
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range50, (double) '4');
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range52, (double) 1L);
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range25, range52);
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range52, 107.0d, 0.0d);
        boolean boolean59 = borderArrangement0.equals((java.lang.Object) 107.0d);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Range[0.0,10.0]" + "'", str47, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1.0f, false);
        boolean boolean7 = range5.contains((double) 0L);
        double double8 = range5.getLowerBound();
        java.lang.String str9 = range5.toString();
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range5, 154.0d, 0.0d);
        double double14 = range5.constrain((double) 10);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 11.0d + "'", double8 == 11.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[11.0,53.0]" + "'", str9, "Range[11.0,53.0]");
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 11.0d + "'", double14 == 11.0d);
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        org.jfree.data.Range range6 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range6, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range9);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) '4', false);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range2, 150.5d, false);
        java.lang.String str20 = range2.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.0d + "'", double7 == 5.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Range[100.0,1.0]" + "'", str20, "Range[100.0,1.0]");
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        double double3 = range2.getCentralValue();
        java.lang.String str4 = range2.toString();
        double double6 = range2.constrain(1505.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 50.5d + "'", double3 == 50.5d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Range[1.0,100.0]" + "'", str4, "Range[1.0,100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        org.jfree.data.Range range41 = org.jfree.data.Range.expand(range34, (-7878307.5d), (-100.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range41);
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range7);
        boolean boolean15 = range13.contains((double) (short) 10);
        double double16 = range13.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        boolean boolean6 = borderArrangement0.equals((java.lang.Object) 'a');
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj11 = new java.lang.Object();
        boolean boolean12 = range10.equals(obj11);
        boolean boolean15 = range10.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean25 = range10.equals((java.lang.Object) 100L);
        boolean boolean27 = range10.contains((double) (byte) 100);
        double double28 = range10.getLowerBound();
        boolean boolean29 = borderArrangement0.equals((java.lang.Object) double28);
        org.jfree.chart.block.BorderArrangement borderArrangement30 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement30.clear();
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean35 = borderArrangement30.equals((java.lang.Object) range34);
        borderArrangement30.clear();
        borderArrangement30.clear();
        org.jfree.data.Range range40 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double41 = range40.getCentralValue();
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range40, (double) 1);
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range40, (double) 'a');
        boolean boolean46 = borderArrangement30.equals((java.lang.Object) range45);
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) (-1));
        boolean boolean49 = borderArrangement0.equals((java.lang.Object) (-1));
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj53 = new java.lang.Object();
        boolean boolean54 = range52.equals(obj53);
        boolean boolean57 = range52.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range60 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double62 = range60.constrain(10.0d);
        org.jfree.data.Range range63 = org.jfree.data.Range.combine(range52, range60);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range52, (double) 100L, true);
        boolean boolean67 = borderArrangement0.equals((java.lang.Object) true);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 5.0d + "'", double41 == 5.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        boolean boolean4 = range2.contains(142.0d);
        double double5 = range2.getUpperBound();
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double9 = range8.getLength();
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range8, (double) (short) 10);
        double double12 = range8.getUpperBound();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range8, 0.0d);
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double18 = range17.getLength();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range17, (double) (short) 10);
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range20, (double) (byte) -1);
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range14, range20);
        boolean boolean24 = range2.equals((java.lang.Object) range23);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.chart.block.Block block5 = null;
        org.jfree.data.Range range6 = null;
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        borderArrangement0.add(block5, (java.lang.Object) range6);
        org.jfree.data.Range range12 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean14 = range12.contains((double) 1L);
        boolean boolean17 = range12.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, 265.0d);
        boolean boolean20 = borderArrangement0.equals((java.lang.Object) 265.0d);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) (byte) 100, 101.0d);
        boolean boolean24 = borderArrangement0.equals((java.lang.Object) (byte) 100);
        borderArrangement0.clear();
        org.jfree.chart.block.Block block26 = null;
        org.jfree.data.Range range27 = null;
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range27, 10.0d);
        double double30 = range29.getLength();
        double double32 = range29.constrain((double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block26, (java.lang.Object) range29);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (byte) 0, (double) (-1L));
        double double23 = range19.getUpperBound();
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        boolean boolean35 = range32.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double39 = range38.getLength();
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range38, (double) (short) 10);
        double double42 = range41.getLowerBound();
        boolean boolean44 = range41.contains((double) (byte) 0);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range41, (double) 1.0f, false);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range32, range47);
        double double49 = range48.getLength();
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double54 = range52.constrain(10.0d);
        boolean boolean57 = range52.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str58 = range52.toString();
        boolean boolean59 = range48.equals((java.lang.Object) range52);
        boolean boolean60 = range19.equals((java.lang.Object) range52);
        boolean boolean61 = range13.equals((java.lang.Object) range52);
        boolean boolean62 = borderArrangement3.equals((java.lang.Object) range13);
        org.jfree.chart.block.Block block63 = null;
        org.jfree.data.Range range66 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double67 = range66.getCentralValue();
        boolean boolean69 = range66.contains((double) (-1L));
        org.jfree.data.Range range70 = null;
        org.jfree.data.Range range72 = org.jfree.data.Range.expandToInclude(range70, 11.0d);
        org.jfree.data.Range range73 = org.jfree.data.Range.combine(range66, range70);
        borderArrangement3.add(block63, (java.lang.Object) range70);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Range[0.0,10.0]" + "'", str58, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 5.0d + "'", double67 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertNotNull(range73);
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range5, (double) (byte) -1, (double) 100L);
        double double10 = range9.getLowerBound();
        java.lang.String str11 = range9.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9899.0d) + "'", double6 == (-9899.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10000.0d + "'", double10 == 10000.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[10000.0,1999900.0]" + "'", str11, "Range[10000.0,1999900.0]");
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        org.jfree.data.Range range2 = new org.jfree.data.Range(200.0d, 26.0d);
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range5, (double) (byte) -1, (double) 100L);
        boolean boolean11 = range5.contains(99.0d);
        double double12 = range5.getUpperBound();
        double double14 = range5.constrain(5.5d);
        java.lang.Class<?> wildcardClass15 = range5.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9899.0d) + "'", double6 == (-9899.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10000.0d + "'", double12 == 10000.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5.5d + "'", double14 == 5.5d);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        double double8 = range5.getUpperBound();
        double double9 = range5.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10000.0d + "'", double8 == 10000.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.5d + "'", double9 == 50.5d);
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        java.lang.Class<?> wildcardClass8 = range2.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        double double17 = range15.getUpperBound();
        boolean boolean19 = range15.contains(16.0d);
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range15, (-445.0d));
        double double22 = range15.getCentralValue();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 107.0d + "'", double17 == 107.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 102.0d + "'", double22 == 102.0d);
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, 1340.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 100, true);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, (-749.0d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        org.jfree.data.Range range2 = new org.jfree.data.Range(2010.0d, 102.0d);
        double double3 = range2.getLength();
        java.lang.String str4 = range2.toString();
        double double6 = range2.constrain(0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1908.0d) + "'", double3 == (-1908.0d));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Range[2010.0,102.0]" + "'", str4, "Range[2010.0,102.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2010.0d + "'", double6 == 2010.0d);
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (byte) 0, (double) (-1L));
        double double23 = range19.getUpperBound();
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        boolean boolean35 = range32.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double39 = range38.getLength();
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range38, (double) (short) 10);
        double double42 = range41.getLowerBound();
        boolean boolean44 = range41.contains((double) (byte) 0);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range41, (double) 1.0f, false);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range32, range47);
        double double49 = range48.getLength();
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double54 = range52.constrain(10.0d);
        boolean boolean57 = range52.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str58 = range52.toString();
        boolean boolean59 = range48.equals((java.lang.Object) range52);
        boolean boolean60 = range19.equals((java.lang.Object) range52);
        boolean boolean61 = range13.equals((java.lang.Object) range52);
        boolean boolean62 = borderArrangement3.equals((java.lang.Object) range13);
        org.jfree.data.Range range65 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double66 = range65.getCentralValue();
        org.jfree.data.Range range69 = org.jfree.data.Range.expand(range65, (double) 0L, (double) '4');
        boolean boolean72 = range69.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean74 = range69.contains((double) 0.0f);
        org.jfree.data.Range range76 = org.jfree.data.Range.expandToInclude(range69, 10.0d);
        double double78 = range76.constrain(0.0d);
        org.jfree.data.Range range81 = org.jfree.data.Range.shift(range76, (double) (byte) 0, false);
        boolean boolean83 = range76.contains(121.0d);
        boolean boolean84 = borderArrangement3.equals((java.lang.Object) boolean83);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Range[0.0,10.0]" + "'", str58, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5.0d + "'", double66 == 5.0d);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(range81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        boolean boolean6 = borderArrangement0.equals((java.lang.Object) 'a');
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj11 = new java.lang.Object();
        boolean boolean12 = range10.equals(obj11);
        boolean boolean15 = range10.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean25 = range10.equals((java.lang.Object) 100L);
        boolean boolean27 = range10.contains((double) (byte) 100);
        double double28 = range10.getLowerBound();
        boolean boolean29 = borderArrangement0.equals((java.lang.Object) double28);
        org.jfree.chart.block.BorderArrangement borderArrangement30 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement30.clear();
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean35 = borderArrangement30.equals((java.lang.Object) range34);
        borderArrangement30.clear();
        borderArrangement30.clear();
        org.jfree.data.Range range40 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double41 = range40.getCentralValue();
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range40, (double) 1);
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range40, (double) 'a');
        boolean boolean46 = borderArrangement30.equals((java.lang.Object) range45);
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) (-1));
        boolean boolean49 = borderArrangement0.equals((java.lang.Object) (-1));
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj53 = new java.lang.Object();
        boolean boolean54 = range52.equals(obj53);
        boolean boolean57 = range52.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range60 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double62 = range60.constrain(10.0d);
        org.jfree.data.Range range63 = org.jfree.data.Range.combine(range52, range60);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range52, (double) 100L, true);
        boolean boolean67 = borderArrangement0.equals((java.lang.Object) true);
        org.jfree.data.Range range70 = new org.jfree.data.Range((-9899.0d), 5.0d);
        boolean boolean71 = borderArrangement0.equals((java.lang.Object) 5.0d);
        borderArrangement0.clear();
        org.jfree.chart.block.BlockContainer blockContainer73 = null;
        java.awt.Graphics2D graphics2D74 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D76 = borderArrangement0.arrange(blockContainer73, graphics2D74, rectangleConstraint75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 5.0d + "'", double41 == 5.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        double double26 = range6.getLength();
        double double28 = range6.constrain(15.0d);
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range6, 300.0d);
        double double32 = range6.constrain(150.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 530.0d + "'", double26 == 530.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 15.0d + "'", double28 == 15.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 150.0d + "'", double32 == 150.0d);
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, (-1.0d));
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range6, (double) 1);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range6, (double) 'a');
        boolean boolean13 = range6.equals((java.lang.Object) 10);
        boolean boolean15 = range6.contains((double) 1.0f);
        double double16 = range6.getUpperBound();
        double double17 = range6.getUpperBound();
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj21 = new java.lang.Object();
        boolean boolean22 = range20.equals(obj21);
        boolean boolean25 = range20.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        boolean boolean35 = range20.equals((java.lang.Object) 100L);
        boolean boolean37 = range20.contains(35.0d);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range6, range20);
        org.jfree.data.Range range41 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj42 = new java.lang.Object();
        boolean boolean43 = range41.equals(obj42);
        boolean boolean46 = range41.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range49 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double50 = range49.getLength();
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range49, (double) (short) 10);
        double double53 = range52.getLowerBound();
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range52, (double) 100L);
        boolean boolean56 = range41.equals((java.lang.Object) 100L);
        boolean boolean58 = range41.contains((double) (byte) 100);
        double double59 = range41.getUpperBound();
        org.jfree.data.Range range60 = org.jfree.data.Range.combine(range38, range41);
        org.jfree.data.Range range61 = org.jfree.data.Range.combine(range2, range38);
        java.lang.String str62 = range38.toString();
        org.jfree.data.Range range65 = new org.jfree.data.Range(0.0d, 1286.0d);
        boolean boolean66 = range38.equals((java.lang.Object) range65);
        java.lang.Class<?> wildcardClass67 = range38.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.0d + "'", double7 == 5.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Range[0.0,10.0]" + "'", str62, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        boolean boolean11 = range9.contains((double) 0L);
        java.lang.String str12 = range9.toString();
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range9, (double) '4', (double) (short) 100);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range9, (double) 10.0f, false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Range[1.0,11.0]" + "'", str12, "Range[1.0,11.0]");
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range10, (double) 10.0f);
        org.jfree.data.Range range18 = new org.jfree.data.Range((double) 1.0f, 10000.0d);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range18, (double) 0);
        double double21 = range18.getLength();
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range18, (double) 'a', false);
        double double25 = range24.getCentralValue();
        boolean boolean27 = range24.contains((double) 0);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range15, range24);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range24, (-6500.0d), 200.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range24, (-39.5d), false);
        double double35 = range24.getUpperBound();
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range24, 200.0d);
        double double38 = range24.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 9999.0d + "'", double21 == 9999.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5097.5d + "'", double25 == 5097.5d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10097.0d + "'", double35 == 10097.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 98.0d + "'", double38 == 98.0d);
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        org.jfree.data.Range range2 = new org.jfree.data.Range(16.0d, 110.0d);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, 1011.0d, true);
        double double6 = range2.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 110.0d + "'", double6 == 110.0d);
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range8, 50.5d);
        double double24 = range8.getCentralValue();
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double28 = range27.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range8, range27);
        double double30 = range29.getLowerBound();
        boolean boolean32 = range29.contains(97.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 50.0d + "'", double24 == 50.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double30 = range29.getUpperBound();
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range33.getCentralValue();
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range33, (double) 1);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range29, range36);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range5, range40);
        double double42 = range41.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5.0d + "'", double34 == 5.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 19899.0d + "'", double42 == 19899.0d);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj10 = new java.lang.Object();
        boolean boolean11 = range9.equals(obj10);
        boolean boolean12 = borderArrangement0.equals(obj10);
        org.jfree.data.Range range15 = new org.jfree.data.Range(1.0d, (double) (short) 10);
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        borderArrangement0.clear();
        java.lang.Object obj18 = null;
        boolean boolean19 = borderArrangement0.equals(obj18);
        borderArrangement0.clear();
        org.jfree.chart.block.BlockContainer blockContainer21 = null;
        java.awt.Graphics2D graphics2D22 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D24 = borderArrangement0.arrange(blockContainer21, graphics2D22, rectangleConstraint23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        double double3 = range2.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getCentralValue();
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        double double24 = range21.constrain(0.0d);
        java.lang.String str25 = range21.toString();
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range21, (double) (short) 1, true);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range21, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range2, range31);
        double double37 = range2.constrain((double) 1L);
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range2, (double) 'a');
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range42.getCentralValue();
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range42, (double) 1);
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range42, 50.0d);
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range47, (-6400.0d), 107.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range47, 67.5d);
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range2, range52);
        boolean boolean56 = range52.intersects(10000.0d, (-1001.0d));
        org.jfree.data.Range range59 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj60 = new java.lang.Object();
        boolean boolean61 = range59.equals(obj60);
        boolean boolean64 = range59.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range67 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double69 = range67.constrain(10.0d);
        org.jfree.data.Range range70 = org.jfree.data.Range.combine(range59, range67);
        org.jfree.data.Range range73 = org.jfree.data.Range.shift(range59, (double) (short) 100, false);
        java.lang.String str74 = range59.toString();
        double double76 = range59.constrain(99.0d);
        boolean boolean78 = range59.contains(0.0d);
        org.jfree.data.Range range80 = org.jfree.data.Range.shift(range59, (double) (byte) 1);
        org.jfree.data.Range range82 = org.jfree.data.Range.shift(range59, 67.5d);
        org.jfree.data.Range range83 = org.jfree.data.Range.combine(range52, range82);
        org.jfree.data.Range range85 = org.jfree.data.Range.shift(range83, 11.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Range[0.0,10.0]" + "'", str25, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 5.0d + "'", double43 == 5.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 10.0d + "'", double69 == 10.0d);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Range[0.0,10.0]" + "'", str74, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 10.0d + "'", double76 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertNotNull(range82);
        org.junit.Assert.assertNotNull(range83);
        org.junit.Assert.assertNotNull(range85);
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (byte) 0, (double) (-1L));
        double double15 = range11.getUpperBound();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean27 = range24.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        double double41 = range40.getLength();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        boolean boolean49 = range44.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str50 = range44.toString();
        boolean boolean51 = range40.equals((java.lang.Object) range44);
        boolean boolean52 = range11.equals((java.lang.Object) range44);
        boolean boolean53 = range5.equals((java.lang.Object) range44);
        org.jfree.data.Range range54 = null;
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range44, range54);
        boolean boolean57 = range55.equals((java.lang.Object) 0L);
        org.jfree.data.Range range59 = org.jfree.data.Range.expandToInclude(range55, 330.0d);
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range55, 4.5d);
        double double62 = range55.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,10.0]" + "'", str50, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-6400.0d));
        double double3 = range2.getLength();
        boolean boolean6 = range2.intersects((-4924.0d), (-1.0d));
        boolean boolean8 = range2.contains((-164.5d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-6500.0d) + "'", double3 == (-6500.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-9899.0d), 51.0d);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement3.clear();
        org.jfree.data.Range range7 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean8 = borderArrangement3.equals((java.lang.Object) range7);
        borderArrangement3.clear();
        borderArrangement3.clear();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double14 = range13.getCentralValue();
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range13, (double) 0L, (double) '4');
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range13, (double) ' ');
        boolean boolean20 = borderArrangement3.equals((java.lang.Object) ' ');
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj24 = new java.lang.Object();
        boolean boolean25 = range23.equals(obj24);
        boolean boolean28 = range23.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range31.getLength();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) (short) 10);
        double double35 = range34.getLowerBound();
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range34, (double) 100L);
        boolean boolean38 = range23.equals((java.lang.Object) 100L);
        double double39 = range23.getLength();
        boolean boolean40 = borderArrangement3.equals((java.lang.Object) range23);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range2, range23);
        boolean boolean44 = range2.intersects((double) 0, 20.0d);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range2, 375.0d, false);
        org.jfree.data.Range range50 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double51 = range50.getLength();
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range50, (double) (short) 10);
        double double54 = range53.getLowerBound();
        org.jfree.data.Range range56 = org.jfree.data.Range.expandToInclude(range53, (double) 100L);
        org.jfree.data.Range range59 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range62 = org.jfree.data.Range.expand(range59, 100.0d, (double) 100);
        boolean boolean63 = range56.equals((java.lang.Object) range59);
        org.jfree.data.Range range66 = org.jfree.data.Range.expand(range56, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range68 = org.jfree.data.Range.expandToInclude(range56, (double) 100.0f);
        double double69 = range56.getCentralValue();
        boolean boolean71 = range56.equals((java.lang.Object) 0);
        org.jfree.data.Range range74 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double75 = range74.getLength();
        double double77 = range74.constrain(0.0d);
        java.lang.String str78 = range74.toString();
        org.jfree.data.Range range81 = org.jfree.data.Range.shift(range74, (double) (short) 1, true);
        org.jfree.data.Range range83 = org.jfree.data.Range.expandToInclude(range81, (double) '4');
        org.jfree.data.Range range85 = org.jfree.data.Range.expandToInclude(range83, (double) 1L);
        org.jfree.data.Range range86 = org.jfree.data.Range.combine(range56, range83);
        org.jfree.data.Range range87 = org.jfree.data.Range.combine(range2, range83);
        boolean boolean90 = range83.intersects((-1.9898E8d), (double) 0.0f);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5.0d + "'", double14 == 5.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 50.0d + "'", double69 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 10.0d + "'", double75 == 10.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Range[0.0,10.0]" + "'", str78, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range81);
        org.junit.Assert.assertNotNull(range83);
        org.junit.Assert.assertNotNull(range85);
        org.junit.Assert.assertNotNull(range86);
        org.junit.Assert.assertNotNull(range87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getLength();
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        double double16 = range15.getLowerBound();
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range15, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, 100.0d, (double) 100);
        boolean boolean25 = range18.equals((java.lang.Object) range21);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range18, (double) 1.0f, (double) 'a');
        boolean boolean29 = range9.equals((java.lang.Object) 1.0f);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range9, 43.0d, (double) (short) 10);
        double double33 = range9.getCentralValue();
        double double34 = range9.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 92.5d + "'", double33 == 92.5d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 43.0d + "'", double34 == 43.0d);
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        double double9 = range7.getLowerBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double13 = range12.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range12, (double) (short) 10);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range7, range12);
        double double20 = range7.constrain((double) (byte) 1);
        double double21 = range7.getCentralValue();
        double double22 = range7.getCentralValue();
        boolean boolean23 = borderArrangement0.equals((java.lang.Object) double22);
        org.jfree.data.Range range26 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range26, 100.0d, (double) 100);
        boolean boolean32 = range26.intersects((double) 'a', (-9899.0d));
        double double33 = range26.getUpperBound();
        boolean boolean34 = borderArrangement0.equals((java.lang.Object) range26);
        org.jfree.chart.block.Block block35 = null;
        org.jfree.chart.block.BorderArrangement borderArrangement36 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement36.clear();
        org.jfree.data.Range range40 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean41 = borderArrangement36.equals((java.lang.Object) range40);
        borderArrangement36.clear();
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj46 = new java.lang.Object();
        boolean boolean47 = range45.equals(obj46);
        boolean boolean48 = borderArrangement36.equals(obj46);
        borderArrangement36.clear();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block35, (java.lang.Object) borderArrangement36);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.chart.block.BorderArrangement cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5.0d + "'", double13 == 5.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double4 = range2.getUpperBound();
        double double5 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 5.0d + "'", double5 == 5.0d);
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        boolean boolean13 = range7.intersects(0.0d, (double) (byte) 0);
        boolean boolean14 = borderArrangement0.equals((java.lang.Object) (byte) 0);
        borderArrangement0.clear();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement19 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean21 = borderArrangement19.equals((java.lang.Object) (-1L));
        borderArrangement19.clear();
        boolean boolean23 = range18.equals((java.lang.Object) borderArrangement19);
        boolean boolean24 = borderArrangement0.equals((java.lang.Object) borderArrangement19);
        borderArrangement19.clear();
        borderArrangement19.clear();
        org.jfree.chart.block.BlockContainer blockContainer27 = null;
        java.awt.Graphics2D graphics2D28 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D30 = borderArrangement19.arrange(blockContainer27, graphics2D28, rectangleConstraint29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range8, (double) 100);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range17, 25.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.chart.block.Block block5 = null;
        org.jfree.data.Range range6 = null;
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        borderArrangement0.add(block5, (java.lang.Object) range6);
        org.jfree.data.Range range12 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean14 = range12.contains((double) 1L);
        boolean boolean17 = range12.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, 265.0d);
        boolean boolean20 = borderArrangement0.equals((java.lang.Object) 265.0d);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) (byte) 100, 101.0d);
        boolean boolean24 = borderArrangement0.equals((java.lang.Object) (byte) 100);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.BorderArrangement borderArrangement27 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement27.clear();
        org.jfree.data.Range range31 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean32 = borderArrangement27.equals((java.lang.Object) range31);
        borderArrangement27.clear();
        borderArrangement27.clear();
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double38 = range37.getCentralValue();
        org.jfree.data.Range range41 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double42 = range41.getCentralValue();
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range41, (double) 1);
        org.jfree.data.Range range47 = org.jfree.data.Range.expand(range44, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range44, (double) 100.0f);
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range49, (double) 10);
        org.jfree.data.Range range52 = org.jfree.data.Range.combine(range37, range51);
        boolean boolean55 = range37.intersects(150.0d, (double) 'a');
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range37, (double) 100, 19.0d);
        boolean boolean59 = borderArrangement27.equals((java.lang.Object) range37);
        boolean boolean60 = borderArrangement0.equals((java.lang.Object) boolean59);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5.0d + "'", double38 == 5.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 5.0d + "'", double42 == 5.0d);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.Block block9 = null;
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double14 = range12.constrain(10.0d);
        boolean boolean17 = range12.intersects((double) 10.0f, (double) (-1.0f));
        double double19 = range12.constrain(0.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range12, (double) 0.0f, (double) ' ');
        double double23 = range22.getUpperBound();
        double double24 = range22.getCentralValue();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block9, (java.lang.Object) range22);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 330.0d + "'", double23 == 330.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 165.0d + "'", double24 == 165.0d);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        double double3 = range2.getUpperBound();
        double double4 = range2.getCentralValue();
        org.jfree.data.Range range5 = null;
        org.jfree.data.Range range6 = org.jfree.data.Range.combine(range2, range5);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 31.0d + "'", double4 == 31.0d);
        org.junit.Assert.assertNotNull(range6);
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 0, (double) (byte) 10);
        double double3 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = range4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = range4.contains(54.0d);
        boolean boolean11 = range4.contains(0.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        double double27 = range26.getLowerBound();
        double double28 = range26.getLength();
        boolean boolean31 = range26.intersects(42.0d, 19.0d);
        double double32 = range26.getLowerBound();
        org.jfree.data.Range range35 = new org.jfree.data.Range((-4924.0d), (double) (short) 0);
        boolean boolean36 = range26.equals((java.lang.Object) range35);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9899.0d) + "'", double27 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 19899.0d + "'", double28 == 19899.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-9899.0d) + "'", double32 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        boolean boolean40 = range34.contains((double) 0.0f);
        org.jfree.data.Range range43 = new org.jfree.data.Range((double) (byte) 100, 101.0d);
        boolean boolean44 = range34.equals((java.lang.Object) range43);
        java.lang.String str45 = range43.toString();
        double double46 = range43.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Range[100.0,101.0]" + "'", str45, "Range[100.0,101.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.5d + "'", double46 == 100.5d);
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        java.lang.String str36 = range32.toString();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) 1L);
        double double39 = range38.getCentralValue();
        java.lang.String str40 = range38.toString();
        double double41 = range38.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Range[0.0,200.0]" + "'", str36, "Range[0.0,200.0]");
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Range[0.0,200.0]" + "'", str40, "Range[0.0,200.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 200.0d + "'", double41 == 200.0d);
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = borderArrangement0.equals((java.lang.Object) 1.0f);
        java.lang.Object obj8 = null;
        boolean boolean9 = borderArrangement0.equals(obj8);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj13 = new java.lang.Object();
        boolean boolean14 = range12.equals(obj13);
        boolean boolean17 = range12.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range20.constrain(10.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range12, range20);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, 100.0d, (double) 100);
        boolean boolean39 = range32.equals((java.lang.Object) range35);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, (double) 100);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range23, range41);
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) range23);
        borderArrangement0.clear();
        org.jfree.data.Range range47 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double48 = range47.getCentralValue();
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range47, (double) 0L, (double) '4');
        boolean boolean52 = borderArrangement0.equals((java.lang.Object) range47);
        java.lang.Object obj53 = null;
        boolean boolean54 = borderArrangement0.equals(obj53);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 5.0d + "'", double48 == 5.0d);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = borderArrangement0.equals((java.lang.Object) 1.0f);
        java.lang.Object obj8 = null;
        boolean boolean9 = borderArrangement0.equals(obj8);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj13 = new java.lang.Object();
        boolean boolean14 = range12.equals(obj13);
        boolean boolean17 = range12.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range20.constrain(10.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range12, range20);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) 100L);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, 100.0d, (double) 100);
        boolean boolean39 = range32.equals((java.lang.Object) range35);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, (double) 100);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range23, range41);
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) range23);
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range23, 97.0d);
        double double46 = range23.getLowerBound();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 'a', (double) '4');
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 0L);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (-420.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-45.0d) + "'", double3 == (-45.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double28 = range27.getLength();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) (short) 10);
        double double31 = range30.getLowerBound();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) 100L);
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range33, (double) 100L, true);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 100, false);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range33, 35.0d, true);
        org.jfree.data.Range range44 = org.jfree.data.Range.expandToInclude(range42, 82.5d);
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range42, 121.0d);
        org.jfree.data.Range range47 = org.jfree.data.Range.combine(range23, range42);
        boolean boolean50 = range47.intersects(98.0d, 38.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (-1.0f), (double) '#');
        double double3 = range2.getLowerBound();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 265.0d, false);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, 100.0d, (double) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range9, (double) ' ');
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range14, 10.0d);
        boolean boolean19 = range14.intersects((double) 1L, 1.0d);
        boolean boolean20 = range2.equals((java.lang.Object) 1.0d);
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double24 = range23.getCentralValue();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range23, (double) 1);
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range23, (double) (short) 10);
        double double29 = range28.getUpperBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.combine(range2, range28);
        double double31 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5.0d + "'", double24 == 5.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 17.0d + "'", double31 == 17.0d);
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.Range.shift(range0, 107.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 0);
        java.lang.String str5 = range4.toString();
        double double6 = range4.getLowerBound();
        java.lang.String str7 = range4.toString();
        double double8 = range4.getLength();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Range[11.0,-1.0]" + "'", str5, "Range[11.0,-1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 11.0d + "'", double6 == 11.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Range[11.0,-1.0]" + "'", str7, "Range[11.0,-1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-12.0d) + "'", double8 == (-12.0d));
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement10 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean12 = borderArrangement10.equals((java.lang.Object) (-1L));
        borderArrangement10.clear();
        boolean boolean14 = range9.equals((java.lang.Object) borderArrangement10);
        org.jfree.chart.block.Block block15 = null;
        java.lang.Object obj16 = null;
        borderArrangement10.add(block15, obj16);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range20, (double) (-1));
        double double23 = range22.getUpperBound();
        boolean boolean26 = range22.intersects(50.0d, 5.0d);
        org.jfree.data.Range range29 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range29.getLength();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) (short) 10);
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range22, range29);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range22, (double) (byte) 10);
        boolean boolean36 = borderArrangement10.equals((java.lang.Object) range22);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double40 = range39.getUpperBound();
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getCentralValue();
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range43, (double) 1);
        org.jfree.data.Range range49 = org.jfree.data.Range.expand(range46, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range50 = org.jfree.data.Range.combine(range39, range46);
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range46, (double) '4');
        boolean boolean53 = borderArrangement10.equals((java.lang.Object) '4');
        boolean boolean54 = borderArrangement0.equals((java.lang.Object) borderArrangement10);
        org.jfree.data.Range range57 = new org.jfree.data.Range(0.0d, (double) (-1L));
        org.jfree.data.Range range60 = org.jfree.data.Range.expand(range57, 49.0d, 10.0d);
        org.jfree.data.Range range63 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double65 = range63.constrain(10.0d);
        boolean boolean68 = range63.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str69 = range63.toString();
        double double71 = range63.constrain((double) 100L);
        org.jfree.data.Range range72 = org.jfree.data.Range.combine(range57, range63);
        org.jfree.data.Range range74 = org.jfree.data.Range.expandToInclude(range63, (double) (-1.0f));
        org.jfree.data.Range range77 = org.jfree.data.Range.expand(range63, 150.0d, 5.5d);
        double double78 = range63.getLength();
        org.jfree.data.Range range81 = org.jfree.data.Range.expand(range63, 110.0d, 1286.0d);
        boolean boolean82 = borderArrangement0.equals((java.lang.Object) range63);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 99.0d + "'", double23 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 5.0d + "'", double44 == 5.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.0d + "'", double65 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Range[0.0,10.0]" + "'", str69, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 10.0d + "'", double78 == 10.0d);
        org.junit.Assert.assertNotNull(range81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getUpperBound();
        double double6 = range4.getCentralValue();
        double double8 = range4.constrain(107.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 99.0d + "'", double5 == 99.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 54.0d + "'", double6 == 54.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 99.0d + "'", double8 == 99.0d);
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj10 = new java.lang.Object();
        boolean boolean11 = range9.equals(obj10);
        boolean boolean12 = borderArrangement0.equals(obj10);
        org.jfree.data.Range range15 = new org.jfree.data.Range(1.0d, (double) (short) 10);
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.Block block19 = null;
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block19, (java.lang.Object) 99.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range3 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range3, (double) 1.0f, false);
        boolean boolean8 = range6.contains((double) 0L);
        double double9 = range6.getLowerBound();
        org.jfree.data.Range range10 = org.jfree.data.Range.combine(range0, range6);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 11.0d + "'", double9 == 11.0d);
        org.junit.Assert.assertNotNull(range10);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        double double6 = range2.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 330.0d, true);
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj13 = new java.lang.Object();
        boolean boolean14 = range12.equals(obj13);
        boolean boolean17 = range12.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range12, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range12, (double) (byte) 10);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range12, (double) 10.0f, 15.0d);
        double double26 = range12.getCentralValue();
        boolean boolean27 = range2.equals((java.lang.Object) double26);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5.0d + "'", double26 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        boolean boolean8 = range5.intersects(142.0d, 50.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range5, (-4949.0d), 0.0d);
        java.lang.String str12 = range5.toString();
        java.lang.Class<?> wildcardClass13 = range5.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Range[1.0,11.0]" + "'", str12, "Range[1.0,11.0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean11 = range6.contains((double) 0.0f);
        double double12 = range6.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range6, 540.0d);
        double double16 = range6.constrain(6676175.0d);
        java.lang.Class<?> wildcardClass17 = range6.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 530.0d + "'", double12 == 530.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 530.0d + "'", double16 == 530.0d);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        org.jfree.chart.block.BorderArrangement borderArrangement6 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement6.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean11 = borderArrangement6.equals((java.lang.Object) range10);
        boolean boolean13 = borderArrangement6.equals((java.lang.Object) 1.0f);
        boolean boolean14 = borderArrangement0.equals((java.lang.Object) 1.0f);
        org.jfree.chart.block.BlockContainer blockContainer15 = null;
        java.awt.Graphics2D graphics2D16 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D18 = borderArrangement0.arrange(blockContainer15, graphics2D16, rectangleConstraint17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        org.jfree.data.Range range6 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range6, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range9);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range9, (double) '4');
        boolean boolean17 = range9.contains(92.5d);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range9, 41.0d, true);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.0d + "'", double7 == 5.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range20);
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 265.0d);
        double double10 = range9.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 42.0d + "'", double10 == 42.0d);
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) 0L, (double) 1);
        double double10 = range6.getCentralValue();
        double double11 = range6.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 265.0d + "'", double10 == 265.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        boolean boolean7 = range2.contains(6676175.0d);
        org.jfree.data.Range range10 = new org.jfree.data.Range(200.0d, 51.0d);
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range13, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range13, (double) (byte) 10);
        org.jfree.data.Range range26 = new org.jfree.data.Range(100.0d, (double) (byte) 100);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range13, range26);
        java.lang.String str28 = range26.toString();
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range26, 52.0d);
        boolean boolean31 = range10.equals((java.lang.Object) 52.0d);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range2, range10);
        double double33 = range32.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[100.0,100.0]" + "'", str28, "Range[100.0,100.0]");
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 25.5d + "'", double33 == 25.5d);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        java.lang.Object obj6 = null;
        boolean boolean7 = borderArrangement0.equals(obj6);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) 100L, true);
        java.lang.String str17 = range2.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[0.0,10.0]" + "'", str17, "Range[0.0,10.0]");
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 0, 1110.0d);
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        boolean boolean19 = range2.contains(35.0d);
        double double20 = range2.getLowerBound();
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double24 = range23.getCentralValue();
        double double25 = range23.getLowerBound();
        double double26 = range23.getLowerBound();
        double double27 = range23.getLength();
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range23, 330.0d, true);
        java.lang.String str31 = range30.toString();
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range2, range30);
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range2, 90.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5.0d + "'", double24 == 5.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Range[330.0,340.0]" + "'", str31, "Range[330.0,340.0]");
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range34);
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range24, (double) (short) -1, false);
        double double42 = range24.getLength();
        double double43 = range24.getLength();
        boolean boolean45 = range24.contains(75.5d);
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range24, 0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(range47);
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        boolean boolean5 = range2.contains((double) (byte) 0);
        boolean boolean8 = range2.intersects(107.0d, 5.0d);
        java.lang.String str9 = range2.toString();
        double double10 = range2.getLowerBound();
        java.lang.Class<?> wildcardClass11 = range2.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[0.0,10.0]" + "'", str9, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, 142.0d, false);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, (double) (byte) 0);
        double double12 = range10.constrain(55.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range10, (double) (short) 0);
        double double13 = range10.getLowerBound();
        org.jfree.data.Range range14 = null;
        org.jfree.data.Range range15 = org.jfree.data.Range.combine(range10, range14);
        org.jfree.data.Range range18 = new org.jfree.data.Range(100.0d, (-6400.0d));
        double double19 = range18.getLength();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range18, 100.0d, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range18, (double) (-1.0f));
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range14, range18);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getCentralValue();
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range28, (double) 0L, (double) '4');
        double double33 = range32.getCentralValue();
        double double34 = range32.getCentralValue();
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range32, 6.0d, (double) 10L);
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range32, (double) (byte) 1);
        boolean boolean40 = range25.equals((java.lang.Object) range32);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-6500.0d) + "'", double19 == (-6500.0d));
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5.0d + "'", double29 == 5.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 265.0d + "'", double33 == 265.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 265.0d + "'", double34 == 265.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, 10.0d);
        double double3 = range2.getLength();
        double double5 = range2.constrain((double) (-1));
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, (-495.0d));
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(range7);
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        double double6 = range2.getLength();
        double double7 = range2.getUpperBound();
        double double8 = range2.getLowerBound();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, 510.0d);
        java.lang.String str11 = range10.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[510.0,520.0]" + "'", str11, "Range[510.0,520.0]");
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getCentralValue();
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range14, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range17, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) 10);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range10, range24);
        boolean boolean28 = range10.intersects(150.0d, (double) 'a');
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range10, (double) 100, 19.0d);
        boolean boolean32 = borderArrangement0.equals((java.lang.Object) range10);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range10, 33.0d, false);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range10, 51.0d, (-746.0d));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5.0d + "'", double15 == 5.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range3 = org.jfree.data.Range.expand(range0, 488.0d, 32.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'range' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, 1340.0d);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, 530.0d, false);
        double double6 = range5.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1339.0d + "'", double6 == 1339.0d);
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range5, 100.0d);
        boolean boolean14 = range5.contains((-1.0d));
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range5, 54.0d);
        org.jfree.data.Range range19 = new org.jfree.data.Range(5048.5d, 4.5d);
        boolean boolean20 = range16.equals((java.lang.Object) 4.5d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getLength();
        double double12 = range9.constrain(0.0d);
        java.lang.String str13 = range9.toString();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, (double) (short) 1, true);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range9, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range19, (double) (byte) 1, (double) (-1));
        boolean boolean26 = borderArrangement0.equals((java.lang.Object) range25);
        java.lang.Object obj27 = null;
        boolean boolean28 = borderArrangement0.equals(obj27);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range31.getCentralValue();
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range31, (double) 0L, (double) '4');
        boolean boolean38 = range35.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean40 = range35.contains((double) 0.0f);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range35, 10.0d);
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) range35);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,10.0]" + "'", str13, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5.0d + "'", double32 == 5.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj10 = new java.lang.Object();
        boolean boolean11 = range9.equals(obj10);
        boolean boolean12 = borderArrangement0.equals(obj10);
        org.jfree.data.Range range15 = new org.jfree.data.Range(1.0d, (double) (short) 10);
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        borderArrangement0.clear();
        java.lang.Object obj18 = null;
        boolean boolean19 = borderArrangement0.equals(obj18);
        org.jfree.chart.block.BlockContainer blockContainer20 = null;
        java.awt.Graphics2D graphics2D21 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D23 = borderArrangement0.arrange(blockContainer20, graphics2D21, rectangleConstraint22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10000.0d, (-99.0d));
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        boolean boolean19 = range2.contains((double) (byte) 100);
        double double20 = range2.getLowerBound();
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double24 = range23.getCentralValue();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range23, (double) 1);
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range23, (double) (short) 10);
        double double29 = range23.getCentralValue();
        double double30 = range23.getLength();
        double double31 = range23.getCentralValue();
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range2, range23);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range2, 52.0d, 4.5d);
        java.lang.Class<?> wildcardClass36 = range35.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5.0d + "'", double24 == 5.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5.0d + "'", double29 == 5.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5.0d + "'", double31 == 5.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        boolean boolean37 = range32.contains((-1.0d));
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range32, 0.0d);
        boolean boolean42 = range32.intersects((double) (-1.0f), 530.0d);
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range32, 54.0d);
        java.lang.String str45 = range44.toString();
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range44, (-12.0d), 165.0d);
        java.lang.String str49 = range44.toString();
        org.jfree.data.Range range52 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range55 = org.jfree.data.Range.expand(range52, 100.0d, (double) 100);
        org.jfree.data.Range range57 = org.jfree.data.Range.shift(range52, (double) ' ');
        double double58 = range52.getLength();
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range44, range52);
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range59, 49.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Range[54.0,254.0]" + "'", str45, "Range[54.0,254.0]");
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Range[54.0,254.0]" + "'", str49, "Range[54.0,254.0]");
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 99.0d + "'", double58 == 99.0d);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range61);
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getCentralValue();
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 10.0f);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertNotNull(range8);
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getLength();
        boolean boolean8 = range4.intersects(2010.0d, 335.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 90.0d + "'", double5 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double26 = range24.constrain(10.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range16, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range2, range16);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj32 = new java.lang.Object();
        boolean boolean33 = range31.equals(obj32);
        boolean boolean36 = range31.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double41 = range39.constrain(10.0d);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range31, range39);
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range31, (double) (short) 100, false);
        boolean boolean48 = range31.intersects((double) '#', (double) 0.0f);
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range31, (double) 0, 26.5d);
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range51, (-100.0d));
        boolean boolean54 = range16.equals((java.lang.Object) range53);
        double double56 = range53.constrain((double) (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 100L, (double) (short) 0);
        double double10 = range2.getUpperBound();
        double double11 = range2.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        borderArrangement3.clear();
        org.jfree.data.Range range33 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.expand(range33, 0.0d, (double) (-1L));
        double double37 = range36.getLength();
        java.lang.String str38 = range36.toString();
        boolean boolean39 = borderArrangement3.equals((java.lang.Object) range36);
        java.lang.Class<?> wildcardClass40 = borderArrangement3.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Range[10.0,10.0]" + "'", str38, "Range[10.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        org.jfree.data.Range range2 = new org.jfree.data.Range(133.0d, 265.0d);
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range2, (double) (short) -1);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getLength();
        double double18 = range15.constrain(0.0d);
        java.lang.String str19 = range15.toString();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range15, (double) (short) 1, true);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) '4');
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range2, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range25, 43.0d, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Range[0.0,10.0]" + "'", str19, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        java.lang.Object obj6 = null;
        boolean boolean7 = borderArrangement0.equals(obj6);
        org.jfree.data.Range range10 = new org.jfree.data.Range((-9899.0d), 51.0d);
        org.jfree.chart.block.BorderArrangement borderArrangement11 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement11.clear();
        org.jfree.data.Range range15 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean16 = borderArrangement11.equals((java.lang.Object) range15);
        borderArrangement11.clear();
        borderArrangement11.clear();
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getCentralValue();
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range21, (double) 0L, (double) '4');
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range21, (double) ' ');
        boolean boolean28 = borderArrangement11.equals((java.lang.Object) ' ');
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj32 = new java.lang.Object();
        boolean boolean33 = range31.equals(obj32);
        boolean boolean36 = range31.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range39.getLength();
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range39, (double) (short) 10);
        double double43 = range42.getLowerBound();
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range42, (double) 100L);
        boolean boolean46 = range31.equals((java.lang.Object) 100L);
        double double47 = range31.getLength();
        boolean boolean48 = borderArrangement11.equals((java.lang.Object) range31);
        org.jfree.data.Range range49 = org.jfree.data.Range.combine(range10, range31);
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range31, 0.0d);
        double double53 = range31.constrain((double) (short) 1);
        java.lang.String str54 = range31.toString();
        boolean boolean55 = borderArrangement0.equals((java.lang.Object) str54);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.0d + "'", double22 == 5.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Range[0.0,10.0]" + "'", str54, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (-1.0f), (double) '#');
        double double3 = range2.getLowerBound();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 265.0d, false);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, 100.0d, (double) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range9, (double) ' ');
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range14, 10.0d);
        boolean boolean19 = range14.intersects((double) 1L, 1.0d);
        boolean boolean20 = range2.equals((java.lang.Object) 1.0d);
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double24 = range23.getCentralValue();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range23, (double) 1);
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range23, (double) (short) 10);
        double double29 = range28.getUpperBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.combine(range2, range28);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range2, 165.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5.0d + "'", double24 == 5.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1, 19.0d);
        org.jfree.data.Range range5 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double6 = range5.getCentralValue();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getCentralValue();
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range9, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range12, (double) 100.0f);
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range17, (double) 10);
        org.jfree.data.Range range20 = org.jfree.data.Range.combine(range5, range19);
        boolean boolean23 = range5.intersects(150.0d, (double) 'a');
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range5, (double) 100, 19.0d);
        boolean boolean28 = range5.contains((double) 10);
        boolean boolean29 = range2.equals((java.lang.Object) boolean28);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5.0d + "'", double10 == 5.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        boolean boolean13 = range7.intersects(0.0d, (double) (byte) 0);
        boolean boolean14 = borderArrangement0.equals((java.lang.Object) (byte) 0);
        borderArrangement0.clear();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj19 = new java.lang.Object();
        boolean boolean20 = range18.equals(obj19);
        boolean boolean23 = range18.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range18, 0.0d, (double) (byte) -1);
        boolean boolean29 = range18.intersects((double) 100, (double) 10L);
        boolean boolean32 = range18.intersects(19899.0d, 9999.0d);
        boolean boolean33 = borderArrangement0.equals((java.lang.Object) 9999.0d);
        borderArrangement0.clear();
        org.jfree.chart.block.BlockContainer blockContainer35 = null;
        java.awt.Graphics2D graphics2D36 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D38 = borderArrangement0.arrange(blockContainer35, graphics2D36, rectangleConstraint37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range17, 108.0d);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range17, (double) 0L, false);
        double double34 = range33.getUpperBound();
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range33, 73.5d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertNotNull(range36);
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double33 = range32.getUpperBound();
        org.jfree.data.Range range36 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double37 = range36.getCentralValue();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range36, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range39, (double) '4');
        boolean boolean46 = borderArrangement3.equals((java.lang.Object) '4');
        org.jfree.data.Range range49 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double50 = range49.getLength();
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range49, (double) (short) 10);
        double double53 = range49.getUpperBound();
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range49, 0.0d);
        double double56 = range55.getCentralValue();
        double double57 = range55.getLength();
        boolean boolean58 = borderArrangement3.equals((java.lang.Object) range55);
        org.jfree.data.Range range61 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range63 = org.jfree.data.Range.shift(range61, (double) (-1));
        double double64 = range63.getUpperBound();
        boolean boolean67 = range63.intersects(50.0d, 5.0d);
        org.jfree.data.Range range70 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double71 = range70.getLength();
        org.jfree.data.Range range73 = org.jfree.data.Range.expandToInclude(range70, (double) (short) 10);
        org.jfree.data.Range range74 = org.jfree.data.Range.combine(range63, range70);
        org.jfree.data.Range range76 = org.jfree.data.Range.shift(range63, (double) (byte) 10);
        boolean boolean77 = borderArrangement3.equals((java.lang.Object) (byte) 10);
        org.jfree.chart.block.Block block78 = null;
        java.lang.Object obj79 = null;
        borderArrangement3.add(block78, obj79);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5.0d + "'", double37 == 5.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5.0d + "'", double56 == 5.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 99.0d + "'", double64 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 5248.0d);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (byte) 0, (double) (-1L));
        double double15 = range11.getUpperBound();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean27 = range24.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        double double41 = range40.getLength();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        boolean boolean49 = range44.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str50 = range44.toString();
        boolean boolean51 = range40.equals((java.lang.Object) range44);
        boolean boolean52 = range11.equals((java.lang.Object) range44);
        boolean boolean53 = range5.equals((java.lang.Object) range44);
        org.jfree.data.Range range54 = null;
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range44, range54);
        double double57 = range44.constrain((double) (short) 1);
        double double58 = range44.getLength();
        double double59 = range44.getUpperBound();
        double double61 = range44.constrain(0.0d);
        double double63 = range44.constrain((-749.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,10.0]" + "'", str50, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 265.0d);
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range2, 6.0d, (-2006.0d));
        java.lang.Object obj15 = null;
        boolean boolean16 = range2.equals(obj15);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        borderArrangement13.clear();
        borderArrangement13.clear();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 100L, (double) (short) 0);
        boolean boolean11 = range2.contains((double) (short) 1);
        double double12 = range2.getUpperBound();
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj16 = new java.lang.Object();
        boolean boolean17 = range15.equals(obj16);
        boolean boolean20 = range15.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range23.constrain(10.0d);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range23);
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range15, (double) (short) 100, false);
        boolean boolean32 = range15.intersects((double) '#', (double) 0.0f);
        double double33 = range15.getUpperBound();
        org.jfree.data.Range range36 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, 100.0d, (double) 100);
        double double41 = range39.constrain((double) (short) 1);
        boolean boolean43 = range39.contains((double) '4');
        double double44 = range39.getLowerBound();
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range39, 100.0d);
        boolean boolean48 = range46.contains((double) (byte) -1);
        boolean boolean49 = range15.equals((java.lang.Object) boolean48);
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double53 = range52.getLength();
        double double55 = range52.constrain(0.0d);
        java.lang.String str56 = range52.toString();
        org.jfree.data.Range range59 = org.jfree.data.Range.shift(range52, (double) (short) 1, true);
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range59, (double) '4');
        org.jfree.data.Range range64 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double65 = range64.getCentralValue();
        org.jfree.data.Range range68 = org.jfree.data.Range.expand(range64, (double) 0L, (double) '4');
        boolean boolean71 = range68.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean73 = range68.contains((double) 0.0f);
        boolean boolean75 = range68.equals((java.lang.Object) (-1));
        boolean boolean76 = range61.equals((java.lang.Object) boolean75);
        org.jfree.data.Range range77 = org.jfree.data.Range.combine(range15, range61);
        org.jfree.data.Range range78 = org.jfree.data.Range.combine(range2, range15);
        boolean boolean81 = range78.intersects(0.0d, (double) 1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.0d + "'", double6 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-9899.0d) + "'", double44 == (-9899.0d));
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Range[0.0,10.0]" + "'", str56, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 5.0d + "'", double65 == 5.0d);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        java.lang.Object obj6 = null;
        boolean boolean7 = borderArrangement0.equals(obj6);
        org.jfree.chart.block.BlockContainer blockContainer8 = null;
        java.awt.Graphics2D graphics2D9 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D11 = borderArrangement0.arrange(blockContainer8, graphics2D9, rectangleConstraint10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (-1.0f));
        org.jfree.data.Range range7 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) 0.0d);
        org.jfree.chart.block.Block block9 = null;
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block9, (java.lang.Object) (-12797.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        java.lang.String str9 = range2.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[1.0,100.0]" + "'", str9, "Range[1.0,100.0]");
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range5, (double) (byte) -1, (double) 100L);
        java.lang.String str10 = range9.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9899.0d) + "'", double6 == (-9899.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Range[10000.0,1999900.0]" + "'", str10, "Range[10000.0,1999900.0]");
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        double double39 = range38.getUpperBound();
        boolean boolean40 = borderArrangement0.equals((java.lang.Object) range38);
        double double41 = range38.getCentralValue();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double45 = range44.getCentralValue();
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range44, (double) 0L, (double) '4');
        boolean boolean51 = range48.intersects((double) (short) 1, (double) 0.0f);
        double double52 = range48.getLowerBound();
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range38, range48);
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range53, 150.0d);
        double double56 = range55.getLowerBound();
        org.jfree.data.Range range58 = org.jfree.data.Range.expandToInclude(range55, (-209948.0d));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 50.0d + "'", double41 == 50.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 5.0d + "'", double45 == 5.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 150.0d + "'", double56 == 150.0d);
        org.junit.Assert.assertNotNull(range58);
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean5 = borderArrangement3.equals((java.lang.Object) (-1L));
        borderArrangement3.clear();
        boolean boolean7 = range2.equals((java.lang.Object) borderArrangement3);
        org.jfree.chart.block.Block block8 = null;
        java.lang.Object obj9 = null;
        borderArrangement3.add(block8, obj9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) (-1));
        double double16 = range15.getUpperBound();
        boolean boolean19 = range15.intersects(50.0d, 5.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) (short) 10);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range15, range22);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range15, (double) (byte) 10);
        boolean boolean29 = borderArrangement3.equals((java.lang.Object) range15);
        borderArrangement3.clear();
        borderArrangement3.clear();
        org.jfree.chart.block.BorderArrangement borderArrangement32 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement32.clear();
        org.jfree.data.Range range36 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean37 = borderArrangement32.equals((java.lang.Object) range36);
        borderArrangement32.clear();
        boolean boolean40 = borderArrangement32.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getLength();
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range43, (double) (short) 10);
        double double47 = range46.getLowerBound();
        org.jfree.data.Range range49 = org.jfree.data.Range.expandToInclude(range46, (double) 100L);
        org.jfree.data.Range range52 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range55 = org.jfree.data.Range.expand(range52, 100.0d, (double) 100);
        boolean boolean56 = range49.equals((java.lang.Object) range52);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range49, (double) 1.0f, (double) 'a');
        boolean boolean60 = borderArrangement32.equals((java.lang.Object) range49);
        borderArrangement32.clear();
        borderArrangement32.clear();
        borderArrangement32.clear();
        org.jfree.data.Range range66 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range69 = org.jfree.data.Range.expand(range66, 100.0d, (double) 100);
        boolean boolean70 = borderArrangement32.equals((java.lang.Object) range69);
        double double72 = range69.constrain((-1.0d));
        double double73 = range69.getCentralValue();
        boolean boolean74 = borderArrangement3.equals((java.lang.Object) double73);
        org.jfree.chart.block.Block block75 = null;
        java.lang.Object obj76 = null;
        borderArrangement3.add(block75, obj76);
        borderArrangement3.clear();
        org.jfree.chart.block.BlockContainer blockContainer79 = null;
        java.awt.Graphics2D graphics2D80 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D82 = borderArrangement3.arrange(blockContainer79, graphics2D80, rectangleConstraint81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 99.0d + "'", double16 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-1.0d) + "'", double72 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 50.5d + "'", double73 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getUpperBound();
        boolean boolean8 = range4.intersects(50.0d, 5.0d);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        org.jfree.data.Range range15 = org.jfree.data.Range.combine(range4, range11);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range4, (double) (byte) 10);
        double double18 = range4.getCentralValue();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 99.0d + "'", double5 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 54.0d + "'", double18 == 54.0d);
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range7);
        double double14 = range7.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range7, (double) '4');
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range7, (-39.5d), 132.0d);
        double double20 = range19.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 395.0d + "'", double20 == 395.0d);
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (-12.0d));
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (byte) 0, (double) (-1L));
        double double15 = range11.getUpperBound();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean27 = range24.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        double double41 = range40.getLength();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        boolean boolean49 = range44.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str50 = range44.toString();
        boolean boolean51 = range40.equals((java.lang.Object) range44);
        boolean boolean52 = range11.equals((java.lang.Object) range44);
        boolean boolean53 = range5.equals((java.lang.Object) range44);
        org.jfree.data.Range range54 = null;
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range44, range54);
        boolean boolean57 = range55.equals((java.lang.Object) 0L);
        org.jfree.data.Range range59 = org.jfree.data.Range.expandToInclude(range55, 330.0d);
        double double60 = range59.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,10.0]" + "'", str50, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 330.0d + "'", double60 == 330.0d);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double8 = range7.getLowerBound();
        double double10 = range7.constrain(5248.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        boolean boolean37 = range32.contains((-1.0d));
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range32, 0.0d);
        org.jfree.data.Range range42 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range42);
        double double44 = range43.getUpperBound();
        double double45 = range43.getUpperBound();
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range43, (double) ' ');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 200.0d + "'", double44 == 200.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 200.0d + "'", double45 == 200.0d);
        org.junit.Assert.assertNotNull(range47);
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        double double28 = range27.getLowerBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) 100L);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range30, (double) 100L, true);
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range30, (double) 100, false);
        org.jfree.data.Range range37 = org.jfree.data.Range.combine(range8, range30);
        double double38 = range8.getUpperBound();
        double double39 = range8.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj10 = new java.lang.Object();
        boolean boolean11 = range9.equals(obj10);
        boolean boolean12 = borderArrangement0.equals(obj10);
        org.jfree.data.Range range15 = new org.jfree.data.Range(1.0d, (double) (short) 10);
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        borderArrangement0.clear();
        org.jfree.chart.block.Block block18 = null;
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, 100.0d, (double) 100);
        double double26 = range24.constrain((double) (short) 1);
        boolean boolean28 = range24.contains((double) '4');
        double double29 = range24.getLowerBound();
        double double31 = range24.constrain(54.0d);
        org.jfree.data.Range range34 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double35 = range34.getCentralValue();
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 1);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range34, (double) 'a');
        boolean boolean41 = range34.equals((java.lang.Object) 10);
        boolean boolean43 = range34.contains((double) 1.0f);
        double double44 = range34.getUpperBound();
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range24, range34);
        double double46 = range45.getLowerBound();
        org.jfree.data.Range range49 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range51 = org.jfree.data.Range.shift(range49, (double) (-1));
        double double52 = range51.getUpperBound();
        boolean boolean55 = range51.intersects(50.0d, 5.0d);
        org.jfree.data.Range range58 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double59 = range58.getLength();
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range58, (double) (short) 10);
        org.jfree.data.Range range62 = org.jfree.data.Range.combine(range51, range58);
        org.jfree.data.Range range63 = org.jfree.data.Range.combine(range45, range58);
        double double65 = range45.constrain(19899.0d);
        org.jfree.data.Range range67 = org.jfree.data.Range.expandToInclude(range45, 19.0d);
        java.lang.Class<?> wildcardClass68 = range67.getClass();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block18, (java.lang.Object) wildcardClass68);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Class cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-9899.0d) + "'", double29 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 54.0d + "'", double31 == 54.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 5.0d + "'", double35 == 5.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-9899.0d) + "'", double46 == (-9899.0d));
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 99.0d + "'", double52 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10000.0d + "'", double65 == 10000.0d);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        double double7 = range5.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range5, 0.0d);
        java.lang.String str10 = range9.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Range[0.0,10.0]" + "'", str10, "Range[0.0,10.0]");
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str8 = range2.toString();
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) (-1));
        boolean boolean17 = range2.equals((java.lang.Object) range14);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range14, 6676165.0d, true);
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj24 = new java.lang.Object();
        boolean boolean25 = range23.equals(obj24);
        boolean boolean28 = range23.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range31.constrain(10.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range23, range31);
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double38 = range37.getLength();
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range37, (double) (short) 10);
        double double41 = range40.getLowerBound();
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range40, (double) 100L);
        org.jfree.data.Range range46 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range49 = org.jfree.data.Range.expand(range46, 100.0d, (double) 100);
        boolean boolean50 = range43.equals((java.lang.Object) range46);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range43, (double) 100);
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range34, range52);
        org.jfree.data.Range range56 = org.jfree.data.Range.expand(range53, (double) ' ', 1.0d);
        boolean boolean58 = range53.contains((-1.0d));
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range14, range53);
        org.jfree.data.Range range61 = org.jfree.data.Range.shift(range59, (double) ' ');
        double double62 = range59.getUpperBound();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[0.0,10.0]" + "'", str8, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 200.0d + "'", double62 == 200.0d);
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 1, (double) ' ');
        org.jfree.data.Range range5 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range5.constrain(10.0d);
        boolean boolean10 = range5.intersects((double) 10.0f, (double) (-1.0f));
        double double12 = range5.constrain(0.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range5, (double) 0.0f, (double) ' ');
        double double16 = range15.getUpperBound();
        org.jfree.data.Range range19 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean20 = range15.equals((java.lang.Object) range19);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, (double) (-1));
        double double26 = range25.getUpperBound();
        double double27 = range25.getCentralValue();
        double double28 = range25.getLowerBound();
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range31.constrain(10.0d);
        double double34 = range31.getUpperBound();
        java.lang.String str35 = range31.toString();
        boolean boolean36 = range25.equals((java.lang.Object) str35);
        double double37 = range25.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range19, range25);
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range19, 19899.0d);
        double double42 = range40.constrain(12.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range2, range40);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 330.0d + "'", double16 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 99.0d + "'", double26 == 99.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 54.0d + "'", double27 == 54.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 9.0d + "'", double28 == 9.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Range[0.0,10.0]" + "'", str35, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 9.0d + "'", double37 == 9.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 142.0d + "'", double42 == 142.0d);
        org.junit.Assert.assertNotNull(range43);
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        org.jfree.data.Range range2 = new org.jfree.data.Range(5018543.0d, 19757.0d);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) 100L);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range34, (double) 100L, true);
        boolean boolean38 = range24.equals((java.lang.Object) range34);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range24, (double) (short) -1, false);
        double double42 = range24.getLength();
        double double43 = range24.getLength();
        double double44 = range24.getLength();
        double double45 = range24.getLength();
        org.jfree.data.Range range48 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double49 = range48.getLength();
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range48, (double) (short) 10);
        double double52 = range51.getLowerBound();
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range51, (double) 100L);
        org.jfree.data.Range range57 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range60 = org.jfree.data.Range.expand(range57, 100.0d, (double) 100);
        boolean boolean61 = range54.equals((java.lang.Object) range57);
        org.jfree.data.Range range64 = org.jfree.data.Range.expand(range54, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range66 = org.jfree.data.Range.expandToInclude(range54, (double) 100.0f);
        java.lang.String str67 = range54.toString();
        org.jfree.data.Range range70 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double71 = range70.getLength();
        double double73 = range70.constrain(0.0d);
        java.lang.String str74 = range70.toString();
        org.jfree.data.Range range77 = org.jfree.data.Range.shift(range70, (double) (short) 1, true);
        org.jfree.data.Range range79 = org.jfree.data.Range.expandToInclude(range77, (double) '4');
        org.jfree.data.Range range81 = org.jfree.data.Range.expandToInclude(range79, (double) 1L);
        double double82 = range79.getCentralValue();
        boolean boolean83 = range54.equals((java.lang.Object) range79);
        org.jfree.data.Range range84 = org.jfree.data.Range.combine(range24, range79);
        double double85 = range84.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Range[0.0,100.0]" + "'", str67, "Range[0.0,100.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Range[0.0,10.0]" + "'", str74, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertNotNull(range81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 26.5d + "'", double82 == 26.5d);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(range84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean11 = range6.contains((double) 0.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        boolean boolean25 = range22.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double29 = range28.getLength();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) (short) 10);
        double double32 = range31.getLowerBound();
        boolean boolean34 = range31.contains((double) (byte) 0);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range31, (double) 1.0f, false);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range22, range37);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range22, (double) 0.0f, false);
        java.lang.String str42 = range22.toString();
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range22, 530.0d, false);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range45, (double) 10L);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range6, range45);
        double double49 = range6.getCentralValue();
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double53 = range52.getLength();
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range52, (double) (short) 10);
        double double56 = range55.getLowerBound();
        org.jfree.data.Range range58 = org.jfree.data.Range.expandToInclude(range55, (double) 100L);
        org.jfree.data.Range range61 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range64 = org.jfree.data.Range.expand(range61, 100.0d, (double) 100);
        boolean boolean65 = range58.equals((java.lang.Object) range61);
        org.jfree.data.Range range67 = org.jfree.data.Range.shift(range58, (double) 100);
        boolean boolean68 = range6.equals((java.lang.Object) range58);
        org.jfree.data.Range range70 = org.jfree.data.Range.expandToInclude(range58, 131.0d);
        org.jfree.data.Range range73 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range76 = org.jfree.data.Range.expand(range73, (double) (byte) 0, (double) (-1L));
        org.jfree.data.Range range77 = org.jfree.data.Range.combine(range58, range76);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Range[0.0,100.0]" + "'", str42, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 265.0d + "'", double49 == 265.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertNotNull(range77);
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        boolean boolean13 = range7.intersects(0.0d, (double) (byte) 0);
        boolean boolean14 = borderArrangement0.equals((java.lang.Object) (byte) 0);
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double18 = range17.getLength();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range17, (double) (short) 10);
        double double21 = range20.getLowerBound();
        double double22 = range20.getLength();
        double double24 = range20.constrain((double) 10);
        boolean boolean25 = borderArrangement0.equals((java.lang.Object) range20);
        org.jfree.chart.block.BlockContainer blockContainer26 = null;
        java.awt.Graphics2D graphics2D27 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D29 = borderArrangement0.arrange(blockContainer26, graphics2D27, rectangleConstraint28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range2, (double) (byte) 10);
        org.jfree.data.Range range15 = new org.jfree.data.Range(100.0d, (double) (byte) 100);
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range2, range15);
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range2, (double) (byte) 1);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range2, 410.5d, (-445.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range21, 4.5d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        org.jfree.data.Range range2 = new org.jfree.data.Range(50.0d, 330.0d);
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        double double6 = range2.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 330.0d, true);
        java.lang.String str10 = range9.toString();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range13.constrain(10.0d);
        double double16 = range13.getLowerBound();
        boolean boolean19 = range13.intersects((double) (byte) 0, 0.0d);
        double double21 = range13.constrain((double) (byte) -1);
        double double22 = range13.getUpperBound();
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range13, 52.0d, false);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range9, range25);
        double double27 = range25.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Range[330.0,340.0]" + "'", str10, "Range[330.0,340.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getCentralValue();
        double double20 = range2.constrain(6800.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range8, 0.0d);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range26, (double) (-1.0f), 132.0d);
        double double31 = range29.constrain(100.0d);
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range29, 510.0d);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (-2.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) (-1L));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 49.0d, 10.0d);
        boolean boolean7 = range2.contains(10000.0d);
        boolean boolean9 = range2.contains((double) 0.0f);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        double double5 = range2.getLowerBound();
        boolean boolean8 = range2.intersects((double) (byte) 0, 0.0d);
        double double10 = range2.constrain((double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range2, 11.0d);
        double double13 = range12.getUpperBound();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, 31.0d);
        org.jfree.data.Range range18 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range18, (double) (-1));
        double double21 = range20.getUpperBound();
        boolean boolean24 = range20.intersects(50.0d, 5.0d);
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double28 = range27.getLength();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) (short) 10);
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range20, range27);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range20, (double) (byte) 10);
        double double35 = range33.constrain(11.0d);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range12, range33);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range12, 0.0d, 2504322.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 11.0d + "'", double13 == 11.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 99.0d + "'", double21 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 19.0d + "'", double35 == 19.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range39);
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        double double37 = range33.getLowerBound();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, 154.0d);
        boolean boolean42 = range33.intersects((double) 0, (double) 1L);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        boolean boolean10 = borderArrangement0.equals((java.lang.Object) '#');
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 100.0d, (double) 100);
        double double18 = range16.constrain((double) (short) 1);
        boolean boolean19 = borderArrangement0.equals((java.lang.Object) (short) 1);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        double double28 = range27.getLowerBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) 100L);
        org.jfree.data.Range range33 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range36 = org.jfree.data.Range.expand(range33, 100.0d, (double) 100);
        boolean boolean37 = range30.equals((java.lang.Object) range33);
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range30, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range30, (double) 100.0f);
        double double43 = range30.getCentralValue();
        boolean boolean45 = range30.equals((java.lang.Object) 0);
        org.jfree.data.Range range48 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double49 = range48.getLength();
        double double51 = range48.constrain(0.0d);
        java.lang.String str52 = range48.toString();
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range48, (double) (short) 1, true);
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range55, (double) '4');
        org.jfree.data.Range range58 = org.jfree.data.Range.combine(range30, range55);
        boolean boolean59 = borderArrangement0.equals((java.lang.Object) range58);
        org.jfree.data.Range range62 = org.jfree.data.Range.shift(range58, 9954.5d, false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 50.0d + "'", double43 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Range[0.0,10.0]" + "'", str52, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(range62);
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range17, 108.0d);
        java.lang.Class<?> wildcardClass31 = range17.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (-4949.0d));
        double double28 = range27.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-4949.0d) + "'", double28 == (-4949.0d));
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        java.lang.String str8 = range2.toString();
        double double9 = range2.getCentralValue();
        double double11 = range2.constrain(0.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range2, (double) (-1L));
        double double14 = range13.getCentralValue();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, 20.0d);
        java.lang.String str17 = range13.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[1.0,100.0]" + "'", str8, "Range[1.0,100.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.5d + "'", double9 == 50.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 49.5d + "'", double14 == 49.5d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[0.0,99.0]" + "'", str17, "Range[0.0,99.0]");
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str8 = range2.toString();
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, (double) (-1));
        double double14 = range13.getUpperBound();
        boolean boolean17 = range13.intersects(50.0d, 5.0d);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double21 = range20.getLength();
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range20, (double) (short) 10);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range20);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range2, range24);
        boolean boolean28 = range24.intersects((double) 0.0f, 15.0d);
        boolean boolean30 = range24.contains((-2006.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[0.0,10.0]" + "'", str8, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 99.0d + "'", double14 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range5, (double) (-1));
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range10, 100.0d, (double) 100);
        double double14 = range13.getLowerBound();
        double double15 = range13.getLowerBound();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range13, 10000.0d, true);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj22 = new java.lang.Object();
        boolean boolean23 = range21.equals(obj22);
        boolean boolean26 = range21.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range21, 0.0d, (double) (byte) -1);
        boolean boolean32 = range21.intersects((double) 100, (double) 10L);
        boolean boolean35 = range21.intersects(19899.0d, 9999.0d);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range13, range21);
        boolean boolean37 = range7.equals((java.lang.Object) range21);
        double double38 = range21.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9899.0d) + "'", double14 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-9899.0d) + "'", double15 == (-9899.0d));
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double20 = range19.getLength();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) (short) 10);
        double double23 = range22.getLowerBound();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) 100L);
        org.jfree.data.Range range28 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range28, 100.0d, (double) 100);
        boolean boolean32 = range25.equals((java.lang.Object) range28);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range25, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range25, (double) 100.0f);
        double double38 = range25.getCentralValue();
        boolean boolean40 = range25.equals((java.lang.Object) 0);
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getLength();
        double double46 = range43.constrain(0.0d);
        java.lang.String str47 = range43.toString();
        org.jfree.data.Range range50 = org.jfree.data.Range.shift(range43, (double) (short) 1, true);
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range50, (double) '4');
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range52, (double) 1L);
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range25, range52);
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range52, 107.0d, 0.0d);
        boolean boolean59 = borderArrangement0.equals((java.lang.Object) 107.0d);
        org.jfree.chart.block.BorderArrangement borderArrangement60 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean62 = borderArrangement60.equals((java.lang.Object) (-1L));
        boolean boolean64 = borderArrangement60.equals((java.lang.Object) (byte) 10);
        borderArrangement60.clear();
        boolean boolean66 = borderArrangement0.equals((java.lang.Object) borderArrangement60);
        org.jfree.chart.block.BlockContainer blockContainer67 = null;
        java.awt.Graphics2D graphics2D68 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D70 = borderArrangement0.arrange(blockContainer67, graphics2D68, rectangleConstraint69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Range[0.0,10.0]" + "'", str47, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        org.jfree.data.Range range2 = new org.jfree.data.Range(55.0d, 135.0d);
        double double3 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 135.0d + "'", double3 == 135.0d);
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getUpperBound();
        double double7 = range2.getLength();
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range10, 100.0d, (double) 100);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range13, (double) (byte) -1, (double) 100L);
        double double19 = range13.constrain(265.0d);
        java.lang.String str20 = range13.toString();
        double double21 = range13.getLength();
        boolean boolean22 = range2.equals((java.lang.Object) range13);
        double double24 = range13.constrain(54.0d);
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range13, (-60200.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-9899.0d) + "'", double14 == (-9899.0d));
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 265.0d + "'", double19 == 265.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Range[-9899.0,10000.0]" + "'", str20, "Range[-9899.0,10000.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 19899.0d + "'", double21 == 19899.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 54.0d + "'", double24 == 54.0d);
        org.junit.Assert.assertNotNull(range26);
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) ' ');
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, 20.0d, true);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range17, (double) 100L);
        boolean boolean23 = range20.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range26, (double) (short) 10);
        double double30 = range29.getLowerBound();
        boolean boolean32 = range29.contains((double) (byte) 0);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range29, (double) 1.0f, false);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range20, range35);
        double double37 = range36.getLength();
        org.jfree.data.Range range40 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double41 = range40.getLength();
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range40, (double) (short) 10);
        double double44 = range43.getLowerBound();
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range43, (double) 100L);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range46, (double) 100L, true);
        boolean boolean50 = range36.equals((java.lang.Object) range46);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range46, (double) '4');
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range46, (double) 1, true);
        boolean boolean56 = range8.equals((java.lang.Object) range55);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj10 = new java.lang.Object();
        boolean boolean11 = range9.equals(obj10);
        boolean boolean12 = borderArrangement0.equals(obj10);
        org.jfree.data.Range range15 = new org.jfree.data.Range(1.0d, (double) (short) 10);
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double20 = range19.getCentralValue();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range19, (double) 1);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range19, (double) 'a');
        boolean boolean26 = range19.equals((java.lang.Object) 10);
        boolean boolean28 = range19.contains((double) 1.0f);
        double double29 = range19.getUpperBound();
        boolean boolean30 = borderArrangement0.equals((java.lang.Object) double29);
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj34 = new java.lang.Object();
        boolean boolean35 = range33.equals(obj34);
        boolean boolean38 = range33.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range41 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range41.constrain(10.0d);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range33, range41);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range33, (double) (short) 100, false);
        boolean boolean50 = range33.intersects((double) '#', (double) 0.0f);
        org.jfree.data.Range range53 = org.jfree.data.Range.expand(range33, (double) 0, 26.5d);
        double double54 = range33.getLength();
        boolean boolean55 = borderArrangement0.equals((java.lang.Object) double54);
        borderArrangement0.clear();
        org.jfree.chart.block.Block block57 = null;
        org.jfree.data.Range range60 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double61 = range60.getLength();
        org.jfree.data.Range range63 = org.jfree.data.Range.expandToInclude(range60, (double) (short) 10);
        double double64 = range60.getUpperBound();
        org.jfree.data.Range range67 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj68 = new java.lang.Object();
        boolean boolean69 = range67.equals(obj68);
        boolean boolean72 = range67.intersects(5.0d, (double) 100L);
        double double73 = range67.getLength();
        org.jfree.data.Range range75 = org.jfree.data.Range.expandToInclude(range67, 0.0d);
        org.jfree.data.Range range76 = org.jfree.data.Range.combine(range60, range75);
        org.jfree.data.Range range79 = org.jfree.data.Range.shift(range60, (double) (-1), false);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block57, (java.lang.Object) range60);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5.0d + "'", double20 == 5.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertNotNull(range79);
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range8, (double) 0.0f, false);
        java.lang.String str28 = range8.toString();
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range8, 530.0d, false);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range31, (double) 10L);
        double double34 = range33.getLength();
        boolean boolean36 = range33.contains(195.0d);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range33, (double) (byte) 0, 33.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[0.0,100.0]" + "'", str28, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(range39);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(1.0d, (double) (short) 10);
        double double8 = range2.getCentralValue();
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj12 = new java.lang.Object();
        boolean boolean13 = range11.equals(obj12);
        boolean boolean16 = range11.intersects(1.0d, (double) (short) 10);
        double double17 = range11.getCentralValue();
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, 49.0d, 50.0d);
        boolean boolean22 = range20.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range2, range20);
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range23, (double) 100, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.0d + "'", double17 == 5.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean9 = range7.equals((java.lang.Object) 100);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range7, 0.0d);
        double double12 = range11.getLowerBound();
        double double13 = range11.getUpperBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range11, 0.0d, false);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-10.0d), 1339.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 97.0d + "'", double12 == 97.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 107.0d + "'", double13 == 107.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-9899.0d), 51.0d);
        org.jfree.chart.block.BorderArrangement borderArrangement3 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement3.clear();
        org.jfree.data.Range range7 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean8 = borderArrangement3.equals((java.lang.Object) range7);
        borderArrangement3.clear();
        borderArrangement3.clear();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double14 = range13.getCentralValue();
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range13, (double) 0L, (double) '4');
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range13, (double) ' ');
        boolean boolean20 = borderArrangement3.equals((java.lang.Object) ' ');
        org.jfree.data.Range range23 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj24 = new java.lang.Object();
        boolean boolean25 = range23.equals(obj24);
        boolean boolean28 = range23.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double32 = range31.getLength();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range31, (double) (short) 10);
        double double35 = range34.getLowerBound();
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range34, (double) 100L);
        boolean boolean38 = range23.equals((java.lang.Object) 100L);
        double double39 = range23.getLength();
        boolean boolean40 = borderArrangement3.equals((java.lang.Object) range23);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range2, range23);
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range23, 0.0d);
        org.jfree.data.Range range46 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double47 = range46.getUpperBound();
        org.jfree.data.Range range50 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double51 = range50.getCentralValue();
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range50, (double) 1);
        org.jfree.data.Range range56 = org.jfree.data.Range.expand(range53, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range57 = org.jfree.data.Range.combine(range46, range53);
        double double58 = range46.getLength();
        boolean boolean60 = range46.equals((java.lang.Object) "Range[10.0,10.0]");
        org.jfree.data.Range range61 = org.jfree.data.Range.combine(range23, range46);
        org.jfree.data.Range range64 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double65 = range64.getLength();
        org.jfree.data.Range range67 = org.jfree.data.Range.expandToInclude(range64, (double) (short) 10);
        double double68 = range67.getLowerBound();
        org.jfree.data.Range range70 = org.jfree.data.Range.expandToInclude(range67, (double) 100L);
        org.jfree.data.Range range73 = org.jfree.data.Range.shift(range70, (double) 100L, true);
        org.jfree.data.Range range76 = org.jfree.data.Range.shift(range70, (double) 100, false);
        org.jfree.data.Range range79 = org.jfree.data.Range.shift(range70, 35.0d, true);
        org.jfree.data.Range range81 = org.jfree.data.Range.shift(range79, (double) 'a');
        org.jfree.data.Range range82 = org.jfree.data.Range.combine(range61, range79);
        java.lang.String str83 = range61.toString();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5.0d + "'", double14 == 5.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 5.0d + "'", double51 == 5.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-99.0d) + "'", double58 == (-99.0d));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.0d + "'", double65 == 10.0d);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertNotNull(range81);
        org.junit.Assert.assertNotNull(range82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Range[0.0,10.0]" + "'", str83, "Range[0.0,10.0]");
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(1.0d, (double) (short) 10);
        double double8 = range2.getUpperBound();
        boolean boolean10 = range2.contains(1011.0d);
        java.lang.Class<?> wildcardClass11 = range2.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        boolean boolean19 = range2.contains((double) (byte) 100);
        double double20 = range2.getUpperBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range2, (-3.3380139E7d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(range22);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        double double7 = range6.getCentralValue();
        double double9 = range6.constrain((double) 100L);
        double double11 = range6.constrain(9.0d);
        double double12 = range6.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 265.0d + "'", double7 == 265.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 9.0d + "'", double11 == 9.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getUpperBound();
        boolean boolean8 = range4.intersects(50.0d, 5.0d);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        org.jfree.data.Range range15 = org.jfree.data.Range.combine(range4, range11);
        boolean boolean18 = range4.intersects((double) (short) 10, (double) 'a');
        boolean boolean20 = range4.contains((-420.0d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 99.0d + "'", double5 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        org.jfree.data.Range range2 = new org.jfree.data.Range(92.5d, 137.0d);
        double double3 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 137.0d + "'", double3 == 137.0d);
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getUpperBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        double double9 = range8.getCentralValue();
        org.jfree.data.Range range12 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean15 = borderArrangement13.equals((java.lang.Object) (-1L));
        borderArrangement13.clear();
        boolean boolean17 = range12.equals((java.lang.Object) borderArrangement13);
        org.jfree.chart.block.Block block18 = null;
        java.lang.Object obj19 = null;
        borderArrangement13.add(block18, obj19);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, (double) (-1));
        double double26 = range25.getUpperBound();
        boolean boolean29 = range25.intersects(50.0d, 5.0d);
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range25, range32);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range25, (double) (byte) 10);
        boolean boolean39 = borderArrangement13.equals((java.lang.Object) range25);
        boolean boolean40 = range8.equals((java.lang.Object) boolean39);
        double double41 = range8.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5.0d + "'", double9 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 99.0d + "'", double26 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(1.0d, (double) (short) 10);
        double double8 = range2.getUpperBound();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range2, (double) (byte) 0);
        java.lang.String str11 = range2.toString();
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range2, (double) 100, 5346.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[0.0,10.0]" + "'", str11, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range14);
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        org.jfree.data.Range range2 = new org.jfree.data.Range(488.0d, (double) 0);
        double double3 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        double double10 = range9.getLowerBound();
        boolean boolean12 = range9.contains(52.0d);
        double double14 = range9.constrain(0.0d);
        double double16 = range9.constrain(82.5d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 43.0d + "'", double10 == 43.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 43.0d + "'", double14 == 43.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 82.5d + "'", double16 == 82.5d);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range6.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range6, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range9, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) 10);
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range2, range16);
        boolean boolean20 = range2.intersects(150.0d, (double) 'a');
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range2, (double) 100, 19.0d);
        org.jfree.data.Range range26 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double27 = range26.getUpperBound();
        java.lang.String str28 = range26.toString();
        double double29 = range26.getCentralValue();
        boolean boolean31 = range26.contains((double) (-1));
        org.jfree.data.Range range34 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double35 = range34.getLength();
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range34, (double) (short) 10);
        double double38 = range37.getLowerBound();
        double double39 = range37.getLength();
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range26, range37);
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range40, (double) 0L, 330.0d);
        double double44 = range43.getUpperBound();
        org.jfree.data.Range range45 = null;
        org.jfree.data.Range range46 = org.jfree.data.Range.combine(range43, range45);
        double double47 = range46.getLowerBound();
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range2, range46);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.0d + "'", double7 == 5.0d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[100.0,1.0]" + "'", str28, "Range[100.0,1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 50.5d + "'", double29 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 3310.0d + "'", double44 == 3310.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(range48);
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range6, 10.0d, false);
        double double29 = range6.getCentralValue();
        double double30 = range6.getCentralValue();
        double double31 = range6.getLength();
        double double32 = range6.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 265.0d + "'", double29 == 265.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 265.0d + "'", double30 == 265.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 530.0d + "'", double31 == 530.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 530.0d + "'", double32 == 530.0d);
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        java.lang.Object obj6 = null;
        boolean boolean7 = borderArrangement0.equals(obj6);
        boolean boolean9 = borderArrangement0.equals((java.lang.Object) "Range[-4949.0,340.0]");
        org.jfree.chart.block.Block block10 = null;
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, (double) (byte) 0, (double) (-1L));
        boolean boolean19 = range13.intersects(0.0d, 51.0d);
        java.lang.Class<?> wildcardClass20 = range13.getClass();
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block10, (java.lang.Object) wildcardClass20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Class cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        org.jfree.data.Range range2 = new org.jfree.data.Range(99.0d, (double) 10);
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLowerBound();
        double double6 = range2.getLength();
        double double7 = range2.getUpperBound();
        double double8 = range2.getLength();
        double double10 = range2.constrain((-10.0d));
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range2, (-1908.0d), false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(range13);
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getLength();
        double double12 = range9.constrain(0.0d);
        java.lang.String str13 = range9.toString();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, (double) (short) 1, true);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range9, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range19, (double) (byte) 1, (double) (-1));
        boolean boolean26 = borderArrangement0.equals((java.lang.Object) range25);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double30 = range29.getUpperBound();
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range33.getCentralValue();
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range33, (double) 1);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range29, range36);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range25, range29);
        boolean boolean43 = range41.contains((double) (short) 100);
        java.lang.Object obj44 = null;
        boolean boolean45 = range41.equals(obj44);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,10.0]" + "'", str13, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5.0d + "'", double34 == 5.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 0.0d, (double) (-1L));
        double double6 = range5.getLength();
        java.lang.String str7 = range5.toString();
        double double8 = range5.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Range[10.0,10.0]" + "'", str7, "Range[10.0,10.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getCentralValue();
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        double double24 = range21.constrain(0.0d);
        java.lang.String str25 = range21.toString();
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range21, (double) (short) 1, true);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range21, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range2, range31);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range31, (double) '#');
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range37, 19.0d, (-4924.0d));
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range40, (double) ' ');
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range40, 1340.0d);
        double double46 = range44.constrain(82.5d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Range[0.0,10.0]" + "'", str25, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-9894855.0d) + "'", double46 == (-9894855.0d));
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, 10000.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        boolean boolean12 = range7.intersects((double) 1L, 1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range7, 55.0d, false);
        org.jfree.data.Range range18 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range18, 100.0d, (double) 100);
        double double23 = range21.constrain((double) (short) 1);
        boolean boolean25 = range21.contains((double) '4');
        org.jfree.data.Range range28 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range28, (double) 0);
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range21, range28);
        boolean boolean32 = range7.equals((java.lang.Object) range28);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range28, 45.5d, true);
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range28, 121.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        double double27 = range26.getLowerBound();
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (-1));
        double double33 = range32.getUpperBound();
        boolean boolean36 = range32.intersects(50.0d, 5.0d);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range39.getLength();
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range39, (double) (short) 10);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range26, range39);
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range26, 132.0d);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range46, 107.0d, true);
        java.lang.String str50 = range46.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9899.0d) + "'", double27 == (-9899.0d));
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 99.0d + "'", double33 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[-9767.0,10132.0]" + "'", str50, "Range[-9767.0,10132.0]");
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (byte) 0, (double) (-1L));
        double double6 = range2.getUpperBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (-1.0d));
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range14, (double) (byte) -1, (double) 100L);
        double double20 = range14.constrain(265.0d);
        java.lang.String str21 = range14.toString();
        boolean boolean24 = range14.intersects(101.0d, (double) (byte) 100);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range8, range14);
        double double26 = range14.getLowerBound();
        double double28 = range14.constrain(6800.0d);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range14, 42.0d, (double) 1.0f);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-9899.0d) + "'", double15 == (-9899.0d));
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 265.0d + "'", double20 == 265.0d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Range[-9899.0,10000.0]" + "'", str21, "Range[-9899.0,10000.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-9899.0d) + "'", double26 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 6800.0d + "'", double28 == 6800.0d);
        org.junit.Assert.assertNotNull(range31);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range32, 19899.0d);
        double double38 = range37.getLowerBound();
        double double39 = range37.getLength();
        java.lang.String str40 = range37.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 19899.0d + "'", double38 == 19899.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 200.0d + "'", double39 == 200.0d);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Range[19899.0,20099.0]" + "'", str40, "Range[19899.0,20099.0]");
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (short) 1, (double) (-1L));
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range17.constrain(10.0d);
        boolean boolean22 = range17.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str23 = range17.toString();
        double double25 = range17.constrain((double) 100L);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range14, range17);
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range26, (double) 100);
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj32 = new java.lang.Object();
        boolean boolean33 = range31.equals(obj32);
        boolean boolean36 = range31.intersects(5.0d, (double) 100L);
        double double37 = range31.getLength();
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range31, 0.0d);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range28, range31);
        boolean boolean43 = range28.intersects((-18.5d), 5097.5d);
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range28, 264.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Range[0.0,10.0]" + "'", str23, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(range45);
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 0.0d, (double) (byte) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range2, (double) (byte) 10);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range2, (double) 10.0f, 15.0d);
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, 100.0d, (double) 100);
        boolean boolean31 = range24.equals((java.lang.Object) range27);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range24, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range24, (double) 100.0f);
        double double37 = range24.getCentralValue();
        boolean boolean39 = range24.equals((java.lang.Object) 0);
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range42.getLength();
        double double45 = range42.constrain(0.0d);
        java.lang.String str46 = range42.toString();
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range42, (double) (short) 1, true);
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range49, (double) '4');
        org.jfree.data.Range range52 = org.jfree.data.Range.combine(range24, range49);
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 100);
        java.lang.String str55 = range54.toString();
        double double57 = range54.constrain(2010.0d);
        boolean boolean58 = range15.equals((java.lang.Object) range54);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 50.0d + "'", double37 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Range[0.0,10.0]" + "'", str46, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Range[0.0,100.0]" + "'", str55, "Range[0.0,100.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 100.0d + "'", double57 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (byte) 0, (double) (-1L));
        double double15 = range11.getUpperBound();
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        boolean boolean27 = range24.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        double double41 = range40.getLength();
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range44.constrain(10.0d);
        boolean boolean49 = range44.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str50 = range44.toString();
        boolean boolean51 = range40.equals((java.lang.Object) range44);
        boolean boolean52 = range11.equals((java.lang.Object) range44);
        boolean boolean53 = range5.equals((java.lang.Object) range44);
        org.jfree.data.Range range54 = null;
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range44, range54);
        boolean boolean57 = range55.equals((java.lang.Object) 0L);
        org.jfree.data.Range range59 = org.jfree.data.Range.expandToInclude(range55, 330.0d);
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range55, 4.5d);
        org.jfree.data.Range range64 = org.jfree.data.Range.shift(range55, (double) (byte) 1, false);
        double double65 = range55.getLength();
        double double66 = range55.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[0.0,10.0]" + "'", str50, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 10.0d + "'", double65 == 10.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        org.jfree.data.Range range2 = new org.jfree.data.Range(135.0d, (-3.3380139E7d));
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(1.0d, (double) (short) 10);
        double double8 = range2.getCentralValue();
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, 49.0d, 50.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, 6800.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range13, 4.5d);
        java.lang.Class<?> wildcardClass16 = range13.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, 10.0d);
        boolean boolean12 = range7.intersects((double) 1L, 1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range7, 55.0d, false);
        boolean boolean17 = range7.contains(340.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        double double16 = range8.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range8, 19899.0d, (double) (short) 10);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) '4', 49.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        double double11 = range2.constrain((double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range2, (-6400.0d));
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range2, 52.0d);
        double double16 = range2.getLowerBound();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) (-1.0f));
        double double9 = range8.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range8, (double) 0.0f, false);
        java.lang.String str28 = range8.toString();
        double double29 = range8.getLowerBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range8, 92.5d, (-1000.0d));
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range8, (-1003.0d), true);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[0.0,100.0]" + "'", str28, "Range[0.0,100.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = range4.equals((java.lang.Object) (byte) 100);
        double double8 = range4.getCentralValue();
        double double9 = range4.getCentralValue();
        double double10 = range4.getCentralValue();
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range4, 10009.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 50.5d + "'", double8 == 50.5d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.5d + "'", double9 == 50.5d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 50.5d + "'", double10 == 50.5d);
        org.junit.Assert.assertNotNull(range12);
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        double double37 = range33.getUpperBound();
        org.jfree.data.Range range40 = new org.jfree.data.Range((double) (byte) 100, (double) '#');
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range33, range40);
        org.jfree.data.Range range44 = new org.jfree.data.Range(100.0d, (-6400.0d));
        double double45 = range44.getLength();
        org.jfree.data.Range range48 = org.jfree.data.Range.shift(range44, 100.0d, false);
        java.lang.String str49 = range44.toString();
        org.jfree.data.Range range51 = org.jfree.data.Range.shift(range44, 0.0d);
        boolean boolean52 = range41.equals((java.lang.Object) 0.0d);
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range41, 108.0d, false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 11.0d + "'", double37 == 11.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-6500.0d) + "'", double45 == (-6500.0d));
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Range[100.0,-6400.0]" + "'", str49, "Range[100.0,-6400.0]");
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(range55);
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean11 = range6.contains((double) 0.0f);
        double double12 = range6.getLength();
        double double13 = range6.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 530.0d + "'", double12 == 530.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 530.0d + "'", double13 == 530.0d);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain((double) '#');
        double double14 = range5.constrain((double) (short) -1);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range5, (double) (-1));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range5, 200.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range18);
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        boolean boolean10 = borderArrangement0.equals((java.lang.Object) '#');
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 100.0d, (double) 100);
        double double18 = range16.constrain((double) (short) 1);
        boolean boolean19 = borderArrangement0.equals((java.lang.Object) (short) 1);
        borderArrangement0.clear();
        org.jfree.data.Range range23 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean25 = range23.contains((double) 1L);
        boolean boolean28 = range23.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range23, 265.0d);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range23, 9999.0d, (double) 0.0f);
        boolean boolean34 = borderArrangement0.equals((java.lang.Object) range33);
        double double35 = range33.getCentralValue();
        boolean boolean37 = range33.contains(98.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-209948.0d) + "'", double35 == (-209948.0d));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean9 = range2.equals((java.lang.Object) 10);
        boolean boolean11 = range2.contains((double) 1.0f);
        double double12 = range2.getUpperBound();
        double double13 = range2.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj17 = new java.lang.Object();
        boolean boolean18 = range16.equals(obj17);
        boolean boolean21 = range16.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range24 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double25 = range24.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range24, (double) (short) 10);
        double double28 = range27.getLowerBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) 100L);
        boolean boolean31 = range16.equals((java.lang.Object) 100L);
        boolean boolean33 = range16.contains(35.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range2, range16);
        org.jfree.data.Range range37 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj38 = new java.lang.Object();
        boolean boolean39 = range37.equals(obj38);
        boolean boolean42 = range37.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range45.getLength();
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range45, (double) (short) 10);
        double double49 = range48.getLowerBound();
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range48, (double) 100L);
        boolean boolean52 = range37.equals((java.lang.Object) 100L);
        boolean boolean54 = range37.contains((double) (byte) 100);
        double double55 = range37.getUpperBound();
        org.jfree.data.Range range56 = org.jfree.data.Range.combine(range34, range37);
        double double57 = range34.getLength();
        org.jfree.data.Range range60 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj61 = new java.lang.Object();
        boolean boolean62 = range60.equals(obj61);
        boolean boolean65 = range60.intersects(1.0d, (double) (short) 10);
        double double66 = range60.getUpperBound();
        double double68 = range60.constrain(10.0d);
        org.jfree.data.Range range69 = org.jfree.data.Range.combine(range34, range60);
        boolean boolean71 = range60.contains((double) (-1L));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 10.0d + "'", double68 == 10.0d);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.Range.shift(range0, 136.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        org.jfree.data.Range range2 = new org.jfree.data.Range(148.0d, 265.0d);
        double double4 = range2.constrain(35.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 148.0d + "'", double4 == 148.0d);
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1.0f, 10000.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 0);
        double double5 = range2.getLength();
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 'a', false);
        double double9 = range8.getCentralValue();
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range8, (double) 0.0f, 20.0d);
        double double13 = range12.getCentralValue();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 9999.0d + "'", double5 == 9999.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5097.5d + "'", double9 == 5097.5d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 105087.5d + "'", double13 == 105087.5d);
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range2, (-6400.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range10);
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10000.0d, 30.0d);
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = borderArrangement0.equals((java.lang.Object) 1.0f);
        borderArrangement0.clear();
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        double double14 = range11.constrain(0.0d);
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double18 = range17.getLength();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range17, (double) (short) 10);
        double double21 = range20.getLowerBound();
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range20, (double) 100L);
        boolean boolean26 = range23.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range29 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range29.getLength();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, (double) (short) 10);
        double double33 = range32.getLowerBound();
        boolean boolean35 = range32.contains((double) (byte) 0);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range32, (double) 1.0f, false);
        org.jfree.data.Range range39 = org.jfree.data.Range.combine(range23, range38);
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range42.getLength();
        double double45 = range42.constrain(0.0d);
        java.lang.String str46 = range42.toString();
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range42, (double) (short) 1, true);
        org.jfree.data.Range range52 = org.jfree.data.Range.expand(range42, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range55 = org.jfree.data.Range.expand(range52, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range58 = org.jfree.data.Range.shift(range52, (double) 0L, false);
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range23, range58);
        org.jfree.data.Range range62 = org.jfree.data.Range.shift(range23, 1011.0d, false);
        org.jfree.data.Range range63 = org.jfree.data.Range.combine(range11, range62);
        double double64 = range11.getLength();
        boolean boolean65 = borderArrangement0.equals((java.lang.Object) double64);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Range[0.0,10.0]" + "'", str46, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) (-1L));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 49.0d, 10.0d);
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range8.constrain(10.0d);
        boolean boolean13 = range8.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str14 = range8.toString();
        double double16 = range8.constrain((double) 100L);
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range2, range8);
        org.jfree.data.Range range20 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj21 = new java.lang.Object();
        boolean boolean22 = range20.equals(obj21);
        boolean boolean25 = range20.intersects(1.0d, (double) (short) 10);
        double double26 = range20.getCentralValue();
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range20, 49.0d, 50.0d);
        org.jfree.data.Range range30 = org.jfree.data.Range.combine(range8, range20);
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double35 = range33.constrain(10.0d);
        boolean boolean38 = range33.intersects((double) 10.0f, (double) (-1.0f));
        boolean boolean40 = range33.contains((double) 0);
        boolean boolean41 = range8.equals((java.lang.Object) range33);
        java.lang.String str42 = range8.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[0.0,10.0]" + "'", str14, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5.0d + "'", double26 == 5.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Range[0.0,10.0]" + "'", str42, "Range[0.0,10.0]");
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range2.getUpperBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, 54.0d);
        double double11 = range10.getLowerBound();
        boolean boolean13 = range10.contains(300.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 54.0d + "'", double11 == 54.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (-1.0f));
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.Block block7 = null;
        org.jfree.data.Range range10 = new org.jfree.data.Range(1.0d, (double) (byte) -1);
        double double11 = range10.getCentralValue();
        boolean boolean13 = range10.contains(0.0d);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block7, (java.lang.Object) range10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        org.jfree.data.Range range2 = new org.jfree.data.Range(92.5d, 137.0d);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-275.0d), true);
        org.junit.Assert.assertNotNull(range5);
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, 0.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (-1002.5d));
        org.junit.Assert.assertNotNull(range4);
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        double double26 = range24.getLowerBound();
        boolean boolean29 = range24.intersects((-12797.0d), (-77.25d));
        double double30 = range24.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (-9899.0d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, 50.0d);
        java.lang.String str8 = range2.toString();
        double double9 = range2.getUpperBound();
        java.lang.Class<?> wildcardClass10 = range2.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[0.0,10.0]" + "'", str8, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1551.0d, 99.0d);
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        double double13 = range12.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean17 = range12.equals((java.lang.Object) range16);
        org.jfree.data.Range range20 = new org.jfree.data.Range(11.0d, (-1.0d));
        double double21 = range20.getCentralValue();
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range12, range20);
        org.jfree.data.Range range25 = new org.jfree.data.Range(99.0d, (double) (byte) -1);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range20, range25);
        boolean boolean29 = range26.intersects((double) (short) 100, 43.0d);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range26, 15.0d);
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range31, (double) 0L);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 330.0d + "'", double13 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range33);
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        double double39 = range38.getUpperBound();
        boolean boolean40 = borderArrangement0.equals((java.lang.Object) range38);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range38, (double) (-1));
        double double43 = range38.getLowerBound();
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range38, 19899.0d, 100.0d);
        double double47 = range46.getCentralValue();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-989900.0d) + "'", double47 == (-989900.0d));
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1.0f, false);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, (double) 100L, (double) (byte) 10);
        java.lang.String str11 = range10.toString();
        double double12 = range10.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[-4190.0,472.0]" + "'", str11, "Range[-4190.0,472.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-4190.0d) + "'", double12 == (-4190.0d));
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range2, (double) (short) 100, false);
        java.lang.String str17 = range2.toString();
        double double18 = range2.getCentralValue();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range2, 169192.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[0.0,10.0]" + "'", str17, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertNotNull(range20);
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        java.lang.String str4 = range2.toString();
        double double5 = range2.getCentralValue();
        boolean boolean8 = range2.intersects((-6400.0d), 1011.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range2, 10.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Range[100.0,1.0]" + "'", str4, "Range[100.0,1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 50.5d + "'", double5 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range10);
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double10 = range9.getLength();
        double double12 = range9.constrain(0.0d);
        java.lang.String str13 = range9.toString();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range9, (double) (short) 1, true);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range9, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range19, (double) (byte) 1, (double) (-1));
        boolean boolean26 = borderArrangement0.equals((java.lang.Object) range25);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double30 = range29.getUpperBound();
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range33.getCentralValue();
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range33, (double) 1);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range29, range36);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range25, range29);
        org.jfree.data.Range range44 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj45 = new java.lang.Object();
        boolean boolean46 = range44.equals(obj45);
        boolean boolean49 = range44.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double53 = range52.getLength();
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range52, (double) (short) 10);
        double double56 = range55.getLowerBound();
        org.jfree.data.Range range58 = org.jfree.data.Range.expandToInclude(range55, (double) 100L);
        boolean boolean59 = range44.equals((java.lang.Object) 100L);
        double double60 = range44.getLength();
        boolean boolean63 = range44.intersects(100.0d, (double) (short) 100);
        org.jfree.data.Range range64 = org.jfree.data.Range.combine(range29, range44);
        org.jfree.data.Range range67 = org.jfree.data.Range.expand(range44, (-2005.0d), 30.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,10.0]" + "'", str13, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5.0d + "'", double34 == 5.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 10.0d + "'", double60 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertNotNull(range67);
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getCentralValue();
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double22 = range21.getLength();
        double double24 = range21.constrain(0.0d);
        java.lang.String str25 = range21.toString();
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range21, (double) (short) 1, true);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range21, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range2, range31);
        double double37 = range2.constrain((double) 1L);
        java.lang.String str38 = range2.toString();
        double double39 = range2.getLowerBound();
        double double40 = range2.getCentralValue();
        double double41 = range2.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.0d + "'", double18 == 5.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Range[0.0,10.0]" + "'", str25, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Range[0.0,10.0]" + "'", str38, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5.0d + "'", double40 == 5.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.Block block31 = null;
        org.jfree.data.Range range34 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement35 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean37 = borderArrangement35.equals((java.lang.Object) (-1L));
        borderArrangement35.clear();
        boolean boolean39 = range34.equals((java.lang.Object) borderArrangement35);
        org.jfree.chart.block.Block block40 = null;
        java.lang.Object obj41 = null;
        borderArrangement35.add(block40, obj41);
        org.jfree.data.Range range45 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range45, (double) (-1));
        double double48 = range47.getUpperBound();
        boolean boolean51 = range47.intersects(50.0d, 5.0d);
        org.jfree.data.Range range54 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double55 = range54.getLength();
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range54, (double) (short) 10);
        org.jfree.data.Range range58 = org.jfree.data.Range.combine(range47, range54);
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range47, (double) (byte) 10);
        boolean boolean61 = borderArrangement35.equals((java.lang.Object) range47);
        org.jfree.data.Range range64 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double65 = range64.getUpperBound();
        org.jfree.data.Range range68 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double69 = range68.getCentralValue();
        org.jfree.data.Range range71 = org.jfree.data.Range.shift(range68, (double) 1);
        org.jfree.data.Range range74 = org.jfree.data.Range.expand(range71, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range75 = org.jfree.data.Range.combine(range64, range71);
        org.jfree.data.Range range77 = org.jfree.data.Range.expandToInclude(range71, (double) '4');
        boolean boolean78 = borderArrangement35.equals((java.lang.Object) '4');
        org.jfree.data.Range range81 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double82 = range81.getLength();
        org.jfree.data.Range range84 = org.jfree.data.Range.expandToInclude(range81, (double) (short) 10);
        double double85 = range81.getUpperBound();
        org.jfree.data.Range range87 = org.jfree.data.Range.expandToInclude(range81, 0.0d);
        double double88 = range87.getCentralValue();
        double double89 = range87.getLength();
        boolean boolean90 = borderArrangement35.equals((java.lang.Object) range87);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement0.add(block31, (java.lang.Object) borderArrangement35);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.chart.block.BorderArrangement cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 99.0d + "'", double48 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5.0d + "'", double69 == 5.0d);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 10.0d + "'", double82 == 10.0d);
        org.junit.Assert.assertNotNull(range84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 10.0d + "'", double85 == 10.0d);
        org.junit.Assert.assertNotNull(range87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 5.0d + "'", double88 == 5.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 10.0d + "'", double89 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean4 = range2.contains((double) 1L);
        boolean boolean7 = range2.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 265.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, 9999.0d, (double) 0.0f);
        double double13 = range2.getUpperBound();
        double double14 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (byte) 10);
        org.jfree.chart.block.Block block5 = null;
        org.jfree.data.Range range6 = null;
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        borderArrangement0.add(block5, (java.lang.Object) range6);
        org.jfree.data.Range range12 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean14 = range12.contains((double) 1L);
        boolean boolean17 = range12.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, 265.0d);
        boolean boolean20 = borderArrangement0.equals((java.lang.Object) 265.0d);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) (byte) 100, 101.0d);
        boolean boolean24 = borderArrangement0.equals((java.lang.Object) (byte) 100);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.BorderArrangement borderArrangement27 = new org.jfree.chart.block.BorderArrangement();
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        boolean boolean31 = borderArrangement27.equals((java.lang.Object) (short) 100);
        org.jfree.data.Range range34 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double35 = range34.getCentralValue();
        double double36 = range34.getLowerBound();
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range39.getCentralValue();
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range39, (double) 1);
        org.jfree.data.Range range44 = org.jfree.data.Range.expandToInclude(range39, (double) (short) 10);
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range34, range39);
        double double47 = range34.constrain((double) (byte) 1);
        double double48 = range34.getCentralValue();
        double double49 = range34.getCentralValue();
        boolean boolean50 = borderArrangement27.equals((java.lang.Object) double49);
        borderArrangement27.clear();
        boolean boolean52 = borderArrangement0.equals((java.lang.Object) borderArrangement27);
        borderArrangement27.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 5.0d + "'", double35 == 5.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5.0d + "'", double40 == 5.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 5.0d + "'", double48 == 5.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 5.0d + "'", double49 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        org.jfree.data.Range range2 = new org.jfree.data.Range(43.0d, 135.0d);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 131.0d, 0.0d);
        java.lang.String str6 = range5.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[-12009.0,135.0]" + "'", str6, "Range[-12009.0,135.0]");
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        double double26 = range24.getLowerBound();
        double double27 = range24.getLowerBound();
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range33, (double) 100L);
        boolean boolean39 = range36.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range42 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double43 = range42.getLength();
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range42, (double) (short) 10);
        double double46 = range45.getLowerBound();
        boolean boolean48 = range45.contains((double) (byte) 0);
        org.jfree.data.Range range51 = org.jfree.data.Range.shift(range45, (double) 1.0f, false);
        org.jfree.data.Range range52 = org.jfree.data.Range.combine(range36, range51);
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range36, 0.0d);
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range54, (double) (-1.0f), 132.0d);
        double double59 = range57.constrain(100.0d);
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range57, 510.0d);
        boolean boolean62 = range24.equals((java.lang.Object) 510.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        boolean boolean38 = range32.intersects((double) 1L, (double) (byte) 1);
        org.jfree.data.Range range41 = new org.jfree.data.Range(11.0d, (double) (byte) -1);
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range41, (double) 0);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range32, range43);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range43, 15.0d, false);
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range43, 11.0d, 52.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range43, (-39.5d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        double double21 = range8.getCentralValue();
        boolean boolean23 = range8.equals((java.lang.Object) 0);
        org.jfree.data.Range range26 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double27 = range26.getLength();
        double double29 = range26.constrain(0.0d);
        java.lang.String str30 = range26.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, (double) (short) 1, true);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) '4');
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range8, range33);
        java.lang.String str37 = range36.toString();
        org.jfree.data.Range range40 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range40, 100.0d, (double) 100);
        double double44 = range43.getLowerBound();
        double double45 = range43.getLowerBound();
        org.jfree.data.Range range46 = org.jfree.data.Range.combine(range36, range43);
        double double47 = range43.getLength();
        java.lang.String str48 = range43.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 50.0d + "'", double21 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[0.0,10.0]" + "'", str30, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Range[0.0,100.0]" + "'", str37, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-9899.0d) + "'", double44 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-9899.0d) + "'", double45 == (-9899.0d));
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 19899.0d + "'", double47 == 19899.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Range[-9899.0,10000.0]" + "'", str48, "Range[-9899.0,10000.0]");
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        boolean boolean28 = borderArrangement7.equals((java.lang.Object) 50.0d);
        borderArrangement7.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range32.constrain(10.0d);
        boolean boolean37 = range32.intersects((double) 10.0f, (double) (-1.0f));
        double double39 = range32.constrain(0.0d);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range32, (double) 0.0f, (double) ' ');
        double double43 = range42.getUpperBound();
        org.jfree.data.Range range46 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean47 = range42.equals((java.lang.Object) range46);
        boolean boolean48 = borderArrangement7.equals((java.lang.Object) boolean47);
        org.jfree.chart.block.Block block49 = null;
        org.jfree.data.Range range52 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double53 = range52.getCentralValue();
        org.jfree.data.Range range56 = org.jfree.data.Range.expand(range52, (double) 0L, (double) '4');
        double double57 = range56.getCentralValue();
        double double59 = range56.constrain((double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement7.add(block49, (java.lang.Object) range56);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 330.0d + "'", double43 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5.0d + "'", double53 == 5.0d);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 265.0d + "'", double57 == 265.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double28 = range27.getLength();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, (double) (short) 10);
        double double31 = range30.getLowerBound();
        boolean boolean33 = range30.contains((double) (byte) 0);
        double double34 = range30.getLength();
        boolean boolean37 = range30.intersects(19899.0d, (double) 100);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range30, (double) 10.0f);
        double double40 = range39.getLowerBound();
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range23, range39);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range41);
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        boolean boolean14 = range5.contains((double) 10.0f);
        java.lang.String str15 = range5.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Range[0.0,10.0]" + "'", str15, "Range[0.0,10.0]");
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        double double13 = range12.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean17 = range12.equals((java.lang.Object) range16);
        org.jfree.data.Range range20 = new org.jfree.data.Range(11.0d, (-1.0d));
        double double21 = range20.getCentralValue();
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range12, range20);
        org.jfree.data.Range range25 = new org.jfree.data.Range(99.0d, (double) (byte) -1);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range20, range25);
        double double27 = range25.getLength();
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 10);
        double double34 = range33.getLowerBound();
        boolean boolean36 = range33.contains((double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 1.0f, false);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range33, (double) '4', false);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range25, range42);
        double double44 = range42.getUpperBound();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 330.0d + "'", double13 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-100.0d) + "'", double27 == (-100.0d));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 62.0d + "'", double44 == 62.0d);
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range13, (double) '#', false);
        double double17 = range16.getLowerBound();
        double double18 = range16.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 40.0d + "'", double18 == 40.0d);
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-6400.0d));
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 100.0d, false);
        java.lang.String str7 = range2.toString();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj11 = new java.lang.Object();
        boolean boolean12 = range10.equals(obj11);
        boolean boolean15 = range10.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double20 = range18.constrain(10.0d);
        org.jfree.data.Range range21 = org.jfree.data.Range.combine(range10, range18);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range10, (double) (short) 100, false);
        boolean boolean27 = range10.intersects((double) '#', (double) 0.0f);
        double double28 = range10.getUpperBound();
        org.jfree.data.Range range31 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, 100.0d, (double) 100);
        double double36 = range34.constrain((double) (short) 1);
        boolean boolean38 = range34.contains((double) '4');
        double double39 = range34.getLowerBound();
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range34, 100.0d);
        boolean boolean43 = range41.contains((double) (byte) -1);
        boolean boolean44 = range10.equals((java.lang.Object) boolean43);
        boolean boolean47 = range10.intersects(10.0d, 54.0d);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range10, 0.0d);
        org.jfree.data.Range range50 = org.jfree.data.Range.combine(range2, range10);
        java.lang.String str51 = range10.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-6500.0d) + "'", double3 == (-6500.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Range[100.0,-6400.0]" + "'", str7, "Range[100.0,-6400.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-9899.0d) + "'", double39 == (-9899.0d));
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Range[0.0,10.0]" + "'", str51, "Range[0.0,10.0]");
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range7, 100.0d, (double) 100);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range7, (double) ' ');
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, 10.0d);
        boolean boolean17 = range12.intersects((double) 1L, 1.0d);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range12, 55.0d, false);
        org.jfree.data.Range range21 = org.jfree.data.Range.combine(range2, range20);
        boolean boolean23 = range2.contains((-235.0d));
        boolean boolean25 = range2.contains(630.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        double double9 = range2.getUpperBound();
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, 110.0d, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range2, 1551.0d, (double) (byte) 10);
        double double16 = range2.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 50.5d + "'", double16 == 50.5d);
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        double double39 = range38.getUpperBound();
        boolean boolean40 = borderArrangement0.equals((java.lang.Object) range38);
        borderArrangement0.clear();
        boolean boolean43 = borderArrangement0.equals((java.lang.Object) 26.5d);
        org.jfree.chart.block.BorderArrangement borderArrangement44 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean46 = borderArrangement44.equals((java.lang.Object) (-1L));
        boolean boolean48 = borderArrangement44.equals((java.lang.Object) (byte) 10);
        org.jfree.chart.block.Block block49 = null;
        org.jfree.data.Range range50 = null;
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range50, 10.0d);
        borderArrangement44.add(block49, (java.lang.Object) range50);
        org.jfree.data.Range range56 = new org.jfree.data.Range(10.0d, (double) '4');
        boolean boolean58 = range56.contains((double) 1L);
        boolean boolean61 = range56.intersects((-1.0d), (double) (byte) 10);
        org.jfree.data.Range range63 = org.jfree.data.Range.shift(range56, 265.0d);
        boolean boolean64 = borderArrangement44.equals((java.lang.Object) 265.0d);
        org.jfree.data.Range range67 = new org.jfree.data.Range((double) (byte) 100, 101.0d);
        boolean boolean68 = borderArrangement44.equals((java.lang.Object) (byte) 100);
        boolean boolean69 = borderArrangement0.equals((java.lang.Object) borderArrangement44);
        borderArrangement44.clear();
        org.jfree.data.Range range73 = new org.jfree.data.Range((double) 1.0f, 10000.0d);
        org.jfree.data.Range range75 = org.jfree.data.Range.shift(range73, (double) 0);
        boolean boolean76 = borderArrangement44.equals((java.lang.Object) range75);
        org.jfree.chart.block.Block block77 = null;
        org.jfree.data.Range range80 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        org.jfree.chart.block.BorderArrangement borderArrangement81 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean83 = borderArrangement81.equals((java.lang.Object) (-1L));
        borderArrangement81.clear();
        boolean boolean85 = range80.equals((java.lang.Object) borderArrangement81);
        // The following exception was thrown during execution in test generation
        try {
            borderArrangement44.add(block77, (java.lang.Object) range80);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.jfree.data.Range cannot be cast to org.jfree.chart.util.RectangleEdge");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (double) 100L);
        boolean boolean17 = range2.equals((java.lang.Object) 100L);
        double double18 = range2.getLength();
        boolean boolean21 = range2.intersects(100.0d, (double) (short) 100);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range2, 5346.0d);
        java.lang.String str24 = range2.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Range[0.0,10.0]" + "'", str24, "Range[0.0,10.0]");
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        boolean boolean8 = range2.intersects((double) 'a', (-9899.0d));
        double double10 = range2.constrain((double) 10L);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range2, 0.0d);
        double double13 = range12.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        org.jfree.data.Range range2 = new org.jfree.data.Range(135.0d, 1505.0d);
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        double double3 = range2.getUpperBound();
        org.jfree.data.Range range6 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double7 = range6.getLength();
        double double9 = range6.constrain(0.0d);
        java.lang.String str10 = range6.toString();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range6, (double) (short) 1, true);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range13, (double) '4');
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range2, range13);
        double double18 = range16.constrain(107.0d);
        double double20 = range16.constrain(10.0d);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, 100.0d, (double) 100);
        double double28 = range26.constrain((double) (short) 1);
        boolean boolean30 = range26.contains((double) '4');
        double double31 = range26.getLowerBound();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range26, 100.0d);
        boolean boolean36 = range26.intersects((double) 100.0f, 1.0d);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range39.getLength();
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range39, (double) (short) 10);
        double double43 = range42.getLowerBound();
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range42, (double) 100L);
        org.jfree.data.Range range48 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range48, 100.0d, (double) 100);
        boolean boolean52 = range45.equals((java.lang.Object) range48);
        org.jfree.data.Range range55 = org.jfree.data.Range.expand(range45, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range45, (double) 100.0f);
        org.jfree.data.Range range60 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range61 = org.jfree.data.Range.combine(range45, range60);
        boolean boolean62 = range26.equals((java.lang.Object) range61);
        org.jfree.data.Range range65 = org.jfree.data.Range.shift(range26, 0.0d, false);
        org.jfree.data.Range range68 = org.jfree.data.Range.expand(range65, (-164.5d), 5018543.0d);
        org.jfree.data.Range range69 = org.jfree.data.Range.combine(range16, range68);
        boolean boolean71 = range68.contains(118.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Range[0.0,10.0]" + "'", str10, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9899.0d) + "'", double31 == (-9899.0d));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double30 = range29.getUpperBound();
        org.jfree.data.Range range33 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range33.getCentralValue();
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range33, (double) 1);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range29, range36);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range5, range40);
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range40, 540.0d, false);
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range44, 0.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5.0d + "'", double34 == 5.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range46);
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean9 = range7.equals((java.lang.Object) 100);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range7, 0.0d);
        double double12 = range11.getLowerBound();
        double double13 = range11.getLength();
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range11, 45.5d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range11, (-1003.5d), false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 97.0d + "'", double12 == 97.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getUpperBound();
        boolean boolean8 = range4.intersects(50.0d, 5.0d);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        org.jfree.data.Range range15 = org.jfree.data.Range.combine(range4, range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range11, 1.0d, false);
        double double19 = range18.getLength();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 99.0d + "'", double5 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range28.constrain(10.0d);
        boolean boolean33 = range28.intersects((double) 10.0f, (double) (-1.0f));
        java.lang.String str34 = range28.toString();
        boolean boolean35 = range24.equals((java.lang.Object) range28);
        boolean boolean37 = range24.contains(1010.0d);
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range24, 0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Range[0.0,10.0]" + "'", str34, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range39);
    }

    @Test
    public void test2452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        org.jfree.chart.block.BorderArrangement borderArrangement6 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement6.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean11 = borderArrangement6.equals((java.lang.Object) range10);
        boolean boolean13 = borderArrangement6.equals((java.lang.Object) 1.0f);
        boolean boolean14 = borderArrangement0.equals((java.lang.Object) 1.0f);
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, 100.0d, (double) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range17, (double) ' ');
        java.lang.String str23 = range17.toString();
        java.lang.String str24 = range17.toString();
        boolean boolean25 = borderArrangement0.equals((java.lang.Object) str24);
        boolean boolean27 = borderArrangement0.equals((java.lang.Object) 2010.0d);
        borderArrangement0.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Range[1.0,100.0]" + "'", str23, "Range[1.0,100.0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Range[1.0,100.0]" + "'", str24, "Range[1.0,100.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2453");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range10, (double) 10.0f);
        org.jfree.data.Range range18 = new org.jfree.data.Range((double) 1.0f, 10000.0d);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range18, (double) 0);
        double double21 = range18.getLength();
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range18, (double) 'a', false);
        double double25 = range24.getCentralValue();
        boolean boolean27 = range24.contains((double) 0);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range15, range24);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range24, 99.0d, 49.5d);
        java.lang.String str32 = range24.toString();
        double double33 = range24.getCentralValue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 9999.0d + "'", double21 == 9999.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5097.5d + "'", double25 == 5097.5d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Range[98.0,10097.0]" + "'", str32, "Range[98.0,10097.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5097.5d + "'", double33 == 5097.5d);
    }

    @Test
    public void test2454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2454");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (-1));
        double double5 = range4.getUpperBound();
        double double6 = range4.getCentralValue();
        double double7 = range4.getLowerBound();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        double double13 = range10.getUpperBound();
        java.lang.String str14 = range10.toString();
        boolean boolean15 = range4.equals((java.lang.Object) str14);
        double double16 = range4.getCentralValue();
        double double18 = range4.constrain(169192.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 99.0d + "'", double5 == 99.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 54.0d + "'", double6 == 54.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 9.0d + "'", double7 == 9.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[0.0,10.0]" + "'", str14, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 54.0d + "'", double16 == 54.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 99.0d + "'", double18 == 99.0d);
    }

    @Test
    public void test2455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2455");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 100.0d, (double) 100);
        boolean boolean15 = range8.equals((java.lang.Object) range11);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range8, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range8, (double) 100.0f);
        java.lang.String str21 = range20.toString();
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range20, (double) (-1.0f));
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range23, 50.0d, true);
        double double27 = range23.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Range[0.0,100.0]" + "'", str21, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
    }

    @Test
    public void test2456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2456");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10.0d, (double) '4');
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1.0f, false);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 100L, true);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range8, 92.5d, 108.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range8, 136.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
    }

    @Test
    public void test2457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2457");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        org.jfree.data.Range range9 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj10 = new java.lang.Object();
        boolean boolean11 = range9.equals(obj10);
        boolean boolean12 = borderArrangement0.equals(obj10);
        org.jfree.data.Range range15 = new org.jfree.data.Range(1.0d, (double) (short) 10);
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        java.lang.Object obj17 = null;
        boolean boolean18 = borderArrangement0.equals(obj17);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2458");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(1.0d, (double) (short) 10);
        double double8 = range2.getUpperBound();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range2, (double) (byte) 0);
        double double11 = range10.getUpperBound();
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range10, 0.0d, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
    }

    @Test
    public void test2459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = borderArrangement0.equals((java.lang.Object) 1.0f);
        java.lang.Object obj8 = null;
        boolean boolean9 = borderArrangement0.equals(obj8);
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.BlockContainer blockContainer14 = null;
        java.awt.Graphics2D graphics2D15 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D17 = borderArrangement0.arrange(blockContainer14, graphics2D15, rectangleConstraint16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2460");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range13, 5097.5d, false);
        boolean boolean38 = range35.intersects(37.0d, 254.0d);
        double double40 = range35.constrain((-3150.0d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5097.5d + "'", double40 == 5097.5d);
    }

    @Test
    public void test2461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2461");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range6, 10.0d, false);
        java.lang.String str29 = range6.toString();
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range6, (double) (byte) 1, (-670.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Range[0.0,530.0]" + "'", str29, "Range[0.0,530.0]");
        org.junit.Assert.assertNotNull(range32);
    }

    @Test
    public void test2462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2462");
        org.jfree.data.Range range2 = new org.jfree.data.Range(5048.5d, (-989.0d));
    }

    @Test
    public void test2463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2463");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) ' ', 1.0d);
        java.lang.String str36 = range32.toString();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) 1L);
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range32, (-100.0d));
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range32, 43.0d);
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range32, 100.0d);
        org.jfree.data.Range range47 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj48 = new java.lang.Object();
        boolean boolean49 = range47.equals(obj48);
        boolean boolean52 = range47.intersects(1.0d, (double) (short) 10);
        double double53 = range47.getCentralValue();
        org.jfree.data.Range range56 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj57 = new java.lang.Object();
        boolean boolean58 = range56.equals(obj57);
        boolean boolean61 = range56.intersects(1.0d, (double) (short) 10);
        double double62 = range56.getCentralValue();
        org.jfree.data.Range range65 = org.jfree.data.Range.expand(range56, 49.0d, 50.0d);
        boolean boolean67 = range65.contains((double) (byte) 0);
        org.jfree.data.Range range68 = org.jfree.data.Range.combine(range47, range65);
        org.jfree.data.Range range69 = org.jfree.data.Range.combine(range32, range68);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Range[0.0,200.0]" + "'", str36, "Range[0.0,200.0]");
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5.0d + "'", double53 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 5.0d + "'", double62 == 5.0d);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range69);
    }

    @Test
    public void test2464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2464");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range3 = org.jfree.data.Range.expand(range0, (-445.0d), 19.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'range' argument.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2465");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (byte) 0, (double) (-1L));
        double double6 = range2.getUpperBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (-1.0d));
        double double9 = range2.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 50.5d + "'", double9 == 50.5d);
    }

    @Test
    public void test2466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2466");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        double double27 = range26.getLowerBound();
        double double28 = range26.getLength();
        boolean boolean31 = range26.intersects(42.0d, 19.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range26, (-12.0d), true);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9899.0d) + "'", double27 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 19899.0d + "'", double28 == 19899.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(range34);
    }

    @Test
    public void test2467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2467");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 410.5d);
    }

    @Test
    public void test2468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2468");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range5, (double) 100L);
        boolean boolean11 = range8.intersects((double) (byte) 10, 0.0d);
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) (short) 10);
        double double18 = range17.getLowerBound();
        boolean boolean20 = range17.contains((double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range17, (double) 1.0f, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range23);
        double double25 = range24.getLength();
        double double26 = range24.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    }

    @Test
    public void test2469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2469");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range7);
        double double14 = range7.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range7, (double) '4');
        double double17 = range7.getUpperBound();
        java.lang.String str18 = range7.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[0.0,10.0]" + "'", str18, "Range[0.0,10.0]");
    }

    @Test
    public void test2470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2470");
        org.jfree.data.Range range2 = new org.jfree.data.Range(19757.0d, (-1000.0d));
    }

    @Test
    public void test2471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2471");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-275.0d), (double) (byte) 100);
        double double3 = range2.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-275.0d) + "'", double3 == (-275.0d));
    }

    @Test
    public void test2472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2472");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        double double3 = range2.getUpperBound();
        java.lang.String str4 = range2.toString();
        double double5 = range2.getCentralValue();
        boolean boolean7 = range2.contains((double) (-1));
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range13.getLowerBound();
        double double15 = range13.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range2, range13);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (double) 0L, 330.0d);
        double double20 = range19.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Range[100.0,1.0]" + "'", str4, "Range[100.0,1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 50.5d + "'", double5 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1655.0d + "'", double20 == 1655.0d);
    }

    @Test
    public void test2473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2473");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) (-1L));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 49.0d, 10.0d);
        boolean boolean7 = range2.contains(10000.0d);
        double double8 = range2.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
    }

    @Test
    public void test2474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        boolean boolean8 = range5.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 1.0f, false);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range5, (double) '4', false);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range14, 9904.0d, true);
        boolean boolean19 = range17.contains(135.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2475");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) ' ');
        boolean boolean11 = range2.intersects(530.0d, (double) 10.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range2, 275.0d);
        double double15 = range13.constrain(1340.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 275.0d + "'", double15 == 275.0d);
    }

    @Test
    public void test2476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2476");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        double double13 = range12.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean17 = range12.equals((java.lang.Object) range16);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range20, (double) (-1));
        double double23 = range22.getUpperBound();
        double double24 = range22.getCentralValue();
        double double25 = range22.getLowerBound();
        org.jfree.data.Range range28 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double30 = range28.constrain(10.0d);
        double double31 = range28.getUpperBound();
        java.lang.String str32 = range28.toString();
        boolean boolean33 = range22.equals((java.lang.Object) str32);
        double double34 = range22.getLowerBound();
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range16, range22);
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range16, 19899.0d);
        double double39 = range37.constrain((-6500.0d));
        double double40 = range37.getCentralValue();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 330.0d + "'", double13 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 99.0d + "'", double23 == 99.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 54.0d + "'", double24 == 54.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 9.0d + "'", double25 == 9.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Range[0.0,10.0]" + "'", str32, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 9.0d + "'", double34 == 9.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 142.0d + "'", double39 == 142.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10020.5d + "'", double40 == 10020.5d);
    }

    @Test
    public void test2477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2477");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean11 = range6.contains((double) 0.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range6, 10.0d);
        double double14 = range6.getLength();
        double double16 = range6.constrain(0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 530.0d + "'", double14 == 530.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test2478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2478");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1286.0d, 38.0d);
    }

    @Test
    public void test2479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        double double26 = range6.getLength();
        double double28 = range6.constrain(15.0d);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range6, 254.0d, 264.5d);
        org.jfree.data.Range range34 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double35 = range34.getCentralValue();
        boolean boolean37 = range34.contains((double) (byte) 0);
        boolean boolean39 = range34.contains(154.0d);
        boolean boolean40 = range31.equals((java.lang.Object) 154.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 530.0d + "'", double26 == 530.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 15.0d + "'", double28 == 15.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 5.0d + "'", double35 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2480");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (-1L), (double) (short) 100);
        boolean boolean4 = range2.contains((double) 1);
        org.jfree.data.Range range7 = new org.jfree.data.Range((double) (byte) 10, 82.5d);
        org.jfree.data.Range range8 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj12 = new java.lang.Object();
        boolean boolean13 = range11.equals(obj12);
        boolean boolean16 = range11.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double21 = range19.constrain(10.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range19);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range11, (double) (short) 100, false);
        double double26 = range25.getLowerBound();
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range2, range25);
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj31 = new java.lang.Object();
        boolean boolean32 = range30.equals(obj31);
        boolean boolean35 = range30.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range38.constrain(10.0d);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range30, range38);
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range30, (double) (short) 100, false);
        boolean boolean47 = range44.intersects(100.0d, (double) 100.0f);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range27, range44);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(range48);
    }

    @Test
    public void test2481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2481");
        org.jfree.data.Range range2 = new org.jfree.data.Range(49.5d, (-420.0d));
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, 30.0d, false);
        org.jfree.chart.block.BorderArrangement borderArrangement6 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement6.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean11 = borderArrangement6.equals((java.lang.Object) range10);
        boolean boolean13 = range10.equals((java.lang.Object) (byte) 100);
        double double14 = range10.getCentralValue();
        double double15 = range10.getCentralValue();
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double20 = range19.getCentralValue();
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range19, (double) 0L, (double) '4');
        boolean boolean26 = range23.intersects((double) (short) 1, (double) 0.0f);
        double double27 = range23.getLowerBound();
        org.jfree.data.Range range30 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj31 = new java.lang.Object();
        boolean boolean32 = range30.equals(obj31);
        boolean boolean35 = range30.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range38 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range38.constrain(10.0d);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range30, range38);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range23, range41);
        double double43 = range23.getLength();
        double double45 = range23.constrain(15.0d);
        boolean boolean47 = range23.contains((double) (byte) 100);
        double double48 = range23.getLowerBound();
        boolean boolean49 = range2.equals((java.lang.Object) range23);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 50.5d + "'", double14 == 50.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 50.5d + "'", double15 == 50.5d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5.0d + "'", double20 == 5.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 530.0d + "'", double43 == 530.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 15.0d + "'", double45 == 15.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2482");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (double) (byte) 0, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, (double) 100.0f);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range10, 52.0d);
        boolean boolean15 = range12.intersects(1340.0d, (-12797.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2483");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double4 = range2.constrain(10.0d);
        boolean boolean7 = range2.intersects((double) 10.0f, (double) (-1.0f));
        double double9 = range2.constrain(0.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (double) 0.0f, (double) ' ');
        double double13 = range12.getUpperBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean17 = range12.equals((java.lang.Object) range16);
        org.jfree.data.Range range20 = new org.jfree.data.Range(11.0d, (-1.0d));
        double double21 = range20.getCentralValue();
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range12, range20);
        org.jfree.data.Range range25 = new org.jfree.data.Range(99.0d, (double) (byte) -1);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range20, range25);
        org.jfree.data.Range range27 = null;
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range20, range27);
        double double30 = range20.constrain((-3011.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 330.0d + "'", double13 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5.0d + "'", double21 == 5.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 11.0d + "'", double30 == 11.0d);
    }

    @Test
    public void test2484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2484");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        double double5 = range2.constrain(0.0d);
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (short) 1, true);
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range9, (double) '4');
        org.jfree.data.Range range14 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double15 = range14.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range14, (double) 0L, (double) '4');
        boolean boolean21 = range18.intersects((double) (short) 1, (double) 0.0f);
        boolean boolean23 = range18.contains((double) 0.0f);
        boolean boolean25 = range18.equals((java.lang.Object) (-1));
        boolean boolean26 = range11.equals((java.lang.Object) boolean25);
        boolean boolean28 = range11.contains(265.0d);
        boolean boolean30 = range11.contains((double) (short) 0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[0.0,10.0]" + "'", str6, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5.0d + "'", double15 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2485");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (-1.0f));
        borderArrangement0.clear();
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj9 = new java.lang.Object();
        boolean boolean10 = range8.equals(obj9);
        boolean boolean13 = range8.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        boolean boolean23 = range8.equals((java.lang.Object) 100L);
        double double24 = range8.getCentralValue();
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double28 = range27.getLength();
        double double30 = range27.constrain(0.0d);
        java.lang.String str31 = range27.toString();
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range27, (double) (short) 1, true);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range27, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range37, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range8, range37);
        boolean boolean42 = borderArrangement0.equals((java.lang.Object) range8);
        org.jfree.data.Range range45 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range45, (double) (-1));
        double double48 = range47.getUpperBound();
        boolean boolean51 = range47.intersects(50.0d, 5.0d);
        org.jfree.data.Range range54 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double55 = range54.getLength();
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range54, (double) (short) 10);
        org.jfree.data.Range range58 = org.jfree.data.Range.combine(range47, range54);
        org.jfree.data.Range range61 = org.jfree.data.Range.shift(range54, 1.0d, false);
        boolean boolean62 = borderArrangement0.equals((java.lang.Object) false);
        org.jfree.data.Range range65 = new org.jfree.data.Range(9999.0d, (double) (byte) 1);
        java.lang.String str66 = range65.toString();
        boolean boolean67 = borderArrangement0.equals((java.lang.Object) range65);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5.0d + "'", double24 == 5.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Range[0.0,10.0]" + "'", str31, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 99.0d + "'", double48 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Range[9999.0,1.0]" + "'", str66, "Range[9999.0,1.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test2486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        org.jfree.data.Range range2 = new org.jfree.data.Range(52.0d, 0.0d);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, 1.989802E8d, false);
        org.junit.Assert.assertNotNull(range5);
    }

    @Test
    public void test2487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj3 = new java.lang.Object();
        boolean boolean4 = range2.equals(obj3);
        boolean boolean7 = range2.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range10.constrain(10.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 100.0d, (double) 100);
        boolean boolean29 = range22.equals((java.lang.Object) range25);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range22, (double) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range13, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range32, (double) 0.0f, false);
        double double36 = range35.getCentralValue();
        double double37 = range35.getLowerBound();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range35, 31.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(range39);
    }

    @Test
    public void test2488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double6 = range5.getLowerBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range5, (double) (byte) -1, (double) 100L);
        double double11 = range5.constrain(265.0d);
        java.lang.String str12 = range5.toString();
        double double13 = range5.getCentralValue();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range5, 195.0d, false);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range5, (double) (short) -1, (-746.0d));
        boolean boolean22 = range5.intersects((double) (-1.0f), 15.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9899.0d) + "'", double6 == (-9899.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 265.0d + "'", double11 == 265.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Range[-9899.0,10000.0]" + "'", str12, "Range[-9899.0,10000.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 50.5d + "'", double13 == 50.5d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test2489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2489");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        boolean boolean8 = borderArrangement0.equals((java.lang.Object) (short) 0);
        org.jfree.data.Range range11 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 10);
        double double15 = range14.getLowerBound();
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range14, (double) 100L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 100.0d, (double) 100);
        boolean boolean24 = range17.equals((java.lang.Object) range20);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range17, (double) 1.0f, (double) 'a');
        boolean boolean28 = borderArrangement0.equals((java.lang.Object) range17);
        borderArrangement0.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double33 = range32.getLength();
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, (double) (short) 10);
        double double36 = range35.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range35, (double) 100L);
        double double39 = range38.getUpperBound();
        boolean boolean40 = borderArrangement0.equals((java.lang.Object) range38);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range38, (double) (-1));
        double double43 = range42.getLength();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
    }

    @Test
    public void test2490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        boolean boolean7 = borderArrangement0.equals((java.lang.Object) 1.0f);
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 10);
        double double14 = range10.getCentralValue();
        boolean boolean17 = range10.intersects((double) 100L, (double) (short) 0);
        boolean boolean19 = range10.contains((double) (short) 1);
        boolean boolean20 = borderArrangement0.equals((java.lang.Object) range10);
        org.jfree.chart.block.BlockContainer blockContainer21 = null;
        java.awt.Graphics2D graphics2D22 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D24 = borderArrangement0.arrange(blockContainer21, graphics2D22, rectangleConstraint23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5.0d + "'", double14 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) (short) 10);
        double double6 = range5.getLowerBound();
        org.jfree.chart.block.BorderArrangement borderArrangement7 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean9 = borderArrangement7.equals((java.lang.Object) (-1L));
        boolean boolean11 = borderArrangement7.equals((java.lang.Object) (-1.0f));
        boolean boolean12 = range5.equals((java.lang.Object) borderArrangement7);
        org.jfree.chart.block.BorderArrangement borderArrangement13 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement13.clear();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean18 = borderArrangement13.equals((java.lang.Object) range17);
        borderArrangement13.clear();
        org.jfree.data.Range range22 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj23 = new java.lang.Object();
        boolean boolean24 = range22.equals(obj23);
        boolean boolean25 = borderArrangement13.equals(obj23);
        boolean boolean26 = borderArrangement7.equals((java.lang.Object) borderArrangement13);
        boolean boolean28 = borderArrangement7.equals((java.lang.Object) 50.0d);
        borderArrangement7.clear();
        org.jfree.data.Range range32 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double34 = range32.constrain(10.0d);
        boolean boolean37 = range32.intersects((double) 10.0f, (double) (-1.0f));
        double double39 = range32.constrain(0.0d);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range32, (double) 0.0f, (double) ' ');
        double double43 = range42.getUpperBound();
        org.jfree.data.Range range46 = new org.jfree.data.Range(142.0d, 0.0d);
        boolean boolean47 = range42.equals((java.lang.Object) range46);
        boolean boolean48 = borderArrangement7.equals((java.lang.Object) boolean47);
        org.jfree.data.Range range51 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double52 = range51.getLength();
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range51, (double) (short) 10);
        double double55 = range54.getLowerBound();
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range54, (double) 100L);
        org.jfree.data.Range range60 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range63 = org.jfree.data.Range.expand(range60, 100.0d, (double) 100);
        boolean boolean64 = range57.equals((java.lang.Object) range60);
        org.jfree.data.Range range67 = org.jfree.data.Range.expand(range57, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range69 = org.jfree.data.Range.expandToInclude(range57, (double) 100.0f);
        double double70 = range57.getCentralValue();
        org.jfree.data.Range range73 = org.jfree.data.Range.shift(range57, (double) 1, true);
        org.jfree.data.Range range76 = org.jfree.data.Range.shift(range57, (-6400.0d), true);
        boolean boolean77 = borderArrangement7.equals((java.lang.Object) true);
        org.jfree.chart.block.BlockContainer blockContainer78 = null;
        java.awt.Graphics2D graphics2D79 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D81 = borderArrangement7.arrange(blockContainer78, graphics2D79, rectangleConstraint80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 330.0d + "'", double43 == 330.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 50.0d + "'", double70 == 50.0d);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test2492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2492");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) 0L, (double) '4');
        boolean boolean9 = range6.intersects((double) (short) 1, (double) 0.0f);
        double double10 = range6.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj14 = new java.lang.Object();
        boolean boolean15 = range13.equals(obj14);
        boolean boolean18 = range13.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double23 = range21.constrain(10.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range13, range21);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range6, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range6, 10.0d, false);
        double double29 = range6.getCentralValue();
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, 100.0d, (double) 100);
        double double37 = range35.constrain((double) (short) 1);
        boolean boolean39 = range35.contains((double) '4');
        double double40 = range35.getLowerBound();
        double double42 = range35.constrain(54.0d);
        org.jfree.data.Range range45 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double46 = range45.getCentralValue();
        org.jfree.data.Range range48 = org.jfree.data.Range.shift(range45, (double) 1);
        org.jfree.data.Range range50 = org.jfree.data.Range.shift(range45, (double) 'a');
        boolean boolean52 = range45.equals((java.lang.Object) 10);
        boolean boolean54 = range45.contains((double) 1.0f);
        double double55 = range45.getUpperBound();
        org.jfree.data.Range range56 = org.jfree.data.Range.combine(range35, range45);
        double double57 = range56.getLowerBound();
        org.jfree.data.Range range60 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range62 = org.jfree.data.Range.shift(range60, (double) (-1));
        double double63 = range62.getUpperBound();
        boolean boolean66 = range62.intersects(50.0d, 5.0d);
        org.jfree.data.Range range69 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double70 = range69.getLength();
        org.jfree.data.Range range72 = org.jfree.data.Range.expandToInclude(range69, (double) (short) 10);
        org.jfree.data.Range range73 = org.jfree.data.Range.combine(range62, range69);
        org.jfree.data.Range range74 = org.jfree.data.Range.combine(range56, range69);
        org.jfree.data.Range range77 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double78 = range77.getLength();
        double double80 = range77.constrain(0.0d);
        java.lang.String str81 = range77.toString();
        org.jfree.data.Range range84 = org.jfree.data.Range.shift(range77, (double) (short) 1, true);
        org.jfree.data.Range range87 = org.jfree.data.Range.expand(range77, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range90 = org.jfree.data.Range.expand(range87, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range93 = org.jfree.data.Range.expand(range87, (double) (byte) 1, (double) (-1));
        org.jfree.data.Range range96 = org.jfree.data.Range.shift(range93, (double) (-1L), true);
        org.jfree.data.Range range97 = org.jfree.data.Range.combine(range74, range96);
        boolean boolean98 = range6.equals((java.lang.Object) range96);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 265.0d + "'", double29 == 265.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-9899.0d) + "'", double40 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 54.0d + "'", double42 == 54.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 5.0d + "'", double46 == 5.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-9899.0d) + "'", double57 == (-9899.0d));
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 99.0d + "'", double63 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 10.0d + "'", double78 == 10.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Range[0.0,10.0]" + "'", str81, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range84);
        org.junit.Assert.assertNotNull(range87);
        org.junit.Assert.assertNotNull(range90);
        org.junit.Assert.assertNotNull(range93);
        org.junit.Assert.assertNotNull(range96);
        org.junit.Assert.assertNotNull(range97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test2493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean9 = range2.equals((java.lang.Object) 10);
        boolean boolean11 = range2.contains((double) 1.0f);
        double double12 = range2.getUpperBound();
        double double13 = range2.getUpperBound();
        double double15 = range2.constrain(11.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test2494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2494");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-6500.0d), 42.0d);
        double double3 = range2.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-6500.0d) + "'", double3 == (-6500.0d));
    }

    @Test
    public void test2495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2495");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 1);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 'a');
        java.lang.String str8 = range2.toString();
        double double10 = range2.constrain(9.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[0.0,10.0]" + "'", str8, "Range[0.0,10.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 9.0d + "'", double10 == 9.0d);
    }

    @Test
    public void test2496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2496");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean2 = borderArrangement0.equals((java.lang.Object) (-1L));
        boolean boolean4 = borderArrangement0.equals((java.lang.Object) (-1.0f));
        borderArrangement0.clear();
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        java.lang.Object obj9 = new java.lang.Object();
        boolean boolean10 = range8.equals(obj9);
        boolean boolean13 = range8.intersects(5.0d, (double) 100L);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range16, (double) (short) 10);
        double double20 = range19.getLowerBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) 100L);
        boolean boolean23 = range8.equals((java.lang.Object) 100L);
        double double24 = range8.getCentralValue();
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double28 = range27.getLength();
        double double30 = range27.constrain(0.0d);
        java.lang.String str31 = range27.toString();
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range27, (double) (short) 1, true);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range27, (double) 100.0f, (double) (byte) 100);
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range37, (double) (short) 10, (double) 10L);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range8, range37);
        boolean boolean42 = borderArrangement0.equals((java.lang.Object) range8);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.chart.block.BlockContainer blockContainer45 = null;
        java.awt.Graphics2D graphics2D46 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D48 = borderArrangement0.arrange(blockContainer45, graphics2D46, rectangleConstraint47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5.0d + "'", double24 == 5.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Range[0.0,10.0]" + "'", str31, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2497");
        org.jfree.chart.block.BorderArrangement borderArrangement0 = new org.jfree.chart.block.BorderArrangement();
        borderArrangement0.clear();
        org.jfree.data.Range range4 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        boolean boolean5 = borderArrangement0.equals((java.lang.Object) range4);
        borderArrangement0.clear();
        borderArrangement0.clear();
        org.jfree.data.Range range10 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double11 = range10.getCentralValue();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, (double) 'a');
        boolean boolean16 = borderArrangement0.equals((java.lang.Object) range15);
        org.jfree.data.Range range19 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double20 = range19.getLength();
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range19, (double) (short) 10);
        double double23 = range22.getLowerBound();
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range22, (double) 100L);
        org.jfree.data.Range range28 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range28, 100.0d, (double) 100);
        boolean boolean32 = range25.equals((java.lang.Object) range28);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range25, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range25, (double) 100.0f);
        double double38 = range25.getCentralValue();
        boolean boolean40 = range25.equals((java.lang.Object) 0);
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double44 = range43.getLength();
        double double46 = range43.constrain(0.0d);
        java.lang.String str47 = range43.toString();
        org.jfree.data.Range range50 = org.jfree.data.Range.shift(range43, (double) (short) 1, true);
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range50, (double) '4');
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range52, (double) 1L);
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range25, range52);
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range52, 107.0d, 0.0d);
        boolean boolean59 = borderArrangement0.equals((java.lang.Object) 107.0d);
        org.jfree.chart.block.BorderArrangement borderArrangement60 = new org.jfree.chart.block.BorderArrangement();
        boolean boolean62 = borderArrangement60.equals((java.lang.Object) (-1L));
        boolean boolean64 = borderArrangement60.equals((java.lang.Object) (byte) 10);
        borderArrangement60.clear();
        boolean boolean66 = borderArrangement0.equals((java.lang.Object) borderArrangement60);
        org.jfree.chart.block.BlockContainer blockContainer67 = null;
        java.awt.Graphics2D graphics2D68 = null;
        org.jfree.chart.block.RectangleConstraint rectangleConstraint69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.chart.util.Size2D size2D70 = borderArrangement60.arrange(blockContainer67, graphics2D68, rectangleConstraint69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.0d + "'", double11 == 5.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 50.0d + "'", double38 == 50.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Range[0.0,10.0]" + "'", str47, "Range[0.0,10.0]");
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test2498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2498");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double3 = range2.getCentralValue();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (double) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) (short) 10);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range13, (double) '#', false);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range13, 9999.0d, false);
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range19, 17.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.0d + "'", double3 == 5.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.0d + "'", double8 == 5.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range21);
    }

    @Test
    public void test2499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range5, 100.0d);
        boolean boolean15 = range5.intersects((double) 100.0f, 1.0d);
        org.jfree.data.Range range18 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double19 = range18.getLength();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range18, (double) (short) 10);
        double double22 = range21.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) 100L);
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, 100.0d, (double) 100);
        boolean boolean31 = range24.equals((java.lang.Object) range27);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range24, (double) 1.0f, (double) 'a');
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range24, (double) 100.0f);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) (byte) 100, (double) 1.0f);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range24, range39);
        boolean boolean41 = range5.equals((java.lang.Object) range40);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range5, (double) (byte) 0, (-3011.0d));
        double double45 = range5.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 19899.0d + "'", double45 == 19899.0d);
    }

    @Test
    public void test2500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2500");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1L, (double) 100.0f);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 100.0d, (double) 100);
        double double7 = range5.constrain((double) (short) 1);
        boolean boolean9 = range5.contains((double) '4');
        double double10 = range5.getLowerBound();
        double double12 = range5.constrain(54.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double16 = range15.getCentralValue();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range15, (double) 'a');
        boolean boolean22 = range15.equals((java.lang.Object) 10);
        boolean boolean24 = range15.contains((double) 1.0f);
        double double25 = range15.getUpperBound();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range5, range15);
        double double27 = range26.getLowerBound();
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) (short) 10, (double) (short) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (-1));
        double double33 = range32.getUpperBound();
        boolean boolean36 = range32.intersects(50.0d, 5.0d);
        org.jfree.data.Range range39 = new org.jfree.data.Range(0.0d, (double) 10.0f);
        double double40 = range39.getLength();
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range39, (double) (short) 10);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range32, range39);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range26, range39);
        double double46 = range26.constrain(19899.0d);
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range26, 19.0d);
        boolean boolean50 = range48.contains((-99.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9899.0d) + "'", double10 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 54.0d + "'", double12 == 54.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.0d + "'", double16 == 5.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9899.0d) + "'", double27 == (-9899.0d));
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 99.0d + "'", double33 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10000.0d + "'", double46 == 10000.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }
}


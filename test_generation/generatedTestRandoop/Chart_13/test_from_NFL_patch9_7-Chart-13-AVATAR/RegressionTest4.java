import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 0.0d);
        double double3 = range2.getLowerBound();
        boolean boolean6 = range2.intersects((-9.0d), (double) ' ');
        boolean boolean8 = range2.contains((double) (short) 0);
        double double9 = range2.getUpperBound();
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, 0.0d);
        boolean boolean14 = range2.intersects(171.0d, 307001.375d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-119.0d), 91.0d);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) (short) -1);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double7 = range6.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range6, (double) (short) 100);
        org.jfree.data.Range range10 = org.jfree.data.Range.combine(range2, range9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, (-1.0d), (double) (byte) 100);
        boolean boolean19 = range13.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range13, (-9.0d), (double) 100L);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) 1);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range22, (double) (short) -1, false);
        boolean boolean28 = range10.equals((java.lang.Object) range27);
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, 0.0d);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range27, 18630.0d, 18595.0d);
        double double35 = range33.constrain((-83.5d));
        double double36 = range33.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.5d) + "'", double3 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9.0d) + "'", double7 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.539756E7d) + "'", double35 == (-1.539756E7d));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.539756E7d) + "'", double36 == (-1.539756E7d));
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        org.jfree.data.Range range2 = new org.jfree.data.Range(6108.5d, (-71.0d));
        double double3 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-71.0d) + "'", double3 == (-71.0d));
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range3, (-1.0d), (double) (byte) 100);
        boolean boolean9 = range3.intersects((double) (byte) -1, (double) (short) -1);
        double double10 = range3.getCentralValue();
        double double11 = range3.getLength();
        org.jfree.data.Range range12 = org.jfree.data.Range.combine(range0, range3);
        double double14 = range3.constrain((double) 100L);
        boolean boolean16 = range3.equals((java.lang.Object) "Range[484.0,-449.0]");
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range3, 107.25d);
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range3, 2849.5d);
        java.lang.String str21 = range3.toString();
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5.5d + "'", double10 == 5.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9.0d) + "'", double11 == (-9.0d));
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Range[10.0,1.0]" + "'", str21, "Range[10.0,1.0]");
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1.0f, (-899.0d));
        double double4 = range2.constrain(15.5d);
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 6553.0d);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (double) (-1L), false);
        org.jfree.data.Range range12 = new org.jfree.data.Range((double) 10.0f, (double) 10.0f);
        double double13 = range12.getUpperBound();
        double double15 = range12.constrain((-1.0d));
        org.jfree.data.Range range18 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range18, (-1.0d), (double) (byte) 100);
        boolean boolean24 = range18.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range18, (-9.0d), (double) 100L);
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range27, 5.5d);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range29, 5.5d, (double) 10.0f);
        boolean boolean34 = range29.contains((double) (byte) -1);
        org.jfree.data.Range range37 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double38 = range37.getLength();
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range37, (-109.0d));
        double double41 = range37.getCentralValue();
        boolean boolean42 = range29.equals((java.lang.Object) double41);
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range29, (-893.5d));
        org.jfree.data.Range range47 = org.jfree.data.Range.expand(range44, 45.5d, (-345.0d));
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range12, range47);
        boolean boolean49 = range9.equals((java.lang.Object) range48);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-899.0d) + "'", double4 == (-899.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-9.0d) + "'", double38 == (-9.0d));
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 5.5d + "'", double41 == 5.5d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range11, (double) 1.0f, false);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range26, 5.5d);
        boolean boolean30 = range26.equals((java.lang.Object) 171.0d);
        boolean boolean33 = range26.intersects((-893.5d), (double) 100L);
        double double35 = range26.constrain(1.0d);
        boolean boolean36 = range20.equals((java.lang.Object) range26);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range39.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range39, (-9.0d), (double) 100L);
        double double50 = range48.constrain(1.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range48, (double) (byte) 100);
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range48, (double) 'a');
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range48, (-1.0d), (-9.0d));
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range48, 0.0d, true);
        org.jfree.data.Range range62 = org.jfree.data.Range.expandToInclude(range48, (double) (short) 1);
        boolean boolean63 = range20.equals((java.lang.Object) range48);
        org.jfree.data.Range range66 = org.jfree.data.Range.expand(range20, (-822.5d), (-30636.0d));
        java.lang.String str67 = range66.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-899.0d) + "'", double50 == (-899.0d));
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Range[-681100.0,2.536571E7]" + "'", str67, "Range[-681100.0,2.536571E7]");
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 10.0f, false);
        boolean boolean10 = range8.contains((double) 1L);
        double double11 = range8.getUpperBound();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range8, 32.0d);
        boolean boolean16 = range13.intersects(99.5d, 5.90028264E8d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 11.0d + "'", double11 == 11.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) (short) -1);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double7 = range6.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range6, (double) (short) 100);
        org.jfree.data.Range range10 = org.jfree.data.Range.combine(range2, range9);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range2, 17.5d, true);
        double double14 = range2.getCentralValue();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 10, (-485.0d));
        java.lang.Class<?> wildcardClass18 = range17.getClass();
        boolean boolean19 = range2.equals((java.lang.Object) range17);
        org.jfree.data.Range range22 = new org.jfree.data.Range(199.0d, (-127.0d));
        boolean boolean25 = range22.intersects((-35.5d), 86.0d);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range2, range22);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.5d) + "'", double3 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9.0d) + "'", double7 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-0.5d) + "'", double14 == (-0.5d));
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range26);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (-10.0d));
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range4, (double) 0);
        double double7 = range4.getLength();
        boolean boolean10 = range4.intersects((-899.0d), 90.0d);
        java.lang.String str11 = range4.toString();
        boolean boolean13 = range4.equals((java.lang.Object) 10.0d);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        org.jfree.data.Range range21 = new org.jfree.data.Range(100.0d, (-9.0d));
        double double22 = range21.getUpperBound();
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range16, range21);
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range23, (double) (-1), false);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double30 = range29.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range29, 1.0d, true);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range23, range33);
        org.jfree.data.Range range37 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range37, (double) 10L);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range34, range37);
        boolean boolean41 = range4.equals((java.lang.Object) range40);
        double double43 = range40.constrain((double) 'a');
        java.lang.String str44 = range40.toString();
        boolean boolean46 = range40.contains(67.0d);
        double double47 = range40.getCentralValue();
        boolean boolean49 = range40.contains((-4915.0d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 90.0d + "'", double7 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[0.0,90.0]" + "'", str11, "Range[0.0,90.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-9.0d) + "'", double22 == (-9.0d));
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-9.0d) + "'", double30 == (-9.0d));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2.0d + "'", double43 == 2.0d);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Range[-1.0,2.0]" + "'", str44, "Range[-1.0,2.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.5d + "'", double47 == 0.5d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1326.0d), 4.5d);
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (double) (short) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range5, 45.0d, true);
        boolean boolean11 = range5.intersects(10989.0d, (double) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range5, (double) (byte) -1, true);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, 5.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range2, 50.5d, (double) 0L);
        java.lang.String str15 = range2.toString();
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range2, (double) (short) 1);
        double double18 = range17.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Range[10.0,1.0]" + "'", str15, "Range[10.0,1.0]");
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 6.5d + "'", double18 == 6.5d);
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10L);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range4, (-9.0d), true);
        double double8 = range7.getLowerBound();
        boolean boolean11 = range7.intersects((double) (-1.0f), (double) 10.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range7, 10974.5d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (-27.75d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9.0d) + "'", double8 == (-9.0d));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range3, (-1.0d), (double) (byte) 100);
        boolean boolean9 = range3.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range3, (-9.0d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, 5.5d);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, 5.5d, (double) 10.0f);
        boolean boolean19 = range14.contains((double) (byte) -1);
        org.jfree.data.Range range20 = org.jfree.data.Range.combine(range0, range14);
        double double21 = range14.getCentralValue();
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-479.5d) + "'", double21 == (-479.5d));
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        double double9 = range2.getLowerBound();
        org.jfree.data.Range range12 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (-1.0d), (double) (byte) 100);
        boolean boolean18 = range12.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range12, (-9.0d), (double) 100L);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range12, 50.5d, (double) 0L);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range2, range24);
        java.lang.Class<?> wildcardClass26 = range25.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (-0.5d));
        org.jfree.data.Range range5 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (-1.0d), (double) (byte) 100);
        boolean boolean11 = range5.intersects((double) (byte) -1, (double) (short) -1);
        double double12 = range5.getCentralValue();
        java.lang.Class<?> wildcardClass13 = range5.getClass();
        boolean boolean14 = range2.equals((java.lang.Object) range5);
        boolean boolean16 = range2.contains((double) (byte) 10);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range2, 0.0d, false);
        double double20 = range2.getUpperBound();
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5.5d + "'", double12 == 5.5d);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-0.5d) + "'", double20 == (-0.5d));
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-898.0d), 33.0d);
        double double3 = range2.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 931.0d + "'", double3 == 931.0d);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        double double23 = range22.getLength();
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range22, (double) '4', 20.0d);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range22, 90.0d, 5.5d);
        double double31 = range29.constrain(0.0d);
        double double33 = range29.constrain((-1.5d));
        java.lang.Class<?> wildcardClass34 = range29.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 61.0d + "'", double23 == 61.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.5d) + "'", double33 == (-1.5d));
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range11.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) 100L);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 1L);
        boolean boolean19 = range17.contains((-13662.0d));
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range17, (double) (byte) 10);
        double double23 = range21.constrain((double) (byte) 0);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range21, 61.0d, 0.0d);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range26, 11044.5d, (-898.0d));
        double double30 = range26.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 45.0d + "'", double13 == 45.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5580.0d + "'", double30 == 5580.0d);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        org.jfree.data.Range range2 = new org.jfree.data.Range(13.0d, (-1.0931465E7d));
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (-3825.0d), (-101.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-5465726.0d) + "'", double3 == (-5465726.0d));
        org.junit.Assert.assertNotNull(range6);
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) -1, (double) (byte) -1);
        java.lang.Class<?> wildcardClass3 = range2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        java.lang.String str6 = range5.toString();
        double double7 = range5.getLength();
        double double8 = range5.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, 11044.5d);
        double double11 = range10.getLowerBound();
        boolean boolean13 = range10.contains(45.0d);
        java.lang.String str14 = range10.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[1.0,-899.0]" + "'", str6, "Range[1.0,-899.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-900.0d) + "'", double7 == (-900.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-449.0d) + "'", double8 == (-449.0d));
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 11045.5d + "'", double11 == 11045.5d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[11045.5,0.0]" + "'", str14, "Range[11045.5,0.0]");
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        org.jfree.data.Range range7 = new org.jfree.data.Range(100.0d, (-9.0d));
        double double8 = range7.getUpperBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range9, (double) (-1), false);
        boolean boolean14 = range9.contains((double) '#');
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range9, 91.0d, true);
        java.lang.Object obj18 = null;
        boolean boolean19 = range17.equals(obj18);
        double double20 = range17.getLength();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9.0d) + "'", double8 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-109.0d) + "'", double20 == (-109.0d));
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, (-1.0d), (double) (byte) 100);
        boolean boolean31 = range25.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range25, (-9.0d), (double) 100L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range22, range25);
        double double36 = range35.getCentralValue();
        java.lang.String str37 = range35.toString();
        boolean boolean39 = range35.contains((-104.5d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-35.0d) + "'", double36 == (-35.0d));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Range[-71.0,1.0]" + "'", str37, "Range[-71.0,1.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, (-10.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range5, range8);
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, (-1.0d), (double) (byte) 100);
        boolean boolean20 = range14.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range14, (-9.0d), (double) 100L);
        double double25 = range23.constrain(1.0d);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range11, range23);
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range26, 20.0d);
        double double29 = range28.getUpperBound();
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range32, (-10.0d));
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range34, (double) 0);
        double double37 = range34.getLength();
        double double38 = range34.getLength();
        org.jfree.data.Range range41 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range41, (-1.0d), (double) (byte) 100);
        boolean boolean47 = range41.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range41, (-9.0d), (double) 100L);
        double double52 = range50.constrain(1.0d);
        org.jfree.data.Range range54 = org.jfree.data.Range.shift(range50, (double) (byte) 100);
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range34, range50);
        double double56 = range34.getLowerBound();
        boolean boolean57 = range28.equals((java.lang.Object) double56);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-899.0d) + "'", double25 == (-899.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 90.0d + "'", double37 == 90.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 90.0d + "'", double38 == 90.0d);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-899.0d) + "'", double52 == (-899.0d));
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double4 = range3.getLength();
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range3, 1.0d, true);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range3, (double) 0.0f);
        java.lang.String str10 = range9.toString();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range9, (-30636.0d), false);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range9, (-4914.0d), (-35.0d));
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double20 = range19.getLength();
        double double21 = range19.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range19, 10.0d, false);
        double double26 = range24.constrain((double) 10);
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range24, 0.0d);
        org.jfree.data.Range range31 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range31, (double) 10.0f, false);
        boolean boolean39 = range37.contains((double) 1L);
        double double41 = range37.constrain((double) (byte) 0);
        double double42 = range37.getLength();
        org.jfree.data.Range range45 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        boolean boolean47 = range45.equals((java.lang.Object) 100L);
        org.jfree.data.Range range50 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range53 = org.jfree.data.Range.expand(range50, (-1.0d), (double) (byte) 100);
        boolean boolean56 = range53.intersects((double) (byte) 10, 10.0d);
        java.lang.String str57 = range53.toString();
        org.jfree.data.Range range58 = org.jfree.data.Range.combine(range45, range53);
        boolean boolean59 = range37.equals((java.lang.Object) range53);
        org.jfree.data.Range range60 = null;
        org.jfree.data.Range range61 = org.jfree.data.Range.combine(range37, range60);
        org.jfree.data.Range range62 = org.jfree.data.Range.combine(range24, range60);
        double double63 = range24.getLowerBound();
        org.jfree.data.Range range64 = org.jfree.data.Range.combine(range9, range24);
        org.jfree.data.Range range65 = org.jfree.data.Range.combine(range0, range24);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-9.0d) + "'", double4 == (-9.0d));
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Range[10.0,1.0]" + "'", str10, "Range[10.0,1.0]");
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-9.0d) + "'", double20 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 20.0d + "'", double26 == 20.0d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 20.0d + "'", double41 == 20.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-9.0d) + "'", double42 == (-9.0d));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Range[1.0,-899.0]" + "'", str57, "Range[1.0,-899.0]");
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 20.0d + "'", double63 == 20.0d);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertNotNull(range65);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        boolean boolean15 = range13.contains(1100899.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10L);
        double double5 = range2.getLowerBound();
        double double6 = range2.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range2, (-485.0d), (-449.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (double) 10.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 4488.5d, 91.0d);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range11, (-1100799.0d), false);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, (double) (-1.0f), (-10.0d));
        boolean boolean24 = range11.equals((java.lang.Object) range23);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.5d) + "'", double6 == (-0.5d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range2.getLowerBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        boolean boolean22 = range16.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, (-9.0d), (double) 100L);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (double) 1);
        org.jfree.data.Range range30 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (byte) -1);
        boolean boolean35 = range32.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range25, range32);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range42.intersects((double) (byte) 10, 10.0d);
        boolean boolean46 = range32.equals((java.lang.Object) boolean45);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range32, (double) (byte) 100, false);
        boolean boolean50 = range2.equals((java.lang.Object) range49);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range2, 0.0d, false);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range53, (-900.0d), true);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range56, (-71.0d), 10999.0d);
        org.jfree.data.Range range62 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range64 = org.jfree.data.Range.shift(range62, (double) 10L);
        double double65 = range62.getLowerBound();
        org.jfree.data.Range range67 = org.jfree.data.Range.shift(range62, (double) (-1.0f));
        double double68 = range67.getCentralValue();
        org.jfree.data.Range range69 = org.jfree.data.Range.combine(range56, range67);
        org.jfree.data.Range range71 = org.jfree.data.Range.expandToInclude(range69, 0.0d);
        org.jfree.data.Range range74 = org.jfree.data.Range.expand(range69, (-399.5d), 2849.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-1.0d) + "'", double65 == (-1.0d));
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1.5d) + "'", double68 == (-1.5d));
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertNotNull(range74);
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        org.jfree.data.Range range2 = new org.jfree.data.Range(168.0d, (-828.0d));
        boolean boolean5 = range2.intersects((double) 100.0f, 90.0d);
        double double7 = range2.constrain(0.0d);
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range10, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, 5.5d);
        boolean boolean17 = range13.equals((java.lang.Object) 171.0d);
        boolean boolean20 = range13.intersects((-893.5d), (double) 100L);
        double double22 = range13.constrain(1.0d);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range13, (-899.0d), 5549.5d);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (-26442.5d));
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range2, range25);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-828.0d) + "'", double7 == (-828.0d));
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        org.jfree.data.Range range2 = new org.jfree.data.Range(99.0d, (double) '#');
        org.jfree.data.Range range5 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (-1.0d), (double) (byte) 100);
        boolean boolean11 = range5.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range5, (-9.0d), (double) 100L);
        double double16 = range14.constrain(1.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range14, (double) (byte) 100);
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range14, (double) 'a');
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range14, (-1.0d), (-9.0d));
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range14, 0.0d, true);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range2, range26);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, 55.0d, 37289.0d);
        boolean boolean32 = range27.contains(4.5d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-899.0d) + "'", double16 == (-899.0d));
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) -1, 15.5d);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-0.5d), false);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range8, (-1.0d), (double) (byte) 100);
        boolean boolean14 = range8.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range8, (-9.0d), (double) 100L);
        double double19 = range17.constrain(1.0d);
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range17, (double) (byte) 100);
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range17, (double) 'a');
        double double24 = range17.getLength();
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 10.0f, (double) 10.0f);
        boolean boolean28 = range17.equals((java.lang.Object) 10.0f);
        double double29 = range17.getUpperBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.combine(range5, range17);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range30, 247158.0d, 110.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-899.0d) + "'", double19 == (-899.0d));
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-828.0d) + "'", double24 == (-828.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-899.0d) + "'", double29 == (-899.0d));
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (double) 'a');
        boolean boolean8 = range2.intersects((double) (byte) 0, (-899.0d));
        boolean boolean10 = range2.contains(45.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range2, 18630.0d);
        double double13 = range12.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 18635.5d + "'", double13 == 18635.5d);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (-10.0d));
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range4, (double) 0);
        double double7 = range4.getLength();
        boolean boolean10 = range4.intersects((-899.0d), 90.0d);
        double double11 = range4.getLength();
        org.jfree.data.Range range14 = new org.jfree.data.Range(99.0d, (double) '#');
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (-1.0d), (double) (byte) 100);
        boolean boolean23 = range17.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range17, (-9.0d), (double) 100L);
        double double28 = range26.constrain(1.0d);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range26, (double) (byte) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range26, (double) 'a');
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range26, (-1.0d), (-9.0d));
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range26, 0.0d, true);
        org.jfree.data.Range range39 = org.jfree.data.Range.combine(range14, range38);
        org.jfree.data.Range range42 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double43 = range42.getLength();
        double double44 = range42.getLowerBound();
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range39, range42);
        boolean boolean46 = range4.equals((java.lang.Object) range42);
        double double47 = range42.getLength();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 90.0d + "'", double7 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 90.0d + "'", double11 == 90.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-899.0d) + "'", double28 == (-899.0d));
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-9.0d) + "'", double43 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-9.0d) + "'", double47 == (-9.0d));
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range5, (double) (byte) -1);
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range10, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (-10.0d));
        org.jfree.data.Range range19 = org.jfree.data.Range.combine(range13, range16);
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range22, (-10.0d));
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range13, range22);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (-828.0d));
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range5, range27);
        boolean boolean31 = range28.intersects(90.0d, (double) (byte) 10);
        org.jfree.data.Range range32 = null;
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range28, range32);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range32, 72.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) (short) -1);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double7 = range6.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range6, (double) (short) 100);
        org.jfree.data.Range range10 = org.jfree.data.Range.combine(range2, range9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (-10.0d));
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range15, (double) 0);
        double double18 = range15.getLength();
        boolean boolean21 = range15.intersects((-899.0d), 90.0d);
        java.lang.String str22 = range15.toString();
        boolean boolean24 = range15.contains((-828.0d));
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range10, range15);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range15, (double) 100);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range27, (-8.0d), true);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range30, 37289.0d, false);
        org.jfree.data.Range range36 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, (-1.0d), (double) (byte) 100);
        boolean boolean42 = range36.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range45 = org.jfree.data.Range.expand(range36, (-9.0d), (double) 100L);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range45, 5.5d);
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range47, 5.5d, (double) 10.0f);
        double double51 = range50.getLength();
        double double52 = range50.getCentralValue();
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range33, range50);
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range53, (-5901.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.5d) + "'", double3 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9.0d) + "'", double7 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 90.0d + "'", double18 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Range[0.0,90.0]" + "'", str22, "Range[0.0,90.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-13662.0d) + "'", double51 == (-13662.0d));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-2342.5d) + "'", double52 == (-2342.5d));
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range55);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        double double6 = range5.getLowerBound();
        double double8 = range5.constrain(14.5d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 14.5d + "'", double8 == 14.5d);
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range11, (double) 1.0f, false);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range26, 5.5d);
        boolean boolean30 = range26.equals((java.lang.Object) 171.0d);
        boolean boolean33 = range26.intersects((-893.5d), (double) 100L);
        double double35 = range26.constrain(1.0d);
        boolean boolean36 = range20.equals((java.lang.Object) range26);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range39.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range39, (-9.0d), (double) 100L);
        double double50 = range48.constrain(1.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range48, (double) (byte) 100);
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range48, (double) 'a');
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range48, (-1.0d), (-9.0d));
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range48, 0.0d, true);
        org.jfree.data.Range range62 = org.jfree.data.Range.expandToInclude(range48, (double) (short) 1);
        boolean boolean63 = range20.equals((java.lang.Object) range48);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range20, (-2342.5d), true);
        double double67 = range20.getUpperBound();
        double double68 = range20.getCentralValue();
        org.jfree.data.Range range70 = org.jfree.data.Range.expandToInclude(range20, 15.5d);
        boolean boolean72 = range70.contains(6.5d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-899.0d) + "'", double50 == (-899.0d));
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-898.0d) + "'", double67 == (-898.0d));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-484.0d) + "'", double68 == (-484.0d));
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, (-1.0d), (-9.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range11, 0.0d, true);
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 1);
        boolean boolean27 = range25.contains(100.0d);
        java.lang.String str28 = range25.toString();
        boolean boolean30 = range25.contains((-35.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[-71.0,1.0]" + "'", str28, "Range[-71.0,1.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        org.jfree.data.Range range2 = new org.jfree.data.Range(484.0d, (-26442.5d));
        double double3 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-26442.5d) + "'", double3 == (-26442.5d));
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100.0f, 11.0d);
        org.jfree.data.Range range5 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        java.lang.String str6 = range5.toString();
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double10 = range9.getLength();
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range9, (-109.0d));
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (-71.0d), (-828.0d));
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range15, (double) 100L);
        double double18 = range17.getLength();
        double double20 = range17.constrain(50.5d);
        org.jfree.data.Range range21 = org.jfree.data.Range.combine(range5, range17);
        double double22 = range17.getLength();
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range2, range17);
        double double25 = range17.constrain(91.0d);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range17, 45.5d, (-846.375d));
        org.jfree.data.Range range31 = new org.jfree.data.Range(0.0d, 0.0d);
        double double32 = range31.getLowerBound();
        boolean boolean35 = range31.intersects((-9.0d), (double) ' ');
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range31, 21871.0d, false);
        org.jfree.data.Range range39 = org.jfree.data.Range.combine(range28, range38);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[10.0,100.0]" + "'", str6, "Range[10.0,100.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9.0d) + "'", double10 == (-9.0d));
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range39);
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 45.0d, (-9.0d));
        double double15 = range14.getUpperBound();
        java.lang.Object obj16 = null;
        boolean boolean17 = range14.equals(obj16);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, (-1.0d), (double) (byte) 100);
        boolean boolean26 = range20.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range20, (-9.0d), (double) 100L);
        double double31 = range29.constrain(1.0d);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range29, (double) (byte) 100);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range29, (double) 'a');
        double double36 = range29.getLength();
        org.jfree.data.Range range39 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range39, (double) 10L);
        org.jfree.data.Range range44 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range47 = org.jfree.data.Range.expand(range44, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range50 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range50, (-10.0d));
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range47, range50);
        org.jfree.data.Range range56 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range56, (-1.0d), (double) (byte) 100);
        boolean boolean62 = range56.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range65 = org.jfree.data.Range.expand(range56, (-9.0d), (double) 100L);
        double double67 = range65.constrain(1.0d);
        org.jfree.data.Range range68 = org.jfree.data.Range.combine(range53, range65);
        boolean boolean69 = range39.equals((java.lang.Object) range68);
        org.jfree.data.Range range70 = org.jfree.data.Range.combine(range29, range39);
        org.jfree.data.Range range71 = org.jfree.data.Range.combine(range14, range39);
        java.lang.String str72 = range14.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 6553.0d + "'", double15 == 6553.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-899.0d) + "'", double31 == (-899.0d));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-828.0d) + "'", double36 == (-828.0d));
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-899.0d) + "'", double67 == (-899.0d));
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Range[37189.0,6553.0]" + "'", str72, "Range[37189.0,6553.0]");
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-3064.5d), 67.0d);
        double double3 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 67.0d + "'", double3 == 67.0d);
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        org.jfree.data.Range range7 = new org.jfree.data.Range(100.0d, (-9.0d));
        double double8 = range7.getUpperBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range9, (double) (-1), false);
        double double14 = range12.constrain((-900.0d));
        boolean boolean17 = range12.intersects((double) (byte) 1, 37189.0d);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, (double) 1);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9.0d) + "'", double8 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 99.0d + "'", double14 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(range19);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, (-1.0d), (-9.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range11, 0.0d, true);
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 1);
        boolean boolean27 = range25.contains(100.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range30, (-109.0d));
        boolean boolean34 = range25.equals((java.lang.Object) range33);
        double double36 = range33.constrain((double) '4');
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range33, 32.0d, 61.0d);
        double double40 = range39.getLength();
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range39, (double) 10, 110.0d);
        boolean boolean45 = range43.contains(55.5d);
        boolean boolean48 = range43.intersects(48.5d, 18695.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9.0d) + "'", double31 == (-9.0d));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1820.75d), 45.5d);
        double double3 = range2.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1866.25d + "'", double3 == 1866.25d);
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range5.intersects((double) (byte) 10, 10.0d);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (-1.0d), (double) (byte) 100);
        boolean boolean17 = range11.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, (-9.0d), (double) 100L);
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range20, (double) 1);
        org.jfree.data.Range range25 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range25, (double) (byte) -1);
        boolean boolean30 = range27.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range20, range27);
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range34, (-1.0d), (double) (byte) 100);
        boolean boolean40 = range37.intersects((double) (byte) 10, 10.0d);
        boolean boolean41 = range27.equals((java.lang.Object) boolean40);
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range27, (double) (byte) 100, false);
        org.jfree.data.Range range47 = org.jfree.data.Range.expand(range27, 100.0d, (-0.5d));
        java.lang.String str48 = range47.toString();
        double double49 = range47.getLowerBound();
        org.jfree.data.Range range52 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range55 = org.jfree.data.Range.expand(range52, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range58 = org.jfree.data.Range.shift(range52, (double) 10.0f, false);
        boolean boolean60 = range58.contains((double) 1L);
        double double61 = range58.getUpperBound();
        org.jfree.data.Range range62 = org.jfree.data.Range.combine(range47, range58);
        boolean boolean63 = range5.equals((java.lang.Object) range58);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range58, (-899.0d), false);
        org.jfree.data.Range range69 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range72 = org.jfree.data.Range.expand(range69, (-1.0d), (double) (byte) 100);
        boolean boolean75 = range69.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range78 = org.jfree.data.Range.expand(range69, (-9.0d), (double) 100L);
        double double80 = range78.constrain(1.0d);
        org.jfree.data.Range range82 = org.jfree.data.Range.shift(range78, (double) (byte) 100);
        org.jfree.data.Range range84 = org.jfree.data.Range.expandToInclude(range78, (double) 'a');
        org.jfree.data.Range range87 = org.jfree.data.Range.expand(range78, (-1.0d), (-9.0d));
        org.jfree.data.Range range90 = org.jfree.data.Range.shift(range78, 0.0d, true);
        org.jfree.data.Range range92 = org.jfree.data.Range.expandToInclude(range78, (double) (short) 1);
        boolean boolean94 = range92.contains(100.0d);
        boolean boolean95 = range58.equals((java.lang.Object) range92);
        boolean boolean98 = range58.intersects((double) (byte) 0, 100.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Range[10999.0,44.5]" + "'", str48, "Range[10999.0,44.5]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10999.0d + "'", double49 == 10999.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 11.0d + "'", double61 == 11.0d);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-899.0d) + "'", double80 == (-899.0d));
        org.junit.Assert.assertNotNull(range82);
        org.junit.Assert.assertNotNull(range84);
        org.junit.Assert.assertNotNull(range87);
        org.junit.Assert.assertNotNull(range90);
        org.junit.Assert.assertNotNull(range92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        double double14 = range11.getLength();
        java.lang.String str15 = range11.toString();
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range11, (double) (short) 10);
        java.lang.String str18 = range11.toString();
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range11, 11871.0d, false);
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range11, (double) 100);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-828.0d) + "'", double14 == (-828.0d));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Range[-71.0,-899.0]" + "'", str15, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[-71.0,-899.0]" + "'", str18, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        org.jfree.data.Range range2 = new org.jfree.data.Range(168.0d, (-828.0d));
        boolean boolean5 = range2.intersects((double) 100.0f, 90.0d);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double9 = range8.getLength();
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, (-109.0d));
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (-71.0d), (-828.0d));
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range14, (double) 100L);
        double double17 = range16.getLength();
        double double18 = range16.getCentralValue();
        org.jfree.data.Range range19 = org.jfree.data.Range.combine(range2, range16);
        double double21 = range16.constrain((double) 10);
        double double22 = range16.getCentralValue();
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, 928.0d, 29.0d);
        org.jfree.data.Range range28 = new org.jfree.data.Range((double) 10, 11.0d);
        double double30 = range28.constrain((-13662.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range28, 91.0d);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, (-1.0d), (double) (byte) 100);
        boolean boolean41 = range35.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range35, (-9.0d), (double) 100L);
        org.jfree.data.Range range47 = org.jfree.data.Range.expand(range35, 50.5d, (double) 0L);
        double double48 = range47.getLowerBound();
        boolean boolean51 = range47.intersects(32.0d, 332.75d);
        boolean boolean52 = range32.equals((java.lang.Object) 332.75d);
        org.jfree.data.Range range54 = org.jfree.data.Range.shift(range32, 14.5d);
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range25, range32);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9.0d) + "'", double9 == (-9.0d));
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 464.5d + "'", double48 == 464.5d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range55);
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range2.getLowerBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        boolean boolean22 = range16.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, (-9.0d), (double) 100L);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (double) 1);
        org.jfree.data.Range range30 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (byte) -1);
        boolean boolean35 = range32.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range25, range32);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range42.intersects((double) (byte) 10, 10.0d);
        boolean boolean46 = range32.equals((java.lang.Object) boolean45);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range32, (double) (byte) 100, false);
        boolean boolean50 = range2.equals((java.lang.Object) range49);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range2, 0.0d, false);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range53, (double) 'a', true);
        double double57 = range53.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-9.0d) + "'", double57 == (-9.0d));
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        boolean boolean4 = range2.equals((java.lang.Object) 100L);
        double double5 = range2.getLowerBound();
        boolean boolean7 = range2.contains((-35.0d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range11, (double) 1.0f, false);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range20, 11044.5d, true);
        double double24 = range23.getLowerBound();
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range23, (double) '4', false);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range30, (-109.0d));
        org.jfree.data.Range range36 = org.jfree.data.Range.expand(range33, (-71.0d), (-828.0d));
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range36, (double) 100L);
        boolean boolean41 = range36.intersects((double) ' ', 10.0d);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range23, range36);
        java.lang.String str43 = range42.toString();
        double double44 = range42.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10974.5d + "'", double24 == 10974.5d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9.0d) + "'", double31 == (-9.0d));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Range[0.0,10146.5]" + "'", str43, "Range[0.0,10146.5]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range18 = new org.jfree.data.Range((-10.0d), (double) '4');
        boolean boolean19 = range11.equals((java.lang.Object) (-10.0d));
        double double20 = range11.getCentralValue();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range11, 45.0d);
        java.lang.String str23 = range11.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-485.0d) + "'", double20 == (-485.0d));
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Range[-71.0,-899.0]" + "'", str23, "Range[-71.0,-899.0]");
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        boolean boolean7 = range4.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range4, (double) 0.0f);
        double double10 = range9.getUpperBound();
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range9, (-393443.0d));
        java.lang.String str13 = range9.toString();
        double double15 = range9.constrain(44.5d);
        java.lang.Class<?> wildcardClass16 = range9.getClass();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-10.0d) + "'", double10 == (-10.0d));
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[99.0,-10.0]" + "'", str13, "Range[99.0,-10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-10.0d) + "'", double15 == (-10.0d));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, (-10.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range5, range8);
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range14, (-10.0d));
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range5, range14);
        double double18 = range14.getLength();
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, (-1.0d), (double) (byte) 100);
        boolean boolean27 = range21.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range21, (-9.0d), (double) 100L);
        double double32 = range30.constrain(1.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range30, (double) (byte) 100);
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range30, (double) 'a');
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range30, (-1.0d), (-9.0d));
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range30, 0.0d, true);
        org.jfree.data.Range range44 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 1);
        boolean boolean46 = range44.contains(100.0d);
        org.jfree.data.Range range49 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double50 = range49.getLength();
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range49, (-109.0d));
        boolean boolean53 = range44.equals((java.lang.Object) range52);
        double double55 = range52.constrain((double) '4');
        boolean boolean56 = range14.equals((java.lang.Object) range52);
        org.jfree.data.Range range59 = new org.jfree.data.Range(0.0d, 0.0d);
        double double60 = range59.getLowerBound();
        boolean boolean63 = range59.intersects((-9.0d), (double) ' ');
        org.jfree.data.Range range65 = org.jfree.data.Range.expandToInclude(range59, (double) 1L);
        boolean boolean66 = range52.equals((java.lang.Object) range65);
        double double67 = range52.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 90.0d + "'", double18 == 90.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-899.0d) + "'", double32 == (-899.0d));
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-9.0d) + "'", double50 == (-9.0d));
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double7 = range6.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range6, 1.0d, true);
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, (-1.0d), (double) (byte) 100);
        boolean boolean20 = range14.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range14, (-9.0d), (double) 100L);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, 45.0d, (-9.0d));
        double double27 = range23.getLength();
        boolean boolean28 = range11.equals((java.lang.Object) range23);
        boolean boolean30 = range23.contains(4523.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.5d) + "'", double3 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9.0d) + "'", double7 == (-9.0d));
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-828.0d) + "'", double27 == (-828.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 0.0f);
        java.lang.String str9 = range8.toString();
        org.jfree.data.Range range12 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (-1.0d), (double) (byte) 100);
        boolean boolean18 = range12.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range12, (-9.0d), (double) 100L);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, 45.0d, (-9.0d));
        double double25 = range24.getLowerBound();
        boolean boolean26 = range8.equals((java.lang.Object) double25);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[10.0,1.0]" + "'", str9, "Range[10.0,1.0]");
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 37189.0d + "'", double25 == 37189.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range15, (double) (-1), (double) '#');
        double double20 = range18.constrain(10974.5d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-28764.0d) + "'", double20 == (-28764.0d));
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 0.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, (-10.0d), true);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range2, (-36810.0d));
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, 0.5d, true);
        double double16 = range15.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.5d + "'", double16 == 0.5d);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range3, (-1.0d), (double) (byte) 100);
        boolean boolean9 = range3.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range3, (-9.0d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, 5.5d);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, 5.5d, (double) 10.0f);
        boolean boolean19 = range14.contains((double) (byte) -1);
        org.jfree.data.Range range20 = org.jfree.data.Range.combine(range0, range14);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (-1.0d), (double) (byte) 100);
        boolean boolean29 = range23.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range23, (-9.0d), (double) 100L);
        double double34 = range32.constrain(1.0d);
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range32, (double) (byte) 100);
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) 'a');
        java.lang.String str39 = range32.toString();
        java.lang.String str40 = range32.toString();
        org.jfree.data.Range range43 = new org.jfree.data.Range((-10.0d), (double) '4');
        boolean boolean45 = range43.contains((double) 'a');
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range43, (double) (byte) 0);
        org.jfree.data.Range range49 = org.jfree.data.Range.expandToInclude(range43, (double) 0L);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range49, (double) (byte) -1, true);
        boolean boolean53 = range32.equals((java.lang.Object) (byte) -1);
        org.jfree.data.Range range54 = org.jfree.data.Range.combine(range20, range32);
        org.jfree.data.Range range57 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range60 = org.jfree.data.Range.expand(range57, (-1.0d), (double) (byte) 100);
        boolean boolean63 = range57.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range66 = org.jfree.data.Range.expand(range57, (-9.0d), (double) 100L);
        org.jfree.data.Range range68 = org.jfree.data.Range.expandToInclude(range66, (double) 1);
        boolean boolean71 = range68.intersects((-1.0d), 0.0d);
        org.jfree.data.Range range74 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double75 = range74.getLength();
        org.jfree.data.Range range77 = org.jfree.data.Range.shift(range74, (-109.0d));
        org.jfree.data.Range range80 = org.jfree.data.Range.expand(range77, (-71.0d), (-828.0d));
        org.jfree.data.Range range82 = org.jfree.data.Range.shift(range80, (double) 100L);
        double double83 = range82.getLength();
        org.jfree.data.Range range84 = org.jfree.data.Range.combine(range68, range82);
        org.jfree.data.Range range87 = org.jfree.data.Range.shift(range68, (double) 0L, false);
        boolean boolean90 = range87.intersects(20.0d, (double) (byte) 100);
        org.jfree.data.Range range93 = org.jfree.data.Range.shift(range87, 199.0d, true);
        boolean boolean94 = range32.equals((java.lang.Object) true);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-899.0d) + "'", double34 == (-899.0d));
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Range[-71.0,-899.0]" + "'", str39, "Range[-71.0,-899.0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Range[-71.0,-899.0]" + "'", str40, "Range[-71.0,-899.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-9.0d) + "'", double75 == (-9.0d));
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertNotNull(range82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(range84);
        org.junit.Assert.assertNotNull(range87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(range93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range5, 5.5d);
        boolean boolean9 = range5.equals((java.lang.Object) 171.0d);
        boolean boolean12 = range5.intersects((-893.5d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range5, 0.0d);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, (-30636.0d), (-101.0d));
        boolean boolean19 = range14.contains((double) 'a');
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.Range.shift(range0, (-616231.5d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range11.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) 100L);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 1L);
        boolean boolean19 = range17.contains((-13662.0d));
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double23 = range22.getLength();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range22, 1.0d, true);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range17, range26);
        java.lang.String str28 = range26.toString();
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range26, (-13662.0d), true);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 45.0d + "'", double13 == 45.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-9.0d) + "'", double23 == (-9.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[11.0,2.0]" + "'", str28, "Range[11.0,2.0]");
        org.junit.Assert.assertNotNull(range31);
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 45.0d, (-9.0d));
        double double15 = range14.getUpperBound();
        java.lang.Object obj16 = null;
        boolean boolean17 = range14.equals(obj16);
        double double18 = range14.getLength();
        org.jfree.data.Range range21 = new org.jfree.data.Range(0.0d, (double) '#');
        org.jfree.data.Range range24 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range24, (double) (byte) -1);
        boolean boolean29 = range26.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range26, (double) 0.0f);
        boolean boolean33 = range31.contains(15.5d);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range21, range31);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range14, range21);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 6553.0d + "'", double15 == 6553.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-30636.0d) + "'", double18 == (-30636.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 10.0f, false);
        boolean boolean10 = range8.contains((double) 1L);
        double double11 = range8.getCentralValue();
        double double13 = range8.constrain((double) 'a');
        double double14 = range8.getLowerBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range8, 109.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 15.5d + "'", double11 == 15.5d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 11.0d + "'", double13 == 11.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 20.0d + "'", double14 == 20.0d);
        org.junit.Assert.assertNotNull(range16);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10999.0d, (double) 100.0f);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10.0f);
        double double6 = range2.constrain((-19.0d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10999.0d + "'", double6 == 10999.0d);
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (-0.5d));
        org.jfree.data.Range range5 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (-1.0d), (double) (byte) 100);
        boolean boolean11 = range5.intersects((double) (byte) -1, (double) (short) -1);
        double double12 = range5.getCentralValue();
        java.lang.Class<?> wildcardClass13 = range5.getClass();
        boolean boolean14 = range2.equals((java.lang.Object) range5);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range2, 97.0d, 54927.5d);
        double double18 = range2.getLength();
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5.5d + "'", double12 == 5.5d);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        boolean boolean7 = range4.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range4, (double) 0.0f);
        double double10 = range9.getUpperBound();
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range9, (-13733.0d));
        org.jfree.data.Range range15 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range15, (-1.0d), (double) (byte) 100);
        boolean boolean21 = range15.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range15, (-9.0d), (double) 100L);
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range24, 5.5d);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range26, 5.5d, (double) 10.0f);
        boolean boolean31 = range26.contains((double) (byte) -1);
        java.lang.String str32 = range26.toString();
        double double33 = range26.getLowerBound();
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range9, range26);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range26, (-393443.0d), true);
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range37, (-9137.5d), 29.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-10.0d) + "'", double10 == (-10.0d));
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Range[-65.5,-893.5]" + "'", str32, "Range[-65.5,-893.5]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-65.5d) + "'", double33 == (-65.5d));
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range40);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        java.lang.String str23 = range18.toString();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range18, 5.5d, false);
        boolean boolean28 = range18.contains((double) (byte) 0);
        boolean boolean31 = range18.intersects(18594.5d, 26.0d);
        double double32 = range18.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Range[99.0,-10.0]" + "'", str23, "Range[99.0,-10.0]");
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-10.0d) + "'", double32 == (-10.0d));
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, 5.5d);
        double double15 = range11.constrain((double) (short) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, (-1.0d), (double) (byte) 100);
        boolean boolean26 = range20.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range20, (-9.0d), (double) 100L);
        double double31 = range29.constrain(1.0d);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range29, (double) (byte) 100);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range29, (double) 'a');
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range29, (-1.0d), (-9.0d));
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range29, 0.0d, true);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range17, range29);
        double double43 = range29.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-899.0d) + "'", double15 == (-899.0d));
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-899.0d) + "'", double31 == (-899.0d));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-485.0d) + "'", double43 == (-485.0d));
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-700.0d), 1866.25d);
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range5, 5.5d);
        boolean boolean9 = range5.equals((java.lang.Object) 171.0d);
        double double10 = range5.getLowerBound();
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range5, (double) 100, 90.0d);
        java.lang.Class<?> wildcardClass14 = range13.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, (-1.0d), (double) (byte) 100);
        boolean boolean31 = range25.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range25, (-9.0d), (double) 100L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range22, range25);
        boolean boolean38 = range25.intersects((-485.0d), 10999.0d);
        double double39 = range25.getLowerBound();
        double double40 = range25.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-9.0d) + "'", double40 == (-9.0d));
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        org.jfree.data.Range range2 = new org.jfree.data.Range(5.5d, (double) 10.0f);
        double double3 = range2.getLowerBound();
        double double4 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 51.0d);
        java.lang.String str7 = range2.toString();
        double double9 = range2.constrain((-899.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.5d + "'", double3 == 5.5d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 7.75d + "'", double4 == 7.75d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Range[5.5,10.0]" + "'", str7, "Range[5.5,10.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5.5d + "'", double9 == 5.5d);
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range11.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) 100L);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 1L);
        boolean boolean19 = range17.contains((-13662.0d));
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double23 = range22.getLength();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range22, 1.0d, true);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range17, range26);
        java.lang.String str28 = range26.toString();
        double double29 = range26.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 45.0d + "'", double13 == 45.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-9.0d) + "'", double23 == (-9.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[11.0,2.0]" + "'", str28, "Range[11.0,2.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 6.5d + "'", double29 == 6.5d);
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        org.jfree.data.Range range7 = new org.jfree.data.Range(100.0d, (-9.0d));
        double double8 = range7.getUpperBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range9, (double) (-1), false);
        org.jfree.data.Range range15 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double16 = range15.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range15, 1.0d, true);
        org.jfree.data.Range range20 = org.jfree.data.Range.combine(range9, range19);
        org.jfree.data.Range range23 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, (double) 10L);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range20, range23);
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range23, 99.5d);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range28, 0.0d, 6108.5d);
        double double32 = range31.getCentralValue();
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range31, 496485.0d);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range31, (-36810.0d), 101.0d);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range31, 931.0d, true);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9.0d) + "'", double8 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9.0d) + "'", double16 == (-9.0d));
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 307001.375d + "'", double32 == 307001.375d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range40);
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        org.jfree.data.Range range2 = new org.jfree.data.Range(72.0d, (-8.0d));
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 0.0d);
        double double3 = range2.getLowerBound();
        boolean boolean6 = range2.intersects((-9.0d), (double) ' ');
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) 1L);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, 5.90028264E8d, (-1560023.25d));
        double double12 = range11.getCentralValue();
        java.lang.String str13 = range11.toString();
        double double14 = range11.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,0.0]" + "'", str13, "Range[0.0,0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 10.0f, false);
        boolean boolean10 = range8.contains((double) 1L);
        double double12 = range8.constrain((-9137.5d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 20.0d + "'", double12 == 20.0d);
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10L);
        org.jfree.data.Range range6 = org.jfree.data.Range.expandToInclude(range4, (double) 'a');
        double double7 = range4.getCentralValue();
        boolean boolean10 = range4.intersects((-828.0d), (-449.0d));
        boolean boolean13 = range4.intersects((double) (short) -1, 0.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.0d + "'", double7 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 0, 15.5d);
        org.jfree.data.Range range5 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range5, (-10.0d));
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range7, (double) 0);
        double double10 = range7.getLength();
        boolean boolean13 = range7.intersects((-899.0d), 90.0d);
        java.lang.String str14 = range7.toString();
        boolean boolean16 = range7.contains((-828.0d));
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (-1.0d), (double) (byte) 100);
        boolean boolean25 = range19.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range19, (-9.0d), (double) 100L);
        double double30 = range28.constrain(1.0d);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range28, (double) (byte) 100);
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range28, (double) 'a');
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range28, (-1.0d), (-9.0d));
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range37, 0.0d);
        org.jfree.data.Range range42 = new org.jfree.data.Range(171.0d, (double) (byte) 1);
        boolean boolean43 = range37.equals((java.lang.Object) range42);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range7, range42);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range44, (-109.0d), true);
        boolean boolean48 = range2.equals((java.lang.Object) (-109.0d));
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range2, 99.0d);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 90.0d + "'", double10 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[0.0,90.0]" + "'", str14, "Range[0.0,90.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-899.0d) + "'", double30 == (-899.0d));
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(range50);
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (-10.0d));
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range4, (double) 0);
        double double7 = range4.getLength();
        boolean boolean10 = range4.intersects((-899.0d), 90.0d);
        double double11 = range4.getLength();
        org.jfree.data.Range range14 = new org.jfree.data.Range(99.0d, (double) '#');
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (-1.0d), (double) (byte) 100);
        boolean boolean23 = range17.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range17, (-9.0d), (double) 100L);
        double double28 = range26.constrain(1.0d);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range26, (double) (byte) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range26, (double) 'a');
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range26, (-1.0d), (-9.0d));
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range26, 0.0d, true);
        org.jfree.data.Range range39 = org.jfree.data.Range.combine(range14, range38);
        org.jfree.data.Range range42 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double43 = range42.getLength();
        double double44 = range42.getLowerBound();
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range39, range42);
        boolean boolean46 = range4.equals((java.lang.Object) range42);
        java.lang.String str47 = range42.toString();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 90.0d + "'", double7 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 90.0d + "'", double11 == 90.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-899.0d) + "'", double28 == (-899.0d));
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-9.0d) + "'", double43 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Range[10.0,1.0]" + "'", str47, "Range[10.0,1.0]");
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, (-1.0d), (-9.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range11, 0.0d, true);
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range23, (double) (short) 1, true);
        double double27 = range26.getUpperBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range26, 20.0d, (double) (short) 10);
        java.lang.Class<?> wildcardClass31 = range26.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-898.0d) + "'", double27 == (-898.0d));
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 10.0f, false);
        boolean boolean10 = range8.contains((double) 1L);
        double double12 = range8.constrain((double) (short) 0);
        java.lang.String str13 = range8.toString();
        double double14 = range8.getUpperBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range8, (double) 1L);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range19, (-10.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range21, (double) 0);
        double double24 = range21.getLength();
        boolean boolean27 = range21.intersects((-899.0d), 90.0d);
        java.lang.String str28 = range21.toString();
        boolean boolean30 = range21.equals((java.lang.Object) 10.0d);
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range8, range21);
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double35 = range34.getLength();
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range34, 1.0d, true);
        org.jfree.data.Range range41 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range41, (-10.0d));
        boolean boolean44 = range34.equals((java.lang.Object) range43);
        double double45 = range43.getCentralValue();
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range43, (-26442.5d));
        boolean boolean48 = range21.equals((java.lang.Object) range47);
        java.lang.Class<?> wildcardClass49 = range47.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 20.0d + "'", double12 == 20.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[20.0,11.0]" + "'", str13, "Range[20.0,11.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 11.0d + "'", double14 == 11.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 90.0d + "'", double24 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[0.0,90.0]" + "'", str28, "Range[0.0,90.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-9.0d) + "'", double35 == (-9.0d));
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 45.0d + "'", double45 == 45.0d);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-109.0d));
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (-71.0d), (-828.0d));
        org.jfree.data.Range range11 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, (double) 10L);
        double double14 = range11.getLowerBound();
        double double15 = range11.getCentralValue();
        double double16 = range11.getCentralValue();
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range8, range11);
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range8, 0.0d);
        double double20 = range8.getLowerBound();
        double double21 = range8.getCentralValue();
        double double22 = range8.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.5d) + "'", double15 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.5d) + "'", double16 == (-0.5d));
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        org.jfree.data.Range range2 = new org.jfree.data.Range(99.0d, (double) '#');
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, 10989.0d, false);
        double double6 = range2.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 0.0d);
        double double3 = range2.getLowerBound();
        boolean boolean6 = range2.intersects((-9.0d), (double) ' ');
        boolean boolean8 = range2.contains((double) (short) 0);
        double double9 = range2.getUpperBound();
        java.lang.String str10 = range2.toString();
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range2, 5.0d);
        java.lang.String str13 = range12.toString();
        double double14 = range12.getLength();
        boolean boolean17 = range12.intersects((-700.0d), 0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Range[0.0,0.0]" + "'", str10, "Range[0.0,0.0]");
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,5.0]" + "'", str13, "Range[0.0,5.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5.0d + "'", double14 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        java.lang.String str7 = range2.toString();
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range10, (-1.0d), (double) (byte) 100);
        boolean boolean16 = range10.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range10, (-9.0d), (double) 100L);
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range19, 5.5d);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, 5.5d, (double) 10.0f);
        double double25 = range24.getLowerBound();
        boolean boolean26 = range2.equals((java.lang.Object) double25);
        org.jfree.data.Range range29 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range29, (double) (-1.0f), (double) (short) 0);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double36 = range35.getLength();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range35, 1.0d, true);
        org.jfree.data.Range range42 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range42, (-10.0d));
        boolean boolean45 = range35.equals((java.lang.Object) range44);
        double double46 = range35.getLowerBound();
        org.jfree.data.Range range49 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range52 = org.jfree.data.Range.expand(range49, (-1.0d), (double) (byte) 100);
        boolean boolean55 = range49.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range49, (-9.0d), (double) 100L);
        org.jfree.data.Range range60 = org.jfree.data.Range.expandToInclude(range58, (double) 1);
        org.jfree.data.Range range63 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range65 = org.jfree.data.Range.shift(range63, (double) (byte) -1);
        boolean boolean68 = range65.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range69 = org.jfree.data.Range.combine(range58, range65);
        org.jfree.data.Range range72 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range75 = org.jfree.data.Range.expand(range72, (-1.0d), (double) (byte) 100);
        boolean boolean78 = range75.intersects((double) (byte) 10, 10.0d);
        boolean boolean79 = range65.equals((java.lang.Object) boolean78);
        org.jfree.data.Range range82 = org.jfree.data.Range.shift(range65, (double) (byte) 100, false);
        boolean boolean83 = range35.equals((java.lang.Object) range82);
        org.jfree.data.Range range86 = org.jfree.data.Range.shift(range35, 0.0d, false);
        org.jfree.data.Range range88 = org.jfree.data.Range.expandToInclude(range86, 6553.0d);
        boolean boolean91 = range86.intersects(494.0d, 37289.0d);
        org.jfree.data.Range range92 = org.jfree.data.Range.combine(range29, range86);
        boolean boolean93 = range2.equals((java.lang.Object) range29);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Range[10.0,1.0]" + "'", str7, "Range[10.0,1.0]");
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 4488.5d + "'", double25 == 4488.5d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-9.0d) + "'", double36 == (-9.0d));
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(range82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(range86);
        org.junit.Assert.assertNotNull(range88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(range92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 10.0f, false);
        double double9 = range2.getLowerBound();
        boolean boolean12 = range2.intersects((double) (-1L), (double) 10L);
        boolean boolean15 = range2.intersects((-0.5d), (double) (-1.0f));
        double double16 = range2.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) (short) -1);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double7 = range6.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range6, (double) (short) 100);
        org.jfree.data.Range range10 = org.jfree.data.Range.combine(range2, range9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (-10.0d));
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range15, (double) 0);
        double double18 = range15.getLength();
        boolean boolean21 = range15.intersects((-899.0d), 90.0d);
        java.lang.String str22 = range15.toString();
        boolean boolean24 = range15.contains((-828.0d));
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range10, range15);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range15, 50.5d);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, (-4050.0d), (-26442.5d));
        org.jfree.data.Range range33 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range36 = org.jfree.data.Range.expand(range33, (-1.0d), (double) (byte) 100);
        boolean boolean39 = range33.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range33, (-9.0d), (double) 100L);
        double double44 = range42.constrain(1.0d);
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range42, (double) (byte) 100);
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range42, (double) 'a');
        java.lang.String str49 = range42.toString();
        java.lang.String str50 = range42.toString();
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range42, (-942.0d));
        double double53 = range52.getLength();
        org.jfree.data.Range range54 = org.jfree.data.Range.combine(range27, range52);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.5d) + "'", double3 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9.0d) + "'", double7 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 90.0d + "'", double18 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Range[0.0,90.0]" + "'", str22, "Range[0.0,90.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-899.0d) + "'", double44 == (-899.0d));
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Range[-71.0,-899.0]" + "'", str49, "Range[-71.0,-899.0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Range[-71.0,-899.0]" + "'", str50, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-828.0d) + "'", double53 == (-828.0d));
        org.junit.Assert.assertNotNull(range54);
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 10.0d, false);
        double double9 = range7.constrain((double) 10);
        double double10 = range7.getLowerBound();
        java.lang.String str11 = range7.toString();
        boolean boolean14 = range7.intersects((-828.0d), 54927.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 20.0d + "'", double9 == 20.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 20.0d + "'", double10 == 20.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[20.0,11.0]" + "'", str11, "Range[20.0,11.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range18 = new org.jfree.data.Range((-10.0d), (double) '4');
        boolean boolean19 = range11.equals((java.lang.Object) (-10.0d));
        boolean boolean21 = range11.contains((-9.0d));
        org.jfree.data.Range range24 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range24, (double) (byte) -1);
        org.jfree.data.Range range29 = new org.jfree.data.Range(100.0d, (-9.0d));
        double double30 = range29.getUpperBound();
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range24, range29);
        boolean boolean32 = range11.equals((java.lang.Object) range29);
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range11, (-1560023.25d));
        boolean boolean37 = range34.intersects((-480.5d), (-1560023.25d));
        boolean boolean39 = range34.contains((-35.5d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-9.0d) + "'", double30 == (-9.0d));
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range11, (double) 1.0f, false);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range20, 11044.5d, true);
        double double24 = range23.getLowerBound();
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range23, (double) '4', false);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range23, 5.5d, (-463.5d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10974.5d + "'", double24 == 10974.5d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (-10.0d));
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range4, (double) 0);
        double double7 = range4.getLength();
        boolean boolean10 = range4.intersects((-899.0d), 90.0d);
        java.lang.String str11 = range4.toString();
        boolean boolean13 = range4.equals((java.lang.Object) 10.0d);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        org.jfree.data.Range range21 = new org.jfree.data.Range(100.0d, (-9.0d));
        double double22 = range21.getUpperBound();
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range16, range21);
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range23, (double) (-1), false);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double30 = range29.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range29, 1.0d, true);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range23, range33);
        org.jfree.data.Range range37 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range37, (double) 10L);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range34, range37);
        boolean boolean41 = range4.equals((java.lang.Object) range40);
        boolean boolean44 = range4.intersects((-900.0d), (-9138.5d));
        org.jfree.data.Range range47 = new org.jfree.data.Range(121000.0d, 6553.0d);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range4, range47);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 90.0d + "'", double7 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[0.0,90.0]" + "'", str11, "Range[0.0,90.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-9.0d) + "'", double22 == (-9.0d));
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-9.0d) + "'", double30 == (-9.0d));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(range48);
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (-10.0d));
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range4, (double) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range6, (-13662.0d));
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range6, 500.5d);
        java.lang.Class<?> wildcardClass11 = range10.getClass();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-10.0d), (double) '4');
        boolean boolean4 = range2.contains((double) 'a');
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, (double) (byte) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) 0L);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, (double) (byte) -1, true);
        double double13 = range8.constrain((double) 10);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, 0.0d);
        double double17 = range16.getLowerBound();
        boolean boolean20 = range16.intersects((-9.0d), (double) ' ');
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range16, (double) 1L);
        double double23 = range16.getLowerBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range8, range16);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(range24);
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range3 = org.jfree.data.Range.shift(range0, 35.0d, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range5, (double) (byte) -1);
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range10, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (-10.0d));
        org.jfree.data.Range range19 = org.jfree.data.Range.combine(range13, range16);
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range22, (-10.0d));
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range13, range22);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (-828.0d));
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range5, range27);
        double double29 = range5.getLowerBound();
        double double31 = range5.constrain(55.0d);
        double double32 = range5.getUpperBound();
        double double33 = range5.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 55.0d + "'", double31 == 55.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 91.0d + "'", double32 == 91.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 91.0d + "'", double33 == 91.0d);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        java.lang.String str18 = range11.toString();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range11, 0.0d);
        double double21 = range11.getUpperBound();
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range11, (double) 1L);
        boolean boolean26 = range23.intersects(5549.5d, 0.0d);
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range23, (-414.0d));
        double double29 = range23.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[-71.0,-899.0]" + "'", str18, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-899.0d) + "'", double21 == (-899.0d));
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-898.0d) + "'", double29 == (-898.0d));
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) -1, 15.5d);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-0.5d), false);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (-1.5886691E7d), 45.5d);
        double double9 = range8.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 765.75d + "'", double9 == 765.75d);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10L);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range4, (-9.0d), true);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, 99.0d, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range7, (double) 10.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range12, 10999.0d);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range14, (double) 100L);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        java.lang.String str18 = range11.toString();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range11, 0.0d);
        double double21 = range11.getUpperBound();
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range11, (double) 1L);
        boolean boolean26 = range23.intersects(5549.5d, 0.0d);
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range23, (-414.0d));
        double double29 = range23.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[-71.0,-899.0]" + "'", str18, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-899.0d) + "'", double21 == (-899.0d));
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-828.0d) + "'", double29 == (-828.0d));
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 360.0d);
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-109.0d));
        boolean boolean7 = range2.contains(1.0d);
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range2, 37189.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range9, 46.0d);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range11, (-3240.5d), false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        boolean boolean7 = range4.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range4, (double) 0.0f);
        boolean boolean11 = range9.contains(15.5d);
        double double12 = range9.getUpperBound();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range9, 0.0d, true);
        double double16 = range15.getUpperBound();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-10.0d) + "'", double12 == (-10.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-10.0d) + "'", double16 == (-10.0d));
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10999.0d, (double) 100.0f);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10.0f);
        boolean boolean6 = range4.contains((double) 100L);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, (-1.0d), (double) (byte) 100);
        boolean boolean31 = range28.intersects((double) (byte) 10, 10.0d);
        boolean boolean32 = range18.equals((java.lang.Object) boolean31);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range18, (double) (byte) 100, false);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range18, 100.0d, (-0.5d));
        java.lang.String str39 = range38.toString();
        double double40 = range38.getLowerBound();
        org.jfree.data.Range range43 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range43, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range43, (double) 10.0f, false);
        boolean boolean51 = range49.contains((double) 1L);
        double double52 = range49.getUpperBound();
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range38, range49);
        org.jfree.data.Range range56 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range56, (-1.0d), (double) (byte) 100);
        boolean boolean62 = range56.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range65 = org.jfree.data.Range.expand(range56, (-9.0d), (double) 100L);
        double double67 = range65.constrain(1.0d);
        org.jfree.data.Range range69 = org.jfree.data.Range.shift(range65, (double) (byte) 100);
        org.jfree.data.Range range71 = org.jfree.data.Range.expandToInclude(range65, (double) 'a');
        org.jfree.data.Range range74 = org.jfree.data.Range.shift(range65, (double) 1.0f, false);
        double double76 = range74.constrain((-1.0d));
        org.jfree.data.Range range77 = org.jfree.data.Range.combine(range38, range74);
        double double79 = range38.constrain(65.75d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Range[10999.0,44.5]" + "'", str39, "Range[10999.0,44.5]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10999.0d + "'", double40 == 10999.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 11.0d + "'", double52 == 11.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-899.0d) + "'", double67 == (-899.0d));
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-898.0d) + "'", double76 == (-898.0d));
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 44.5d + "'", double79 == 44.5d);
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (double) (short) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range5, 45.0d, true);
        org.jfree.data.Range range11 = new org.jfree.data.Range((-10.0d), (double) '4');
        boolean boolean13 = range11.contains((double) 'a');
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 0);
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range8, range15);
        java.lang.String str17 = range8.toString();
        double double18 = range8.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[36.0,36.0]" + "'", str17, "Range[36.0,36.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 36.0d + "'", double18 == 36.0d);
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 0.0d);
        double double3 = range2.getLowerBound();
        boolean boolean6 = range2.intersects((-9.0d), (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 21871.0d, false);
        org.jfree.data.Range range12 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        java.lang.String str13 = range12.toString();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range16, (-109.0d));
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (-71.0d), (-828.0d));
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range22, (double) 100L);
        double double25 = range24.getLength();
        double double27 = range24.constrain(50.5d);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range12, range24);
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range9, range28);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range9, (-27.75d), true);
        double double34 = range32.constrain(48.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[10.0,100.0]" + "'", str13, "Range[10.0,100.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9.0d) + "'", double17 == (-9.0d));
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 21843.25d + "'", double34 == 21843.25d);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (double) (short) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range5, 0.0d, true);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (-1.0d), (double) (byte) 100);
        boolean boolean17 = range11.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, (-9.0d), (double) 100L);
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range20, (double) 1);
        org.jfree.data.Range range25 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range25, (double) (byte) -1);
        boolean boolean30 = range27.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range20, range27);
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range34, (-1.0d), (double) (byte) 100);
        boolean boolean40 = range34.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range34, (-9.0d), (double) 100L);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range31, range34);
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range8, range44);
        double double46 = range45.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-71.0d) + "'", double46 == (-71.0d));
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range2.getLowerBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        boolean boolean22 = range16.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, (-9.0d), (double) 100L);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (double) 1);
        org.jfree.data.Range range30 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (byte) -1);
        boolean boolean35 = range32.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range25, range32);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range42.intersects((double) (byte) 10, 10.0d);
        boolean boolean46 = range32.equals((java.lang.Object) boolean45);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range32, (double) (byte) 100, false);
        boolean boolean50 = range2.equals((java.lang.Object) range49);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range2, 0.0d, false);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range53, (-900.0d), true);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range56, (-71.0d), 10999.0d);
        org.jfree.data.Range range62 = new org.jfree.data.Range((-899.0d), (double) 1L);
        org.jfree.data.Range range63 = org.jfree.data.Range.combine(range59, range62);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range63);
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, (-1.0d), (-9.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range11, 0.0d, true);
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 1);
        boolean boolean27 = range25.contains(100.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range30, (-109.0d));
        boolean boolean34 = range25.equals((java.lang.Object) range33);
        double double36 = range33.constrain((double) '4');
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range33, 32.0d, 61.0d);
        double double40 = range39.getLength();
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range39, (-26442.5d), 11044.5d);
        boolean boolean45 = range43.contains(0.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9.0d) + "'", double31 == (-9.0d));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), 1.0d);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range5, 5.5d);
        boolean boolean9 = range5.equals((java.lang.Object) 171.0d);
        boolean boolean12 = range5.intersects((-893.5d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range5, 0.0d);
        org.jfree.data.Range range17 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range17, (double) 10L);
        double double20 = range17.getLowerBound();
        double double21 = range17.getCentralValue();
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range17, (-485.0d), (-449.0d));
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double28 = range27.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range24, range27);
        double double31 = range24.constrain((double) 'a');
        double double32 = range24.getLowerBound();
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range14, range24);
        org.jfree.data.Range range36 = new org.jfree.data.Range((double) (short) -1, 15.5d);
        boolean boolean37 = range33.equals((java.lang.Object) (short) -1);
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range33, 10989.0d, (-942.0d));
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range40, 742645.0d);
        double double43 = range40.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-0.5d) + "'", double21 == (-0.5d));
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-9.0d) + "'", double28 == (-9.0d));
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-449.0d) + "'", double31 == (-449.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 484.0d + "'", double32 == 484.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-85631.0d) + "'", double43 == (-85631.0d));
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        java.lang.String str6 = range5.toString();
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double10 = range9.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range9, 1.0d, true);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (-10.0d));
        boolean boolean19 = range9.equals((java.lang.Object) range18);
        double double20 = range18.getCentralValue();
        org.jfree.data.Range range21 = org.jfree.data.Range.combine(range5, range18);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, 45.0d, (double) '#');
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) (byte) -1, (double) (byte) -1);
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range27, 32.0d);
        double double30 = range27.getCentralValue();
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range27, 55.0d, (double) 10L);
        double double34 = range33.getLowerBound();
        boolean boolean35 = range21.equals((java.lang.Object) range33);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range33, 21.0d, true);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[1.0,-899.0]" + "'", str6, "Range[1.0,-899.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9.0d) + "'", double10 == (-9.0d));
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 45.0d + "'", double20 == 45.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range38);
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, (-10.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range5, range8);
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, (-1.0d), (double) (byte) 100);
        boolean boolean20 = range14.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range14, (-9.0d), (double) 100L);
        double double25 = range23.constrain(1.0d);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range11, range23);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) 10.0f, (double) 10.0f);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (-1.0d), (double) (byte) 100);
        boolean boolean38 = range32.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range41 = org.jfree.data.Range.expand(range32, (-9.0d), (double) 100L);
        double double43 = range41.constrain(1.0d);
        boolean boolean44 = range29.equals((java.lang.Object) 1.0d);
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range26, range29);
        boolean boolean48 = range45.intersects(360.0d, (-10954.5d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-899.0d) + "'", double25 == (-899.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-899.0d) + "'", double43 == (-899.0d));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, 5.5d);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double17 = range16.getLength();
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range16, 1.0d, true);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, (-10.0d));
        boolean boolean26 = range16.equals((java.lang.Object) range25);
        boolean boolean27 = range11.equals((java.lang.Object) range25);
        double double28 = range25.getUpperBound();
        org.jfree.data.Range range31 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range31, (double) (byte) -1);
        double double35 = range33.constrain((double) 0L);
        boolean boolean37 = range33.contains(168.0d);
        org.jfree.data.Range range40 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double41 = range40.getLength();
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range40, (-109.0d));
        org.jfree.data.Range range46 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range49 = org.jfree.data.Range.expand(range46, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range52 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range54 = org.jfree.data.Range.shift(range52, (-10.0d));
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range49, range52);
        org.jfree.data.Range range58 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range61 = org.jfree.data.Range.expand(range58, (-1.0d), (double) (byte) 100);
        boolean boolean64 = range58.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range67 = org.jfree.data.Range.expand(range58, (-9.0d), (double) 100L);
        double double69 = range67.constrain(1.0d);
        org.jfree.data.Range range70 = org.jfree.data.Range.combine(range55, range67);
        boolean boolean71 = range43.equals((java.lang.Object) range55);
        boolean boolean73 = range55.contains((-485.0d));
        boolean boolean74 = range33.equals((java.lang.Object) (-485.0d));
        boolean boolean75 = range25.equals((java.lang.Object) (-485.0d));
        double double76 = range25.getLength();
        org.jfree.data.Range range78 = org.jfree.data.Range.expandToInclude(range25, (-13662.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9.0d) + "'", double17 == (-9.0d));
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 90.0d + "'", double28 == 90.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-10.0d) + "'", double35 == (-10.0d));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-9.0d) + "'", double41 == (-9.0d));
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-899.0d) + "'", double69 == (-899.0d));
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 90.0d + "'", double76 == 90.0d);
        org.junit.Assert.assertNotNull(range78);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range5, 5.5d);
        boolean boolean9 = range5.equals((java.lang.Object) 171.0d);
        boolean boolean12 = range5.intersects((-893.5d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range5, 0.0d);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, 0.0d, 0.0d);
        double double19 = range17.constrain((-933.0d));
        double double20 = range17.getUpperBound();
        double double21 = range17.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 91.0d + "'", double20 == 91.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 45.5d + "'", double21 == 45.5d);
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10L);
        double double5 = range2.getLowerBound();
        double double6 = range2.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range2, (-485.0d), (-449.0d));
        org.jfree.data.Range range12 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, (double) (byte) -1);
        double double16 = range14.constrain((double) 0L);
        double double17 = range14.getCentralValue();
        double double18 = range14.getLowerBound();
        org.jfree.data.Range range19 = org.jfree.data.Range.combine(range2, range14);
        double double20 = range14.getLength();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.5d) + "'", double6 == (-0.5d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-10.0d) + "'", double16 == (-10.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 44.5d + "'", double17 == 44.5d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 99.0d + "'", double18 == 99.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-109.0d) + "'", double20 == (-109.0d));
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        java.lang.String str18 = range11.toString();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range11, 0.0d);
        double double21 = range11.getUpperBound();
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range11, (double) 1L);
        boolean boolean26 = range23.intersects(5549.5d, 0.0d);
        double double27 = range23.getCentralValue();
        java.lang.Class<?> wildcardClass28 = range23.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[-71.0,-899.0]" + "'", str18, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-899.0d) + "'", double21 == (-899.0d));
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-484.0d) + "'", double27 == (-484.0d));
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        double double14 = range11.getLength();
        java.lang.String str15 = range11.toString();
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range11, (double) (short) 10);
        java.lang.String str18 = range11.toString();
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range11, 11871.0d, false);
        org.jfree.data.Range range24 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double25 = range24.getLength();
        double double26 = range24.getLowerBound();
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range24, 10.0d, false);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range29, 32.0d, true);
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range21, range32);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-828.0d) + "'", double14 == (-828.0d));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Range[-71.0,-899.0]" + "'", str15, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[-71.0,-899.0]" + "'", str18, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-9.0d) + "'", double25 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range33);
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range3, (-1.0d), (double) (byte) 100);
        boolean boolean9 = range3.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range3, (-9.0d), (double) 100L);
        double double14 = range12.constrain(1.0d);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range12, (double) (byte) 100);
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range12, (double) 'a');
        java.lang.String str19 = range12.toString();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range12, 0.0d);
        double double22 = range12.getUpperBound();
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range12, (double) 1L);
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, (-1.0d), (double) (byte) 100);
        boolean boolean33 = range27.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range36 = org.jfree.data.Range.expand(range27, (-9.0d), (double) 100L);
        double double38 = range36.constrain(1.0d);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range36, (double) (byte) 100);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range36, (double) 'a');
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range36, (double) 1.0f, false);
        org.jfree.data.Range range48 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range48, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range51, 5.5d);
        boolean boolean55 = range51.equals((java.lang.Object) 171.0d);
        boolean boolean58 = range51.intersects((-893.5d), (double) 100L);
        double double60 = range51.constrain(1.0d);
        boolean boolean61 = range45.equals((java.lang.Object) range51);
        org.jfree.data.Range range63 = org.jfree.data.Range.expandToInclude(range45, (-9.0d));
        java.lang.String str64 = range45.toString();
        org.jfree.data.Range range65 = org.jfree.data.Range.combine(range12, range45);
        org.jfree.data.Range range68 = org.jfree.data.Range.shift(range12, 4488.5d, true);
        org.jfree.data.Range range69 = org.jfree.data.Range.combine(range0, range68);
        double double70 = range68.getLength();
        boolean boolean72 = range68.contains(10612.5d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-899.0d) + "'", double14 == (-899.0d));
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Range[-71.0,-899.0]" + "'", str19, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-899.0d) + "'", double22 == (-899.0d));
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-899.0d) + "'", double38 == (-899.0d));
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Range[-70.0,-898.0]" + "'", str64, "Range[-70.0,-898.0]");
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-828.0d) + "'", double70 == (-828.0d));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range5.intersects((double) (byte) 10, 10.0d);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (-1.0d), (double) (byte) 100);
        boolean boolean17 = range11.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, (-9.0d), (double) 100L);
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range20, (double) 1);
        org.jfree.data.Range range25 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range25, (double) (byte) -1);
        boolean boolean30 = range27.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range20, range27);
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range34, (-1.0d), (double) (byte) 100);
        boolean boolean40 = range34.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range34, (-9.0d), (double) 100L);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range31, range34);
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range31, (double) 100);
        double double47 = range31.getLowerBound();
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range5, range31);
        double double49 = range48.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-71.0d) + "'", double47 == (-71.0d));
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 61.0d + "'", double49 == 61.0d);
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        boolean boolean7 = range4.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range4, (double) 0.0f);
        double double10 = range9.getUpperBound();
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range9, (-393443.0d));
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range12, (double) (byte) 100, true);
        double double16 = range12.getUpperBound();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-10.0d) + "'", double10 == (-10.0d));
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-10.0d) + "'", double16 == (-10.0d));
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        org.jfree.data.Range range2 = new org.jfree.data.Range(99.0d, (double) '#');
        org.jfree.data.Range range5 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (-1.0d), (double) (byte) 100);
        boolean boolean11 = range5.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range5, (-9.0d), (double) 100L);
        double double16 = range14.constrain(1.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range14, (double) (byte) 100);
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range14, (double) 'a');
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range14, (-1.0d), (-9.0d));
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range14, 0.0d, true);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range2, range26);
        double double28 = range2.getCentralValue();
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range2, (double) (short) 10, (-65.5d));
        java.lang.String str32 = range31.toString();
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-899.0d) + "'", double16 == (-899.0d));
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 67.0d + "'", double28 == 67.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Range[739.0,4227.0]" + "'", str32, "Range[739.0,4227.0]");
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (double) (short) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range5, 45.0d, true);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (-1.0d), (double) (byte) 100);
        boolean boolean17 = range11.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, (-9.0d), (double) 100L);
        double double22 = range20.constrain(1.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range20, (double) (byte) 100);
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range20, (double) 'a');
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range20, (double) 1.0f, false);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range35, 5.5d);
        boolean boolean39 = range35.equals((java.lang.Object) 171.0d);
        boolean boolean42 = range35.intersects((-893.5d), (double) 100L);
        double double44 = range35.constrain(1.0d);
        boolean boolean45 = range29.equals((java.lang.Object) range35);
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range29, (-9.0d));
        double double48 = range47.getLength();
        boolean boolean49 = range5.equals((java.lang.Object) double48);
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range5, 97.0d);
        boolean boolean54 = range5.intersects((-28764.0d), (double) (-1.0f));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-899.0d) + "'", double22 == (-899.0d));
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 61.0d + "'", double48 == 61.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        double double6 = range4.constrain((double) 0L);
        double double7 = range4.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range4, (double) (byte) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range4, (-1.74063473780276736E17d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-10.0d) + "'", double6 == (-10.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-109.0d) + "'", double7 == (-109.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 0.0d);
        double double3 = range2.getLowerBound();
        boolean boolean6 = range2.intersects((-9.0d), (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 21871.0d, false);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (-485.0d), 168.0d);
        double double13 = range2.getUpperBound();
        java.lang.Class<?> wildcardClass14 = range2.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, 5.5d);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 5.5d, (double) 10.0f);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (double) (byte) 0, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range16, (double) '#', true);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range25, (-10.0d));
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range27, (double) 0);
        double double30 = range27.getLength();
        boolean boolean33 = range27.intersects((-899.0d), 90.0d);
        java.lang.String str34 = range27.toString();
        boolean boolean35 = range16.equals((java.lang.Object) range27);
        boolean boolean38 = range27.intersects((-4.5d), 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 90.0d + "'", double30 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Range[0.0,90.0]" + "'", str34, "Range[0.0,90.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range2.getLowerBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        boolean boolean22 = range16.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, (-9.0d), (double) 100L);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (double) 1);
        org.jfree.data.Range range30 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (byte) -1);
        boolean boolean35 = range32.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range25, range32);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range42.intersects((double) (byte) 10, 10.0d);
        boolean boolean46 = range32.equals((java.lang.Object) boolean45);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range32, (double) (byte) 100, false);
        boolean boolean50 = range2.equals((java.lang.Object) range49);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range2, 0.0d, false);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range53, (-900.0d), true);
        boolean boolean58 = range53.contains((-0.5d));
        org.jfree.data.Range range61 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range63 = org.jfree.data.Range.shift(range61, (double) 10L);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range63, (-9.0d), true);
        double double67 = range63.getCentralValue();
        org.jfree.data.Range range68 = org.jfree.data.Range.combine(range53, range63);
        double double69 = range68.getCentralValue();
        boolean boolean72 = range68.intersects(386.0d, 0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 5.0d + "'", double67 == 5.0d);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5.0d + "'", double69 == 5.0d);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        org.jfree.data.Range range7 = new org.jfree.data.Range(100.0d, (-9.0d));
        double double8 = range7.getUpperBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.combine(range2, range7);
        double double10 = range7.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) (byte) -1);
        double double19 = range16.getLowerBound();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range16, 17.5d);
        boolean boolean23 = range16.contains(72.0d);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range16, 50.5d, 171.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range7, range26);
        java.lang.String str28 = range26.toString();
        java.lang.String str29 = range26.toString();
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range26, 15.5d, false);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, (-1.0d), (double) (byte) 100);
        boolean boolean41 = range35.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range35, (-9.0d), (double) 100L);
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range44, (double) 1);
        boolean boolean48 = range44.equals((java.lang.Object) '4');
        boolean boolean49 = range32.equals((java.lang.Object) '4');
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9.0d) + "'", double8 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[-4544.0,15481.0]" + "'", str28, "Range[-4544.0,15481.0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Range[-4544.0,15481.0]" + "'", str29, "Range[-4544.0,15481.0]");
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        boolean boolean4 = range2.equals((java.lang.Object) 100L);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 18630.0d, true);
        java.lang.Class<?> wildcardClass8 = range2.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 10.0d, false);
        double double8 = range2.getCentralValue();
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) (byte) -1);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range25, (-10.0d));
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range22, range25);
        org.jfree.data.Range range31 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range31, (-10.0d));
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range22, range31);
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range34, (-828.0d));
        org.jfree.data.Range range37 = org.jfree.data.Range.combine(range14, range36);
        double double38 = range14.getLowerBound();
        double double40 = range14.constrain(55.0d);
        double double41 = range14.getUpperBound();
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range2, range14);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.5d + "'", double8 == 5.5d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 55.0d + "'", double40 == 55.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 91.0d + "'", double41 == 91.0d);
        org.junit.Assert.assertNotNull(range42);
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range2.getLowerBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        boolean boolean22 = range16.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, (-9.0d), (double) 100L);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (double) 1);
        org.jfree.data.Range range30 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (byte) -1);
        boolean boolean35 = range32.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range25, range32);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range42.intersects((double) (byte) 10, 10.0d);
        boolean boolean46 = range32.equals((java.lang.Object) boolean45);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range32, (double) (byte) 100, false);
        boolean boolean50 = range2.equals((java.lang.Object) range49);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range2, 0.0d, false);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range53, (double) 'a', true);
        double double57 = range53.getUpperBound();
        boolean boolean60 = range53.intersects(17.5d, 55.0d);
        org.jfree.data.Range range63 = org.jfree.data.Range.shift(range53, (double) 0, false);
        double double64 = range53.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range3 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range3, (double) 10L);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range5, (-9.0d), true);
        double double9 = range8.getLowerBound();
        boolean boolean12 = range8.intersects((double) (-1.0f), (double) 10.0f);
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range8, 10974.5d);
        org.jfree.data.Range range17 = new org.jfree.data.Range(0.0d, (double) (short) -1);
        double double18 = range17.getCentralValue();
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double22 = range21.getLength();
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range21, (double) (short) 100);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range17, range24);
        org.jfree.data.Range range28 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range28, (-10.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) 0);
        double double33 = range30.getLength();
        boolean boolean36 = range30.intersects((-899.0d), 90.0d);
        java.lang.String str37 = range30.toString();
        boolean boolean39 = range30.contains((-828.0d));
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range25, range30);
        boolean boolean41 = range14.equals((java.lang.Object) range40);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range0, range40);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9.0d) + "'", double9 == (-9.0d));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.5d) + "'", double18 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-9.0d) + "'", double22 == (-9.0d));
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 90.0d + "'", double33 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Range[0.0,90.0]" + "'", str37, "Range[0.0,90.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(range42);
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, (-1.0d), (double) (byte) 100);
        boolean boolean31 = range28.intersects((double) (byte) 10, 10.0d);
        boolean boolean32 = range18.equals((java.lang.Object) boolean31);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range18, (double) (byte) 100, false);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range18, 100.0d, (-0.5d));
        java.lang.String str39 = range38.toString();
        double double40 = range38.getLowerBound();
        org.jfree.data.Range range43 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range43, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range43, (double) 10.0f, false);
        boolean boolean51 = range49.contains((double) 1L);
        double double52 = range49.getUpperBound();
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range38, range49);
        org.jfree.data.Range range56 = org.jfree.data.Range.expand(range49, 1.0d, (double) 100);
        double double57 = range49.getUpperBound();
        double double58 = range49.getLength();
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range49, (-9.0d));
        org.jfree.data.Range range62 = org.jfree.data.Range.expandToInclude(range49, (double) 0L);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Range[10999.0,44.5]" + "'", str39, "Range[10999.0,44.5]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10999.0d + "'", double40 == 10999.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 11.0d + "'", double52 == 11.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 11.0d + "'", double57 == 11.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-9.0d) + "'", double58 == (-9.0d));
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range62);
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 100, 11.0d);
        boolean boolean4 = range2.equals((java.lang.Object) (-485.0d));
        boolean boolean7 = range2.intersects((double) 10.0f, 99.0d);
        java.lang.String str8 = range2.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[100.0,11.0]" + "'", str8, "Range[100.0,11.0]");
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, (-10.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range5, range8);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range8, 18595.0d);
        boolean boolean16 = range13.intersects((-30636.0d), 29.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) (short) -1);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double7 = range6.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range6, (double) (short) 100);
        org.jfree.data.Range range10 = org.jfree.data.Range.combine(range2, range9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (-10.0d));
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range15, (double) 0);
        double double18 = range15.getLength();
        boolean boolean21 = range15.intersects((-899.0d), 90.0d);
        java.lang.String str22 = range15.toString();
        boolean boolean24 = range15.contains((-828.0d));
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range10, range15);
        double double26 = range25.getUpperBound();
        java.lang.String str27 = range25.toString();
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range25, 1002899.0d, false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.5d) + "'", double3 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9.0d) + "'", double7 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 90.0d + "'", double18 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Range[0.0,90.0]" + "'", str22, "Range[0.0,90.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Range[0.0,100.0]" + "'", str27, "Range[0.0,100.0]");
        org.junit.Assert.assertNotNull(range30);
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        org.jfree.data.Range range7 = new org.jfree.data.Range(100.0d, (-9.0d));
        double double8 = range7.getUpperBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.combine(range2, range7);
        double double10 = range7.getLowerBound();
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) (byte) -1);
        double double19 = range16.getLowerBound();
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range16, 17.5d);
        boolean boolean23 = range16.contains(72.0d);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range16, 50.5d, 171.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range7, range26);
        double double28 = range7.getCentralValue();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9.0d) + "'", double8 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 45.5d + "'", double28 == 45.5d);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 0.0d);
        double double3 = range2.getLowerBound();
        boolean boolean6 = range2.intersects((-9.0d), (double) ' ');
        java.lang.Class<?> wildcardClass7 = range2.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        org.jfree.data.Range range2 = new org.jfree.data.Range(168.0d, (-828.0d));
        boolean boolean5 = range2.intersects((double) 100.0f, 90.0d);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double9 = range8.getLength();
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, (-109.0d));
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (-71.0d), (-828.0d));
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range14, (double) 100L);
        double double17 = range16.getLength();
        double double18 = range16.getCentralValue();
        org.jfree.data.Range range19 = org.jfree.data.Range.combine(range2, range16);
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range22, (-10.0d));
        boolean boolean27 = range22.intersects((double) 1, (double) 10L);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range30, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range36 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range36, (-10.0d));
        org.jfree.data.Range range39 = org.jfree.data.Range.combine(range33, range36);
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range22, range33);
        org.jfree.data.Range range43 = new org.jfree.data.Range(0.0d, (double) '#');
        org.jfree.data.Range range46 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range48 = org.jfree.data.Range.shift(range46, (double) (byte) -1);
        boolean boolean51 = range48.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range48, (double) 0.0f);
        boolean boolean55 = range53.contains(15.5d);
        org.jfree.data.Range range56 = org.jfree.data.Range.combine(range43, range53);
        org.jfree.data.Range range57 = org.jfree.data.Range.combine(range33, range43);
        org.jfree.data.Range range58 = org.jfree.data.Range.combine(range19, range57);
        double double59 = range19.getLowerBound();
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range19, (double) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9.0d) + "'", double9 == (-9.0d));
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertNotNull(range61);
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10L);
        double double5 = range2.getLowerBound();
        double double6 = range2.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range2, (-485.0d), (-449.0d));
        org.jfree.data.Range range12 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double13 = range12.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.combine(range9, range12);
        java.lang.String str15 = range9.toString();
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range9, (-364.0d));
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, (-1.0d), (double) (byte) 100);
        boolean boolean26 = range20.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range20, (-9.0d), (double) 100L);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range29, 5.5d);
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double35 = range34.getLength();
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range34, 1.0d, true);
        org.jfree.data.Range range41 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range41, (-10.0d));
        boolean boolean44 = range34.equals((java.lang.Object) range43);
        boolean boolean45 = range29.equals((java.lang.Object) range43);
        org.jfree.data.Range range48 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range48, (-1.0d), (double) (byte) 100);
        boolean boolean54 = range48.intersects((double) (byte) -1, (double) (short) -1);
        double double55 = range48.getCentralValue();
        double double56 = range48.getLength();
        double double57 = range48.getLength();
        org.jfree.data.Range range58 = org.jfree.data.Range.combine(range43, range48);
        double double59 = range48.getLowerBound();
        boolean boolean60 = range9.equals((java.lang.Object) range48);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.5d) + "'", double6 == (-0.5d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9.0d) + "'", double13 == (-9.0d));
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Range[484.0,-449.0]" + "'", str15, "Range[484.0,-449.0]");
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-9.0d) + "'", double35 == (-9.0d));
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5.5d + "'", double55 == 5.5d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-9.0d) + "'", double56 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-9.0d) + "'", double57 == (-9.0d));
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, (-1.0d), (-9.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 71.0d, (double) 10);
        boolean boolean26 = range23.intersects(37189.0d, (double) (short) -1);
        double double27 = range23.getUpperBound();
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range23, 52.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 81073.0d + "'", double27 == 81073.0d);
        org.junit.Assert.assertNotNull(range29);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, 5.5d);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 5.5d, (double) 10.0f);
        double double17 = range16.getLength();
        double double18 = range16.getCentralValue();
        double double19 = range16.getUpperBound();
        org.jfree.data.Range range20 = null;
        org.jfree.data.Range range21 = org.jfree.data.Range.combine(range16, range20);
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range16, 21871.0d);
        boolean boolean26 = range16.intersects((-37118.0d), (-30636.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-13662.0d) + "'", double17 == (-13662.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-2342.5d) + "'", double18 == (-2342.5d));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-9173.5d) + "'", double19 == (-9173.5d));
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 0.0f, 37189.0d);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range6, (-1.0d), (double) (byte) 100);
        boolean boolean12 = range6.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range6, (-9.0d), (double) 100L);
        double double17 = range15.constrain(1.0d);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, (-1.0d), (double) (byte) 100);
        boolean boolean26 = range20.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range20, (-9.0d), (double) 100L);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range29, 45.0d, (-9.0d));
        double double33 = range32.getUpperBound();
        boolean boolean34 = range15.equals((java.lang.Object) double33);
        double double35 = range15.getUpperBound();
        double double37 = range15.constrain(232.75d);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range2, range15);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 18594.5d + "'", double3 == 18594.5d);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-899.0d) + "'", double17 == (-899.0d));
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 6553.0d + "'", double33 == 6553.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-899.0d) + "'", double35 == (-899.0d));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-899.0d) + "'", double37 == (-899.0d));
        org.junit.Assert.assertNotNull(range38);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range5, (double) (byte) -1);
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range10, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (-10.0d));
        org.jfree.data.Range range19 = org.jfree.data.Range.combine(range13, range16);
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range22, (-10.0d));
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range13, range22);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (-828.0d));
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range5, range27);
        double double30 = range28.constrain((double) (short) 100);
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range28, (-35.5d));
        double double33 = range28.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 928.0d + "'", double33 == 928.0d);
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range11, (double) 1.0f, false);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range26, 5.5d);
        boolean boolean30 = range26.equals((java.lang.Object) 171.0d);
        boolean boolean33 = range26.intersects((-893.5d), (double) 100L);
        double double35 = range26.constrain(1.0d);
        boolean boolean36 = range20.equals((java.lang.Object) range26);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range39.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range39, (-9.0d), (double) 100L);
        double double50 = range48.constrain(1.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range48, (double) (byte) 100);
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range48, (double) 'a');
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range48, (-1.0d), (-9.0d));
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range48, 0.0d, true);
        org.jfree.data.Range range62 = org.jfree.data.Range.expandToInclude(range48, (double) (short) 1);
        boolean boolean63 = range20.equals((java.lang.Object) range48);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range20, (-2342.5d), true);
        boolean boolean68 = range20.contains((-4050.0d));
        org.jfree.data.Range range70 = org.jfree.data.Range.shift(range20, 6109.5d);
        double double71 = range20.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-899.0d) + "'", double50 == (-899.0d));
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-484.0d) + "'", double71 == (-484.0d));
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 10.0f, false);
        boolean boolean10 = range8.contains((double) 1L);
        double double12 = range8.constrain((double) (byte) 0);
        double double13 = range8.getLength();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        boolean boolean18 = range16.equals((java.lang.Object) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, (-1.0d), (double) (byte) 100);
        boolean boolean27 = range24.intersects((double) (byte) 10, 10.0d);
        java.lang.String str28 = range24.toString();
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range16, range24);
        boolean boolean30 = range8.equals((java.lang.Object) range24);
        org.jfree.data.Range range31 = null;
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range8, range31);
        java.lang.String str33 = range8.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 20.0d + "'", double12 == 20.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9.0d) + "'", double13 == (-9.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[1.0,-899.0]" + "'", str28, "Range[1.0,-899.0]");
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Range[20.0,11.0]" + "'", str33, "Range[20.0,11.0]");
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, (-1.0d), (-9.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range11, 0.0d, true);
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 1);
        boolean boolean27 = range25.contains(100.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range30, (-109.0d));
        boolean boolean34 = range25.equals((java.lang.Object) range33);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range33, (-449.0d), false);
        boolean boolean40 = range33.intersects(190.0d, 71.0d);
        boolean boolean42 = range33.contains((double) (short) 100);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9.0d) + "'", double31 == (-9.0d));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10L);
        double double5 = range2.getLowerBound();
        double double6 = range2.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range2, (-485.0d), (-449.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (double) 10.0f);
        org.jfree.data.Range range12 = null;
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range11, range12);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        java.lang.String str20 = range19.toString();
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double24 = range23.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range23, 1.0d, true);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (-10.0d));
        boolean boolean33 = range23.equals((java.lang.Object) range32);
        double double34 = range32.getCentralValue();
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range19, range32);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range12, range32);
        boolean boolean38 = range36.contains(17.5d);
        java.lang.String str39 = range36.toString();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.5d) + "'", double6 == (-0.5d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Range[1.0,-899.0]" + "'", str20, "Range[1.0,-899.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-9.0d) + "'", double24 == (-9.0d));
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 45.0d + "'", double34 == 45.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Range[0.0,90.0]" + "'", str39, "Range[0.0,90.0]");
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 10.0d, false);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, 32.0d, true);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range7, 4488.5d, false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range13);
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range5, 5.5d);
        boolean boolean9 = range5.equals((java.lang.Object) 171.0d);
        boolean boolean12 = range5.intersects((-893.5d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range5, 0.0d);
        org.jfree.data.Range range17 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range17, (double) 10L);
        double double20 = range17.getLowerBound();
        double double21 = range17.getCentralValue();
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range17, (-485.0d), (-449.0d));
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double28 = range27.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range24, range27);
        double double31 = range24.constrain((double) 'a');
        double double32 = range24.getLowerBound();
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range14, range24);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range24, 494.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-0.5d) + "'", double21 == (-0.5d));
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-9.0d) + "'", double28 == (-9.0d));
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-449.0d) + "'", double31 == (-449.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 484.0d + "'", double32 == 484.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range35);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-109.0d));
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (-71.0d), (-828.0d));
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, (double) 100L);
        java.lang.String str11 = range10.toString();
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range10, (double) 1L, true);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range14, 11019.5d);
        java.lang.String str17 = range14.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[100.0,100.0]" + "'", str11, "Range[100.0,100.0]");
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[101.0,101.0]" + "'", str17, "Range[101.0,101.0]");
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 45.0d, (-9.0d));
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range11, (-1.0d));
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-10.0d), 82.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range((-9138.5d), (-449.0d));
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) (-1.0f));
        boolean boolean25 = range19.equals((java.lang.Object) range22);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        java.lang.String str18 = range11.toString();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range11, 0.0d);
        double double21 = range20.getLowerBound();
        double double22 = range20.getLowerBound();
        double double23 = range20.getUpperBound();
        double double25 = range20.constrain((-9137.5d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[-71.0,-899.0]" + "'", str18, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-71.0d) + "'", double21 == (-71.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-71.0d) + "'", double22 == (-71.0d));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-71.0d) + "'", double25 == (-71.0d));
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        double double18 = range11.getLength();
        org.jfree.data.Range range21 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range21, (double) 10L);
        org.jfree.data.Range range26 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range26, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range32, (-10.0d));
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range29, range32);
        org.jfree.data.Range range38 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range41 = org.jfree.data.Range.expand(range38, (-1.0d), (double) (byte) 100);
        boolean boolean44 = range38.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range47 = org.jfree.data.Range.expand(range38, (-9.0d), (double) 100L);
        double double49 = range47.constrain(1.0d);
        org.jfree.data.Range range50 = org.jfree.data.Range.combine(range35, range47);
        boolean boolean51 = range21.equals((java.lang.Object) range50);
        org.jfree.data.Range range52 = org.jfree.data.Range.combine(range11, range21);
        double double53 = range21.getUpperBound();
        boolean boolean55 = range21.contains((-399.5d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-828.0d) + "'", double18 == (-828.0d));
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-899.0d) + "'", double49 == (-899.0d));
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        java.lang.String str6 = range5.toString();
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double10 = range9.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range9, 1.0d, true);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (-10.0d));
        boolean boolean19 = range9.equals((java.lang.Object) range18);
        double double20 = range18.getCentralValue();
        org.jfree.data.Range range21 = org.jfree.data.Range.combine(range5, range18);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, 45.0d, (double) '#');
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, (-1.0d), (double) (byte) 100);
        boolean boolean33 = range27.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range36 = org.jfree.data.Range.expand(range27, (-9.0d), (double) 100L);
        double double38 = range36.constrain(1.0d);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range36, (double) (byte) 100);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range36, (double) 'a');
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range24, range42);
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range42, (-71.0d), true);
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range42, 91.0d);
        double double50 = range48.constrain((-10.0d));
        java.lang.String str51 = range48.toString();
        org.jfree.data.Range range54 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range54, (double) 10L);
        double double57 = range54.getLowerBound();
        double double58 = range54.getCentralValue();
        org.jfree.data.Range range61 = org.jfree.data.Range.expand(range54, (-485.0d), (-449.0d));
        org.jfree.data.Range range64 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double65 = range64.getLength();
        org.jfree.data.Range range66 = org.jfree.data.Range.combine(range61, range64);
        java.lang.String str67 = range61.toString();
        org.jfree.data.Range range68 = org.jfree.data.Range.combine(range48, range61);
        double double69 = range61.getUpperBound();
        java.lang.Class<?> wildcardClass70 = range61.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[1.0,-899.0]" + "'", str6, "Range[1.0,-899.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9.0d) + "'", double10 == (-9.0d));
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 45.0d + "'", double20 == 45.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-899.0d) + "'", double38 == (-899.0d));
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-10.0d) + "'", double50 == (-10.0d));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Range[-71.0,97.0]" + "'", str51, "Range[-71.0,97.0]");
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1.0d) + "'", double57 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-0.5d) + "'", double58 == (-0.5d));
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-9.0d) + "'", double65 == (-9.0d));
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Range[484.0,-449.0]" + "'", str67, "Range[484.0,-449.0]");
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-449.0d) + "'", double69 == (-449.0d));
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range5, (double) (byte) -1);
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range10, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (-10.0d));
        org.jfree.data.Range range19 = org.jfree.data.Range.combine(range13, range16);
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range22, (-10.0d));
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range13, range22);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (-828.0d));
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range5, range27);
        double double29 = range28.getUpperBound();
        double double30 = range28.getCentralValue();
        boolean boolean32 = range28.contains((-1.0931465E7d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-364.0d) + "'", double30 == (-364.0d));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        org.jfree.data.Range range2 = new org.jfree.data.Range(307001.375d, 73.0d);
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        java.lang.String str18 = range11.toString();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range11, 0.0d);
        double double21 = range20.getLowerBound();
        java.lang.String str22 = range20.toString();
        double double23 = range20.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range20, (double) (byte) 1);
        org.jfree.data.Range range28 = new org.jfree.data.Range(44.5d, (double) 10);
        boolean boolean30 = range28.contains((-828.0d));
        boolean boolean31 = range25.equals((java.lang.Object) range28);
        double double32 = range25.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[-71.0,-899.0]" + "'", str18, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-71.0d) + "'", double21 == (-71.0d));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Range[-71.0,0.0]" + "'", str22, "Range[-71.0,0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 71.0d + "'", double23 == 71.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-70.0d) + "'", double32 == (-70.0d));
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-109.0d));
        boolean boolean7 = range2.contains(1.0d);
        boolean boolean9 = range2.contains((double) (byte) 0);
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range2, (double) (byte) 100);
        java.lang.String str12 = range11.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Range[10.0,100.0]" + "'", str12, "Range[10.0,100.0]");
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 0.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, (-10.0d), true);
        double double11 = range2.getUpperBound();
        java.lang.Class<?> wildcardClass12 = range2.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-400.5d), (-26442.5d));
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (-10.0d));
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range4, (double) 0);
        double double7 = range4.getLength();
        double double8 = range4.getLength();
        double double9 = range4.getUpperBound();
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range4, 61.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 90.0d + "'", double7 == 90.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 90.0d + "'", double8 == 90.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 90.0d + "'", double9 == 90.0d);
        org.junit.Assert.assertNotNull(range11);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range5, 5.5d);
        boolean boolean9 = range5.equals((java.lang.Object) 171.0d);
        boolean boolean12 = range5.intersects((-893.5d), (double) 100L);
        double double14 = range5.constrain(1.0d);
        double double15 = range5.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 46.0d + "'", double15 == 46.0d);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, (-1.0d), (double) (byte) 100);
        boolean boolean31 = range28.intersects((double) (byte) 10, 10.0d);
        boolean boolean32 = range18.equals((java.lang.Object) boolean31);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range18, (double) (byte) 100, false);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range18, 100.0d, (-0.5d));
        java.lang.String str39 = range38.toString();
        double double40 = range38.getLowerBound();
        org.jfree.data.Range range43 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range43, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range43, (double) 10.0f, false);
        boolean boolean51 = range49.contains((double) 1L);
        double double52 = range49.getUpperBound();
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range38, range49);
        org.jfree.data.Range range56 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range56, (-1.0d), (double) (byte) 100);
        boolean boolean62 = range56.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range65 = org.jfree.data.Range.expand(range56, (-9.0d), (double) 100L);
        double double67 = range65.constrain(1.0d);
        org.jfree.data.Range range69 = org.jfree.data.Range.shift(range65, (double) (byte) 100);
        org.jfree.data.Range range71 = org.jfree.data.Range.expandToInclude(range65, (double) 'a');
        org.jfree.data.Range range74 = org.jfree.data.Range.shift(range65, (double) 1.0f, false);
        double double76 = range74.constrain((-1.0d));
        org.jfree.data.Range range77 = org.jfree.data.Range.combine(range38, range74);
        org.jfree.data.Range range79 = org.jfree.data.Range.expandToInclude(range38, (-480.5d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Range[10999.0,44.5]" + "'", str39, "Range[10999.0,44.5]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10999.0d + "'", double40 == 10999.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 11.0d + "'", double52 == 11.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-899.0d) + "'", double67 == (-899.0d));
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-898.0d) + "'", double76 == (-898.0d));
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range79);
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 0.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, (-10.0d), true);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, (-1.0d), (double) (byte) 100);
        boolean boolean19 = range13.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range13, (-9.0d), (double) 100L);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range22, 45.0d, (-9.0d));
        double double26 = range25.getUpperBound();
        double double27 = range25.getLength();
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range10, range25);
        double double29 = range25.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 6553.0d + "'", double26 == 6553.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-30636.0d) + "'", double27 == (-30636.0d));
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 21871.0d + "'", double29 == 21871.0d);
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1.0f, 37189.0d);
        boolean boolean5 = range2.intersects(11.0d, (-109.0d));
        boolean boolean7 = range2.contains((-4.5d));
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (-449.0d));
        org.jfree.data.Range range12 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, (-10.0d));
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range14, (double) 0);
        double double17 = range14.getLength();
        double double18 = range14.getLength();
        boolean boolean20 = range14.contains((-109.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range14, 20.0d, (-799.0d));
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range23, 107.25d);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, (double) 100.0f, 55.0d);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range25, (-449.0d), (-818.0d));
        double double32 = range31.getUpperBound();
        boolean boolean33 = range2.equals((java.lang.Object) double32);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 90.0d + "'", double17 == 90.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 90.0d + "'", double18 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1560023.25d) + "'", double32 == (-1560023.25d));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (-10.0d));
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range4, (double) 0);
        double double7 = range4.getUpperBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range4, (-184.75d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 90.0d + "'", double7 == 90.0d);
        org.junit.Assert.assertNotNull(range9);
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (-0.5d));
        org.jfree.data.Range range5 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (-1.0d), (double) (byte) 100);
        boolean boolean11 = range5.intersects((double) (byte) -1, (double) (short) -1);
        double double12 = range5.getCentralValue();
        java.lang.Class<?> wildcardClass13 = range5.getClass();
        boolean boolean14 = range2.equals((java.lang.Object) range5);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range5, 10999.0d, true);
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5.5d + "'", double12 == 5.5d);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(range17);
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-933.0d), (-30636.0d));
        double double4 = range2.constrain(20320.25d);
        double double5 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-30636.0d) + "'", double4 == (-30636.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-15784.5d) + "'", double5 == (-15784.5d));
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) -1, (-9138.5d));
        org.jfree.data.Range range4 = org.jfree.data.Range.expandToInclude(range2, 62.0d);
        boolean boolean7 = range2.intersects((double) (short) 0, (double) '4');
        boolean boolean9 = range2.contains(0.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range11.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) 100L);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range15, (-71.0d));
        boolean boolean19 = range17.equals((java.lang.Object) 72.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 45.0d + "'", double13 == 45.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        java.lang.String str18 = range11.toString();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range11, 0.0d);
        double double21 = range20.getLowerBound();
        double double22 = range20.getLowerBound();
        double double23 = range20.getUpperBound();
        org.jfree.data.Range range24 = null;
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range20, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range20, 232.75d, (-846.375d));
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range28, (-72.0d), 9816525.75d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[-71.0,-899.0]" + "'", str18, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-71.0d) + "'", double21 == (-71.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-71.0d) + "'", double22 == (-71.0d));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        java.lang.String str18 = range11.toString();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range11, 0.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 10.0d, 45.5d);
        org.jfree.data.Range range26 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double27 = range26.getLength();
        double double28 = range26.getLowerBound();
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range26, 10.0d, false);
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range31, (-10.0d), false);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range34, 0.0d, 91.0d);
        double double39 = range34.constrain((-71.0d));
        boolean boolean40 = range23.equals((java.lang.Object) double39);
        boolean boolean43 = range23.intersects((-32429.5d), (-414.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[-71.0,-899.0]" + "'", str18, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9.0d) + "'", double27 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        boolean boolean16 = range13.intersects((-1.0d), 0.0d);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double20 = range19.getLength();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range19, (-109.0d));
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range22, (-71.0d), (-828.0d));
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range25, (double) 100L);
        double double28 = range27.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range13, range27);
        double double31 = range13.constrain(72.0d);
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range34, (-1.0d), (double) (byte) 100);
        boolean boolean40 = range34.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range34, (-9.0d), (double) 100L);
        double double45 = range43.constrain(1.0d);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range43, (double) (byte) 100);
        org.jfree.data.Range range50 = new org.jfree.data.Range((-10.0d), (double) '4');
        boolean boolean51 = range43.equals((java.lang.Object) (-10.0d));
        boolean boolean53 = range43.contains((-9.0d));
        boolean boolean54 = range13.equals((java.lang.Object) (-9.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-9.0d) + "'", double20 == (-9.0d));
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-899.0d) + "'", double45 == (-899.0d));
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, 90.0d, false);
        double double6 = range2.getCentralValue();
        java.lang.String str7 = range2.toString();
        double double8 = range2.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 55.0d + "'", double6 == 55.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Range[10.0,100.0]" + "'", str7, "Range[10.0,100.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range2, 50.5d, (double) 0L);
        double double15 = range14.getCentralValue();
        boolean boolean18 = range14.intersects((double) (-1.0f), 5.5d);
        double double19 = range14.getUpperBound();
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range22, (-1.0d), (double) (byte) 100);
        boolean boolean28 = range22.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range22, (-9.0d), (double) 100L);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range31, 5.5d);
        org.jfree.data.Range range36 = org.jfree.data.Range.expand(range33, 5.5d, (double) 10.0f);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, (double) (byte) 0, (double) 0.0f);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range36, (double) '#', true);
        double double44 = range42.constrain((double) (short) 0);
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range14, range42);
        org.jfree.data.Range range48 = org.jfree.data.Range.shift(range45, 18605.0d, true);
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range48, 18594.5d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 232.75d + "'", double15 == 232.75d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-9138.5d) + "'", double44 == (-9138.5d));
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range50);
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        boolean boolean19 = range17.contains((double) 'a');
        double double20 = range17.getUpperBound();
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range29, (-10.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range26, range29);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, (-1.0d), (double) (byte) 100);
        boolean boolean41 = range35.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range35, (-9.0d), (double) 100L);
        double double46 = range44.constrain(1.0d);
        org.jfree.data.Range range47 = org.jfree.data.Range.combine(range32, range44);
        org.jfree.data.Range range50 = new org.jfree.data.Range((double) 10.0f, (double) 10.0f);
        org.jfree.data.Range range53 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range56 = org.jfree.data.Range.expand(range53, (-1.0d), (double) (byte) 100);
        boolean boolean59 = range53.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range62 = org.jfree.data.Range.expand(range53, (-9.0d), (double) 100L);
        double double64 = range62.constrain(1.0d);
        boolean boolean65 = range50.equals((java.lang.Object) 1.0d);
        org.jfree.data.Range range66 = org.jfree.data.Range.combine(range47, range50);
        boolean boolean67 = range17.equals((java.lang.Object) range66);
        double double68 = range66.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 97.0d + "'", double20 == 97.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-899.0d) + "'", double46 == (-899.0d));
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-899.0d) + "'", double64 == (-899.0d));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-71.0d) + "'", double68 == (-71.0d));
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range11.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) 100L);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 1L);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, (-1.0d), (double) (byte) 100);
        boolean boolean26 = range23.intersects((double) (byte) 10, 10.0d);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range29, (-1.0d), (double) (byte) 100);
        boolean boolean35 = range29.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range29, (-9.0d), (double) 100L);
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range38, (double) 1);
        org.jfree.data.Range range43 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range43, (double) (byte) -1);
        boolean boolean48 = range45.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range49 = org.jfree.data.Range.combine(range38, range45);
        org.jfree.data.Range range52 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range55 = org.jfree.data.Range.expand(range52, (-1.0d), (double) (byte) 100);
        boolean boolean58 = range52.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range61 = org.jfree.data.Range.expand(range52, (-9.0d), (double) 100L);
        org.jfree.data.Range range62 = org.jfree.data.Range.combine(range49, range52);
        org.jfree.data.Range range64 = org.jfree.data.Range.shift(range49, (double) 100);
        double double65 = range49.getLowerBound();
        org.jfree.data.Range range66 = org.jfree.data.Range.combine(range23, range49);
        org.jfree.data.Range range68 = org.jfree.data.Range.expandToInclude(range66, 10999.0d);
        org.jfree.data.Range range69 = org.jfree.data.Range.combine(range11, range66);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 45.0d + "'", double13 == 45.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-71.0d) + "'", double65 == (-71.0d));
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range69);
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-109.0d));
        double double6 = range2.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 0.0d, true);
        boolean boolean12 = range2.intersects(232.75d, 18595.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range2, 0.0d, false);
        java.lang.String str16 = range15.toString();
        double double18 = range15.constrain(4.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9.0d) + "'", double6 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Range[10.0,1.0]" + "'", str16, "Range[10.0,1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-996.0d), (-4.5d));
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) -1, 21.0d);
        double double3 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-31535.0d), 18630.0d);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 11045.5d, 0.0d);
        double double6 = range5.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 18630.0d + "'", double6 == 18630.0d);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 45.0d, (-9.0d));
        double double15 = range14.getCentralValue();
        double double16 = range14.getLowerBound();
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range14, (double) (byte) 100, true);
        boolean boolean21 = range19.contains((-4.0d));
        double double23 = range19.constrain(67.0d);
        org.jfree.data.Range range26 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range26, (double) (byte) -1);
        boolean boolean31 = range28.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range28, (double) 0.0f);
        double double34 = range33.getUpperBound();
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range33, (-13733.0d));
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range36, 37189.0d);
        org.jfree.data.Range range39 = org.jfree.data.Range.combine(range19, range38);
        org.jfree.data.Range range42 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        double double43 = range42.getCentralValue();
        double double44 = range42.getUpperBound();
        org.jfree.data.Range range47 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double48 = range47.getLength();
        org.jfree.data.Range range51 = org.jfree.data.Range.shift(range47, 1.0d, true);
        boolean boolean54 = range51.intersects((double) (byte) 10, 1.0d);
        boolean boolean57 = range51.intersects((double) 'a', (double) (byte) 10);
        java.lang.Class<?> wildcardClass58 = range51.getClass();
        boolean boolean59 = range42.equals((java.lang.Object) wildcardClass58);
        org.jfree.data.Range range62 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double63 = range62.getLength();
        org.jfree.data.Range range65 = org.jfree.data.Range.shift(range62, (-109.0d));
        boolean boolean67 = range62.contains(1.0d);
        org.jfree.data.Range range69 = org.jfree.data.Range.expandToInclude(range62, 37189.0d);
        org.jfree.data.Range range70 = org.jfree.data.Range.combine(range42, range69);
        boolean boolean73 = range42.intersects((double) 100L, (double) 0);
        org.jfree.data.Range range74 = org.jfree.data.Range.combine(range39, range42);
        org.jfree.data.Range range76 = org.jfree.data.Range.shift(range74, 168.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 21871.0d + "'", double15 == 21871.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 37189.0d + "'", double16 == 37189.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 37289.0d + "'", double23 == 37289.0d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-10.0d) + "'", double34 == (-10.0d));
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.5d) + "'", double43 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-9.0d) + "'", double48 == (-9.0d));
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-9.0d) + "'", double63 == (-9.0d));
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertNotNull(range76);
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        org.jfree.data.Range range7 = new org.jfree.data.Range(100.0d, (-9.0d));
        double double8 = range7.getUpperBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range9, (double) (-1), false);
        org.jfree.data.Range range15 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double16 = range15.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range15, 1.0d, true);
        org.jfree.data.Range range20 = org.jfree.data.Range.combine(range9, range19);
        org.jfree.data.Range range23 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, (double) 10L);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range20, range23);
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range23, 99.5d);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range28, 0.0d, 6108.5d);
        double double32 = range31.getCentralValue();
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range31, 496485.0d);
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range31, (-479.5d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9.0d) + "'", double8 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9.0d) + "'", double16 == (-9.0d));
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 307001.375d + "'", double32 == 307001.375d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range36);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        org.jfree.data.Range range2 = new org.jfree.data.Range(5649.5d, (-400.5d));
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        boolean boolean16 = range13.intersects((-1.0d), 0.0d);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double20 = range19.getLength();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range19, (-109.0d));
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range22, (-71.0d), (-828.0d));
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range25, (double) 100L);
        double double28 = range27.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range13, range27);
        java.lang.String str30 = range29.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-9.0d) + "'", double20 == (-9.0d));
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[-71.0,100.0]" + "'", str30, "Range[-71.0,100.0]");
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10999.0d, (-31535.0d));
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 45.0d, (-9.0d));
        boolean boolean17 = range14.intersects(0.0d, (-899.0d));
        double double19 = range14.constrain(10.0d);
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range14, 5814.0d);
        org.jfree.data.Range range24 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range24, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (-10.0d));
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range27, range30);
        boolean boolean35 = range30.contains(91.0d);
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range30, (double) 'a');
        org.jfree.data.Range range40 = new org.jfree.data.Range(99.0d, (double) '#');
        org.jfree.data.Range range43 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range43, (-1.0d), (double) (byte) 100);
        boolean boolean49 = range43.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range52 = org.jfree.data.Range.expand(range43, (-9.0d), (double) 100L);
        double double54 = range52.constrain(1.0d);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range52, (double) (byte) 100);
        org.jfree.data.Range range58 = org.jfree.data.Range.expandToInclude(range52, (double) 'a');
        org.jfree.data.Range range61 = org.jfree.data.Range.expand(range52, (-1.0d), (-9.0d));
        org.jfree.data.Range range64 = org.jfree.data.Range.shift(range52, 0.0d, true);
        org.jfree.data.Range range65 = org.jfree.data.Range.combine(range40, range64);
        org.jfree.data.Range range68 = org.jfree.data.Range.expand(range65, 55.0d, 37289.0d);
        org.jfree.data.Range range69 = org.jfree.data.Range.combine(range37, range65);
        boolean boolean70 = range21.equals((java.lang.Object) range37);
        boolean boolean72 = range21.contains((-484.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 37189.0d + "'", double19 == 37189.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-899.0d) + "'", double54 == (-899.0d));
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        java.lang.String str18 = range11.toString();
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range11, (-1.0d), false);
        java.lang.String str22 = range11.toString();
        boolean boolean25 = range11.intersects((-44.5d), (-9137.5d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[-71.0,-899.0]" + "'", str18, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Range[-71.0,-899.0]" + "'", str22, "Range[-71.0,-899.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range2.getLowerBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        boolean boolean22 = range16.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, (-9.0d), (double) 100L);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (double) 1);
        org.jfree.data.Range range30 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (byte) -1);
        boolean boolean35 = range32.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range25, range32);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range42.intersects((double) (byte) 10, 10.0d);
        boolean boolean46 = range32.equals((java.lang.Object) boolean45);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range32, (double) (byte) 100, false);
        boolean boolean50 = range2.equals((java.lang.Object) range49);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range49, 45.0d, false);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range53, (-27965.0d), false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-109.0d));
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (-71.0d), (-828.0d));
        org.jfree.data.Range range11 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, (double) 10L);
        double double14 = range11.getLowerBound();
        double double15 = range11.getCentralValue();
        double double16 = range11.getCentralValue();
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range8, range11);
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range8, 0.0d);
        double double20 = range19.getLength();
        double double21 = range19.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.5d) + "'", double15 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.5d) + "'", double16 == (-0.5d));
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        org.jfree.data.Range range2 = new org.jfree.data.Range(168.0d, (-828.0d));
        boolean boolean5 = range2.intersects((double) 100.0f, 90.0d);
        double double7 = range2.constrain(0.0d);
        double double8 = range2.getLength();
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (-101.0d), true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-828.0d) + "'", double7 == (-828.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-996.0d) + "'", double8 == (-996.0d));
        org.junit.Assert.assertNotNull(range11);
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (-1.0931465E7d));
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-35.0d), (-0.5d));
        double double3 = range2.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 34.5d + "'", double3 == 34.5d);
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10L);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range4, (-9.0d), true);
        double double8 = range4.getLength();
        double double9 = range4.getLength();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10L);
        java.lang.String str5 = range2.toString();
        org.jfree.data.Range range8 = new org.jfree.data.Range(0.0d, 0.0d);
        double double9 = range8.getLowerBound();
        boolean boolean12 = range8.intersects((-9.0d), (double) ' ');
        boolean boolean14 = range8.contains((double) (short) 0);
        boolean boolean15 = range2.equals((java.lang.Object) boolean14);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range2, 18695.0d, 272.5d);
        java.lang.Class<?> wildcardClass19 = range2.getClass();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Range[-1.0,0.0]" + "'", str5, "Range[-1.0,0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-364.0d), (-495.75d));
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100.0f, (-9929.0d));
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0931465E7d), 0.0d);
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, (-1.0d), (-9.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range11, 0.0d, true);
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 1);
        boolean boolean27 = range25.contains(100.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range30, (-109.0d));
        boolean boolean34 = range25.equals((java.lang.Object) range33);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range33, (-449.0d), false);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range37, (double) 0.0f, false);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range37, 0.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9.0d) + "'", double31 == (-9.0d));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        double double7 = range5.constrain((double) 100);
        double double9 = range5.constrain((-13662.0d));
        java.lang.String str10 = range5.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 91.0d + "'", double7 == 91.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Range[1.0,91.0]" + "'", str10, "Range[1.0,91.0]");
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, (-1.0d), (double) (byte) 100);
        boolean boolean31 = range25.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range25, (-9.0d), (double) 100L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range22, range25);
        boolean boolean38 = range35.intersects(72.0d, (double) 100.0f);
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range35, 35.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range40);
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 0.0d);
        double double3 = range2.getLowerBound();
        boolean boolean6 = range2.intersects((-9.0d), (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 21871.0d, false);
        org.jfree.data.Range range12 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        java.lang.String str13 = range12.toString();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double17 = range16.getLength();
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range16, (-109.0d));
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (-71.0d), (-828.0d));
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range22, (double) 100L);
        double double25 = range24.getLength();
        double double27 = range24.constrain(50.5d);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range12, range24);
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range9, range28);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range9, (-27.75d), true);
        java.lang.String str33 = range32.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[10.0,100.0]" + "'", str13, "Range[10.0,100.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9.0d) + "'", double17 == (-9.0d));
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Range[21843.25,21843.25]" + "'", str33, "Range[21843.25,21843.25]");
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-199.0d), (-35.5d));
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        java.lang.String str23 = range18.toString();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range18, 5.5d, false);
        double double27 = range18.getLength();
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range18, 168.0d, (double) '#');
        double double31 = range30.getUpperBound();
        org.jfree.data.Range range34 = new org.jfree.data.Range(0.0d, 0.0d);
        double double35 = range34.getLowerBound();
        boolean boolean38 = range34.intersects((-9.0d), (double) ' ');
        boolean boolean40 = range34.contains((double) (short) 0);
        double double41 = range34.getUpperBound();
        java.lang.String str42 = range34.toString();
        org.jfree.data.Range range44 = org.jfree.data.Range.expandToInclude(range34, 5.0d);
        java.lang.String str45 = range44.toString();
        double double46 = range44.getLength();
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range44, 5814.0d, true);
        org.jfree.data.Range range50 = org.jfree.data.Range.combine(range30, range44);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Range[99.0,-10.0]" + "'", str23, "Range[99.0,-10.0]");
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-109.0d) + "'", double27 == (-109.0d));
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-3825.0d) + "'", double31 == (-3825.0d));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Range[0.0,0.0]" + "'", str42, "Range[0.0,0.0]");
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Range[0.0,5.0]" + "'", str45, "Range[0.0,5.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 5.0d + "'", double46 == 5.0d);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range50);
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-893.5d), (-0.5d));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-27.75d), 11019.5d);
        double double6 = range2.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.5d) + "'", double6 == (-0.5d));
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) (short) 100);
        org.junit.Assert.assertNotNull(range2);
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, (-4.0d));
        double double9 = range2.constrain((double) (short) 1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (-6554.0d), (-85631.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(range12);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        org.jfree.data.Range range2 = new org.jfree.data.Range(18594.5d, (-942.0d));
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        org.jfree.data.Range range2 = new org.jfree.data.Range(86.0d, (double) 10);
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        java.lang.String str23 = range18.toString();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range18, 5.5d, false);
        double double27 = range18.getLength();
        boolean boolean29 = range18.contains((double) 0.0f);
        double double30 = range18.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Range[99.0,-10.0]" + "'", str23, "Range[99.0,-10.0]");
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-109.0d) + "'", double27 == (-109.0d));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 44.5d + "'", double30 == 44.5d);
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (double) (short) 0);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, (-818.0d));
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range7, 35.0d, 37189.0d);
        java.lang.Object obj11 = null;
        boolean boolean12 = range10.equals(obj11);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        double double3 = range2.getUpperBound();
        double double5 = range2.constrain(0.0d);
        double double6 = range2.getLowerBound();
        double double7 = range2.getUpperBound();
        boolean boolean10 = range2.intersects(90.0d, 21871.0d);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range2, (double) 10.0f, true);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        boolean boolean22 = range16.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, (-9.0d), (double) 100L);
        double double27 = range25.constrain(1.0d);
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range25, (double) (byte) 100);
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range25, (double) 'a');
        java.lang.String str32 = range25.toString();
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range25, 0.0d);
        double double35 = range25.getLowerBound();
        double double36 = range25.getCentralValue();
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        java.lang.String str43 = range42.toString();
        double double44 = range42.getLength();
        double double45 = range42.getCentralValue();
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range42, 5548.0d);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range25, range42);
        double double49 = range25.getUpperBound();
        double double50 = range25.getCentralValue();
        org.jfree.data.Range range51 = org.jfree.data.Range.combine(range2, range25);
        org.jfree.data.Range range54 = org.jfree.data.Range.expand(range25, 5527.25d, (-31535.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-9.0d) + "'", double5 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9.0d) + "'", double7 == (-9.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-899.0d) + "'", double27 == (-899.0d));
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Range[-71.0,-899.0]" + "'", str32, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-71.0d) + "'", double35 == (-71.0d));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-485.0d) + "'", double36 == (-485.0d));
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Range[1.0,-899.0]" + "'", str43, "Range[1.0,-899.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-900.0d) + "'", double44 == (-900.0d));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-449.0d) + "'", double45 == (-449.0d));
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-899.0d) + "'", double49 == (-899.0d));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-485.0d) + "'", double50 == (-485.0d));
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range54);
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        org.jfree.data.Range range2 = new org.jfree.data.Range(26.0d, 11044.5d);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, 2483.0d, false);
        boolean boolean8 = range5.intersects(10984.5d, (-818.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range5, 5.5d);
        boolean boolean9 = range5.equals((java.lang.Object) 171.0d);
        boolean boolean12 = range5.intersects((-893.5d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range5, 0.0d);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, 0.0d, 0.0d);
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range14, (-1326.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, (-1.0d), (-9.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range11, 0.0d, true);
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 1);
        boolean boolean27 = range25.contains(100.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range30, (-109.0d));
        boolean boolean34 = range25.equals((java.lang.Object) range33);
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range25, 0.0d);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range25, 99.5d);
        boolean boolean41 = range38.intersects(0.5d, (-846.375d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9.0d) + "'", double31 == (-9.0d));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range11.getUpperBound();
        boolean boolean15 = range11.contains((double) (-1.0f));
        org.jfree.data.Range range18 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range18, (-10.0d));
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range20, (double) 0);
        double double23 = range20.getLength();
        double double24 = range20.getLength();
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, (-1.0d), (double) (byte) 100);
        boolean boolean33 = range27.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range36 = org.jfree.data.Range.expand(range27, (-9.0d), (double) 100L);
        double double38 = range36.constrain(1.0d);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range36, (double) (byte) 100);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range20, range36);
        double double42 = range20.getUpperBound();
        boolean boolean43 = range11.equals((java.lang.Object) double42);
        double double45 = range11.constrain(99.0d);
        double double46 = range11.getUpperBound();
        double double47 = range11.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 90.0d + "'", double13 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 90.0d + "'", double23 == 90.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 90.0d + "'", double24 == 90.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-899.0d) + "'", double38 == (-899.0d));
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 90.0d + "'", double42 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 90.0d + "'", double45 == 90.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 90.0d + "'", double46 == 90.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 45.0d + "'", double47 == 45.0d);
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 10.0f, false);
        boolean boolean10 = range8.contains((double) 1L);
        double double12 = range8.constrain((double) (short) 0);
        java.lang.String str13 = range8.toString();
        double double14 = range8.getUpperBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range8, (double) 1L);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range19, (-10.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range21, (double) 0);
        double double24 = range21.getLength();
        boolean boolean27 = range21.intersects((-899.0d), 90.0d);
        java.lang.String str28 = range21.toString();
        boolean boolean30 = range21.equals((java.lang.Object) 10.0d);
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range8, range21);
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range21, 15.5d);
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range33, (-127.0d), false);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 20.0d + "'", double12 == 20.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[20.0,11.0]" + "'", str13, "Range[20.0,11.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 11.0d + "'", double14 == 11.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 90.0d + "'", double24 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[0.0,90.0]" + "'", str28, "Range[0.0,90.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range36);
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range11, (double) (short) -1, false);
        java.lang.String str26 = range11.toString();
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range11, (double) 100L, (-480.5d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Range[-71.0,-899.0]" + "'", str26, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range29);
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range2.getLowerBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        boolean boolean22 = range16.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, (-9.0d), (double) 100L);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (double) 1);
        org.jfree.data.Range range30 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (byte) -1);
        boolean boolean35 = range32.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range25, range32);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range42.intersects((double) (byte) 10, 10.0d);
        boolean boolean46 = range32.equals((java.lang.Object) boolean45);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range32, (double) (byte) 100, false);
        boolean boolean50 = range2.equals((java.lang.Object) range49);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range2, 0.0d, false);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range53, (-900.0d), true);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range56, (-71.0d), 10999.0d);
        double double60 = range59.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-98361.0d) + "'", double60 == (-98361.0d));
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range11.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) 100L);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 1L);
        double double19 = range11.constrain(5.5d);
        double double20 = range11.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 45.0d + "'", double13 == 45.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5.5d + "'", double19 == 5.5d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 45.0d + "'", double20 == 45.0d);
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range11, (double) (byte) 100, true);
        double double17 = range11.getCentralValue();
        double double18 = range11.getCentralValue();
        boolean boolean20 = range11.contains(35.0d);
        double double21 = range11.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-485.0d) + "'", double17 == (-485.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-485.0d) + "'", double18 == (-485.0d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-485.0d) + "'", double21 == (-485.0d));
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, (-10.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range5, range8);
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, (-1.0d), (double) (byte) 100);
        boolean boolean20 = range14.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range14, (-9.0d), (double) 100L);
        double double25 = range23.constrain(1.0d);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range11, range23);
        double double27 = range11.getCentralValue();
        double double28 = range11.getUpperBound();
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range11, 0.0d, 0.0d);
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 10.0f, (double) 10.0f);
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range34, (double) 100);
        double double37 = range36.getLowerBound();
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range36, (-71.0d));
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range31, range36);
        java.lang.Class<?> wildcardClass41 = range40.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-899.0d) + "'", double25 == (-899.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 50.5d + "'", double27 == 50.5d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 110.0d + "'", double37 == 110.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 45.0d, (-9.0d));
        double double15 = range11.getLength();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range11, (-900.0d), true);
        java.lang.Class<?> wildcardClass19 = range18.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-828.0d) + "'", double15 == (-828.0d));
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10L);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range4, (-9.0d), true);
        double double8 = range7.getLowerBound();
        boolean boolean11 = range7.intersects((double) (-1.0f), (double) 10.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range7, 10974.5d);
        java.lang.String str14 = range13.toString();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9.0d) + "'", double8 == (-9.0d));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[-9.0,10974.5]" + "'", str14, "Range[-9.0,10974.5]");
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, 5.5d);
        double double15 = range11.constrain((double) (short) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        double double18 = range17.getLength();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range17, 172.0d);
        java.lang.Object obj21 = null;
        boolean boolean22 = range17.equals(obj21);
        double double23 = range17.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-899.0d) + "'", double15 == (-899.0d));
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 72.0d + "'", double18 == 72.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-35.0d) + "'", double23 == (-35.0d));
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range5, 5.5d);
        boolean boolean9 = range5.equals((java.lang.Object) 171.0d);
        boolean boolean12 = range5.intersects((-893.5d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range5, 0.0d);
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (-1.0d), (double) (byte) 100);
        boolean boolean29 = range23.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range23, (-9.0d), (double) 100L);
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range32, 5.5d);
        double double36 = range32.constrain((double) (short) 1);
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) 1);
        boolean boolean41 = range32.intersects(1.0d, (double) (-1));
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range32, (-485.0d));
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range20, range32);
        double double45 = range44.getCentralValue();
        org.jfree.data.Range range46 = org.jfree.data.Range.combine(range14, range44);
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range44, (-818.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-899.0d) + "'", double36 == (-899.0d));
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-485.0d) + "'", double45 == (-485.0d));
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range48);
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        boolean boolean24 = range11.contains(73.0d);
        org.jfree.data.Range range27 = new org.jfree.data.Range(0.0d, 0.0d);
        double double28 = range27.getLowerBound();
        boolean boolean31 = range27.intersects((-9.0d), (double) ' ');
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range27, 21871.0d, false);
        org.jfree.data.Range range37 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        java.lang.String str38 = range37.toString();
        org.jfree.data.Range range41 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double42 = range41.getLength();
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range41, (-109.0d));
        org.jfree.data.Range range47 = org.jfree.data.Range.expand(range44, (-71.0d), (-828.0d));
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range47, (double) 100L);
        double double50 = range49.getLength();
        double double52 = range49.constrain(50.5d);
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range37, range49);
        org.jfree.data.Range range54 = org.jfree.data.Range.combine(range34, range53);
        org.jfree.data.Range range57 = org.jfree.data.Range.shift(range34, (-27.75d), true);
        org.jfree.data.Range range58 = org.jfree.data.Range.combine(range11, range34);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Range[10.0,100.0]" + "'", str38, "Range[10.0,100.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-9.0d) + "'", double42 == (-9.0d));
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range58);
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, 5.5d);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 5.5d, (double) 10.0f);
        boolean boolean18 = range13.contains((double) (byte) -1);
        double double19 = range13.getUpperBound();
        double double20 = range13.getLength();
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range29, (-10.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range26, range29);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, (-1.0d), (double) (byte) 100);
        boolean boolean41 = range35.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range35, (-9.0d), (double) 100L);
        double double46 = range44.constrain(1.0d);
        org.jfree.data.Range range47 = org.jfree.data.Range.combine(range32, range44);
        org.jfree.data.Range range50 = new org.jfree.data.Range((double) 10.0f, (double) 10.0f);
        org.jfree.data.Range range53 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range56 = org.jfree.data.Range.expand(range53, (-1.0d), (double) (byte) 100);
        boolean boolean59 = range53.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range62 = org.jfree.data.Range.expand(range53, (-9.0d), (double) 100L);
        double double64 = range62.constrain(1.0d);
        boolean boolean65 = range50.equals((java.lang.Object) 1.0d);
        org.jfree.data.Range range66 = org.jfree.data.Range.combine(range47, range50);
        boolean boolean67 = range13.equals((java.lang.Object) range66);
        org.jfree.data.Range range69 = org.jfree.data.Range.expandToInclude(range66, 765.75d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-893.5d) + "'", double19 == (-893.5d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-828.0d) + "'", double20 == (-828.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-899.0d) + "'", double46 == (-899.0d));
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-899.0d) + "'", double64 == (-899.0d));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(range69);
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 0.0d);
        double double3 = range2.getLowerBound();
        boolean boolean6 = range2.intersects((-9.0d), (double) ' ');
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) 1L);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, 45.0d, false);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range8, (-2342.5d), false);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double14 = range11.constrain((double) (-1));
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range11, 5548.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range11, (-1.0931465E7d));
        double double20 = range18.constrain(190.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 90.0d + "'", double20 == 90.0d);
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 45.0d, (-9.0d));
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range11, (-1.0d));
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-10.0d), 82.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, (-112.5d), (-4914.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10L);
        java.lang.String str5 = range2.toString();
        double double6 = range2.getUpperBound();
        java.lang.String str7 = range2.toString();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Range[-1.0,0.0]" + "'", str5, "Range[-1.0,0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Range[-1.0,0.0]" + "'", str7, "Range[-1.0,0.0]");
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, (double) (byte) 100, (-900.0d));
        double double7 = range2.getLowerBound();
        double double9 = range2.constrain(62.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.5d) + "'", double3 == (-0.5d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-10.0d), (double) '4');
        boolean boolean4 = range2.contains((double) 'a');
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, (double) (byte) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) 0L);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, 484.0d, false);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range8, (-44.5d));
        java.lang.Class<?> wildcardClass14 = range13.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range5, (double) (byte) -1);
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range7, (double) 0.0f);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range9, 37189.0d, false);
        org.jfree.data.Range range15 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, 90.0d, false);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range15, (double) 100.0f, (double) 100.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range12, range15);
        double double23 = range12.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 37280.0d + "'", double23 == 37280.0d);
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (-1.0f), 11.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.expandToInclude(range2, (-933.0d));
        double double5 = range2.getUpperBound();
        java.lang.Class<?> wildcardClass6 = range2.getClass();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 11.0d + "'", double5 == 11.0d);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 10.0d, false);
        double double9 = range7.constrain((double) 10);
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range7, 0.0d);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (-1.0f), 10999.0d);
        org.jfree.data.Range range17 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range17, (double) 10L);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range19, (-9.0d), true);
        double double23 = range19.getCentralValue();
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range19, (-1.0d), (-71.0d));
        boolean boolean27 = range11.equals((java.lang.Object) range19);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range11, (-822.5d), 51.0d);
        double double32 = range30.constrain((-27965.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 20.0d + "'", double9 == 20.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5.0d + "'", double23 == 5.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 9047.5d + "'", double32 == 9047.5d);
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-109.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (double) 100.0f);
        boolean boolean10 = range7.intersects(10974.5d, (-70.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-30636.0d), 4488.5d);
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-130824.0d), 587466.0d);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-0.5d), (-898.0d));
        org.junit.Assert.assertNotNull(range5);
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) -1, 15.5d);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-0.5d), false);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range8, (-1.0d), (double) (byte) 100);
        boolean boolean14 = range8.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range8, (-9.0d), (double) 100L);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range17, 5.5d);
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double23 = range22.getLength();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range22, 1.0d, true);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range29, (-10.0d));
        boolean boolean32 = range22.equals((java.lang.Object) range31);
        boolean boolean33 = range17.equals((java.lang.Object) range31);
        double double34 = range17.getCentralValue();
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range2, range17);
        double double36 = range2.getLength();
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range2, (-450.0d), 53.625d);
        java.lang.Object obj40 = null;
        boolean boolean41 = range39.equals(obj40);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-9.0d) + "'", double23 == (-9.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-485.0d) + "'", double34 == (-485.0d));
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 16.5d + "'", double36 == 16.5d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (-10.0d));
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range4, (double) 0);
        double double7 = range4.getLength();
        double double8 = range4.getLength();
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (-1.0d), (double) (byte) 100);
        java.lang.String str15 = range14.toString();
        org.jfree.data.Range range18 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double19 = range18.getLength();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range18, 1.0d, true);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range25, (-10.0d));
        boolean boolean28 = range18.equals((java.lang.Object) range27);
        double double29 = range27.getCentralValue();
        org.jfree.data.Range range30 = org.jfree.data.Range.combine(range14, range27);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range30, 45.0d, (double) '#');
        org.jfree.data.Range range36 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, (-1.0d), (double) (byte) 100);
        boolean boolean42 = range36.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range45 = org.jfree.data.Range.expand(range36, (-9.0d), (double) 100L);
        double double47 = range45.constrain(1.0d);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range45, (double) (byte) 100);
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range45, (double) 'a');
        org.jfree.data.Range range52 = org.jfree.data.Range.combine(range33, range51);
        org.jfree.data.Range range55 = new org.jfree.data.Range(0.0d, (double) (short) -1);
        double double56 = range55.getCentralValue();
        org.jfree.data.Range range59 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double60 = range59.getLength();
        org.jfree.data.Range range62 = org.jfree.data.Range.expandToInclude(range59, (double) (short) 100);
        org.jfree.data.Range range63 = org.jfree.data.Range.combine(range55, range62);
        org.jfree.data.Range range65 = org.jfree.data.Range.shift(range62, (double) 10L);
        java.lang.String str66 = range62.toString();
        org.jfree.data.Range range67 = org.jfree.data.Range.combine(range33, range62);
        org.jfree.data.Range range68 = org.jfree.data.Range.combine(range4, range67);
        double double69 = range67.getLowerBound();
        double double70 = range67.getCentralValue();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 90.0d + "'", double7 == 90.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 90.0d + "'", double8 == 90.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Range[1.0,-899.0]" + "'", str15, "Range[1.0,-899.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-9.0d) + "'", double19 == (-9.0d));
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 45.0d + "'", double29 == 45.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-899.0d) + "'", double47 == (-899.0d));
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-0.5d) + "'", double56 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-9.0d) + "'", double60 == (-9.0d));
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Range[10.0,100.0]" + "'", str66, "Range[10.0,100.0]");
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-4050.0d) + "'", double69 == (-4050.0d));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-405.0d) + "'", double70 == (-405.0d));
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10L);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range4, (-9.0d), true);
        double double8 = range7.getLowerBound();
        boolean boolean11 = range7.intersects((double) (-1.0f), (double) 10.0f);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range7, 10974.5d);
        org.jfree.data.Range range16 = new org.jfree.data.Range(0.0d, (double) (short) -1);
        double double17 = range16.getCentralValue();
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double21 = range20.getLength();
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range20, (double) (short) 100);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range16, range23);
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range27, (-10.0d));
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range29, (double) 0);
        double double32 = range29.getLength();
        boolean boolean35 = range29.intersects((-899.0d), 90.0d);
        java.lang.String str36 = range29.toString();
        boolean boolean38 = range29.contains((-828.0d));
        org.jfree.data.Range range39 = org.jfree.data.Range.combine(range24, range29);
        boolean boolean40 = range13.equals((java.lang.Object) range39);
        boolean boolean42 = range39.contains((-13733.0d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9.0d) + "'", double8 == (-9.0d));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.5d) + "'", double17 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-9.0d) + "'", double21 == (-9.0d));
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 90.0d + "'", double32 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Range[0.0,90.0]" + "'", str36, "Range[0.0,90.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) (short) -1);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double7 = range6.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range6, (double) (short) 100);
        org.jfree.data.Range range10 = org.jfree.data.Range.combine(range2, range9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (-10.0d));
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range15, (double) 0);
        double double18 = range15.getLength();
        boolean boolean21 = range15.intersects((-899.0d), 90.0d);
        java.lang.String str22 = range15.toString();
        boolean boolean24 = range15.contains((-828.0d));
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range10, range15);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range25, 50.0d, true);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.5d) + "'", double3 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9.0d) + "'", double7 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 90.0d + "'", double18 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Range[0.0,90.0]" + "'", str22, "Range[0.0,90.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (-10.0d));
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range4, (double) 0);
        boolean boolean8 = range4.contains((double) (short) 10);
        org.jfree.data.Range range9 = null;
        org.jfree.data.Range range12 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (-1.0d), (double) (byte) 100);
        boolean boolean18 = range12.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range12, (-9.0d), (double) 100L);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range21, 5.5d);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, 5.5d, (double) 10.0f);
        boolean boolean28 = range23.contains((double) (byte) -1);
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range9, range23);
        org.jfree.data.Range range30 = org.jfree.data.Range.combine(range4, range23);
        double double31 = range4.getLowerBound();
        double double32 = range4.getUpperBound();
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range4, (-5440482.0d), (-19.0d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 90.0d + "'", double32 == 90.0d);
        org.junit.Assert.assertNotNull(range35);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        java.lang.String str6 = range5.toString();
        double double7 = range5.getLength();
        double double8 = range5.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, 11044.5d);
        double double12 = range5.constrain((-893.5d));
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range5, 484.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[1.0,-899.0]" + "'", str6, "Range[1.0,-899.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-900.0d) + "'", double7 == (-900.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-449.0d) + "'", double8 == (-449.0d));
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-899.0d) + "'", double12 == (-899.0d));
        org.junit.Assert.assertNotNull(range14);
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) -1, 15.5d);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-0.5d), false);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range8, (-1.0d), (double) (byte) 100);
        boolean boolean14 = range8.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range8, (-9.0d), (double) 100L);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range17, 5.5d);
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double23 = range22.getLength();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range22, 1.0d, true);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range29, (-10.0d));
        boolean boolean32 = range22.equals((java.lang.Object) range31);
        boolean boolean33 = range17.equals((java.lang.Object) range31);
        double double34 = range17.getCentralValue();
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range2, range17);
        double double36 = range2.getLength();
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range2, (-450.0d), 53.625d);
        java.lang.String str40 = range39.toString();
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range39, (-130824.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-9.0d) + "'", double23 == (-9.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-485.0d) + "'", double34 == (-485.0d));
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 16.5d + "'", double36 == 16.5d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Range[7424.0,900.3125]" + "'", str40, "Range[7424.0,900.3125]");
        org.junit.Assert.assertNotNull(range42);
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        org.jfree.data.Range range7 = new org.jfree.data.Range(100.0d, (-9.0d));
        double double8 = range7.getUpperBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range9, (double) (-1), false);
        double double14 = range12.constrain((-900.0d));
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range12, 5.5d);
        double double18 = range16.constrain((-1820.75d));
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range16, 11044.5d, 15.5d);
        double double22 = range16.getUpperBound();
        boolean boolean24 = range16.contains((-4551.25d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9.0d) + "'", double8 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 99.0d + "'", double14 == 99.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 104.5d + "'", double18 == 104.5d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-4.5d) + "'", double22 == (-4.5d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range11, (double) 1.0f, false);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range26, 5.5d);
        boolean boolean30 = range26.equals((java.lang.Object) 171.0d);
        boolean boolean33 = range26.intersects((-893.5d), (double) 100L);
        double double35 = range26.constrain(1.0d);
        boolean boolean36 = range20.equals((java.lang.Object) range26);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range39.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range39, (-9.0d), (double) 100L);
        double double50 = range48.constrain(1.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range48, (double) (byte) 100);
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range48, (double) 'a');
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range48, (-1.0d), (-9.0d));
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range48, 0.0d, true);
        org.jfree.data.Range range62 = org.jfree.data.Range.expandToInclude(range48, (double) (short) 1);
        boolean boolean63 = range20.equals((java.lang.Object) range48);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range20, (-2342.5d), true);
        org.jfree.data.Range range69 = org.jfree.data.Range.shift(range20, 51.0d, true);
        double double70 = range20.getCentralValue();
        org.jfree.data.Range range73 = org.jfree.data.Range.shift(range20, (-400.5d), true);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-899.0d) + "'", double50 == (-899.0d));
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-484.0d) + "'", double70 == (-484.0d));
        org.junit.Assert.assertNotNull(range73);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 100, 1002899.0d);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1L), 33.0d);
        org.junit.Assert.assertNotNull(range5);
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range3, (-1.0d), (double) (byte) 100);
        boolean boolean9 = range3.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range3, (-9.0d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, 5.5d);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, 5.5d, (double) 10.0f);
        boolean boolean19 = range14.contains((double) (byte) -1);
        org.jfree.data.Range range20 = org.jfree.data.Range.combine(range0, range14);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (-1.0d), (double) (byte) 100);
        boolean boolean29 = range23.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range23, (-9.0d), (double) 100L);
        double double34 = range32.constrain(1.0d);
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range32, (double) (byte) 100);
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) 'a');
        java.lang.String str39 = range32.toString();
        java.lang.String str40 = range32.toString();
        org.jfree.data.Range range43 = new org.jfree.data.Range((-10.0d), (double) '4');
        boolean boolean45 = range43.contains((double) 'a');
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range43, (double) (byte) 0);
        org.jfree.data.Range range49 = org.jfree.data.Range.expandToInclude(range43, (double) 0L);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range49, (double) (byte) -1, true);
        boolean boolean53 = range32.equals((java.lang.Object) (byte) -1);
        org.jfree.data.Range range54 = org.jfree.data.Range.combine(range20, range32);
        double double56 = range32.constrain((double) (short) -1);
        org.jfree.data.Range range58 = org.jfree.data.Range.shift(range32, (-898.0d));
        org.jfree.data.Range range61 = org.jfree.data.Range.shift(range58, 5.5d, false);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-899.0d) + "'", double34 == (-899.0d));
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Range[-71.0,-899.0]" + "'", str39, "Range[-71.0,-899.0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Range[-71.0,-899.0]" + "'", str40, "Range[-71.0,-899.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-899.0d) + "'", double56 == (-899.0d));
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range61);
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range2.getLowerBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        boolean boolean22 = range16.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, (-9.0d), (double) 100L);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (double) 1);
        org.jfree.data.Range range30 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (byte) -1);
        boolean boolean35 = range32.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range25, range32);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range42.intersects((double) (byte) 10, 10.0d);
        boolean boolean46 = range32.equals((java.lang.Object) boolean45);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range32, (double) (byte) 100, false);
        boolean boolean50 = range2.equals((java.lang.Object) range49);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range2, 0.0d, false);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range53, (double) 'a', true);
        double double57 = range53.getUpperBound();
        boolean boolean60 = range53.intersects(17.5d, 55.0d);
        org.jfree.data.Range range63 = org.jfree.data.Range.shift(range53, (double) 0, false);
        boolean boolean65 = range63.contains((double) 100.0f);
        boolean boolean67 = range63.contains((-119.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 0.0d);
        double double3 = range2.getLowerBound();
        boolean boolean6 = range2.intersects((-9.0d), (double) ' ');
        boolean boolean8 = range2.contains((double) (short) 0);
        java.lang.String str9 = range2.toString();
        java.lang.String str10 = range2.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[0.0,0.0]" + "'", str9, "Range[0.0,0.0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Range[0.0,0.0]" + "'", str10, "Range[0.0,0.0]");
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        java.lang.String str9 = range2.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[10.0,1.0]" + "'", str9, "Range[10.0,1.0]");
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, 11044.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.5d + "'", double3 == 5.5d);
        org.junit.Assert.assertNotNull(range5);
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10L);
        double double5 = range2.getLowerBound();
        double double6 = range2.getCentralValue();
        double double7 = range2.getCentralValue();
        boolean boolean10 = range2.intersects((-331.75d), 18605.0d);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, (-1.0d), (double) (byte) 100);
        boolean boolean19 = range13.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range13, (-9.0d), (double) 100L);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range22, 45.0d, (-9.0d));
        double double27 = range25.constrain(0.0d);
        double double28 = range25.getCentralValue();
        double double30 = range25.constrain(10974.5d);
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range2, range25);
        boolean boolean33 = range31.contains((-104.5d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.5d) + "'", double6 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-0.5d) + "'", double7 == (-0.5d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 37189.0d + "'", double27 == 37189.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 21871.0d + "'", double28 == 21871.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 6553.0d + "'", double30 == 6553.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        org.jfree.data.Range range7 = new org.jfree.data.Range(100.0d, (-9.0d));
        double double8 = range7.getUpperBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (-933.0d));
        double double12 = range11.getLength();
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range11, 14.5d, (-414.0d));
        org.jfree.data.Range range18 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range18, (double) (-1.0f), (double) (short) 0);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range21, 45.0d, true);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range21, 17.5d, (double) 1);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range15, range21);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9.0d) + "'", double8 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-942.0d) + "'", double12 == (-942.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1.0d, (-37118.0d));
        org.jfree.data.Range range5 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 10.0f, false);
        boolean boolean13 = range11.contains((double) 1L);
        double double15 = range11.constrain((double) (byte) 0);
        double double16 = range11.getLength();
        boolean boolean17 = range2.equals((java.lang.Object) double16);
        java.lang.String str18 = range2.toString();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range2, (-20.5d));
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 20.0d + "'", double15 == 20.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9.0d) + "'", double16 == (-9.0d));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[1.0,-37118.0]" + "'", str18, "Range[1.0,-37118.0]");
        org.junit.Assert.assertNotNull(range20);
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 10.0d, false);
        double double8 = range7.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, 0.0d);
        double double11 = range7.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9.0d) + "'", double8 == (-9.0d));
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9.0d) + "'", double11 == (-9.0d));
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (-10.0d));
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range4, (double) 0);
        boolean boolean8 = range4.contains((double) (short) 10);
        org.jfree.data.Range range9 = null;
        org.jfree.data.Range range12 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (-1.0d), (double) (byte) 100);
        boolean boolean18 = range12.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range12, (-9.0d), (double) 100L);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range21, 5.5d);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, 5.5d, (double) 10.0f);
        boolean boolean28 = range23.contains((double) (byte) -1);
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range9, range23);
        org.jfree.data.Range range30 = org.jfree.data.Range.combine(range4, range23);
        java.lang.String str31 = range23.toString();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range23, 11.0d);
        org.jfree.data.Range range36 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, (-1.0d), (double) (byte) 100);
        java.lang.String str40 = range39.toString();
        org.jfree.data.Range range43 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double44 = range43.getLength();
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range43, 1.0d, true);
        org.jfree.data.Range range50 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range50, (-10.0d));
        boolean boolean53 = range43.equals((java.lang.Object) range52);
        double double54 = range52.getCentralValue();
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range39, range52);
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range55, 45.0d, (double) '#');
        org.jfree.data.Range range61 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range64 = org.jfree.data.Range.expand(range61, (-1.0d), (double) (byte) 100);
        boolean boolean67 = range61.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range70 = org.jfree.data.Range.expand(range61, (-9.0d), (double) 100L);
        double double72 = range70.constrain(1.0d);
        org.jfree.data.Range range74 = org.jfree.data.Range.shift(range70, (double) (byte) 100);
        org.jfree.data.Range range76 = org.jfree.data.Range.expandToInclude(range70, (double) 'a');
        org.jfree.data.Range range77 = org.jfree.data.Range.combine(range58, range76);
        org.jfree.data.Range range80 = org.jfree.data.Range.shift(range76, (-71.0d), true);
        org.jfree.data.Range range82 = org.jfree.data.Range.expandToInclude(range76, 91.0d);
        org.jfree.data.Range range85 = org.jfree.data.Range.expand(range82, 44.5d, 27.5d);
        boolean boolean86 = range23.equals((java.lang.Object) range82);
        double double87 = range82.getLowerBound();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Range[-65.5,-893.5]" + "'", str31, "Range[-65.5,-893.5]");
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Range[1.0,-899.0]" + "'", str40, "Range[1.0,-899.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-9.0d) + "'", double44 == (-9.0d));
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 45.0d + "'", double54 == 45.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-899.0d) + "'", double72 == (-899.0d));
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertNotNull(range82);
        org.junit.Assert.assertNotNull(range85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-71.0d) + "'", double87 == (-71.0d));
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        org.jfree.data.Range range2 = new org.jfree.data.Range(48.5d, 15.5d);
        double double4 = range2.constrain(1.89872145E8d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 15.5d + "'", double4 == 15.5d);
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        java.lang.String str6 = range5.toString();
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double10 = range9.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range9, 1.0d, true);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (-10.0d));
        boolean boolean19 = range9.equals((java.lang.Object) range18);
        double double20 = range18.getCentralValue();
        org.jfree.data.Range range21 = org.jfree.data.Range.combine(range5, range18);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, 45.0d, (double) '#');
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, (-1.0d), (double) (byte) 100);
        boolean boolean33 = range27.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range36 = org.jfree.data.Range.expand(range27, (-9.0d), (double) 100L);
        double double38 = range36.constrain(1.0d);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range36, (double) (byte) 100);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range36, (double) 'a');
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range24, range42);
        org.jfree.data.Range range46 = new org.jfree.data.Range(0.0d, (double) (short) -1);
        double double47 = range46.getCentralValue();
        org.jfree.data.Range range50 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double51 = range50.getLength();
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range50, (double) (short) 100);
        org.jfree.data.Range range54 = org.jfree.data.Range.combine(range46, range53);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range53, (double) 10L);
        java.lang.String str57 = range53.toString();
        org.jfree.data.Range range58 = org.jfree.data.Range.combine(range24, range53);
        boolean boolean61 = range53.intersects(20025.0d, (-25985.5d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[1.0,-899.0]" + "'", str6, "Range[1.0,-899.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9.0d) + "'", double10 == (-9.0d));
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 45.0d + "'", double20 == 45.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-899.0d) + "'", double38 == (-899.0d));
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-0.5d) + "'", double47 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-9.0d) + "'", double51 == (-9.0d));
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Range[10.0,100.0]" + "'", str57, "Range[10.0,100.0]");
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, 90.0d, false);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range2, (double) 100.0f, (double) 100.0f);
        double double9 = range2.getCentralValue();
        double double11 = range2.constrain(20.0d);
        boolean boolean13 = range2.contains((double) (short) 1);
        org.jfree.data.Range range14 = null;
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range17, 0.0d);
        org.jfree.data.Range range25 = new org.jfree.data.Range(1.0d, (-37118.0d));
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range17, range25);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range14, range17);
        boolean boolean28 = range2.equals((java.lang.Object) range14);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 55.0d + "'", double9 == 55.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 20.0d + "'", double11 == 20.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, (-1.0d), (-9.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range11, 0.0d, true);
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range23, (double) (short) 1, true);
        java.lang.Object obj27 = null;
        boolean boolean28 = range23.equals(obj27);
        double double29 = range23.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-485.0d) + "'", double29 == (-485.0d));
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range2, 50.5d, (double) 0L);
        double double15 = range14.getCentralValue();
        double double16 = range14.getLowerBound();
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range14, (double) 0);
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range18, (-44.5d), true);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 232.75d + "'", double15 == 232.75d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 464.5d + "'", double16 == 464.5d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range21);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, (-10.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range5, range8);
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range14, (-10.0d));
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range5, range14);
        double double18 = range14.getLength();
        double double19 = range14.getUpperBound();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range14, (double) 0, false);
        double double23 = range22.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 90.0d + "'", double18 == 90.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 90.0d + "'", double23 == 90.0d);
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 0.0d);
        double double3 = range2.getLowerBound();
        boolean boolean6 = range2.intersects((-9.0d), (double) ' ');
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 21871.0d, false);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range2, (-485.0d), 168.0d);
        org.jfree.data.Range range15 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range15, (-1.0d), (double) (byte) 100);
        boolean boolean21 = range15.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range15, (-9.0d), (double) 100L);
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range24, (double) 1);
        org.jfree.data.Range range29 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range29, (double) (byte) -1);
        boolean boolean34 = range31.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range24, range31);
        org.jfree.data.Range range38 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range41 = org.jfree.data.Range.expand(range38, (-1.0d), (double) (byte) 100);
        boolean boolean44 = range41.intersects((double) (byte) 10, 10.0d);
        boolean boolean45 = range31.equals((java.lang.Object) boolean44);
        org.jfree.data.Range range48 = org.jfree.data.Range.shift(range31, (double) (byte) 100, false);
        org.jfree.data.Range range51 = org.jfree.data.Range.expand(range31, 100.0d, (-0.5d));
        java.lang.String str52 = range51.toString();
        double double53 = range51.getLowerBound();
        org.jfree.data.Range range56 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range56, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range62 = org.jfree.data.Range.shift(range56, (double) 10.0f, false);
        boolean boolean64 = range62.contains((double) 1L);
        double double65 = range62.getUpperBound();
        org.jfree.data.Range range66 = org.jfree.data.Range.combine(range51, range62);
        boolean boolean69 = range66.intersects((-828.0d), 71.0d);
        org.jfree.data.Range range70 = org.jfree.data.Range.combine(range2, range66);
        org.jfree.data.Range range73 = org.jfree.data.Range.expand(range70, 0.0d, (-828.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Range[10999.0,44.5]" + "'", str52, "Range[10999.0,44.5]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10999.0d + "'", double53 == 10999.0d);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 11.0d + "'", double65 == 11.0d);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range73);
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (double) (short) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range5, 45.0d, true);
        boolean boolean11 = range5.intersects(10989.0d, (double) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range5, (double) (byte) -1, true);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range5, 4.5d, false);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range5, 5.5d);
        boolean boolean9 = range5.equals((java.lang.Object) 171.0d);
        double double10 = range5.getLowerBound();
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range5, (double) 100, 90.0d);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        boolean boolean22 = range16.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, (-9.0d), (double) 100L);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (double) 1);
        org.jfree.data.Range range30 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (byte) -1);
        boolean boolean35 = range32.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range25, range32);
        double double37 = range36.getLength();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range36, (double) 1L);
        org.jfree.data.Range range42 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double43 = range42.getLength();
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range42, 1.0d, true);
        org.jfree.data.Range range49 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range51 = org.jfree.data.Range.shift(range49, (-10.0d));
        boolean boolean52 = range42.equals((java.lang.Object) range51);
        double double53 = range42.getLowerBound();
        org.jfree.data.Range range54 = org.jfree.data.Range.combine(range36, range42);
        boolean boolean55 = range13.equals((java.lang.Object) range54);
        java.lang.String str56 = range13.toString();
        java.lang.String str57 = range13.toString();
        org.jfree.data.Range range59 = org.jfree.data.Range.shift(range13, 2.5d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 61.0d + "'", double37 == 61.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-9.0d) + "'", double43 == (-9.0d));
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Range[-8999.0,8191.0]" + "'", str56, "Range[-8999.0,8191.0]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Range[-8999.0,8191.0]" + "'", str57, "Range[-8999.0,8191.0]");
        org.junit.Assert.assertNotNull(range59);
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        org.jfree.data.Range range2 = new org.jfree.data.Range(5.5d, (double) 10.0f);
        boolean boolean4 = range2.contains(10.0d);
        org.jfree.data.Range range7 = org.jfree.data.Range.expand(range2, (double) 1, (double) 1.0f);
        double double9 = range2.constrain((-345.0d));
        org.jfree.data.Range range12 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, (double) 10L);
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, (-10.0d));
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range20, range23);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range29, (-1.0d), (double) (byte) 100);
        boolean boolean35 = range29.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range29, (-9.0d), (double) 100L);
        double double40 = range38.constrain(1.0d);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range26, range38);
        boolean boolean42 = range12.equals((java.lang.Object) range41);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range2, range12);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 5.5d + "'", double9 == 5.5d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-899.0d) + "'", double40 == (-899.0d));
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(range43);
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, 5.5d);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 5.5d, (double) 10.0f);
        boolean boolean18 = range16.contains(91.0d);
        double double19 = range16.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-9173.5d) + "'", double19 == (-9173.5d));
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, (-10.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range5, range8);
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range14, (-10.0d));
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range5, range14);
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range17, (-828.0d));
        boolean boolean21 = range17.contains(20.0d);
        double double22 = range17.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 99.0d + "'", double22 == 99.0d);
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        org.jfree.data.Range range2 = new org.jfree.data.Range(99.0d, (double) '#');
        org.jfree.data.Range range5 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (-1.0d), (double) (byte) 100);
        boolean boolean11 = range5.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range5, (-9.0d), (double) 100L);
        double double16 = range14.constrain(1.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range14, (double) (byte) 100);
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range14, (double) 'a');
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range14, (-1.0d), (-9.0d));
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range14, 0.0d, true);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range2, range26);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double31 = range30.getLength();
        double double32 = range30.getLowerBound();
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range27, range30);
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range30, 61.0d, false);
        double double37 = range30.getUpperBound();
        org.jfree.data.Range range40 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range40, (-1.0d), (double) (byte) 100);
        boolean boolean46 = range40.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range49 = org.jfree.data.Range.expand(range40, (-9.0d), (double) 100L);
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range49, (double) 1);
        boolean boolean53 = range49.equals((java.lang.Object) '4');
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range49, 61.0d, false);
        org.jfree.data.Range range57 = org.jfree.data.Range.combine(range30, range56);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-899.0d) + "'", double16 == (-899.0d));
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9.0d) + "'", double31 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range57);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        java.lang.String str18 = range11.toString();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range11, 0.0d);
        double double21 = range11.getUpperBound();
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range11, (double) 1L);
        org.jfree.data.Range range26 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range26, (-1.0d), (double) (byte) 100);
        boolean boolean32 = range26.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range26, (-9.0d), (double) 100L);
        double double37 = range35.constrain(1.0d);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range35, (double) (byte) 100);
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range35, (double) 'a');
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range35, (double) 1.0f, false);
        org.jfree.data.Range range47 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range47, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range50, 5.5d);
        boolean boolean54 = range50.equals((java.lang.Object) 171.0d);
        boolean boolean57 = range50.intersects((-893.5d), (double) 100L);
        double double59 = range50.constrain(1.0d);
        boolean boolean60 = range44.equals((java.lang.Object) range50);
        org.jfree.data.Range range62 = org.jfree.data.Range.expandToInclude(range44, (-9.0d));
        java.lang.String str63 = range44.toString();
        org.jfree.data.Range range64 = org.jfree.data.Range.combine(range11, range44);
        double double65 = range11.getLowerBound();
        org.jfree.data.Range range68 = org.jfree.data.Range.expand(range11, 32.0d, 72.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[-71.0,-899.0]" + "'", str18, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-899.0d) + "'", double21 == (-899.0d));
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-899.0d) + "'", double37 == (-899.0d));
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Range[-70.0,-898.0]" + "'", str63, "Range[-70.0,-898.0]");
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-71.0d) + "'", double65 == (-71.0d));
        org.junit.Assert.assertNotNull(range68);
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range5, 5.5d);
        boolean boolean9 = range5.equals((java.lang.Object) 171.0d);
        boolean boolean12 = range5.intersects((-893.5d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range5, 0.0d);
        org.jfree.data.Range range17 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range17, (double) 10L);
        double double20 = range17.getLowerBound();
        double double21 = range17.getCentralValue();
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range17, (-485.0d), (-449.0d));
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double28 = range27.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range24, range27);
        double double31 = range24.constrain((double) 'a');
        double double32 = range24.getLowerBound();
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range14, range24);
        org.jfree.data.Range range36 = new org.jfree.data.Range((double) (short) -1, 15.5d);
        boolean boolean37 = range33.equals((java.lang.Object) (short) -1);
        org.jfree.data.Range range40 = org.jfree.data.Range.expand(range33, 10989.0d, (-942.0d));
        double double41 = range40.getUpperBound();
        java.lang.String str42 = range40.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-0.5d) + "'", double21 == (-0.5d));
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-9.0d) + "'", double28 == (-9.0d));
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-449.0d) + "'", double31 == (-449.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 484.0d + "'", double32 == 484.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-85631.0d) + "'", double41 == (-85631.0d));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Range[-999999.0,-85631.0]" + "'", str42, "Range[-999999.0,-85631.0]");
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 0, 5.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.expandToInclude(range2, 10999.0d);
        boolean boolean7 = range2.intersects(11.0d, (-10.0d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        java.lang.String str6 = range5.toString();
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double10 = range9.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range9, 1.0d, true);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (-10.0d));
        boolean boolean19 = range9.equals((java.lang.Object) range18);
        double double20 = range18.getCentralValue();
        org.jfree.data.Range range21 = org.jfree.data.Range.combine(range5, range18);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, 45.0d, (double) '#');
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) (byte) -1, (double) (byte) -1);
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range27, 32.0d);
        double double30 = range27.getCentralValue();
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range27, 55.0d, (double) 10L);
        double double34 = range33.getLowerBound();
        boolean boolean35 = range21.equals((java.lang.Object) range33);
        double double36 = range33.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[1.0,-899.0]" + "'", str6, "Range[1.0,-899.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9.0d) + "'", double10 == (-9.0d));
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 45.0d + "'", double20 == 45.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range13, 15.5d);
        double double16 = range15.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-71.0d) + "'", double16 == (-71.0d));
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-26442.5d), 4488.5d);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-450.0d), 53.625d);
        double double7 = range5.constrain(11045.5d);
        boolean boolean10 = range5.intersects(206.0d, (-13733.0d));
        double double11 = range5.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.38925075E7d + "'", double7 == 1.38925075E7d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 7777835.4375d + "'", double11 == 7777835.4375d);
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range18 = new org.jfree.data.Range((-10.0d), (double) '4');
        boolean boolean19 = range11.equals((java.lang.Object) (-10.0d));
        boolean boolean21 = range11.contains((-9.0d));
        org.jfree.data.Range range24 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range24, (double) (byte) -1);
        org.jfree.data.Range range29 = new org.jfree.data.Range(100.0d, (-9.0d));
        double double30 = range29.getUpperBound();
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range24, range29);
        boolean boolean32 = range11.equals((java.lang.Object) range29);
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range11, (-1560023.25d));
        org.jfree.data.Range range37 = new org.jfree.data.Range((-10.0d), (double) '4');
        boolean boolean39 = range37.contains((double) 'a');
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range37, (double) (byte) 0);
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range37, (double) (-1.0f));
        org.jfree.data.Range range46 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double47 = range46.getLength();
        double double48 = range46.getLowerBound();
        org.jfree.data.Range range51 = org.jfree.data.Range.shift(range46, 10.0d, false);
        double double53 = range51.constrain((double) 10);
        org.jfree.data.Range range55 = org.jfree.data.Range.expandToInclude(range51, 0.0d);
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range55, (double) (-1.0f), 10999.0d);
        org.jfree.data.Range range61 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range63 = org.jfree.data.Range.shift(range61, (double) 10L);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range63, (-9.0d), true);
        double double67 = range63.getCentralValue();
        org.jfree.data.Range range70 = org.jfree.data.Range.expand(range63, (-1.0d), (-71.0d));
        boolean boolean71 = range55.equals((java.lang.Object) range63);
        org.jfree.data.Range range72 = org.jfree.data.Range.combine(range37, range55);
        org.jfree.data.Range range75 = org.jfree.data.Range.expand(range55, 4488.5d, (double) ' ');
        org.jfree.data.Range range76 = org.jfree.data.Range.combine(range34, range75);
        boolean boolean79 = range76.intersects(71.0d, 0.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-9.0d) + "'", double30 == (-9.0d));
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-9.0d) + "'", double47 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 20.0d + "'", double53 == 20.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 5.0d + "'", double67 == 5.0d);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-109.0d));
        double double6 = range2.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 0.0d, true);
        org.jfree.data.Range range12 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (-1.0d), (double) (byte) 100);
        boolean boolean18 = range12.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range12, (-9.0d), (double) 100L);
        double double23 = range21.constrain(1.0d);
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range21, (double) (byte) 100, true);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range2, range26);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range30, (-1.0d), (double) (byte) 100);
        boolean boolean36 = range33.intersects((double) (byte) 10, 10.0d);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range39.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range39, (-9.0d), (double) 100L);
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range48, (double) 1);
        org.jfree.data.Range range53 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range53, (double) (byte) -1);
        boolean boolean58 = range55.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range59 = org.jfree.data.Range.combine(range48, range55);
        org.jfree.data.Range range62 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range65 = org.jfree.data.Range.expand(range62, (-1.0d), (double) (byte) 100);
        boolean boolean68 = range65.intersects((double) (byte) 10, 10.0d);
        boolean boolean69 = range55.equals((java.lang.Object) boolean68);
        org.jfree.data.Range range72 = org.jfree.data.Range.shift(range55, (double) (byte) 100, false);
        org.jfree.data.Range range75 = org.jfree.data.Range.expand(range55, 100.0d, (-0.5d));
        java.lang.String str76 = range75.toString();
        double double77 = range75.getLowerBound();
        org.jfree.data.Range range80 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range83 = org.jfree.data.Range.expand(range80, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range86 = org.jfree.data.Range.shift(range80, (double) 10.0f, false);
        boolean boolean88 = range86.contains((double) 1L);
        double double89 = range86.getUpperBound();
        org.jfree.data.Range range90 = org.jfree.data.Range.combine(range75, range86);
        boolean boolean91 = range33.equals((java.lang.Object) range86);
        org.jfree.data.Range range93 = org.jfree.data.Range.expandToInclude(range86, (-109.0d));
        org.jfree.data.Range range94 = org.jfree.data.Range.combine(range26, range86);
        double double95 = range26.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9.0d) + "'", double6 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-899.0d) + "'", double23 == (-899.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Range[10999.0,44.5]" + "'", str76, "Range[10999.0,44.5]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 10999.0d + "'", double77 == 10999.0d);
        org.junit.Assert.assertNotNull(range83);
        org.junit.Assert.assertNotNull(range86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 11.0d + "'", double89 == 11.0d);
        org.junit.Assert.assertNotNull(range90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(range93);
        org.junit.Assert.assertNotNull(range94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + (-828.0d) + "'", double95 == (-828.0d));
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        double double6 = range4.constrain((double) 0L);
        boolean boolean8 = range4.contains(168.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range4, 0.0d, 91.0d);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range11, (double) (short) 1, false);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range11, 55.0d);
        boolean boolean18 = range16.contains(0.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-10.0d) + "'", double6 == (-10.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range5.intersects((double) (byte) 10, 10.0d);
        java.lang.String str9 = range5.toString();
        java.lang.String str10 = range5.toString();
        boolean boolean13 = range5.intersects((-36810.0d), 45.5d);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range5, 0.5d, false);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[1.0,-899.0]" + "'", str9, "Range[1.0,-899.0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Range[1.0,-899.0]" + "'", str10, "Range[1.0,-899.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(range16);
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 10.0d, false);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (-10.0d), false);
        double double11 = range10.getUpperBound();
        double double12 = range10.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 5.5d + "'", double12 == 5.5d);
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 10.0f, false);
        boolean boolean10 = range8.contains((double) 1L);
        double double12 = range8.constrain((double) (short) 0);
        java.lang.String str13 = range8.toString();
        double double14 = range8.getUpperBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range8, (double) 1L);
        double double17 = range8.getLowerBound();
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range8, (double) (-1.0f));
        java.lang.String str20 = range8.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 20.0d + "'", double12 == 20.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[20.0,11.0]" + "'", str13, "Range[20.0,11.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 11.0d + "'", double14 == 11.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 20.0d + "'", double17 == 20.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Range[20.0,11.0]" + "'", str20, "Range[20.0,11.0]");
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        java.lang.String str18 = range11.toString();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range11, 0.0d);
        double double21 = range20.getLowerBound();
        java.lang.String str22 = range20.toString();
        double double23 = range20.getLength();
        double double25 = range20.constrain(90.0d);
        double double27 = range20.constrain((-484.0d));
        double double28 = range20.getLowerBound();
        double double29 = range20.getLowerBound();
        boolean boolean32 = range20.intersects((-65.5d), (double) (-1));
        double double33 = range20.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[-71.0,-899.0]" + "'", str18, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-71.0d) + "'", double21 == (-71.0d));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Range[-71.0,0.0]" + "'", str22, "Range[-71.0,0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 71.0d + "'", double23 == 71.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-71.0d) + "'", double27 == (-71.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-71.0d) + "'", double28 == (-71.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-71.0d) + "'", double29 == (-71.0d));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-71.0d) + "'", double33 == (-71.0d));
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range2, 50.5d, (double) 0L);
        double double15 = range14.getCentralValue();
        boolean boolean17 = range14.contains((-31328.0d));
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 100.0f, 11.0d);
        double double22 = range20.constrain(72.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range14, range20);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range20, (-3064.5d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 232.75d + "'", double15 == 232.75d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 11.0d + "'", double22 == 11.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 10.0d, false);
        double double8 = range2.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, (-1792.5d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.5d + "'", double8 == 5.5d);
        org.junit.Assert.assertNotNull(range10);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range11, (double) 1.0f, false);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range26, 5.5d);
        boolean boolean30 = range26.equals((java.lang.Object) 171.0d);
        boolean boolean33 = range26.intersects((-893.5d), (double) 100L);
        double double35 = range26.constrain(1.0d);
        boolean boolean36 = range20.equals((java.lang.Object) range26);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range39.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range39, (-9.0d), (double) 100L);
        double double50 = range48.constrain(1.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range48, (double) (byte) 100);
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range48, (double) 'a');
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range48, (-1.0d), (-9.0d));
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range48, 0.0d, true);
        org.jfree.data.Range range62 = org.jfree.data.Range.expandToInclude(range48, (double) (short) 1);
        boolean boolean63 = range20.equals((java.lang.Object) range48);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range20, (-2342.5d), true);
        double double67 = range20.getUpperBound();
        double double69 = range20.constrain(11871.0d);
        org.jfree.data.Range range72 = org.jfree.data.Range.expand(range20, (double) 'a', (double) (byte) -1);
        org.jfree.data.Range range74 = org.jfree.data.Range.shift(range20, (double) 'a');
        org.jfree.data.Range range76 = org.jfree.data.Range.shift(range20, 55.0d);
        org.jfree.data.Range range79 = org.jfree.data.Range.expand(range76, 50.5d, 107.25d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-899.0d) + "'", double50 == (-899.0d));
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-898.0d) + "'", double67 == (-898.0d));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-898.0d) + "'", double69 == (-898.0d));
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertNotNull(range79);
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range15, (-799.0d));
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range15, (-1792.5d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, (-1.0d), (-9.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 71.0d, (double) 10);
        boolean boolean26 = range23.intersects(37189.0d, (double) (short) -1);
        boolean boolean29 = range23.intersects(2.9501708E8d, 45.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, (-10.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range5, range8);
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, (-1.0d), (double) (byte) 100);
        boolean boolean20 = range14.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range14, (-9.0d), (double) 100L);
        double double25 = range23.constrain(1.0d);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range11, range23);
        java.lang.String str27 = range11.toString();
        double double28 = range11.getCentralValue();
        boolean boolean30 = range11.contains(10989.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-899.0d) + "'", double25 == (-899.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Range[1.0,100.0]" + "'", str27, "Range[1.0,100.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 50.5d + "'", double28 == 50.5d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10, 11.0d);
        double double4 = range2.constrain((-13662.0d));
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 91.0d);
        double double7 = range2.getLength();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range2.getLowerBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        boolean boolean22 = range16.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, (-9.0d), (double) 100L);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (double) 1);
        org.jfree.data.Range range30 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (byte) -1);
        boolean boolean35 = range32.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range25, range32);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range42.intersects((double) (byte) 10, 10.0d);
        boolean boolean46 = range32.equals((java.lang.Object) boolean45);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range32, (double) (byte) 100, false);
        boolean boolean50 = range2.equals((java.lang.Object) range49);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range2, 0.0d, false);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range53, 72.0d, true);
        org.jfree.data.Range range58 = org.jfree.data.Range.expandToInclude(range56, 33.0d);
        double double59 = range56.getLowerBound();
        java.lang.Class<?> wildcardClass60 = range56.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 82.0d + "'", double59 == 82.0d);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        double double6 = range4.constrain((double) 0L);
        boolean boolean8 = range4.contains(168.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range4, 0.0d, 91.0d);
        double double12 = range11.getLowerBound();
        boolean boolean15 = range11.intersects(1907.25d, (-405.0d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-10.0d) + "'", double6 == (-10.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 99.0d + "'", double12 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range2, 50.5d, (double) 0L);
        double double15 = range14.getCentralValue();
        boolean boolean17 = range14.contains((-31328.0d));
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 100.0f, 11.0d);
        double double22 = range20.constrain(72.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range14, range20);
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range14, 2.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (double) 100L);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 232.75d + "'", double15 == 232.75d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 11.0d + "'", double22 == 11.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        org.jfree.data.Range range2 = new org.jfree.data.Range(360.0d, (-1800.0d));
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 0.0d);
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double11 = range10.getLength();
        double double12 = range10.getLowerBound();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range10, 10.0d, false);
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range7, range15);
        org.jfree.data.Range range19 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range19, (double) (byte) -1);
        boolean boolean24 = range21.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range21, (double) 0.0f);
        boolean boolean28 = range26.contains(15.5d);
        boolean boolean29 = range15.equals((java.lang.Object) boolean28);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range15, 5.5d, 10.0d);
        java.lang.String str33 = range32.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9.0d) + "'", double11 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Range[69.5,-79.0]" + "'", str33, "Range[69.5,-79.0]");
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-109.0d));
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (-71.0d), (-828.0d));
        org.jfree.data.Range range11 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, (double) 10L);
        double double14 = range11.getLowerBound();
        double double15 = range11.getCentralValue();
        double double16 = range11.getCentralValue();
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range8, range11);
        double double18 = range17.getLowerBound();
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range17, 2827.0d, (-41.0d));
        double double22 = range21.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.5d) + "'", double15 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.5d) + "'", double16 == (-0.5d));
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1434.5d) + "'", double22 == (-1434.5d));
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        org.jfree.data.Range range7 = new org.jfree.data.Range(100.0d, (-9.0d));
        double double8 = range7.getUpperBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range9, (double) (-1), false);
        double double14 = range12.constrain((-900.0d));
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range12, 5.5d);
        double double18 = range12.constrain(72.0d);
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, (-1.0d), (double) (byte) 100);
        boolean boolean27 = range21.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range21, (-9.0d), (double) 100L);
        double double32 = range30.constrain(1.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range30, (double) (byte) 100);
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range30, (double) 'a');
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range30, (-1.0d), (-9.0d));
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range30, 0.0d, true);
        org.jfree.data.Range range44 = org.jfree.data.Range.expandToInclude(range30, (double) (short) 1);
        boolean boolean46 = range44.contains(100.0d);
        org.jfree.data.Range range49 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double50 = range49.getLength();
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range49, (-109.0d));
        boolean boolean53 = range44.equals((java.lang.Object) range52);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range52, (-449.0d), false);
        java.lang.String str57 = range52.toString();
        boolean boolean58 = range12.equals((java.lang.Object) str57);
        org.jfree.data.Range range61 = new org.jfree.data.Range(4523.5d, (double) 10);
        org.jfree.data.Range range62 = org.jfree.data.Range.combine(range12, range61);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9.0d) + "'", double8 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 99.0d + "'", double14 == 99.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-10.0d) + "'", double18 == (-10.0d));
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-899.0d) + "'", double32 == (-899.0d));
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-9.0d) + "'", double50 == (-9.0d));
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Range[0.0,0.0]" + "'", str57, "Range[0.0,0.0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(range62);
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range3 = org.jfree.data.Range.shift(range0, 1907.25d, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range5.intersects((double) (byte) 10, 10.0d);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (-1.0d), (double) (byte) 100);
        boolean boolean17 = range11.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, (-9.0d), (double) 100L);
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range20, (double) 1);
        org.jfree.data.Range range25 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range25, (double) (byte) -1);
        boolean boolean30 = range27.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range20, range27);
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range34, (-1.0d), (double) (byte) 100);
        boolean boolean40 = range37.intersects((double) (byte) 10, 10.0d);
        boolean boolean41 = range27.equals((java.lang.Object) boolean40);
        org.jfree.data.Range range44 = org.jfree.data.Range.shift(range27, (double) (byte) 100, false);
        org.jfree.data.Range range47 = org.jfree.data.Range.expand(range27, 100.0d, (-0.5d));
        java.lang.String str48 = range47.toString();
        double double49 = range47.getLowerBound();
        org.jfree.data.Range range52 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range55 = org.jfree.data.Range.expand(range52, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range58 = org.jfree.data.Range.shift(range52, (double) 10.0f, false);
        boolean boolean60 = range58.contains((double) 1L);
        double double61 = range58.getUpperBound();
        org.jfree.data.Range range62 = org.jfree.data.Range.combine(range47, range58);
        boolean boolean63 = range5.equals((java.lang.Object) range58);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range58, (-899.0d), false);
        boolean boolean68 = range58.contains(48.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Range[10999.0,44.5]" + "'", str48, "Range[10999.0,44.5]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10999.0d + "'", double49 == 10999.0d);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 11.0d + "'", double61 == 11.0d);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10L);
        org.jfree.data.Range range7 = org.jfree.data.Range.expand(range2, 44.5d, (-799.0d));
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 0L, (double) (-1L));
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range17, 11.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range22, (-1.0d), (double) (byte) 100);
        boolean boolean28 = range22.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range22, (-9.0d), (double) 100L);
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range31, (double) 1);
        org.jfree.data.Range range36 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range36, (double) (byte) -1);
        boolean boolean41 = range38.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range42 = org.jfree.data.Range.combine(range31, range38);
        java.lang.String str43 = range38.toString();
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range38, 5.5d, false);
        org.jfree.data.Range range49 = org.jfree.data.Range.expand(range38, (-485.0d), (double) (byte) 1);
        double double50 = range49.getCentralValue();
        boolean boolean51 = range19.equals((java.lang.Object) range49);
        org.jfree.data.Range range52 = org.jfree.data.Range.combine(range14, range49);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9.0d) + "'", double11 == (-9.0d));
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Range[99.0,-10.0]" + "'", str43, "Range[99.0,-10.0]");
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-26442.5d) + "'", double50 == (-26442.5d));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(range52);
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, 5.5d);
        double double15 = range11.constrain((double) (short) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        boolean boolean20 = range11.intersects(1.0d, (double) (-1));
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range11, (-485.0d));
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range22, (-30636.0d), true);
        double double26 = range25.getCentralValue();
        boolean boolean28 = range25.contains(0.0d);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range25, 67.0d, 272.5d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-899.0d) + "'", double15 == (-899.0d));
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-31328.0d) + "'", double26 == (-31328.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range31);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, 5.5d);
        double double15 = range11.constrain((double) (short) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        boolean boolean20 = range11.intersects(1.0d, (double) (-1));
        double double21 = range11.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-899.0d) + "'", double15 == (-899.0d));
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-485.0d) + "'", double21 == (-485.0d));
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-10.0d), (double) '4');
        boolean boolean4 = range2.contains((double) 'a');
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, (double) (byte) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) 0L);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, 484.0d, false);
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, (-1.0d), (double) (byte) 100);
        boolean boolean20 = range14.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range14, (-9.0d), (double) 100L);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, 5.5d);
        org.jfree.data.Range range28 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double29 = range28.getLength();
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range28, 1.0d, true);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range35, (-10.0d));
        boolean boolean38 = range28.equals((java.lang.Object) range37);
        boolean boolean39 = range23.equals((java.lang.Object) range37);
        org.jfree.data.Range range42 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range45 = org.jfree.data.Range.expand(range42, (-1.0d), (double) (byte) 100);
        boolean boolean48 = range42.intersects((double) (byte) -1, (double) (short) -1);
        double double49 = range42.getCentralValue();
        double double50 = range42.getLength();
        double double51 = range42.getLength();
        org.jfree.data.Range range52 = org.jfree.data.Range.combine(range37, range42);
        double double53 = range42.getLowerBound();
        org.jfree.data.Range range54 = org.jfree.data.Range.combine(range11, range42);
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range11, (-1100799.0d), 10.0d);
        org.jfree.data.Range range60 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range63 = org.jfree.data.Range.expand(range60, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range66 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range68 = org.jfree.data.Range.shift(range66, (-10.0d));
        org.jfree.data.Range range69 = org.jfree.data.Range.combine(range63, range66);
        org.jfree.data.Range range72 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range74 = org.jfree.data.Range.shift(range72, (-10.0d));
        org.jfree.data.Range range75 = org.jfree.data.Range.combine(range63, range72);
        double double76 = range72.getLowerBound();
        org.jfree.data.Range range78 = org.jfree.data.Range.shift(range72, (double) (byte) -1);
        double double80 = range72.constrain(90.0d);
        org.jfree.data.Range range81 = org.jfree.data.Range.combine(range11, range72);
        org.jfree.data.Range range84 = org.jfree.data.Range.shift(range11, 0.0d, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-9.0d) + "'", double29 == (-9.0d));
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 5.5d + "'", double49 == 5.5d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-9.0d) + "'", double50 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-9.0d) + "'", double51 == (-9.0d));
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 10.0d + "'", double76 == 10.0d);
        org.junit.Assert.assertNotNull(range78);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 90.0d + "'", double80 == 90.0d);
        org.junit.Assert.assertNotNull(range81);
        org.junit.Assert.assertNotNull(range84);
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 0.0d);
        org.jfree.data.Range range10 = new org.jfree.data.Range(1.0d, (-37118.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range2, range10);
        double double12 = range11.getCentralValue();
        double double13 = range11.getLength();
        boolean boolean15 = range11.contains(232.75d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10L);
        org.jfree.data.Range range7 = org.jfree.data.Range.expand(range2, 44.5d, (-799.0d));
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range2, 743473.0d);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range2, 0.0d, 21.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range19, 0.5d, true);
        double double23 = range19.getUpperBound();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9.0d) + "'", double11 == (-9.0d));
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 21.0d + "'", double23 == 21.0d);
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 0, 107.25d);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, 53.625d, true);
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, (-799.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        java.lang.String str18 = range11.toString();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range11, 0.0d);
        double double21 = range20.getLowerBound();
        java.lang.String str22 = range20.toString();
        double double23 = range20.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range20, (double) (byte) 1);
        double double27 = range20.constrain((-9.0d));
        double double28 = range20.getLength();
        boolean boolean30 = range20.contains((-400.5d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[-71.0,-899.0]" + "'", str18, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-71.0d) + "'", double21 == (-71.0d));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Range[-71.0,0.0]" + "'", str22, "Range[-71.0,0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 71.0d + "'", double23 == 71.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-9.0d) + "'", double27 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 71.0d + "'", double28 == 71.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 0, (double) 0);
        double double3 = range2.getLowerBound();
        boolean boolean6 = range2.intersects((-89.0d), (-5901.0d));
        boolean boolean8 = range2.contains((-3825.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        boolean boolean7 = range4.intersects((double) 1.0f, (double) 0.0f);
        double double8 = range4.getLength();
        double double9 = range4.getLength();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-109.0d) + "'", double8 == (-109.0d));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-109.0d) + "'", double9 == (-109.0d));
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) -1, 15.5d);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-0.5d), false);
        org.jfree.data.Range range8 = new org.jfree.data.Range(71.0d, (double) 10);
        org.jfree.data.Range range9 = org.jfree.data.Range.combine(range2, range8);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range9);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (double) (short) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range5, 0.0d, true);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (-1.0d), (double) (byte) 100);
        boolean boolean17 = range11.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, (-9.0d), (double) 100L);
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range20, (double) 1);
        org.jfree.data.Range range25 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range25, (double) (byte) -1);
        boolean boolean30 = range27.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range20, range27);
        org.jfree.data.Range range34 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range34, (-1.0d), (double) (byte) 100);
        boolean boolean40 = range34.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range34, (-9.0d), (double) 100L);
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range31, range34);
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range8, range44);
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range8, 7.75d);
        boolean boolean49 = range47.contains((-450.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        double double3 = range2.getCentralValue();
        double double4 = range2.getUpperBound();
        org.jfree.data.Range range7 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double8 = range7.getLength();
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range7, 1.0d, true);
        boolean boolean14 = range11.intersects((double) (byte) 10, 1.0d);
        boolean boolean17 = range11.intersects((double) 'a', (double) (byte) 10);
        java.lang.Class<?> wildcardClass18 = range11.getClass();
        boolean boolean19 = range2.equals((java.lang.Object) wildcardClass18);
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range22, (-109.0d));
        boolean boolean27 = range22.contains(1.0d);
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range22, 37189.0d);
        org.jfree.data.Range range30 = org.jfree.data.Range.combine(range2, range29);
        double double32 = range2.constrain((-0.5d));
        org.jfree.data.Range range35 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range35, (double) 10L);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range37, (-9.0d), true);
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range40, 99.0d, true);
        boolean boolean44 = range2.equals((java.lang.Object) range40);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.5d) + "'", double3 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9.0d) + "'", double8 == (-9.0d));
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-9.0d) + "'", double23 == (-9.0d));
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-0.5d) + "'", double32 == (-0.5d));
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 1.0f, 37189.0d);
        boolean boolean5 = range2.intersects(11.0d, (-109.0d));
        boolean boolean7 = range2.contains((-4.5d));
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, (-449.0d));
        org.jfree.data.Range range12 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (-1.0d), (double) (byte) 100);
        boolean boolean18 = range12.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range12, (-9.0d), (double) 100L);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range21, 5.5d);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, 5.5d, (double) 10.0f);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range26, (double) (byte) 0, (double) 0.0f);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range29, 5.90028264E8d);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range9, range31);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        java.lang.String str23 = range18.toString();
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range18, 5.5d, false);
        boolean boolean28 = range18.contains((double) (byte) 0);
        boolean boolean31 = range18.intersects(18594.5d, 26.0d);
        boolean boolean34 = range18.intersects((-85631.0d), 0.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Range[99.0,-10.0]" + "'", str23, "Range[99.0,-10.0]");
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, 5.5d);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 5.5d, (double) 10.0f);
        double double17 = range16.getLength();
        double double18 = range16.getCentralValue();
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range16, 65.0d, (double) (short) -1);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-13662.0d) + "'", double17 == (-13662.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-2342.5d) + "'", double18 == (-2342.5d));
        org.junit.Assert.assertNotNull(range21);
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        boolean boolean22 = range16.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, (-9.0d), (double) 100L);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, 45.0d, (-9.0d));
        double double29 = range28.getUpperBound();
        boolean boolean30 = range11.equals((java.lang.Object) double29);
        double double31 = range11.getUpperBound();
        double double33 = range11.constrain(232.75d);
        double double34 = range11.getLowerBound();
        double double36 = range11.constrain((-72.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 6553.0d + "'", double29 == 6553.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-899.0d) + "'", double31 == (-899.0d));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-899.0d) + "'", double33 == (-899.0d));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-71.0d) + "'", double34 == (-71.0d));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-899.0d) + "'", double36 == (-899.0d));
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        boolean boolean16 = range13.intersects((-1.0d), 0.0d);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double20 = range19.getLength();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range19, (-109.0d));
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range22, (-71.0d), (-828.0d));
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range25, (double) 100L);
        double double28 = range27.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range13, range27);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range13, (double) 0L, false);
        boolean boolean35 = range32.intersects(20.0d, (double) (byte) 100);
        double double36 = range32.getLowerBound();
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range32, (-20.5d), (-37118.0d));
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-85631.0d), (-900.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-9.0d) + "'", double20 == (-9.0d));
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-71.0d) + "'", double36 == (-71.0d));
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10L);
        org.jfree.data.Range range7 = org.jfree.data.Range.expand(range2, 44.5d, (-799.0d));
        java.lang.String str8 = range7.toString();
        double double9 = range7.getUpperBound();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Range[-45.5,-799.0]" + "'", str8, "Range[-45.5,-799.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-799.0d) + "'", double9 == (-799.0d));
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (-10.0d));
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range4, (double) 0);
        double double7 = range4.getLength();
        double double8 = range4.getLength();
        boolean boolean10 = range4.contains((-109.0d));
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range4, 20.0d, (-799.0d));
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range13, 107.25d);
        org.jfree.data.Range range18 = org.jfree.data.Range.expand(range13, 2.0d, (-1.0d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 90.0d + "'", double7 == 90.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 90.0d + "'", double8 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (double) (short) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range5, 45.0d, true);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (-1.0d), (double) (byte) 100);
        boolean boolean17 = range11.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, (-9.0d), (double) 100L);
        double double22 = range20.constrain(1.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range20, (double) (byte) 100);
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range20, (double) 'a');
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range20, (double) 1.0f, false);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range35, 5.5d);
        boolean boolean39 = range35.equals((java.lang.Object) 171.0d);
        boolean boolean42 = range35.intersects((-893.5d), (double) 100L);
        double double44 = range35.constrain(1.0d);
        boolean boolean45 = range29.equals((java.lang.Object) range35);
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range29, (-9.0d));
        double double48 = range47.getLength();
        boolean boolean49 = range5.equals((java.lang.Object) double48);
        double double50 = range5.getUpperBound();
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range5, (-13662.0d), true);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-899.0d) + "'", double22 == (-899.0d));
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 61.0d + "'", double48 == 61.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-9.0d) + "'", double50 == (-9.0d));
        org.junit.Assert.assertNotNull(range53);
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range2.getLowerBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        boolean boolean22 = range16.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, (-9.0d), (double) 100L);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (double) 1);
        org.jfree.data.Range range30 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (byte) -1);
        boolean boolean35 = range32.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range25, range32);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range42.intersects((double) (byte) 10, 10.0d);
        boolean boolean46 = range32.equals((java.lang.Object) boolean45);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range32, (double) (byte) 100, false);
        boolean boolean50 = range2.equals((java.lang.Object) range49);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range2, 0.0d, false);
        org.jfree.data.Range range54 = null;
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range53, range54);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range55);
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (double) (short) 0);
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, (-818.0d));
        boolean boolean10 = range7.intersects((-1100799.0d), (double) (byte) -1);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, (-1.0d), (-9.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range11, 0.0d, true);
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range11, (double) (short) 1);
        boolean boolean27 = range25.contains(100.0d);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double31 = range30.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range30, (-109.0d));
        boolean boolean34 = range25.equals((java.lang.Object) range33);
        double double36 = range33.constrain((double) '4');
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range33, 32.0d, 61.0d);
        double double40 = range39.getLength();
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range39, (-26442.5d), 11044.5d);
        double double44 = range39.getCentralValue();
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range39, 2827.0d, false);
        boolean boolean50 = range39.intersects(928.0d, (double) (byte) 10);
        org.jfree.data.Range range53 = new org.jfree.data.Range((-882.5d), (-109.0d));
        boolean boolean54 = range39.equals((java.lang.Object) range53);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9.0d) + "'", double31 == (-9.0d));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range5.intersects((double) (byte) 10, 10.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range5, 27.5d, 135.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range11.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) 100L);
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range15, range16);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 45.0d + "'", double13 == 45.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, (-1.0d), (double) (byte) 100);
        boolean boolean31 = range25.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range25, (-9.0d), (double) 100L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range22, range25);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range22, (double) 100);
        double double38 = range22.getLowerBound();
        boolean boolean41 = range22.intersects(45.0d, 0.0d);
        java.lang.String str42 = range22.toString();
        boolean boolean45 = range22.intersects((-112.5d), 6108.5d);
        double double46 = range22.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-71.0d) + "'", double38 == (-71.0d));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Range[-71.0,-10.0]" + "'", str42, "Range[-71.0,-10.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-10.0d) + "'", double46 == (-10.0d));
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 10.0f, false);
        boolean boolean10 = range8.contains((double) 1L);
        double double12 = range8.constrain((double) (short) 0);
        java.lang.String str13 = range8.toString();
        double double14 = range8.getUpperBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range8, (double) 1L);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range19, (-10.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range21, (double) 0);
        double double24 = range21.getLength();
        boolean boolean27 = range21.intersects((-899.0d), 90.0d);
        java.lang.String str28 = range21.toString();
        boolean boolean30 = range21.equals((java.lang.Object) 10.0d);
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range8, range21);
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range21, 15.5d);
        double double35 = range33.constrain(72.0d);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range33, (-28764.0d), (-119.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 20.0d + "'", double12 == 20.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[20.0,11.0]" + "'", str13, "Range[20.0,11.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 11.0d + "'", double14 == 11.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 90.0d + "'", double24 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[0.0,90.0]" + "'", str28, "Range[0.0,90.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 72.0d + "'", double35 == 72.0d);
        org.junit.Assert.assertNotNull(range38);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-10.0d), (double) '4');
        boolean boolean4 = range2.contains((double) 'a');
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, (double) (byte) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) 0L);
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range2, (-27.75d));
        boolean boolean13 = range10.intersects(0.0d, 6553.0d);
        double double14 = range10.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 79.75d + "'", double14 == 79.75d);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) -1, 15.5d);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-0.5d), false);
        double double6 = range2.getCentralValue();
        org.jfree.data.Range range9 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (double) (byte) -1);
        org.jfree.data.Range range14 = new org.jfree.data.Range(100.0d, (-9.0d));
        double double15 = range14.getUpperBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.combine(range9, range14);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range16, (double) (-1), false);
        double double21 = range19.constrain((-900.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range19, 5.5d);
        double double25 = range23.constrain((-1820.75d));
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range2, range23);
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range26, 121000.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 7.25d + "'", double6 == 7.25d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-9.0d) + "'", double15 == (-9.0d));
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 99.0d + "'", double21 == 99.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 104.5d + "'", double25 == 104.5d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 10.0d, false);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (-10.0d), false);
        double double11 = range10.getUpperBound();
        double double12 = range10.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range5, (double) (byte) -1);
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range7, (double) 0.0f);
        boolean boolean11 = range9.contains(765.75d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        double double9 = range2.getLowerBound();
        double double10 = range2.getCentralValue();
        double double11 = range2.getLength();
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double15 = range14.getLength();
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range14, (-109.0d));
        boolean boolean19 = range14.contains(1.0d);
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range14, 37189.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range21, 46.0d);
        boolean boolean24 = range2.equals((java.lang.Object) 46.0d);
        org.jfree.data.Range range27 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range27, (double) 10L);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range29, (-9.0d), true);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range32, 99.0d, true);
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range32, (double) 10.0f);
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range32, 2.5d);
        boolean boolean40 = range2.equals((java.lang.Object) range32);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5.5d + "'", double10 == 5.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9.0d) + "'", double11 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-9.0d) + "'", double15 == (-9.0d));
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range11.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) 100L);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 1L);
        boolean boolean19 = range17.contains((-13662.0d));
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range17, (double) (byte) 10);
        double double23 = range21.constrain((double) (byte) 0);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range21, 61.0d, 0.0d);
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range21, (-846.375d));
        double double29 = range28.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 45.0d + "'", double13 == 45.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-846.375d) + "'", double29 == (-846.375d));
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        boolean boolean19 = range17.contains((double) 'a');
        double double20 = range17.getUpperBound();
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range29, (-10.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range26, range29);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, (-1.0d), (double) (byte) 100);
        boolean boolean41 = range35.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range35, (-9.0d), (double) 100L);
        double double46 = range44.constrain(1.0d);
        org.jfree.data.Range range47 = org.jfree.data.Range.combine(range32, range44);
        org.jfree.data.Range range50 = new org.jfree.data.Range((double) 10.0f, (double) 10.0f);
        org.jfree.data.Range range53 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range56 = org.jfree.data.Range.expand(range53, (-1.0d), (double) (byte) 100);
        boolean boolean59 = range53.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range62 = org.jfree.data.Range.expand(range53, (-9.0d), (double) 100L);
        double double64 = range62.constrain(1.0d);
        boolean boolean65 = range50.equals((java.lang.Object) 1.0d);
        org.jfree.data.Range range66 = org.jfree.data.Range.combine(range47, range50);
        boolean boolean67 = range17.equals((java.lang.Object) range66);
        double double68 = range17.getCentralValue();
        double double69 = range17.getLength();
        double double70 = range17.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 97.0d + "'", double20 == 97.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-899.0d) + "'", double46 == (-899.0d));
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-899.0d) + "'", double64 == (-899.0d));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 13.0d + "'", double68 == 13.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 168.0d + "'", double69 == 168.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 13.0d + "'", double70 == 13.0d);
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range18 = new org.jfree.data.Range((-10.0d), (double) '4');
        boolean boolean19 = range11.equals((java.lang.Object) (-10.0d));
        double double20 = range11.getCentralValue();
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double24 = range23.getLength();
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range23, 1.0d, true);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (-10.0d));
        boolean boolean33 = range23.equals((java.lang.Object) range32);
        org.jfree.data.Range range34 = org.jfree.data.Range.combine(range11, range32);
        double double35 = range11.getLowerBound();
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range11, 18630.0d, false);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range11, (-1560023.25d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-485.0d) + "'", double20 == (-485.0d));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-9.0d) + "'", double24 == (-9.0d));
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-71.0d) + "'", double35 == (-71.0d));
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range40);
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        org.jfree.data.Range range2 = new org.jfree.data.Range(7.75d, 172.0d);
        double double3 = range2.getCentralValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 89.875d + "'", double3 == 89.875d);
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, (-1.0d), (double) (byte) 100);
        boolean boolean31 = range28.intersects((double) (byte) 10, 10.0d);
        boolean boolean32 = range18.equals((java.lang.Object) boolean31);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range18, (double) (byte) 100, false);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range35, 4523.5d, 4523.5d);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range38, 2483.0d, true);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range5, 5.5d);
        boolean boolean9 = range5.equals((java.lang.Object) 171.0d);
        double double10 = range5.getLowerBound();
        java.lang.String str11 = range5.toString();
        boolean boolean13 = range5.contains(206.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[1.0,91.0]" + "'", str11, "Range[1.0,91.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        org.jfree.data.Range range2 = new org.jfree.data.Range(101.0d, 7777835.4375d);
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range11, (double) (short) -1, false);
        double double26 = range25.getLength();
        double double27 = range25.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-828.0d) + "'", double26 == (-828.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-828.0d) + "'", double27 == (-828.0d));
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        java.lang.String str4 = range3.toString();
        org.jfree.data.Range range7 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double8 = range7.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (-109.0d));
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range10, (-71.0d), (-828.0d));
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (double) 100L);
        double double16 = range15.getLength();
        double double18 = range15.constrain(50.5d);
        org.jfree.data.Range range19 = org.jfree.data.Range.combine(range3, range15);
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range19, (-449.0d));
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range0, range19);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Range[10.0,100.0]" + "'", str4, "Range[10.0,100.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9.0d) + "'", double8 == (-9.0d));
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range22);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 0.0d);
        org.jfree.data.Range range10 = new org.jfree.data.Range(1.0d, (-37118.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, (-1.0d), (double) (byte) 100);
        boolean boolean20 = range14.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range14, (-9.0d), (double) 100L);
        double double25 = range23.constrain(1.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range23, (double) (byte) 100);
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range23, (double) 'a');
        java.lang.String str30 = range23.toString();
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range23, 0.0d);
        double double33 = range32.getLowerBound();
        java.lang.String str34 = range32.toString();
        double double35 = range32.getLength();
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range32, (double) (byte) 1);
        boolean boolean39 = range32.contains((-828.0d));
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range11, range32);
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range40, 0.0d, (double) ' ');
        boolean boolean45 = range43.contains((double) 1);
        double double46 = range43.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-899.0d) + "'", double25 == (-899.0d));
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[-71.0,-899.0]" + "'", str30, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-71.0d) + "'", double33 == (-71.0d));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Range[-71.0,0.0]" + "'", str34, "Range[-71.0,0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 71.0d + "'", double35 == 71.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2305.0d + "'", double46 == 2305.0d);
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 0.0d);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-119.0d), false);
        org.junit.Assert.assertNotNull(range5);
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range11, (double) 1.0f, false);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range26, 5.5d);
        boolean boolean30 = range26.equals((java.lang.Object) 171.0d);
        boolean boolean33 = range26.intersects((-893.5d), (double) 100L);
        double double35 = range26.constrain(1.0d);
        boolean boolean36 = range20.equals((java.lang.Object) range26);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range39.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range39, (-9.0d), (double) 100L);
        double double50 = range48.constrain(1.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range48, (double) (byte) 100);
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range48, (double) 'a');
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range48, (-1.0d), (-9.0d));
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range48, 0.0d, true);
        org.jfree.data.Range range62 = org.jfree.data.Range.expandToInclude(range48, (double) (short) 1);
        boolean boolean63 = range20.equals((java.lang.Object) range48);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range20, (-2342.5d), true);
        org.jfree.data.Range range69 = org.jfree.data.Range.shift(range20, 51.0d, true);
        org.jfree.data.Range range72 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range74 = org.jfree.data.Range.expandToInclude(range72, (-4.0d));
        org.jfree.data.Range range75 = org.jfree.data.Range.combine(range20, range72);
        double double76 = range20.getCentralValue();
        double double77 = range20.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-899.0d) + "'", double50 == (-899.0d));
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-484.0d) + "'", double76 == (-484.0d));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-898.0d) + "'", double77 == (-898.0d));
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10L);
        double double5 = range2.getLowerBound();
        double double6 = range2.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range2, (-485.0d), (-449.0d));
        org.jfree.data.Range range12 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double13 = range12.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.combine(range9, range12);
        double double16 = range9.constrain((double) 'a');
        double double17 = range9.getLowerBound();
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range9, (-345.0d), 2.0d);
        double double21 = range20.getCentralValue();
        double double22 = range20.getLowerBound();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.5d) + "'", double6 == (-0.5d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9.0d) + "'", double13 == (-9.0d));
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-449.0d) + "'", double16 == (-449.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 484.0d + "'", double17 == 484.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-161858.0d) + "'", double21 == (-161858.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-321401.0d) + "'", double22 == (-321401.0d));
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.expandToInclude(range2, (double) 0);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double9 = range8.getLength();
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, (double) 'a');
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double15 = range14.getLength();
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range14, 1.0d, true);
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range21, (-10.0d));
        boolean boolean24 = range14.equals((java.lang.Object) range23);
        double double25 = range23.getCentralValue();
        boolean boolean26 = range8.equals((java.lang.Object) double25);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range2, range8);
        org.jfree.data.Range range30 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double31 = range30.getLength();
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range30, 1.0d, true);
        org.jfree.data.Range range37 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range37, (-10.0d));
        boolean boolean40 = range30.equals((java.lang.Object) range39);
        double double41 = range39.getUpperBound();
        boolean boolean43 = range39.contains((double) (-1.0f));
        org.jfree.data.Range range46 = org.jfree.data.Range.shift(range39, 20.0d, false);
        org.jfree.data.Range range49 = org.jfree.data.Range.expand(range39, (-828.0d), (-933.0d));
        boolean boolean50 = range2.equals((java.lang.Object) range49);
        org.jfree.data.Range range53 = org.jfree.data.Range.expand(range49, (-9.0d), 100.0d);
        org.jfree.data.Range range55 = org.jfree.data.Range.shift(range53, 37189.0d);
        org.jfree.data.Range range58 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range58, (-10.0d));
        org.jfree.data.Range range62 = org.jfree.data.Range.shift(range60, (double) 0);
        boolean boolean64 = range60.contains((double) (short) 10);
        double double65 = range60.getUpperBound();
        boolean boolean66 = range55.equals((java.lang.Object) double65);
        double double67 = range55.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9.0d) + "'", double9 == (-9.0d));
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-9.0d) + "'", double15 == (-9.0d));
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 45.0d + "'", double25 == 45.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-9.0d) + "'", double31 == (-9.0d));
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 90.0d + "'", double41 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 90.0d + "'", double65 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-1.45728E7d) + "'", double67 == (-1.45728E7d));
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10L, (double) 1.0f);
        java.lang.String str3 = range2.toString();
        org.jfree.data.Range range6 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range6, (double) 10L);
        double double9 = range6.getLowerBound();
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range6, 72.0d, (double) 10.0f);
        double double13 = range6.getUpperBound();
        org.jfree.data.Range range14 = org.jfree.data.Range.combine(range2, range6);
        double double15 = range6.getCentralValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Range[10.0,1.0]" + "'", str3, "Range[10.0,1.0]");
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.5d) + "'", double15 == (-0.5d));
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (double) (short) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range5, 45.0d, true);
        boolean boolean11 = range5.intersects(10989.0d, (double) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range5, 11871.0d, false);
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (-1.0d), (double) (byte) 100);
        boolean boolean23 = range17.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range17, (-9.0d), (double) 100L);
        double double28 = range26.constrain(1.0d);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range26, (double) (byte) 100);
        org.jfree.data.Range range33 = new org.jfree.data.Range((-10.0d), (double) '4');
        boolean boolean34 = range26.equals((java.lang.Object) (-10.0d));
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range5, range26);
        org.jfree.data.Range range38 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range41 = org.jfree.data.Range.expand(range38, (-1.0d), (double) (byte) 100);
        boolean boolean44 = range38.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range47 = org.jfree.data.Range.expand(range38, (-9.0d), (double) 100L);
        double double49 = range47.constrain(1.0d);
        org.jfree.data.Range range51 = org.jfree.data.Range.shift(range47, (double) (byte) 100);
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range47, (double) 'a');
        java.lang.String str54 = range47.toString();
        org.jfree.data.Range range56 = org.jfree.data.Range.expandToInclude(range47, 0.0d);
        double double57 = range56.getLowerBound();
        java.lang.String str58 = range56.toString();
        double double59 = range56.getLength();
        org.jfree.data.Range range61 = org.jfree.data.Range.shift(range56, (double) (byte) 1);
        org.jfree.data.Range range64 = new org.jfree.data.Range(44.5d, (double) 10);
        boolean boolean66 = range64.contains((-828.0d));
        boolean boolean67 = range61.equals((java.lang.Object) range64);
        boolean boolean68 = range26.equals((java.lang.Object) range64);
        java.lang.String str69 = range26.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-899.0d) + "'", double28 == (-899.0d));
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-899.0d) + "'", double49 == (-899.0d));
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Range[-71.0,-899.0]" + "'", str54, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-71.0d) + "'", double57 == (-71.0d));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Range[-71.0,0.0]" + "'", str58, "Range[-71.0,0.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 71.0d + "'", double59 == 71.0d);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Range[-71.0,-899.0]" + "'", str69, "Range[-71.0,-899.0]");
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        java.lang.String str6 = range5.toString();
        double double7 = range5.getLength();
        double double8 = range5.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, 5548.0d);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range5, (double) (-1));
        java.lang.String str13 = range12.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[1.0,-899.0]" + "'", str6, "Range[1.0,-899.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-900.0d) + "'", double7 == (-900.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-449.0d) + "'", double8 == (-449.0d));
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[0.0,-900.0]" + "'", str13, "Range[0.0,-900.0]");
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-26442.5d), 2827.0d);
        double double3 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 2827.0d + "'", double3 == 2827.0d);
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10999.0d, (double) 100.0f);
        boolean boolean5 = range2.intersects(6553.0d, (double) 'a');
        boolean boolean8 = range2.intersects((-828.0d), 55.0d);
        boolean boolean11 = range2.intersects(20320.25d, 35.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range11, (double) 1.0f, false);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range26, 5.5d);
        boolean boolean30 = range26.equals((java.lang.Object) 171.0d);
        boolean boolean33 = range26.intersects((-893.5d), (double) 100L);
        double double35 = range26.constrain(1.0d);
        boolean boolean36 = range20.equals((java.lang.Object) range26);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range39.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range39, (-9.0d), (double) 100L);
        double double50 = range48.constrain(1.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range48, (double) (byte) 100);
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range48, (double) 'a');
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range48, (-1.0d), (-9.0d));
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range48, 0.0d, true);
        org.jfree.data.Range range62 = org.jfree.data.Range.expandToInclude(range48, (double) (short) 1);
        boolean boolean63 = range20.equals((java.lang.Object) range48);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range20, (-2342.5d), true);
        java.lang.Class<?> wildcardClass67 = range66.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-899.0d) + "'", double50 == (-899.0d));
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        double double7 = range5.constrain((double) 100);
        java.lang.Class<?> wildcardClass8 = range5.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 91.0d + "'", double7 == 91.0d);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-10.0d), (double) '4');
        boolean boolean4 = range2.contains((double) 'a');
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, (double) (byte) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) 0L);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, 484.0d, false);
        double double13 = range8.constrain((-31535.0d));
        double double14 = range8.getLowerBound();
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (-1.0d), (double) (byte) 100);
        java.lang.String str21 = range20.toString();
        org.jfree.data.Range range24 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range24, 1.0d, true);
        org.jfree.data.Range range31 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range31, (-10.0d));
        boolean boolean34 = range24.equals((java.lang.Object) range33);
        double double35 = range33.getCentralValue();
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range20, range33);
        double double37 = range36.getLength();
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range36, 0.0d, true);
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range36, (-20.5d));
        boolean boolean43 = range8.equals((java.lang.Object) range42);
        java.lang.Class<?> wildcardClass44 = range42.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-10.0d) + "'", double13 == (-10.0d));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-10.0d) + "'", double14 == (-10.0d));
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Range[1.0,-899.0]" + "'", str21, "Range[1.0,-899.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-9.0d) + "'", double25 == (-9.0d));
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 45.0d + "'", double35 == 45.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 90.0d + "'", double37 == 90.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, (-10.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range5, range8);
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, (-1.0d), (double) (byte) 100);
        boolean boolean20 = range14.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range14, (-9.0d), (double) 100L);
        double double25 = range23.constrain(1.0d);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range11, range23);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) 10.0f, (double) 10.0f);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range32, (-1.0d), (double) (byte) 100);
        boolean boolean38 = range32.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range41 = org.jfree.data.Range.expand(range32, (-9.0d), (double) 100L);
        double double43 = range41.constrain(1.0d);
        boolean boolean44 = range29.equals((java.lang.Object) 1.0d);
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range26, range29);
        double double46 = range29.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-899.0d) + "'", double25 == (-899.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-899.0d) + "'", double43 == (-899.0d));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        boolean boolean16 = range13.intersects((-1.0d), 0.0d);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double20 = range19.getLength();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range19, (-109.0d));
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range22, (-71.0d), (-828.0d));
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range25, (double) 100L);
        double double28 = range27.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range13, range27);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range13, (double) 0L, false);
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range13, (-13662.0d));
        double double35 = range34.getUpperBound();
        double double36 = range34.getLowerBound();
        boolean boolean38 = range34.contains((-450.0d));
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range34, 10.0d);
        double double41 = range34.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-9.0d) + "'", double20 == (-9.0d));
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-13733.0d) + "'", double36 == (-13733.0d));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 13733.0d + "'", double41 == 13733.0d);
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        boolean boolean15 = range11.equals((java.lang.Object) '4');
        double double16 = range11.getLowerBound();
        double double18 = range11.constrain((double) 10);
        java.lang.Class<?> wildcardClass19 = range11.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-71.0d) + "'", double16 == (-71.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-899.0d) + "'", double18 == (-899.0d));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, (-799.0d));
        double double7 = range2.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range3, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range3, 0.0d);
        org.jfree.data.Range range11 = new org.jfree.data.Range(1.0d, (-37118.0d));
        org.jfree.data.Range range12 = org.jfree.data.Range.combine(range3, range11);
        org.jfree.data.Range range13 = org.jfree.data.Range.combine(range0, range3);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range16, (double) 10.0f, false);
        boolean boolean24 = range22.contains((double) 1L);
        double double26 = range22.constrain((double) (short) 0);
        java.lang.String str27 = range22.toString();
        double double28 = range22.getUpperBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range22, (double) 1L);
        double double31 = range22.getLowerBound();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range22, (double) (-1.0f));
        org.jfree.data.Range range36 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range36, (double) (byte) -1);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range36, 10999.0d, true);
        org.jfree.data.Range range43 = org.jfree.data.Range.shift(range36, 10999.0d);
        double double44 = range36.getLowerBound();
        boolean boolean45 = range33.equals((java.lang.Object) range36);
        org.jfree.data.Range range46 = org.jfree.data.Range.combine(range0, range36);
        org.jfree.data.Range range49 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range52 = org.jfree.data.Range.expand(range49, (-1.0d), (double) (byte) 100);
        boolean boolean55 = range49.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range58 = org.jfree.data.Range.expand(range49, (-9.0d), (double) 100L);
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range58, 5.5d);
        double double62 = range58.constrain((double) (short) 1);
        org.jfree.data.Range range64 = org.jfree.data.Range.expandToInclude(range58, (double) 1);
        org.jfree.data.Range range67 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range69 = org.jfree.data.Range.shift(range67, (double) (byte) -1);
        org.jfree.data.Range range72 = new org.jfree.data.Range(100.0d, (-9.0d));
        double double73 = range72.getUpperBound();
        org.jfree.data.Range range74 = org.jfree.data.Range.combine(range67, range72);
        org.jfree.data.Range range76 = org.jfree.data.Range.shift(range67, (-933.0d));
        double double77 = range76.getLength();
        org.jfree.data.Range range80 = org.jfree.data.Range.expand(range76, 14.5d, (-414.0d));
        boolean boolean81 = range58.equals((java.lang.Object) range76);
        boolean boolean82 = range36.equals((java.lang.Object) range58);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 20.0d + "'", double26 == 20.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Range[20.0,11.0]" + "'", str27, "Range[20.0,11.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 11.0d + "'", double28 == 11.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 20.0d + "'", double31 == 20.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-899.0d) + "'", double62 == (-899.0d));
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-9.0d) + "'", double73 == (-9.0d));
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-942.0d) + "'", double77 == (-942.0d));
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-10.0d), (double) '4');
        boolean boolean4 = range2.contains((double) 'a');
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, (double) (byte) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) 0L);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range2, (-449.0d), false);
        double double12 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range5, (double) (byte) -1);
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range7, (double) 0.0f);
        boolean boolean12 = range7.intersects(71.0d, (-828.0d));
        org.jfree.data.Range range15 = new org.jfree.data.Range(10999.0d, (double) 100.0f);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range15, (double) 10.0f);
        boolean boolean19 = range15.contains((-449.0d));
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range15, 99.0d);
        double double22 = range15.getUpperBound();
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range15, (-11.0d), (-345.0d));
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range7, range15);
        org.jfree.data.Range range29 = new org.jfree.data.Range(0.0d, (double) '#');
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range29, (double) 0L);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range7, range29);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-17.75d), 135.0d);
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-127.0d), (-9.0d));
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        org.jfree.data.Range range2 = new org.jfree.data.Range(168.0d, (-828.0d));
        boolean boolean5 = range2.intersects((double) 100.0f, 90.0d);
        double double7 = range2.constrain(0.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 50.5d, 10974.5d);
        double double11 = range10.getLowerBound();
        double double12 = range10.getUpperBound();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-828.0d) + "'", double7 == (-828.0d));
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 50466.0d + "'", double11 == 50466.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.093143E7d) + "'", double12 == (-1.093143E7d));
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 10.0f);
        double double3 = range2.getLowerBound();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-449.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range5, 6553.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, 45.0d, true);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range10, (-818.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, 7.75d);
        org.junit.Assert.assertNotNull(range2);
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (double) (short) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range5, 0.0d, true);
        double double9 = range5.getLowerBound();
        double double10 = range5.getLowerBound();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range5, (-345.0d), true);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (-4.0d));
        org.jfree.data.Range range19 = org.jfree.data.Range.combine(range13, range16);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-9.0d) + "'", double9 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9.0d) + "'", double10 == (-9.0d));
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range19);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, (-1.0d), (double) (byte) 100);
        boolean boolean31 = range28.intersects((double) (byte) 10, 10.0d);
        boolean boolean32 = range18.equals((java.lang.Object) boolean31);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range18, (double) (byte) 100, false);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range18, 100.0d, (-0.5d));
        java.lang.String str39 = range38.toString();
        double double40 = range38.getLowerBound();
        org.jfree.data.Range range43 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range43, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range43, (double) 10.0f, false);
        boolean boolean51 = range49.contains((double) 1L);
        double double52 = range49.getUpperBound();
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range38, range49);
        boolean boolean55 = range38.contains((-30636.0d));
        org.jfree.data.Range range58 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range58, (double) 10L);
        org.jfree.data.Range range61 = org.jfree.data.Range.combine(range38, range58);
        java.lang.String str62 = range38.toString();
        java.lang.String str63 = range38.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Range[10999.0,44.5]" + "'", str39, "Range[10999.0,44.5]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10999.0d + "'", double40 == 10999.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 11.0d + "'", double52 == 11.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Range[10999.0,44.5]" + "'", str62, "Range[10999.0,44.5]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Range[10999.0,44.5]" + "'", str63, "Range[10999.0,44.5]");
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range2, 50.5d, (double) 0L);
        double double15 = range14.getLowerBound();
        double double16 = range14.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 464.5d + "'", double15 == 464.5d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 10.0f, false);
        boolean boolean10 = range8.contains((double) 1L);
        double double12 = range8.constrain((double) (short) 0);
        java.lang.String str13 = range8.toString();
        double double14 = range8.getUpperBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range8, (double) 1L);
        double double17 = range8.getLowerBound();
        org.jfree.data.Range range20 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        double double21 = range20.getCentralValue();
        org.jfree.data.Range range24 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double25 = range24.getLength();
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range24, 1.0d, true);
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range20, range28);
        org.jfree.data.Range range30 = org.jfree.data.Range.combine(range8, range29);
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range29, 71.0d);
        double double33 = range32.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 20.0d + "'", double12 == 20.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[20.0,11.0]" + "'", str13, "Range[20.0,11.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 11.0d + "'", double14 == 11.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 20.0d + "'", double17 == 20.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-0.5d) + "'", double21 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-9.0d) + "'", double25 == (-9.0d));
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 37189.0d);
        double double3 = range2.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 37189.0d + "'", double3 == 37189.0d);
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) (short) -1);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double7 = range6.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range6, (double) (short) 100);
        org.jfree.data.Range range10 = org.jfree.data.Range.combine(range2, range9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, (-1.0d), (double) (byte) 100);
        boolean boolean19 = range13.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range13, (-9.0d), (double) 100L);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) 1);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range22, (double) (short) -1, false);
        boolean boolean28 = range10.equals((java.lang.Object) range27);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range10, 11045.5d, true);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.5d) + "'", double3 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9.0d) + "'", double7 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range31);
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        org.jfree.data.Range range0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range3 = org.jfree.data.Range.shift(range0, 37189.0d, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 100, 11.0d);
        boolean boolean4 = range2.equals((java.lang.Object) (-485.0d));
        boolean boolean7 = range2.intersects((double) 10.0f, 99.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, (double) (byte) 100, (-331.75d));
        double double11 = range2.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range2, (-822.5d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-89.0d) + "'", double11 == (-89.0d));
        org.junit.Assert.assertNotNull(range13);
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10995.5d, (-495.75d));
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        java.lang.String str6 = range5.toString();
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double10 = range9.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range9, 1.0d, true);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (-10.0d));
        boolean boolean19 = range9.equals((java.lang.Object) range18);
        double double20 = range18.getCentralValue();
        org.jfree.data.Range range21 = org.jfree.data.Range.combine(range5, range18);
        double double22 = range18.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[1.0,-899.0]" + "'", str6, "Range[1.0,-899.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9.0d) + "'", double10 == (-9.0d));
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 45.0d + "'", double20 == 45.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 45.0d + "'", double22 == 45.0d);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double7 = range6.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range6, 1.0d, true);
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, 10984.5d);
        double double15 = range13.constrain(484.0d);
        boolean boolean18 = range13.intersects((-13733.0d), 1907.25d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.5d) + "'", double3 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9.0d) + "'", double7 == (-9.0d));
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10995.5d + "'", double15 == 10995.5d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10L, (double) (-1L));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 742645.0d, 5.5d);
        double double6 = range5.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-8169166.5d) + "'", double6 == (-8169166.5d));
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, (-10.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range5, range8);
        java.lang.String str12 = range11.toString();
        org.jfree.data.Range range15 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        java.lang.String str16 = range15.toString();
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double20 = range19.getLength();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range19, (-109.0d));
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range22, (-71.0d), (-828.0d));
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range25, (double) 100L);
        double double28 = range27.getLength();
        double double30 = range27.constrain(50.5d);
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range15, range27);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range31, (-449.0d));
        boolean boolean34 = range11.equals((java.lang.Object) (-449.0d));
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range11, (double) (byte) -1, 0.0d);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range37, (double) (-1.0f));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Range[1.0,100.0]" + "'", str12, "Range[1.0,100.0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Range[10.0,100.0]" + "'", str16, "Range[10.0,100.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-9.0d) + "'", double20 == (-9.0d));
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range39);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 10, (-9.0d));
        java.lang.Class<?> wildcardClass3 = range2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-109.0d));
        double double6 = range5.getLength();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        java.lang.String str18 = range11.toString();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range11, 0.0d);
        double double21 = range20.getLowerBound();
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range20, (-4914.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[-71.0,-899.0]" + "'", str18, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-71.0d) + "'", double21 == (-71.0d));
        org.junit.Assert.assertNotNull(range23);
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, (-1.0d), (double) (byte) 100);
        boolean boolean31 = range28.intersects((double) (byte) 10, 10.0d);
        boolean boolean32 = range18.equals((java.lang.Object) boolean31);
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range18, (double) (byte) 100, false);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range18, 100.0d, (-0.5d));
        boolean boolean41 = range38.intersects((-484.0d), 50.5d);
        double double42 = range38.getLength();
        boolean boolean45 = range38.intersects((-71.0d), 91.0d);
        double double46 = range38.getUpperBound();
        boolean boolean48 = range38.contains((-1.5d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-10954.5d) + "'", double42 == (-10954.5d));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 44.5d + "'", double46 == 44.5d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-942.0d), (double) 100L);
        java.lang.String str3 = range2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Range[-942.0,100.0]" + "'", str3, "Range[-942.0,100.0]");
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 10.0d, false);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (-10.0d), false);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range10, 107.25d, (double) 1);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range10, 6553.0d, 0.0d);
        double double17 = range10.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range5, 5.5d);
        boolean boolean9 = range5.equals((java.lang.Object) 171.0d);
        boolean boolean12 = range5.intersects((-893.5d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range5, 0.0d);
        org.jfree.data.Range range17 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range17, (double) 10L);
        double double20 = range17.getLowerBound();
        double double21 = range17.getCentralValue();
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range17, (-485.0d), (-449.0d));
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double28 = range27.getLength();
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range24, range27);
        double double31 = range24.constrain((double) 'a');
        double double32 = range24.getLowerBound();
        org.jfree.data.Range range33 = org.jfree.data.Range.combine(range14, range24);
        org.jfree.data.Range range36 = org.jfree.data.Range.expand(range24, 0.0d, (-818.0d));
        double double37 = range24.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-0.5d) + "'", double21 == (-0.5d));
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-9.0d) + "'", double28 == (-9.0d));
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-449.0d) + "'", double31 == (-449.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 484.0d + "'", double32 == 484.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 484.0d + "'", double37 == 484.0d);
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, (-10.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range5, range8);
        double double12 = range11.getLowerBound();
        boolean boolean15 = range11.intersects((-893.5d), 61.0d);
        org.jfree.data.Range range18 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range18, (-1.0d), (double) (byte) 100);
        boolean boolean24 = range18.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range18, (-9.0d), (double) 100L);
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range27, 5.5d);
        org.jfree.data.Range range32 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double33 = range32.getLength();
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range32, 1.0d, true);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range39, (-10.0d));
        boolean boolean42 = range32.equals((java.lang.Object) range41);
        boolean boolean43 = range27.equals((java.lang.Object) range41);
        double double44 = range27.getCentralValue();
        double double45 = range27.getLength();
        org.jfree.data.Range range46 = org.jfree.data.Range.combine(range11, range27);
        double double47 = range27.getLength();
        double double48 = range27.getUpperBound();
        java.lang.String str49 = range27.toString();
        boolean boolean51 = range27.contains(5.5d);
        double double53 = range27.constrain((-72.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-9.0d) + "'", double33 == (-9.0d));
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-485.0d) + "'", double44 == (-485.0d));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-828.0d) + "'", double45 == (-828.0d));
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-828.0d) + "'", double47 == (-828.0d));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-899.0d) + "'", double48 == (-899.0d));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Range[-71.0,-899.0]" + "'", str49, "Range[-71.0,-899.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-899.0d) + "'", double53 == (-899.0d));
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) -1, 15.5d);
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-0.5d), false);
        double double6 = range2.getCentralValue();
        double double7 = range2.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 7.25d + "'", double6 == 7.25d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 16.5d + "'", double7 == 16.5d);
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        org.jfree.data.Range range7 = new org.jfree.data.Range(100.0d, (-9.0d));
        double double8 = range7.getUpperBound();
        org.jfree.data.Range range9 = org.jfree.data.Range.combine(range2, range7);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range9, (double) (-1), false);
        double double14 = range12.constrain((-900.0d));
        boolean boolean17 = range12.intersects((double) (byte) 1, 37189.0d);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range12, 5.0d);
        java.lang.Class<?> wildcardClass20 = range19.getClass();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-9.0d) + "'", double8 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 99.0d + "'", double14 == 99.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range2.getLowerBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        boolean boolean22 = range16.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, (-9.0d), (double) 100L);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (double) 1);
        org.jfree.data.Range range30 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (byte) -1);
        boolean boolean35 = range32.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range25, range32);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range42.intersects((double) (byte) 10, 10.0d);
        boolean boolean46 = range32.equals((java.lang.Object) boolean45);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range32, (double) (byte) 100, false);
        boolean boolean50 = range2.equals((java.lang.Object) range49);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range2, 0.0d, false);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range53, (double) 'a', true);
        double double57 = range53.getUpperBound();
        boolean boolean59 = range53.contains((double) (byte) 0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        org.jfree.data.Range range2 = new org.jfree.data.Range(168.0d, (-828.0d));
        double double3 = range2.getLowerBound();
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range2, 89.875d, 587466.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 168.0d + "'", double3 == 168.0d);
        org.junit.Assert.assertNotNull(range6);
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        boolean boolean4 = range2.equals((java.lang.Object) 100L);
        double double5 = range2.getLowerBound();
        java.lang.String str6 = range2.toString();
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double10 = range9.getLength();
        double double11 = range9.getLowerBound();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range9, 5.5d);
        boolean boolean14 = range2.equals((java.lang.Object) range13);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, (-83.5d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Range[10.0,100.0]" + "'", str6, "Range[10.0,100.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9.0d) + "'", double10 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(range16);
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        double double18 = range11.getLength();
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 10.0f, (double) 10.0f);
        boolean boolean22 = range11.equals((java.lang.Object) 10.0f);
        double double23 = range11.getUpperBound();
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range11, 0.0d);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range11, (-846.375d), (-0.5d));
        double double30 = range11.constrain(5580.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-828.0d) + "'", double18 == (-828.0d));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-899.0d) + "'", double23 == (-899.0d));
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-899.0d) + "'", double30 == (-899.0d));
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range3, (-1.0d), (double) (byte) 100);
        boolean boolean9 = range3.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range3, (-9.0d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, 5.5d);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, 5.5d, (double) 10.0f);
        boolean boolean19 = range14.contains((double) (byte) -1);
        org.jfree.data.Range range20 = org.jfree.data.Range.combine(range0, range14);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (-1.0d), (double) (byte) 100);
        boolean boolean29 = range23.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range23, (-9.0d), (double) 100L);
        double double34 = range32.constrain(1.0d);
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range32, (double) (byte) 100);
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) 'a');
        java.lang.String str39 = range32.toString();
        java.lang.String str40 = range32.toString();
        org.jfree.data.Range range43 = new org.jfree.data.Range((-10.0d), (double) '4');
        boolean boolean45 = range43.contains((double) 'a');
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range43, (double) (byte) 0);
        org.jfree.data.Range range49 = org.jfree.data.Range.expandToInclude(range43, (double) 0L);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range49, (double) (byte) -1, true);
        boolean boolean53 = range32.equals((java.lang.Object) (byte) -1);
        org.jfree.data.Range range54 = org.jfree.data.Range.combine(range20, range32);
        org.jfree.data.Range range57 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range60 = org.jfree.data.Range.expand(range57, (-1.0d), (double) (byte) 100);
        boolean boolean63 = range57.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range66 = org.jfree.data.Range.expand(range57, (-9.0d), (double) 100L);
        double double68 = range66.constrain(1.0d);
        org.jfree.data.Range range70 = org.jfree.data.Range.shift(range66, (double) (byte) 100);
        org.jfree.data.Range range72 = org.jfree.data.Range.expandToInclude(range66, (double) 'a');
        double double73 = range66.getLength();
        java.lang.String str74 = range66.toString();
        java.lang.String str75 = range66.toString();
        org.jfree.data.Range range76 = org.jfree.data.Range.combine(range20, range66);
        boolean boolean79 = range20.intersects(55.0d, 11019.5d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-899.0d) + "'", double34 == (-899.0d));
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Range[-71.0,-899.0]" + "'", str39, "Range[-71.0,-899.0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Range[-71.0,-899.0]" + "'", str40, "Range[-71.0,-899.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-899.0d) + "'", double68 == (-899.0d));
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-828.0d) + "'", double73 == (-828.0d));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Range[-71.0,-899.0]" + "'", str74, "Range[-71.0,-899.0]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Range[-71.0,-899.0]" + "'", str75, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 'a', 10999.0d);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-4.0d), (-9.0d));
        double double6 = range5.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-87119.0d) + "'", double6 == (-87119.0d));
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 'a', 10999.0d);
        boolean boolean4 = range2.contains(101.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        boolean boolean15 = range11.equals((java.lang.Object) '4');
        java.lang.String str16 = range11.toString();
        double double17 = range11.getLowerBound();
        boolean boolean19 = range11.contains(494.0d);
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 0.0f, 37189.0d);
        org.jfree.data.Range range23 = org.jfree.data.Range.combine(range11, range22);
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range22, 5549.5d, true);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Range[-71.0,-899.0]" + "'", str16, "Range[-71.0,-899.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-71.0d) + "'", double17 == (-71.0d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range15, (double) (byte) -1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range17, (-799.0d));
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range22, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range22, 0.0d);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range27, (-900.0d), true);
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range27, (-4.0d));
        boolean boolean33 = range17.equals((java.lang.Object) range32);
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range32, 91.0d, false);
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) (-1L));
        org.jfree.data.Range range41 = org.jfree.data.Range.expand(range38, 10974.5d, (-161858.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        java.lang.String str3 = range2.toString();
        org.jfree.data.Range range6 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double7 = range6.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range6, (-109.0d));
        org.jfree.data.Range range12 = org.jfree.data.Range.expand(range9, (-71.0d), (-828.0d));
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range12, (double) 100L);
        double double15 = range14.getLength();
        double double17 = range14.constrain(50.5d);
        org.jfree.data.Range range18 = org.jfree.data.Range.combine(range2, range14);
        double double19 = range14.getLength();
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range22, (-1.0d), (double) (byte) 100);
        java.lang.String str26 = range25.toString();
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double30 = range29.getLength();
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range29, 1.0d, true);
        org.jfree.data.Range range36 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range36, (-10.0d));
        boolean boolean39 = range29.equals((java.lang.Object) range38);
        double double40 = range38.getCentralValue();
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range25, range38);
        org.jfree.data.Range range44 = org.jfree.data.Range.expand(range41, 45.0d, (double) '#');
        org.jfree.data.Range range47 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range47, (-1.0d), (double) (byte) 100);
        boolean boolean53 = range47.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range56 = org.jfree.data.Range.expand(range47, (-9.0d), (double) 100L);
        double double58 = range56.constrain(1.0d);
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range56, (double) (byte) 100);
        org.jfree.data.Range range62 = org.jfree.data.Range.expandToInclude(range56, (double) 'a');
        org.jfree.data.Range range63 = org.jfree.data.Range.combine(range44, range62);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range62, (-71.0d), true);
        boolean boolean67 = range14.equals((java.lang.Object) (-71.0d));
        double double68 = range14.getLength();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Range[10.0,100.0]" + "'", str3, "Range[10.0,100.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9.0d) + "'", double7 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Range[1.0,-899.0]" + "'", str26, "Range[1.0,-899.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-9.0d) + "'", double30 == (-9.0d));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 45.0d + "'", double40 == 45.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-899.0d) + "'", double58 == (-899.0d));
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-28764.0d), (-10954.5d));
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        double double6 = range4.constrain((double) 0L);
        boolean boolean8 = range4.contains(168.0d);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range11, (-109.0d));
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, (-10.0d));
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range20, range23);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range29, (-1.0d), (double) (byte) 100);
        boolean boolean35 = range29.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range29, (-9.0d), (double) 100L);
        double double40 = range38.constrain(1.0d);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range26, range38);
        boolean boolean42 = range14.equals((java.lang.Object) range26);
        boolean boolean44 = range26.contains((-485.0d));
        boolean boolean45 = range4.equals((java.lang.Object) (-485.0d));
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range4, (double) 100L);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range47, (-393443.0d));
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range47, 0.0d, false);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-10.0d) + "'", double6 == (-10.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9.0d) + "'", double12 == (-9.0d));
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-899.0d) + "'", double40 == (-899.0d));
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range52);
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        java.lang.String str18 = range11.toString();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range11, 0.0d);
        double double21 = range20.getLowerBound();
        boolean boolean23 = range20.contains((-828.0d));
        java.lang.String str24 = range20.toString();
        java.lang.Class<?> wildcardClass25 = range20.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[-71.0,-899.0]" + "'", str18, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-71.0d) + "'", double21 == (-71.0d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Range[-71.0,0.0]" + "'", str24, "Range[-71.0,0.0]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        org.jfree.data.Range range2 = new org.jfree.data.Range(10999.0d, (double) 100.0f);
        boolean boolean5 = range2.intersects(6553.0d, (double) 'a');
        boolean boolean8 = range2.intersects((-828.0d), 55.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, (-30636.0d));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range10);
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 0.0f);
        java.lang.String str9 = range8.toString();
        java.lang.String str10 = range8.toString();
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range8, (-414.0d), (-36810.0d));
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range13, 10984.5d);
        java.lang.Class<?> wildcardClass16 = range15.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[10.0,1.0]" + "'", str9, "Range[10.0,1.0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Range[10.0,1.0]" + "'", str10, "Range[10.0,1.0]");
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        boolean boolean15 = range11.equals((java.lang.Object) '4');
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range11, 61.0d, false);
        double double19 = range11.getCentralValue();
        double double20 = range11.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-485.0d) + "'", double19 == (-485.0d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-828.0d) + "'", double20 == (-828.0d));
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 10.0f);
        double double3 = range2.getUpperBound();
        double double5 = range2.constrain((-1.0d));
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range8, (-1.0d), (double) (byte) 100);
        boolean boolean14 = range8.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range8, (-9.0d), (double) 100L);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range17, 5.5d);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range19, 5.5d, (double) 10.0f);
        boolean boolean24 = range19.contains((double) (byte) -1);
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double28 = range27.getLength();
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range27, (-109.0d));
        double double31 = range27.getCentralValue();
        boolean boolean32 = range19.equals((java.lang.Object) double31);
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range19, (-893.5d));
        org.jfree.data.Range range37 = org.jfree.data.Range.expand(range34, 45.5d, (-345.0d));
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range2, range37);
        double double40 = range38.constrain(199.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-9.0d) + "'", double28 == (-9.0d));
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5.5d + "'", double31 == 5.5d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 199.0d + "'", double40 == 199.0d);
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range11.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) 100L);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 1L);
        boolean boolean19 = range17.contains((-13662.0d));
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range17, (double) (byte) 10);
        boolean boolean23 = range21.contains((-893.5d));
        boolean boolean26 = range21.intersects(1100899.0d, (-41.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 45.0d + "'", double13 == 45.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range11, 5.5d);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, 5.5d, (double) 10.0f);
        boolean boolean18 = range13.contains((double) (byte) -1);
        boolean boolean21 = range13.intersects((double) 1, (-109.0d));
        java.lang.String str22 = range13.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Range[-65.5,-893.5]" + "'", str22, "Range[-65.5,-893.5]");
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 10.0d, false);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (-10.0d), false);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, 0.0d, true);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, 0.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, 1866.25d, true);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        org.jfree.data.Range range2 = new org.jfree.data.Range(99.0d, 0.0d);
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        double double6 = range4.constrain((double) 0L);
        boolean boolean8 = range4.contains(168.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range4, 0.0d, 91.0d);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range11, (double) (short) 1, false);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range11, 55.0d);
        double double17 = range16.getLength();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-10.0d) + "'", double6 == (-10.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-10028.0d) + "'", double17 == (-10028.0d));
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        boolean boolean4 = range2.equals((java.lang.Object) 100L);
        org.jfree.data.Range range7 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range7, (-1.0d), (double) (byte) 100);
        boolean boolean13 = range10.intersects((double) (byte) 10, 10.0d);
        java.lang.String str14 = range10.toString();
        org.jfree.data.Range range15 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range10, range16);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, 99.5d, 0.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Range[1.0,-899.0]" + "'", str14, "Range[1.0,-899.0]");
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (-10.0d));
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range4, (double) 0);
        double double7 = range4.getLength();
        double double8 = range4.getLength();
        double double9 = range4.getLength();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 90.0d + "'", double7 == 90.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 90.0d + "'", double8 == 90.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 90.0d + "'", double9 == 90.0d);
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 10.0d, false);
        double double9 = range7.constrain((double) 10);
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range7, 0.0d);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (double) (-1.0f), 10999.0d);
        org.jfree.data.Range range17 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range19 = org.jfree.data.Range.shift(range17, (double) 10L);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range19, (-9.0d), true);
        double double23 = range19.getCentralValue();
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range19, (-1.0d), (-71.0d));
        boolean boolean27 = range11.equals((java.lang.Object) range19);
        double double29 = range19.constrain(11.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 20.0d + "'", double9 == 20.0d);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 5.0d + "'", double23 == 5.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 10.0f, false);
        boolean boolean10 = range8.contains((double) 1L);
        double double12 = range8.constrain((double) (byte) 0);
        double double13 = range8.getLength();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        boolean boolean18 = range16.equals((java.lang.Object) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, (-1.0d), (double) (byte) 100);
        boolean boolean27 = range24.intersects((double) (byte) 10, 10.0d);
        java.lang.String str28 = range24.toString();
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range16, range24);
        boolean boolean30 = range8.equals((java.lang.Object) range24);
        org.jfree.data.Range range31 = null;
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range8, range31);
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range8, (double) (byte) 10);
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range34, 5930.5d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 20.0d + "'", double12 == 20.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9.0d) + "'", double13 == (-9.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[1.0,-899.0]" + "'", str28, "Range[1.0,-899.0]");
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range36);
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, (-1.0d), (double) (byte) 100);
        boolean boolean31 = range25.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range25, (-9.0d), (double) 100L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range22, range25);
        double double36 = range35.getCentralValue();
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range39.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range39, (-9.0d), (double) 100L);
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range48, (double) 1);
        boolean boolean52 = range48.equals((java.lang.Object) '4');
        java.lang.String str53 = range48.toString();
        double double54 = range48.getLowerBound();
        org.jfree.data.Range range57 = org.jfree.data.Range.shift(range48, (-9137.5d), false);
        org.jfree.data.Range range58 = org.jfree.data.Range.combine(range35, range57);
        double double60 = range58.constrain((double) 0.0f);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-35.0d) + "'", double36 == (-35.0d));
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Range[-71.0,-899.0]" + "'", str53, "Range[-71.0,-899.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-71.0d) + "'", double54 == (-71.0d));
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        org.jfree.data.Range range2 = new org.jfree.data.Range(1.0d, (-37118.0d));
        org.jfree.data.Range range5 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range5, (double) 10.0f, false);
        boolean boolean13 = range11.contains((double) 1L);
        double double15 = range11.constrain((double) (byte) 0);
        double double16 = range11.getLength();
        boolean boolean17 = range2.equals((java.lang.Object) double16);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range20, (-10.0d));
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range22, (double) 0);
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range2, range24);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range2, 2.5d, (-1.0d));
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 20.0d + "'", double15 == 20.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-9.0d) + "'", double16 == (-9.0d));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-109.0d));
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (-71.0d), (-828.0d));
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, (double) 100L);
        double double11 = range8.getLowerBound();
        double double13 = range8.constrain((-9137.5d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range5, 5.5d);
        boolean boolean9 = range5.equals((java.lang.Object) 171.0d);
        boolean boolean12 = range5.intersects((-893.5d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range5, 0.0d);
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (-1.0d), (double) (byte) 100);
        boolean boolean29 = range23.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range23, (-9.0d), (double) 100L);
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range32, 5.5d);
        double double36 = range32.constrain((double) (short) 1);
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) 1);
        boolean boolean41 = range32.intersects(1.0d, (double) (-1));
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range32, (-485.0d));
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range20, range32);
        double double45 = range44.getCentralValue();
        org.jfree.data.Range range46 = org.jfree.data.Range.combine(range14, range44);
        java.lang.String str47 = range14.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-899.0d) + "'", double36 == (-899.0d));
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-485.0d) + "'", double45 == (-485.0d));
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Range[0.0,91.0]" + "'", str47, "Range[0.0,91.0]");
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        double double6 = range4.constrain((double) 0L);
        boolean boolean8 = range4.contains(168.0d);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range11, (-109.0d));
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, (-10.0d));
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range20, range23);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range29, (-1.0d), (double) (byte) 100);
        boolean boolean35 = range29.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range29, (-9.0d), (double) 100L);
        double double40 = range38.constrain(1.0d);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range26, range38);
        boolean boolean42 = range14.equals((java.lang.Object) range26);
        boolean boolean44 = range26.contains((-485.0d));
        boolean boolean45 = range4.equals((java.lang.Object) (-485.0d));
        double double46 = range4.getCentralValue();
        double double47 = range4.getLength();
        org.jfree.data.Range range50 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range53 = org.jfree.data.Range.expand(range50, (-1.0d), (double) (byte) 100);
        boolean boolean56 = range50.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range50, (-9.0d), (double) 100L);
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range59, (double) 1);
        org.jfree.data.Range range64 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range64, (double) (byte) -1);
        boolean boolean69 = range66.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range70 = org.jfree.data.Range.combine(range59, range66);
        org.jfree.data.Range range73 = org.jfree.data.Range.shift(range59, (double) (short) -1, false);
        org.jfree.data.Range range76 = org.jfree.data.Range.shift(range59, (double) 100, true);
        org.jfree.data.Range range77 = org.jfree.data.Range.combine(range4, range76);
        double double78 = range76.getLength();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-10.0d) + "'", double6 == (-10.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9.0d) + "'", double12 == (-9.0d));
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-899.0d) + "'", double40 == (-899.0d));
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 44.5d + "'", double46 == 44.5d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-109.0d) + "'", double47 == (-109.0d));
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-828.0d) + "'", double78 == (-828.0d));
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-109.0d));
        double double6 = range2.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range2, 0.0d, true);
        org.jfree.data.Range range12 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range15 = org.jfree.data.Range.expand(range12, (-1.0d), (double) (byte) 100);
        boolean boolean18 = range12.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range21 = org.jfree.data.Range.expand(range12, (-9.0d), (double) 100L);
        double double23 = range21.constrain(1.0d);
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range21, (double) (byte) 100, true);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range2, range26);
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range27, 104.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9.0d) + "'", double6 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-899.0d) + "'", double23 == (-899.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range5, 5.5d);
        boolean boolean9 = range5.equals((java.lang.Object) 171.0d);
        double double10 = range5.getLowerBound();
        boolean boolean13 = range5.intersects((-1.0d), 21871.0d);
        boolean boolean16 = range5.intersects(494.0d, (-27965.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range2.getLowerBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        boolean boolean22 = range16.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, (-9.0d), (double) 100L);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (double) 1);
        org.jfree.data.Range range30 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (byte) -1);
        boolean boolean35 = range32.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range25, range32);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range42.intersects((double) (byte) 10, 10.0d);
        boolean boolean46 = range32.equals((java.lang.Object) boolean45);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range32, (double) (byte) 100, false);
        boolean boolean50 = range2.equals((java.lang.Object) range49);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range2, 0.0d, false);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range53, (double) 'a', true);
        double double57 = range53.getUpperBound();
        boolean boolean60 = range53.intersects(17.5d, 55.0d);
        org.jfree.data.Range range63 = org.jfree.data.Range.shift(range53, (double) 0, false);
        org.jfree.data.Range range66 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double67 = range66.getLength();
        org.jfree.data.Range range69 = org.jfree.data.Range.shift(range66, (-109.0d));
        boolean boolean71 = range66.contains(1.0d);
        org.jfree.data.Range range74 = org.jfree.data.Range.shift(range66, (-828.0d), true);
        double double75 = range74.getLength();
        org.jfree.data.Range range77 = org.jfree.data.Range.expandToInclude(range74, (-485.0d));
        org.jfree.data.Range range79 = org.jfree.data.Range.expandToInclude(range77, 17.5d);
        double double81 = range77.constrain((double) (byte) 0);
        org.jfree.data.Range range82 = org.jfree.data.Range.combine(range63, range77);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-9.0d) + "'", double67 == (-9.0d));
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-9.0d) + "'", double75 == (-9.0d));
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-485.0d) + "'", double81 == (-485.0d));
        org.junit.Assert.assertNotNull(range82);
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        java.lang.String str18 = range11.toString();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range11, 0.0d);
        double double21 = range11.getUpperBound();
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range11, (double) 1L);
        boolean boolean26 = range23.intersects(5549.5d, 0.0d);
        double double27 = range23.getCentralValue();
        java.lang.String str28 = range23.toString();
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range23, 104.5d);
        boolean boolean33 = range23.intersects((-818.0d), 104.5d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[-71.0,-899.0]" + "'", str18, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-899.0d) + "'", double21 == (-899.0d));
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-484.0d) + "'", double27 == (-484.0d));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[-70.0,-898.0]" + "'", str28, "Range[-70.0,-898.0]");
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10, (double) ' ');
        org.jfree.data.Range range4 = org.jfree.data.Range.expandToInclude(range2, 101.0d);
        org.junit.Assert.assertNotNull(range4);
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 45.0d, (-9.0d));
        double double16 = range14.constrain(0.0d);
        java.lang.String str17 = range14.toString();
        boolean boolean20 = range14.intersects((-4.75d), 32.0d);
        boolean boolean22 = range14.contains((-72.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 37189.0d + "'", double16 == 37189.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Range[37189.0,6553.0]" + "'", str17, "Range[37189.0,6553.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        org.jfree.data.Range range2 = new org.jfree.data.Range(5.5d, (double) 10.0f);
        double double3 = range2.getLowerBound();
        double double4 = range2.getCentralValue();
        org.jfree.data.Range range7 = org.jfree.data.Range.expand(range2, 101.0d, 18595.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (-3825.0d), false);
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range10, (-2412.5d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 5.5d + "'", double3 == 5.5d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 7.75d + "'", double4 == 7.75d);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range12);
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, (-799.0d));
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range6, 102.0d, true);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range9);
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 0.0d);
        double double3 = range2.getLowerBound();
        boolean boolean6 = range2.intersects((-9.0d), (double) ' ');
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) 1L);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range8, 45.0d, false);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range8, (double) (short) 10);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range11, (double) 1.0f, false);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range26, 5.5d);
        boolean boolean30 = range26.equals((java.lang.Object) 171.0d);
        boolean boolean33 = range26.intersects((-893.5d), (double) 100L);
        double double35 = range26.constrain(1.0d);
        boolean boolean36 = range20.equals((java.lang.Object) range26);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range39.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range39, (-9.0d), (double) 100L);
        double double50 = range48.constrain(1.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range48, (double) (byte) 100);
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range48, (double) 'a');
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range48, (-1.0d), (-9.0d));
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range48, 0.0d, true);
        org.jfree.data.Range range62 = org.jfree.data.Range.expandToInclude(range48, (double) (short) 1);
        boolean boolean63 = range20.equals((java.lang.Object) range48);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range20, (-2342.5d), true);
        double double68 = range66.constrain(100.0d);
        org.jfree.data.Range range70 = org.jfree.data.Range.expandToInclude(range66, 18630.0d);
        org.jfree.data.Range range72 = org.jfree.data.Range.expandToInclude(range66, (-385.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-899.0d) + "'", double50 == (-899.0d));
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-3240.5d) + "'", double68 == (-3240.5d));
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range72);
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range11.getCentralValue();
        double double14 = range11.getCentralValue();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range11, (-818.0d));
        boolean boolean18 = range16.contains(7.75d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 45.0d + "'", double13 == 45.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 45.0d + "'", double14 == 45.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) (short) -1);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double7 = range6.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range6, (double) (short) 100);
        org.jfree.data.Range range10 = org.jfree.data.Range.combine(range2, range9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range16 = org.jfree.data.Range.expand(range13, (-1.0d), (double) (byte) 100);
        boolean boolean19 = range13.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range22 = org.jfree.data.Range.expand(range13, (-9.0d), (double) 100L);
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) 1);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range22, (double) (short) -1, false);
        boolean boolean28 = range10.equals((java.lang.Object) range27);
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range27, 0.0d);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range27, 18630.0d, 18595.0d);
        double double35 = range33.constrain((-83.5d));
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range33, 104.5d);
        boolean boolean39 = range33.contains(2305.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.5d) + "'", double3 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9.0d) + "'", double7 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.539756E7d) + "'", double35 == (-1.539756E7d));
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, 45.0d, (-9.0d));
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range11, (-1.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (-41.0d));
        double double19 = range16.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-900.0d) + "'", double19 == (-900.0d));
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        org.jfree.data.Range range2 = new org.jfree.data.Range(168.0d, (-828.0d));
        boolean boolean5 = range2.intersects((double) 100.0f, 90.0d);
        double double7 = range2.constrain(0.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range2, 50.5d, 10974.5d);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, (-35.0d), false);
        double double14 = range13.getUpperBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range13, 0.0d);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, 0.5d, 20.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-828.0d) + "'", double7 == (-828.0d));
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0931465E7d) + "'", double14 == (-1.0931465E7d));
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 10.0d, false);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (-10.0d), false);
        boolean boolean12 = range10.contains((double) (byte) 1);
        double double13 = range10.getLowerBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        double double18 = range11.getLength();
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 10.0f, (double) 10.0f);
        boolean boolean22 = range11.equals((java.lang.Object) 10.0f);
        double double23 = range11.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-828.0d) + "'", double18 == (-828.0d));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-828.0d) + "'", double23 == (-828.0d));
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        org.jfree.data.Range range2 = new org.jfree.data.Range(48.5d, 15.5d);
        double double3 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 15.5d + "'", double3 == 15.5d);
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10, 4488.5d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (-882.5d));
        boolean boolean6 = range2.contains((-161858.0d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10L);
        org.jfree.data.Range range7 = org.jfree.data.Range.expand(range2, 44.5d, (-799.0d));
        org.jfree.data.Range range10 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (double) (short) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range2, 743473.0d);
        boolean boolean19 = range2.intersects(20320.25d, 62.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9.0d) + "'", double11 == (-9.0d));
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (-10.0d));
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range4, (double) 0);
        double double7 = range4.getLength();
        boolean boolean10 = range4.intersects((-899.0d), 90.0d);
        java.lang.String str11 = range4.toString();
        boolean boolean13 = range4.contains((-828.0d));
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        boolean boolean22 = range16.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, (-9.0d), (double) 100L);
        double double27 = range25.constrain(1.0d);
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range25, (double) (byte) 100);
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range25, (double) 'a');
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range25, (-1.0d), (-9.0d));
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range34, 0.0d);
        org.jfree.data.Range range39 = new org.jfree.data.Range(171.0d, (double) (byte) 1);
        boolean boolean40 = range34.equals((java.lang.Object) range39);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range4, range39);
        boolean boolean44 = range39.intersects(10989.0d, 46.0d);
        double double45 = range39.getUpperBound();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 90.0d + "'", double7 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Range[0.0,90.0]" + "'", str11, "Range[0.0,90.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-899.0d) + "'", double27 == (-899.0d));
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range3, (-1.0d), (double) (byte) 100);
        boolean boolean9 = range3.intersects((double) (byte) -1, (double) (short) -1);
        double double10 = range3.getCentralValue();
        double double11 = range3.getLength();
        org.jfree.data.Range range12 = org.jfree.data.Range.combine(range0, range3);
        double double14 = range3.constrain((double) 100L);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range3, 0.0d, true);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5.5d + "'", double10 == 5.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9.0d) + "'", double11 == (-9.0d));
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(range17);
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        org.jfree.data.Range range2 = new org.jfree.data.Range(5.90028264E8d, 10989.0d);
        double double4 = range2.constrain((double) 0L);
        org.jfree.data.Range range7 = org.jfree.data.Range.expand(range2, (-135.0d), 5.90028264E8d);
        double double8 = range7.getCentralValue();
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range7, (-450.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 5.90028264E8d + "'", double4 == 5.90028264E8d);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.74063473780276736E17d) + "'", double8 == (-1.74063473780276736E17d));
        org.junit.Assert.assertNotNull(range10);
    }

    @Test
    public void test2452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range25, (-1.0d), (double) (byte) 100);
        boolean boolean31 = range25.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range25, (-9.0d), (double) 100L);
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range22, range25);
        boolean boolean38 = range35.intersects(72.0d, (double) 100.0f);
        boolean boolean40 = range35.contains(21871.0d);
        java.lang.String str41 = range35.toString();
        double double42 = range35.getLength();
        double double43 = range35.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Range[-71.0,1.0]" + "'", str41, "Range[-71.0,1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 72.0d + "'", double42 == 72.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 72.0d + "'", double43 == 72.0d);
    }

    @Test
    public void test2453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2453");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range11.getCentralValue();
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) 100L);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 1L);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (-942.0d), (-449.0d));
        double double22 = range17.constrain(18594.5d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 45.0d + "'", double13 == 45.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 90.0d + "'", double22 == 90.0d);
    }

    @Test
    public void test2454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2454");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        boolean boolean7 = range4.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range4, (double) 0.0f);
        double double10 = range9.getUpperBound();
        double double11 = range9.getUpperBound();
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range9, 0.0d, (-26442.5d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-10.0d) + "'", double10 == (-10.0d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-10.0d) + "'", double11 == (-10.0d));
        org.junit.Assert.assertNotNull(range14);
    }

    @Test
    public void test2455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2455");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double7 = range6.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range6, 1.0d, true);
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range2, range10);
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, (-1.0d), (double) (byte) 100);
        boolean boolean20 = range14.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range14, (-9.0d), (double) 100L);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, 45.0d, (-9.0d));
        double double27 = range23.getLength();
        boolean boolean28 = range11.equals((java.lang.Object) range23);
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range23, 743473.0d);
        boolean boolean32 = range23.contains((-700.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.5d) + "'", double3 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9.0d) + "'", double7 == (-9.0d));
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-828.0d) + "'", double27 == (-828.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2456");
        org.jfree.data.Range range2 = new org.jfree.data.Range(765.75d, (double) 100L);
    }

    @Test
    public void test2457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2457");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range5, (double) (byte) -1);
        double double8 = range5.getLowerBound();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range5, (double) 1.0f);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(range10);
    }

    @Test
    public void test2458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2458");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range11, (double) 1.0f, false);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range26, 5.5d);
        boolean boolean30 = range26.equals((java.lang.Object) 171.0d);
        boolean boolean33 = range26.intersects((-893.5d), (double) 100L);
        double double35 = range26.constrain(1.0d);
        boolean boolean36 = range20.equals((java.lang.Object) range26);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range39.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range39, (-9.0d), (double) 100L);
        double double50 = range48.constrain(1.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range48, (double) (byte) 100);
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range48, (double) 'a');
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range48, (-1.0d), (-9.0d));
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range48, 0.0d, true);
        org.jfree.data.Range range62 = org.jfree.data.Range.expandToInclude(range48, (double) (short) 1);
        boolean boolean63 = range20.equals((java.lang.Object) range48);
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range20, (-2342.5d), true);
        org.jfree.data.Range range69 = org.jfree.data.Range.shift(range66, 1.0d, false);
        org.jfree.data.Range range71 = org.jfree.data.Range.shift(range66, 46.0d);
        double double72 = range66.getLength();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-899.0d) + "'", double50 == (-899.0d));
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertNotNull(range71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-828.0d) + "'", double72 == (-828.0d));
    }

    @Test
    public void test2459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range3, (-1.0d), (double) (byte) 100);
        boolean boolean9 = range3.intersects((double) (byte) -1, (double) (short) -1);
        double double10 = range3.getCentralValue();
        double double11 = range3.getLength();
        org.jfree.data.Range range12 = org.jfree.data.Range.combine(range0, range3);
        double double14 = range3.constrain((double) 100L);
        boolean boolean16 = range3.equals((java.lang.Object) "Range[484.0,-449.0]");
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range3, 107.25d);
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range3, 2849.5d);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range23, 0.0d);
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range28, (-900.0d), true);
        java.lang.String str32 = range28.toString();
        double double33 = range28.getUpperBound();
        boolean boolean35 = range28.contains(107.25d);
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range28, 99.0d);
        org.jfree.data.Range range38 = org.jfree.data.Range.combine(range3, range37);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5.5d + "'", double10 == 5.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9.0d) + "'", double11 == (-9.0d));
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Range[10.0,1.0]" + "'", str32, "Range[10.0,1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertNotNull(range38);
    }

    @Test
    public void test2460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2460");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        double double4 = range2.getLowerBound();
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range2, 10.0d, false);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range7, (-10.0d), false);
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range10, 0.0d, true);
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double17 = range16.getLength();
        double double18 = range16.getLowerBound();
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range16, 10.0d, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range21, (-10.0d), false);
        double double25 = range21.getCentralValue();
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range10, range21);
        double double28 = range26.constrain((-1560023.25d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9.0d) + "'", double17 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 15.5d + "'", double25 == 15.5d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
    }

    @Test
    public void test2461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2461");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (double) (short) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range5, 45.0d, true);
        boolean boolean11 = range5.intersects(10989.0d, (double) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range5, 11871.0d, false);
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (-1.0d), (double) (byte) 100);
        boolean boolean23 = range17.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range17, (-9.0d), (double) 100L);
        double double28 = range26.constrain(1.0d);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range26, (double) (byte) 100);
        org.jfree.data.Range range33 = new org.jfree.data.Range((-10.0d), (double) '4');
        boolean boolean34 = range26.equals((java.lang.Object) (-10.0d));
        org.jfree.data.Range range35 = org.jfree.data.Range.combine(range5, range26);
        org.jfree.data.Range range38 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range41 = org.jfree.data.Range.expand(range38, (-1.0d), (double) (byte) 100);
        boolean boolean44 = range38.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range47 = org.jfree.data.Range.expand(range38, (-9.0d), (double) 100L);
        double double49 = range47.constrain(1.0d);
        org.jfree.data.Range range51 = org.jfree.data.Range.shift(range47, (double) (byte) 100);
        org.jfree.data.Range range53 = org.jfree.data.Range.expandToInclude(range47, (double) 'a');
        java.lang.String str54 = range47.toString();
        org.jfree.data.Range range56 = org.jfree.data.Range.expandToInclude(range47, 0.0d);
        double double57 = range56.getLowerBound();
        java.lang.String str58 = range56.toString();
        double double59 = range56.getLength();
        org.jfree.data.Range range61 = org.jfree.data.Range.shift(range56, (double) (byte) 1);
        org.jfree.data.Range range64 = new org.jfree.data.Range(44.5d, (double) 10);
        boolean boolean66 = range64.contains((-828.0d));
        boolean boolean67 = range61.equals((java.lang.Object) range64);
        boolean boolean68 = range26.equals((java.lang.Object) range64);
        java.lang.Class<?> wildcardClass69 = range64.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-899.0d) + "'", double28 == (-899.0d));
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-899.0d) + "'", double49 == (-899.0d));
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Range[-71.0,-899.0]" + "'", str54, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-71.0d) + "'", double57 == (-71.0d));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Range[-71.0,0.0]" + "'", str58, "Range[-71.0,0.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 71.0d + "'", double59 == 71.0d);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2462");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range15, (double) (byte) -1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range17, (-799.0d));
        org.jfree.data.Range range22 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range22, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range22, 0.0d);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range27, (-900.0d), true);
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range27, (-4.0d));
        boolean boolean33 = range17.equals((java.lang.Object) range32);
        org.jfree.data.Range range36 = org.jfree.data.Range.shift(range32, 91.0d, false);
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) (-1L));
        org.jfree.data.Range range41 = org.jfree.data.Range.shift(range32, (-1.0931465E7d), true);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
    }

    @Test
    public void test2463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2463");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 10.0f, false);
        boolean boolean10 = range8.contains((double) 1L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expand(range8, (double) 100, 18630.0d);
        org.jfree.data.Range range16 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) 10L);
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range27, (-10.0d));
        org.jfree.data.Range range30 = org.jfree.data.Range.combine(range24, range27);
        org.jfree.data.Range range33 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range36 = org.jfree.data.Range.expand(range33, (-1.0d), (double) (byte) 100);
        boolean boolean39 = range33.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range33, (-9.0d), (double) 100L);
        double double44 = range42.constrain(1.0d);
        org.jfree.data.Range range45 = org.jfree.data.Range.combine(range30, range42);
        boolean boolean46 = range16.equals((java.lang.Object) range45);
        org.jfree.data.Range range47 = org.jfree.data.Range.combine(range13, range45);
        double double48 = range13.getLowerBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-899.0d) + "'", double44 == (-899.0d));
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 920.0d + "'", double48 == 920.0d);
    }

    @Test
    public void test2464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2464");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range3 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range6 = org.jfree.data.Range.expand(range3, (-1.0d), (double) (byte) 100);
        boolean boolean9 = range3.intersects((double) (byte) -1, (double) (short) -1);
        double double10 = range3.getCentralValue();
        double double11 = range3.getLength();
        org.jfree.data.Range range12 = org.jfree.data.Range.combine(range0, range3);
        double double13 = range3.getLowerBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double17 = range16.getLength();
        double double18 = range16.getLowerBound();
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range16, 10.0d, false);
        org.jfree.data.Range range24 = org.jfree.data.Range.shift(range21, (-10.0d), false);
        org.jfree.data.Range range27 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, (-1.0d), (double) (byte) 100);
        java.lang.String str31 = range30.toString();
        double double32 = range30.getCentralValue();
        org.jfree.data.Range range35 = org.jfree.data.Range.shift(range30, (-0.5d), true);
        java.lang.String str36 = range35.toString();
        boolean boolean37 = range24.equals((java.lang.Object) range35);
        boolean boolean38 = range3.equals((java.lang.Object) boolean37);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 5.5d + "'", double10 == 5.5d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9.0d) + "'", double11 == (-9.0d));
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-9.0d) + "'", double17 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Range[1.0,-899.0]" + "'", str31, "Range[1.0,-899.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-449.0d) + "'", double32 == (-449.0d));
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Range[0.5,-899.5]" + "'", str36, "Range[0.5,-899.5]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2465");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.shift(range11, (double) 1.0f, false);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range26, 5.5d);
        boolean boolean30 = range26.equals((java.lang.Object) 171.0d);
        boolean boolean33 = range26.intersects((-893.5d), (double) 100L);
        double double35 = range26.constrain(1.0d);
        boolean boolean36 = range20.equals((java.lang.Object) range26);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range39.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range39, (-9.0d), (double) 100L);
        double double50 = range48.constrain(1.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range48, (double) (byte) 100);
        org.jfree.data.Range range54 = org.jfree.data.Range.expandToInclude(range48, (double) 'a');
        org.jfree.data.Range range57 = org.jfree.data.Range.expand(range48, (-1.0d), (-9.0d));
        org.jfree.data.Range range60 = org.jfree.data.Range.shift(range48, 0.0d, true);
        org.jfree.data.Range range62 = org.jfree.data.Range.expandToInclude(range48, (double) (short) 1);
        boolean boolean63 = range20.equals((java.lang.Object) range48);
        boolean boolean66 = range20.intersects((-1.5d), 11871.0d);
        java.lang.Class<?> wildcardClass67 = range20.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-899.0d) + "'", double50 == (-899.0d));
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2466");
        org.jfree.data.Range range2 = new org.jfree.data.Range(29.0d, 484.0d);
        double double4 = range2.constrain((-135.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 29.0d + "'", double4 == 29.0d);
    }

    @Test
    public void test2467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2467");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, (-10.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range5, range8);
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, (-1.0d), (double) (byte) 100);
        boolean boolean20 = range14.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range14, (-9.0d), (double) 100L);
        double double25 = range23.constrain(1.0d);
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range11, range23);
        java.lang.String str27 = range11.toString();
        boolean boolean29 = range11.contains((-321401.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-899.0d) + "'", double25 == (-899.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Range[1.0,100.0]" + "'", str27, "Range[1.0,100.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2468");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        java.lang.String str18 = range11.toString();
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range11, 0.0d);
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range11, 6553.0d);
        boolean boolean24 = range22.contains((double) 1L);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Range[-71.0,-899.0]" + "'", str18, "Range[-71.0,-899.0]");
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test2469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2469");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 0.0d);
        double double3 = range2.getLowerBound();
        double double4 = range2.getLowerBound();
        double double5 = range2.getLength();
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range2, 7.25d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(range7);
    }

    @Test
    public void test2470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2470");
        org.jfree.data.Range range2 = new org.jfree.data.Range(11019.5d, (-37118.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, 11.5d);
        boolean boolean7 = range2.intersects(0.0d, (-31328.0d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2471");
        org.jfree.data.Range range2 = new org.jfree.data.Range(199.0d, (-127.0d));
        boolean boolean5 = range2.intersects((-35.5d), 86.0d);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (-479.5d), false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(range8);
    }

    @Test
    public void test2472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2472");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) 10L);
        double double5 = range2.getLowerBound();
        double double6 = range2.getCentralValue();
        org.jfree.data.Range range9 = org.jfree.data.Range.expand(range2, (-485.0d), (-449.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (double) 10.0f);
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, (-1.0d), (double) (byte) 100);
        boolean boolean20 = range14.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range14, (-9.0d), (double) 100L);
        double double25 = range23.constrain(1.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range23, (double) (byte) 100);
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range23, (double) 'a');
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range23, (-1.0d), (-9.0d));
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range32, 0.0d);
        org.jfree.data.Range range37 = new org.jfree.data.Range(171.0d, (double) (byte) 1);
        boolean boolean38 = range32.equals((java.lang.Object) range37);
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range32, 100.0d);
        double double41 = range32.getLowerBound();
        boolean boolean42 = range9.equals((java.lang.Object) double41);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.5d) + "'", double6 == (-0.5d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-899.0d) + "'", double25 == (-899.0d));
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-899.0d) + "'", double41 == (-899.0d));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2473");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        boolean boolean7 = range4.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range9 = org.jfree.data.Range.shift(range4, (double) 0.0f);
        double double10 = range4.getUpperBound();
        boolean boolean12 = range4.contains((-127.0d));
        java.lang.String str13 = range4.toString();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-10.0d) + "'", double10 == (-10.0d));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[99.0,-10.0]" + "'", str13, "Range[99.0,-10.0]");
    }

    @Test
    public void test2474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 100, 11.0d);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 17.5d, (-942.0d));
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range8, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range14, (-10.0d));
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range11, range14);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, (-1.0d), (double) (byte) 100);
        boolean boolean26 = range20.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range20, (-9.0d), (double) 100L);
        double double31 = range29.constrain(1.0d);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range17, range29);
        boolean boolean33 = range5.equals((java.lang.Object) range29);
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range5, 21843.25d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-899.0d) + "'", double31 == (-899.0d));
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range35);
    }

    @Test
    public void test2475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2475");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        double double23 = range22.getLength();
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range22, (double) 1L);
        org.jfree.data.Range range28 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double29 = range28.getLength();
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range28, 1.0d, true);
        org.jfree.data.Range range35 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range37 = org.jfree.data.Range.shift(range35, (-10.0d));
        boolean boolean38 = range28.equals((java.lang.Object) range37);
        double double39 = range28.getLowerBound();
        org.jfree.data.Range range40 = org.jfree.data.Range.combine(range22, range28);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range22, (-85631.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 61.0d + "'", double23 == 61.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-9.0d) + "'", double29 == (-9.0d));
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
    }

    @Test
    public void test2476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2476");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (-10.0d));
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range4, (double) 0);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range6, (-13662.0d));
        double double9 = range6.getLowerBound();
        double double10 = range6.getCentralValue();
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 45.0d + "'", double10 == 45.0d);
    }

    @Test
    public void test2477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2477");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range5 = org.jfree.data.Range.shift(range2, (-109.0d));
        boolean boolean7 = range2.contains(1.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, (-828.0d), true);
        double double11 = range10.getLength();
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range10, (-485.0d));
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range13, 17.5d);
        org.jfree.data.Range range18 = new org.jfree.data.Range((double) 10.0f, (double) 10.0f);
        double double19 = range18.getLowerBound();
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range18, (-449.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range21, 6553.0d);
        org.jfree.data.Range range24 = org.jfree.data.Range.combine(range15, range21);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9.0d) + "'", double11 == (-9.0d));
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range24);
    }

    @Test
    public void test2478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2478");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        boolean boolean16 = range13.intersects((-1.0d), 0.0d);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range13, (-485.0d));
        boolean boolean21 = range18.intersects((-9137.5d), (-1.45728E7d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        double double6 = range4.constrain((double) 0L);
        boolean boolean8 = range4.contains(168.0d);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range11, (-109.0d));
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, (-10.0d));
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range20, range23);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range29, (-1.0d), (double) (byte) 100);
        boolean boolean35 = range29.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range29, (-9.0d), (double) 100L);
        double double40 = range38.constrain(1.0d);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range26, range38);
        boolean boolean42 = range14.equals((java.lang.Object) range26);
        boolean boolean44 = range26.contains((-485.0d));
        boolean boolean45 = range4.equals((java.lang.Object) (-485.0d));
        double double46 = range4.getCentralValue();
        double double47 = range4.getLength();
        org.jfree.data.Range range50 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range53 = org.jfree.data.Range.expand(range50, (-1.0d), (double) (byte) 100);
        boolean boolean56 = range50.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range50, (-9.0d), (double) 100L);
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range59, (double) 1);
        org.jfree.data.Range range64 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range64, (double) (byte) -1);
        boolean boolean69 = range66.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range70 = org.jfree.data.Range.combine(range59, range66);
        org.jfree.data.Range range73 = org.jfree.data.Range.shift(range59, (double) (short) -1, false);
        org.jfree.data.Range range76 = org.jfree.data.Range.shift(range59, (double) 100, true);
        org.jfree.data.Range range77 = org.jfree.data.Range.combine(range4, range76);
        org.jfree.data.Range range80 = org.jfree.data.Range.shift(range76, (-9173.5d), false);
        double double82 = range80.constrain(86.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-10.0d) + "'", double6 == (-10.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9.0d) + "'", double12 == (-9.0d));
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-899.0d) + "'", double40 == (-899.0d));
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 44.5d + "'", double46 == 44.5d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-109.0d) + "'", double47 == (-109.0d));
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + (-9972.5d) + "'", double82 == (-9972.5d));
    }

    @Test
    public void test2480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2480");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range11, (double) 'a');
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range11, (-1.0d), (-9.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, 71.0d, (double) 10);
        org.jfree.data.Range range26 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range26, (-1.0d), (double) (byte) 100);
        boolean boolean32 = range26.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range35 = org.jfree.data.Range.expand(range26, (-9.0d), (double) 100L);
        double double37 = range35.constrain(1.0d);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range35, (double) (byte) 100);
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range35, (double) 'a');
        double double42 = range35.getUpperBound();
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range20, range35);
        boolean boolean45 = range35.contains((-1100799.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-899.0d) + "'", double37 == (-899.0d));
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-899.0d) + "'", double42 == (-899.0d));
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2481");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, 109.0d);
    }

    @Test
    public void test2482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2482");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range2.getLowerBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        boolean boolean22 = range16.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, (-9.0d), (double) 100L);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (double) 1);
        org.jfree.data.Range range30 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (byte) -1);
        boolean boolean35 = range32.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range25, range32);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range42.intersects((double) (byte) 10, 10.0d);
        boolean boolean46 = range32.equals((java.lang.Object) boolean45);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range32, (double) (byte) 100, false);
        boolean boolean50 = range2.equals((java.lang.Object) range49);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range2, 0.0d, false);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range53, (-900.0d), true);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range56, (-71.0d), 10999.0d);
        org.jfree.data.Range range62 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range64 = org.jfree.data.Range.shift(range62, (double) 10L);
        double double65 = range62.getLowerBound();
        org.jfree.data.Range range67 = org.jfree.data.Range.shift(range62, (double) (-1.0f));
        double double68 = range67.getCentralValue();
        org.jfree.data.Range range69 = org.jfree.data.Range.combine(range56, range67);
        boolean boolean72 = range67.intersects(11044.5d, (-44.5d));
        boolean boolean74 = range67.contains((-101.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-1.0d) + "'", double65 == (-1.0d));
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1.5d) + "'", double68 == (-1.5d));
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2483");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (-10.0d));
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range4, (double) 0);
        double double7 = range4.getLength();
        double double8 = range4.getLength();
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range11, (-1.0d), (double) (byte) 100);
        java.lang.String str15 = range14.toString();
        org.jfree.data.Range range18 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double19 = range18.getLength();
        org.jfree.data.Range range22 = org.jfree.data.Range.shift(range18, 1.0d, true);
        org.jfree.data.Range range25 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range25, (-10.0d));
        boolean boolean28 = range18.equals((java.lang.Object) range27);
        double double29 = range27.getCentralValue();
        org.jfree.data.Range range30 = org.jfree.data.Range.combine(range14, range27);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range30, 45.0d, (double) '#');
        org.jfree.data.Range range36 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, (-1.0d), (double) (byte) 100);
        boolean boolean42 = range36.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range45 = org.jfree.data.Range.expand(range36, (-9.0d), (double) 100L);
        double double47 = range45.constrain(1.0d);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range45, (double) (byte) 100);
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range45, (double) 'a');
        org.jfree.data.Range range52 = org.jfree.data.Range.combine(range33, range51);
        org.jfree.data.Range range55 = new org.jfree.data.Range(0.0d, (double) (short) -1);
        double double56 = range55.getCentralValue();
        org.jfree.data.Range range59 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double60 = range59.getLength();
        org.jfree.data.Range range62 = org.jfree.data.Range.expandToInclude(range59, (double) (short) 100);
        org.jfree.data.Range range63 = org.jfree.data.Range.combine(range55, range62);
        org.jfree.data.Range range65 = org.jfree.data.Range.shift(range62, (double) 10L);
        java.lang.String str66 = range62.toString();
        org.jfree.data.Range range67 = org.jfree.data.Range.combine(range33, range62);
        org.jfree.data.Range range68 = org.jfree.data.Range.combine(range4, range67);
        org.jfree.data.Range range71 = org.jfree.data.Range.expand(range67, (-6554.0d), (-4551.25d));
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 90.0d + "'", double7 == 90.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 90.0d + "'", double8 == 90.0d);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Range[1.0,-899.0]" + "'", str15, "Range[1.0,-899.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-9.0d) + "'", double19 == (-9.0d));
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 45.0d + "'", double29 == 45.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-899.0d) + "'", double47 == (-899.0d));
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-0.5d) + "'", double56 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-9.0d) + "'", double60 == (-9.0d));
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Range[10.0,100.0]" + "'", str66, "Range[10.0,100.0]");
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(range71);
    }

    @Test
    public void test2484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2484");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range5, 5.5d);
        boolean boolean9 = range5.equals((java.lang.Object) 171.0d);
        boolean boolean12 = range5.intersects((-893.5d), (double) 100L);
        org.jfree.data.Range range14 = org.jfree.data.Range.expandToInclude(range5, 0.0d);
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (-1.0d), (double) (byte) 100);
        boolean boolean29 = range23.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range23, (-9.0d), (double) 100L);
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range32, 5.5d);
        double double36 = range32.constrain((double) (short) 1);
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range32, (double) 1);
        boolean boolean41 = range32.intersects(1.0d, (double) (-1));
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range32, (-485.0d));
        org.jfree.data.Range range44 = org.jfree.data.Range.combine(range20, range32);
        double double45 = range44.getCentralValue();
        org.jfree.data.Range range46 = org.jfree.data.Range.combine(range14, range44);
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range14, (double) 100);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-899.0d) + "'", double36 == (-899.0d));
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-485.0d) + "'", double45 == (-485.0d));
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range48);
    }

    @Test
    public void test2485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2485");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (byte) 10, (-0.5d));
        org.jfree.data.Range range5 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range8 = org.jfree.data.Range.expand(range5, (-1.0d), (double) (byte) 100);
        boolean boolean11 = range5.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range14 = org.jfree.data.Range.expand(range5, (-9.0d), (double) 100L);
        org.jfree.data.Range range17 = org.jfree.data.Range.expand(range14, 45.0d, (-9.0d));
        double double18 = range17.getCentralValue();
        boolean boolean21 = range17.intersects(100.0d, (double) (byte) -1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range17, (-799.0d));
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range17, (-828.0d), 2.0d);
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range17, (double) (-1L), true);
        org.jfree.data.Range range30 = org.jfree.data.Range.combine(range2, range17);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range2, (-10.0d), false);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 21871.0d + "'", double18 == 21871.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
    }

    @Test
    public void test2486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        double double13 = range11.constrain(1.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range11, (double) (byte) 100);
        double double16 = range15.getLowerBound();
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        boolean boolean21 = range19.equals((java.lang.Object) 100L);
        double double22 = range19.getLowerBound();
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range19, 10989.0d, (double) '#');
        org.jfree.data.Range range28 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range28, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range31, 5.5d);
        boolean boolean35 = range31.equals((java.lang.Object) 171.0d);
        boolean boolean38 = range31.intersects((-893.5d), (double) 100L);
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range31, 0.0d);
        boolean boolean41 = range25.equals((java.lang.Object) range40);
        boolean boolean42 = range15.equals((java.lang.Object) range40);
        org.jfree.data.Range range45 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range48 = org.jfree.data.Range.expand(range45, (-1.0d), (double) (byte) 100);
        java.lang.String str49 = range48.toString();
        org.jfree.data.Range range52 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double53 = range52.getLength();
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range52, 1.0d, true);
        org.jfree.data.Range range59 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range61 = org.jfree.data.Range.shift(range59, (-10.0d));
        boolean boolean62 = range52.equals((java.lang.Object) range61);
        double double63 = range61.getCentralValue();
        org.jfree.data.Range range64 = org.jfree.data.Range.combine(range48, range61);
        double double65 = range61.getLowerBound();
        org.jfree.data.Range range66 = org.jfree.data.Range.combine(range40, range61);
        org.jfree.data.Range range68 = org.jfree.data.Range.expandToInclude(range40, (-26442.5d));
        java.lang.Class<?> wildcardClass69 = range40.getClass();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-899.0d) + "'", double13 == (-899.0d));
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Range[1.0,-899.0]" + "'", str49, "Range[1.0,-899.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-9.0d) + "'", double53 == (-9.0d));
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 45.0d + "'", double63 == 45.0d);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 10.0f, false);
        boolean boolean10 = range8.contains((double) 1L);
        double double11 = range8.getUpperBound();
        org.jfree.data.Range range13 = org.jfree.data.Range.shift(range8, (double) (short) 10);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range13, (-9138.5d), false);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 11.0d + "'", double11 == 11.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range16);
    }

    @Test
    public void test2488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double3 = range2.getLength();
        org.jfree.data.Range range6 = org.jfree.data.Range.shift(range2, 1.0d, true);
        org.jfree.data.Range range9 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range11 = org.jfree.data.Range.shift(range9, (-10.0d));
        boolean boolean12 = range2.equals((java.lang.Object) range11);
        double double13 = range2.getLowerBound();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range19 = org.jfree.data.Range.expand(range16, (-1.0d), (double) (byte) 100);
        boolean boolean22 = range16.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range25 = org.jfree.data.Range.expand(range16, (-9.0d), (double) 100L);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range25, (double) 1);
        org.jfree.data.Range range30 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, (double) (byte) -1);
        boolean boolean35 = range32.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range36 = org.jfree.data.Range.combine(range25, range32);
        org.jfree.data.Range range39 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range42 = org.jfree.data.Range.expand(range39, (-1.0d), (double) (byte) 100);
        boolean boolean45 = range42.intersects((double) (byte) 10, 10.0d);
        boolean boolean46 = range32.equals((java.lang.Object) boolean45);
        org.jfree.data.Range range49 = org.jfree.data.Range.shift(range32, (double) (byte) 100, false);
        boolean boolean50 = range2.equals((java.lang.Object) range49);
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range2, 0.0d, false);
        org.jfree.data.Range range56 = org.jfree.data.Range.shift(range53, (double) 'a', true);
        double double57 = range53.getUpperBound();
        boolean boolean60 = range53.intersects((-10.0d), (-37118.0d));
        double double61 = range53.getUpperBound();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.0d) + "'", double3 == (-9.0d));
        org.junit.Assert.assertNotNull(range6);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
    }

    @Test
    public void test2489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2489");
        org.jfree.data.Range range2 = new org.jfree.data.Range(13733.0d, 5527.25d);
    }

    @Test
    public void test2490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        org.jfree.data.Range range2 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range4 = org.jfree.data.Range.shift(range2, (double) (byte) -1);
        double double6 = range4.constrain((double) 0L);
        boolean boolean8 = range4.contains(168.0d);
        org.jfree.data.Range range11 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double12 = range11.getLength();
        org.jfree.data.Range range14 = org.jfree.data.Range.shift(range11, (-109.0d));
        org.jfree.data.Range range17 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range20 = org.jfree.data.Range.expand(range17, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range23 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, (-10.0d));
        org.jfree.data.Range range26 = org.jfree.data.Range.combine(range20, range23);
        org.jfree.data.Range range29 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range32 = org.jfree.data.Range.expand(range29, (-1.0d), (double) (byte) 100);
        boolean boolean35 = range29.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range38 = org.jfree.data.Range.expand(range29, (-9.0d), (double) 100L);
        double double40 = range38.constrain(1.0d);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range26, range38);
        boolean boolean42 = range14.equals((java.lang.Object) range26);
        boolean boolean44 = range26.contains((-485.0d));
        boolean boolean45 = range4.equals((java.lang.Object) (-485.0d));
        double double46 = range4.getCentralValue();
        double double47 = range4.getLength();
        org.jfree.data.Range range50 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range53 = org.jfree.data.Range.expand(range50, (-1.0d), (double) (byte) 100);
        boolean boolean56 = range50.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range59 = org.jfree.data.Range.expand(range50, (-9.0d), (double) 100L);
        org.jfree.data.Range range61 = org.jfree.data.Range.expandToInclude(range59, (double) 1);
        org.jfree.data.Range range64 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range66 = org.jfree.data.Range.shift(range64, (double) (byte) -1);
        boolean boolean69 = range66.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range70 = org.jfree.data.Range.combine(range59, range66);
        org.jfree.data.Range range73 = org.jfree.data.Range.shift(range59, (double) (short) -1, false);
        org.jfree.data.Range range76 = org.jfree.data.Range.shift(range59, (double) 100, true);
        org.jfree.data.Range range77 = org.jfree.data.Range.combine(range4, range76);
        org.jfree.data.Range range80 = org.jfree.data.Range.shift(range76, 5.0d, true);
        java.lang.Object obj81 = null;
        boolean boolean82 = range80.equals(obj81);
        boolean boolean85 = range80.intersects(99.5d, 496485.0d);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-10.0d) + "'", double6 == (-10.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-9.0d) + "'", double12 == (-9.0d));
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-899.0d) + "'", double40 == (-899.0d));
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 44.5d + "'", double46 == 44.5d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-109.0d) + "'", double47 == (-109.0d));
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertNotNull(range80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test2491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        org.jfree.data.Range range2 = new org.jfree.data.Range(0.0d, (double) (short) -1);
        double double3 = range2.getCentralValue();
        org.jfree.data.Range range6 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        double double7 = range6.getLength();
        org.jfree.data.Range range9 = org.jfree.data.Range.expandToInclude(range6, (double) (short) 100);
        org.jfree.data.Range range10 = org.jfree.data.Range.combine(range2, range9);
        org.jfree.data.Range range13 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.shift(range13, (-10.0d));
        org.jfree.data.Range range17 = org.jfree.data.Range.shift(range15, (double) 0);
        double double18 = range15.getLength();
        boolean boolean21 = range15.intersects((-899.0d), 90.0d);
        java.lang.String str22 = range15.toString();
        boolean boolean24 = range15.contains((-828.0d));
        org.jfree.data.Range range25 = org.jfree.data.Range.combine(range10, range15);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range15, (double) 100);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range27, (-8.0d), true);
        org.jfree.data.Range range33 = org.jfree.data.Range.shift(range30, 37289.0d, false);
        org.jfree.data.Range range36 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range36, (-1.0d), (double) (byte) 100);
        boolean boolean42 = range36.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range45 = org.jfree.data.Range.expand(range36, (-9.0d), (double) 100L);
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range45, 5.5d);
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range47, 5.5d, (double) 10.0f);
        double double51 = range50.getLength();
        double double52 = range50.getCentralValue();
        org.jfree.data.Range range53 = org.jfree.data.Range.combine(range33, range50);
        boolean boolean56 = range33.intersects(90.0d, 18605.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.5d) + "'", double3 == (-0.5d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-9.0d) + "'", double7 == (-9.0d));
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 90.0d + "'", double18 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Range[0.0,90.0]" + "'", str22, "Range[0.0,90.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-13662.0d) + "'", double51 == (-13662.0d));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-2342.5d) + "'", double52 == (-2342.5d));
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test2492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2492");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 100, 11.0d);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, 17.5d, (-942.0d));
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range8, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range14 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range14, (-10.0d));
        org.jfree.data.Range range17 = org.jfree.data.Range.combine(range11, range14);
        org.jfree.data.Range range20 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range23 = org.jfree.data.Range.expand(range20, (-1.0d), (double) (byte) 100);
        boolean boolean26 = range20.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range29 = org.jfree.data.Range.expand(range20, (-9.0d), (double) 100L);
        double double31 = range29.constrain(1.0d);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range17, range29);
        boolean boolean33 = range5.equals((java.lang.Object) range29);
        double double34 = range5.getLowerBound();
        java.lang.String str35 = range5.toString();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-899.0d) + "'", double31 == (-899.0d));
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1657.5d + "'", double34 == 1657.5d);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Range[1657.5,83849.0]" + "'", str35, "Range[1657.5,83849.0]");
    }

    @Test
    public void test2493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 10.0f, false);
        boolean boolean10 = range8.contains((double) 1L);
        double double12 = range8.constrain((double) (short) 0);
        java.lang.String str13 = range8.toString();
        double double14 = range8.getUpperBound();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range8, (double) 1L);
        org.jfree.data.Range range19 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range21 = org.jfree.data.Range.shift(range19, (-10.0d));
        org.jfree.data.Range range23 = org.jfree.data.Range.shift(range21, (double) 0);
        double double24 = range21.getLength();
        boolean boolean27 = range21.intersects((-899.0d), 90.0d);
        java.lang.String str28 = range21.toString();
        boolean boolean30 = range21.equals((java.lang.Object) 10.0d);
        org.jfree.data.Range range31 = org.jfree.data.Range.combine(range8, range21);
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range21, 15.5d);
        double double35 = range33.constrain(72.0d);
        org.jfree.data.Range range38 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range41 = org.jfree.data.Range.expand(range38, (-1.0d), (double) (byte) 100);
        boolean boolean44 = range38.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range47 = org.jfree.data.Range.expand(range38, (-9.0d), (double) 100L);
        org.jfree.data.Range range49 = org.jfree.data.Range.expandToInclude(range47, (double) 1);
        org.jfree.data.Range range52 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range54 = org.jfree.data.Range.shift(range52, (double) (byte) -1);
        boolean boolean57 = range54.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range58 = org.jfree.data.Range.combine(range47, range54);
        org.jfree.data.Range range61 = org.jfree.data.Range.shift(range47, (double) (short) -1, false);
        org.jfree.data.Range range64 = org.jfree.data.Range.shift(range47, (double) 100, true);
        double double66 = range47.constrain(0.0d);
        boolean boolean69 = range47.intersects(11044.5d, 50.5d);
        org.jfree.data.Range range70 = org.jfree.data.Range.combine(range33, range47);
        double double71 = range70.getCentralValue();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 20.0d + "'", double12 == 20.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Range[20.0,11.0]" + "'", str13, "Range[20.0,11.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 11.0d + "'", double14 == 11.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 90.0d + "'", double24 == 90.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[0.0,90.0]" + "'", str28, "Range[0.0,90.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 72.0d + "'", double35 == 72.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-899.0d) + "'", double66 == (-899.0d));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 9.5d + "'", double71 == 9.5d);
    }

    @Test
    public void test2494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2494");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range2.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range11 = org.jfree.data.Range.expand(range2, (-9.0d), (double) 100L);
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 1);
        org.jfree.data.Range range16 = new org.jfree.data.Range(100.0d, (-9.0d));
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range16, (double) (byte) -1);
        boolean boolean21 = range18.intersects((double) 1.0f, (double) 0.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.combine(range11, range18);
        boolean boolean25 = range22.intersects((double) '4', 44.5d);
        double double26 = range22.getLowerBound();
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range22, 0.0d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-71.0d) + "'", double26 == (-71.0d));
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test2495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2495");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range8, (-10.0d));
        org.jfree.data.Range range11 = org.jfree.data.Range.combine(range5, range8);
        boolean boolean13 = range8.contains(91.0d);
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range8, (double) 'a');
        org.jfree.data.Range range18 = new org.jfree.data.Range(99.0d, (double) '#');
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, (-1.0d), (double) (byte) 100);
        boolean boolean27 = range21.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range21, (-9.0d), (double) 100L);
        double double32 = range30.constrain(1.0d);
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range30, (double) (byte) 100);
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range30, (double) 'a');
        org.jfree.data.Range range39 = org.jfree.data.Range.expand(range30, (-1.0d), (-9.0d));
        org.jfree.data.Range range42 = org.jfree.data.Range.shift(range30, 0.0d, true);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range18, range42);
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range43, 55.0d, 37289.0d);
        org.jfree.data.Range range47 = org.jfree.data.Range.combine(range15, range43);
        org.jfree.data.Range range50 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        org.jfree.data.Range range52 = org.jfree.data.Range.shift(range50, (-10.0d));
        org.jfree.data.Range range54 = org.jfree.data.Range.shift(range52, (double) 0);
        double double55 = range52.getLength();
        double double56 = range52.getLength();
        org.jfree.data.Range range59 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range62 = org.jfree.data.Range.expand(range59, (-1.0d), (double) (byte) 100);
        boolean boolean65 = range59.intersects((double) (byte) -1, (double) (short) -1);
        org.jfree.data.Range range68 = org.jfree.data.Range.expand(range59, (-9.0d), (double) 100L);
        double double70 = range68.constrain(1.0d);
        org.jfree.data.Range range72 = org.jfree.data.Range.shift(range68, (double) (byte) 100);
        org.jfree.data.Range range73 = org.jfree.data.Range.combine(range52, range68);
        org.jfree.data.Range range74 = org.jfree.data.Range.combine(range15, range68);
        boolean boolean77 = range68.intersects((-393443.0d), 4479.5d);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-899.0d) + "'", double32 == (-899.0d));
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 90.0d + "'", double55 == 90.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 90.0d + "'", double56 == 90.0d);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-899.0d) + "'", double70 == (-899.0d));
        org.junit.Assert.assertNotNull(range72);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test2496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2496");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        boolean boolean8 = range5.intersects((double) (byte) 10, 10.0d);
        java.lang.String str9 = range5.toString();
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range5, (double) (byte) 1);
        double double12 = range11.getUpperBound();
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Range[1.0,-899.0]" + "'", str9, "Range[1.0,-899.0]");
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test2497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2497");
        org.jfree.data.Range range2 = new org.jfree.data.Range((-41.0d), 0.0d);
        boolean boolean4 = range2.contains((-1.539756E7d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2498");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) (short) 100, 11.0d);
        boolean boolean4 = range2.contains((double) 100.0f);
        double double5 = range2.getLength();
        boolean boolean7 = range2.contains((-899.0d));
        double double8 = range2.getUpperBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-89.0d) + "'", double5 == (-89.0d));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 11.0d + "'", double8 == 11.0d);
    }

    @Test
    public void test2499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (double) (-1.0f), (-10.0d));
        org.jfree.data.Range range7 = org.jfree.data.Range.shift(range5, 5.5d);
        org.jfree.data.Range range10 = org.jfree.data.Range.expand(range7, 199.0d, (-4.0d));
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
    }

    @Test
    public void test2500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2500");
        org.jfree.data.Range range2 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range5 = org.jfree.data.Range.expand(range2, (-1.0d), (double) (byte) 100);
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 10.0f, false);
        boolean boolean10 = range8.contains((double) 1L);
        double double12 = range8.constrain((double) (byte) 0);
        double double13 = range8.getLength();
        org.jfree.data.Range range16 = new org.jfree.data.Range((double) 10.0f, 100.0d);
        boolean boolean18 = range16.equals((java.lang.Object) 100L);
        org.jfree.data.Range range21 = new org.jfree.data.Range((double) 10.0f, (double) 1);
        org.jfree.data.Range range24 = org.jfree.data.Range.expand(range21, (-1.0d), (double) (byte) 100);
        boolean boolean27 = range24.intersects((double) (byte) 10, 10.0d);
        java.lang.String str28 = range24.toString();
        org.jfree.data.Range range29 = org.jfree.data.Range.combine(range16, range24);
        boolean boolean30 = range8.equals((java.lang.Object) range24);
        org.jfree.data.Range range31 = null;
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range8, range31);
        org.jfree.data.Range range34 = org.jfree.data.Range.shift(range8, (double) (byte) 10);
        org.jfree.data.Range range37 = new org.jfree.data.Range((-1.0d), (double) (byte) 0);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range37, (double) 10L);
        double double40 = range39.getUpperBound();
        boolean boolean42 = range39.contains((double) 1.0f);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range34, range39);
        org.junit.Assert.assertNotNull(range5);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 20.0d + "'", double12 == 20.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-9.0d) + "'", double13 == (-9.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Range[1.0,-899.0]" + "'", str28, "Range[1.0,-899.0]");
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(range43);
    }
}

